
/private/var/folders/_r/1whklpt902l9qktpq822z4gr0000gn/T/arduino/sketches/FD749E68A0989556F8284C585A13FBD3/teensy_code.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20003ac0 	.word	0x20003ac0
6000142c:	20004da0 	.word	0x20004da0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 fe78 	bl	60002134 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 fe16 	bl	60002144 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fe82 	bl	60002254 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f001 f82d 	bl	600025c0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 ffb6 	bl	6000251c <analog_init>
	pwm_init();
600015b0:	f000 ffe6 	bl	60002580 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 fe7c 	bl	600022b0 <tempmon_init>
	startup_middle_hook();
600015b8:	f000 fdbe 	bl	60002138 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 ff0d 	bl	600023e0 <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 fdb7 	bl	60002140 <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 fdb3 	bl	6000213c <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 ffef 	bl	600025b8 <____libc_init_array_veneer>
	main();
600015da:	f000 ffd9 	bl	60002590 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	000184c8 	.word	0x000184c8
600015ec:	600028ac 	.word	0x600028ac
600015f0:	00000000 	.word	0x00000000
600015f4:	20003ac0 	.word	0x20003ac0
600015f8:	6001ad78 	.word	0x6001ad78
600015fc:	20000000 	.word	0x20000000
60001600:	20003800 	.word	0x20003800
60001604:	0000e7c9 	.word	0x0000e7c9
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	0000d055 	.word	0x0000d055
60001618:	20004a98 	.word	0x20004a98
6000161c:	0000d059 	.word	0x0000d059
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	20004a9c 	.word	0x20004a9c
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaaff 	.word	0xaaaaaaff
60001668:	00200007 	.word	0x00200007
6000166c:	20060000 	.word	0x20060000

60001670 <set_audioClock(int, long, unsigned long, bool)>:
#include "imxrt_hw.h"

FLASHMEM
void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force) // sets PLL4
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;
60001670:	b91b      	cbnz	r3, 6000167a <set_audioClock(int, long, unsigned long, bool)+0xa>
60001672:	4b12      	ldr	r3, [pc, #72]	; (600016bc <set_audioClock(int, long, unsigned long, bool)+0x4c>)
60001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
60001676:	049b      	lsls	r3, r3, #18
60001678:	d41e      	bmi.n	600016b8 <set_audioClock(int, long, unsigned long, bool)+0x48>

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
6000167a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
6000167e:	4b0f      	ldr	r3, [pc, #60]	; (600016bc <set_audioClock(int, long, unsigned long, bool)+0x4c>)

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60001680:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
60001684:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
60001688:	f440 1089 	orr.w	r0, r0, #1122304	; 0x112000
	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
6000168c:	6718      	str	r0, [r3, #112]	; 0x70
	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
6000168e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60001692:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
60001696:	6f1a      	ldr	r2, [r3, #112]	; 0x70
60001698:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
6000169c:	671a      	str	r2, [r3, #112]	; 0x70
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
6000169e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
600016a0:	2a00      	cmp	r2, #0
600016a2:	dafc      	bge.n	6000169e <set_audioClock(int, long, unsigned long, bool)+0x2e>
	
	const int div_post_pll = 1; // other values: 2,4
	CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600016a4:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
600016a8:	4a05      	ldr	r2, [pc, #20]	; (600016c0 <set_audioClock(int, long, unsigned long, bool)+0x50>)
600016aa:	400a      	ands	r2, r1
600016ac:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
	if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
600016b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
600016b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
600016b6:	671a      	str	r2, [r3, #112]	; 0x70
}
600016b8:	4770      	bx	lr
600016ba:	bf00      	nop
600016bc:	400d8000 	.word	0x400d8000
600016c0:	ff7f7fff 	.word	0xff7f7fff

600016c4 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016c4:	6943      	ldr	r3, [r0, #20]
600016c6:	4a0a      	ldr	r2, [pc, #40]	; (600016f0 <TwoWire::configSDApin(unsigned char)+0x2c>)
600016c8:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
600016cc:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016ce:	7a03      	ldrb	r3, [r0, #8]
600016d0:	4c08      	ldr	r4, [pc, #32]	; (600016f4 <TwoWire::configSDApin(unsigned char)+0x30>)
600016d2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
600016d6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016da:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
600016dc:	68c2      	ldr	r2, [r0, #12]
600016de:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
600016e0:	6903      	ldr	r3, [r0, #16]
600016e2:	b10b      	cbz	r3, 600016e8 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
600016e4:	6942      	ldr	r2, [r0, #20]
600016e6:	601a      	str	r2, [r3, #0]
	}
}
600016e8:	f85d 4b04 	ldr.w	r4, [sp], #4
600016ec:	4770      	bx	lr
600016ee:	bf00      	nop
600016f0:	20001a68 	.word	0x20001a68
600016f4:	0001f861 	.word	0x0001f861

600016f8 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016f8:	6943      	ldr	r3, [r0, #20]
600016fa:	7e02      	ldrb	r2, [r0, #24]
600016fc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001700:	f892 c008 	ldrb.w	ip, [r2, #8]
60001704:	458c      	cmp	ip, r1
60001706:	d01c      	beq.n	60001742 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
60001708:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
6000170a:	2aff      	cmp	r2, #255	; 0xff
6000170c:	d019      	beq.n	60001742 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
6000170e:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001710:	b510      	push	{r4, lr}
60001712:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
60001714:	d016      	beq.n	60001744 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
60001716:	7e1a      	ldrb	r2, [r3, #24]
60001718:	2aff      	cmp	r2, #255	; 0xff
6000171a:	d006      	beq.n	6000172a <TwoWire::setSDA(unsigned char)+0x32>
6000171c:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000171e:	e9d3 2300 	ldrd	r2, r3, [r3]
60001722:	6812      	ldr	r2, [r2, #0]
60001724:	421a      	tst	r2, r3
60001726:	d101      	bne.n	6000172c <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
60001728:	7621      	strb	r1, [r4, #24]
}
6000172a:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
6000172c:	4b06      	ldr	r3, [pc, #24]	; (60001748 <TwoWire::setSDA(unsigned char)+0x50>)
6000172e:	2205      	movs	r2, #5
		configSDApin(newindex);
60001730:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001732:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001736:	685b      	ldr	r3, [r3, #4]
60001738:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
6000173a:	f7ff ffc3 	bl	600016c4 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
6000173e:	7621      	strb	r1, [r4, #24]
60001740:	e7f3      	b.n	6000172a <TwoWire::setSDA(unsigned char)+0x32>
60001742:	4770      	bx	lr
		if (sda_pin == pin) break;
60001744:	2100      	movs	r1, #0
60001746:	e7ea      	b.n	6000171e <TwoWire::setSDA(unsigned char)+0x26>
60001748:	20001a68 	.word	0x20001a68

6000174c <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
6000174c:	6943      	ldr	r3, [r0, #20]
6000174e:	4a0a      	ldr	r2, [pc, #40]	; (60001778 <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001750:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001754:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001756:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000175a:	4c08      	ldr	r4, [pc, #32]	; (6000177c <TwoWire::configSCLpin(unsigned char)+0x30>)
6000175c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001760:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001764:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001766:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001768:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000176a:	6b03      	ldr	r3, [r0, #48]	; 0x30
6000176c:	b10b      	cbz	r3, 60001772 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000176e:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001770:	601a      	str	r2, [r3, #0]
	}
}
60001772:	f85d 4b04 	ldr.w	r4, [sp], #4
60001776:	4770      	bx	lr
60001778:	20001a68 	.word	0x20001a68
6000177c:	0001f861 	.word	0x0001f861

60001780 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001780:	6943      	ldr	r3, [r0, #20]
60001782:	7e42      	ldrb	r2, [r0, #25]
60001784:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001788:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000178c:	458c      	cmp	ip, r1
6000178e:	d01e      	beq.n	600017ce <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001790:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001794:	2aff      	cmp	r2, #255	; 0xff
60001796:	d01a      	beq.n	600017ce <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001798:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000179a:	b510      	push	{r4, lr}
6000179c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000179e:	d017      	beq.n	600017d0 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
600017a0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
600017a4:	2aff      	cmp	r2, #255	; 0xff
600017a6:	d006      	beq.n	600017b6 <TwoWire::setSCL(unsigned char)+0x36>
600017a8:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
600017ae:	6812      	ldr	r2, [r2, #0]
600017b0:	421a      	tst	r2, r3
600017b2:	d101      	bne.n	600017b8 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
600017b4:	7661      	strb	r1, [r4, #25]
}
600017b6:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017b8:	4b06      	ldr	r3, [pc, #24]	; (600017d4 <TwoWire::setSCL(unsigned char)+0x54>)
600017ba:	2205      	movs	r2, #5
		configSCLpin(newindex);
600017bc:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017be:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600017c2:	685b      	ldr	r3, [r3, #4]
600017c4:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
600017c6:	f7ff ffc1 	bl	6000174c <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
600017ca:	7661      	strb	r1, [r4, #25]
600017cc:	e7f3      	b.n	600017b6 <TwoWire::setSCL(unsigned char)+0x36>
600017ce:	4770      	bx	lr
		if (scl_pin == pin) break;
600017d0:	2100      	movs	r1, #0
600017d2:	e7ea      	b.n	600017aa <TwoWire::setSCL(unsigned char)+0x2a>
600017d4:	20001a68 	.word	0x20001a68

600017d8 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017d8:	4916      	ldr	r1, [pc, #88]	; (60001834 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017da:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017dc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
600017de:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
600017e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
600017e6:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017e8:	638b      	str	r3, [r1, #56]	; 0x38
{
600017ea:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017ec:	4d12      	ldr	r5, [pc, #72]	; (60001838 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017ee:	e9d2 1300 	ldrd	r1, r3, [r2]
600017f2:	680a      	ldr	r2, [r1, #0]
600017f4:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017f6:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017f8:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017fa:	2202      	movs	r2, #2
	port->MCR = 0;
600017fc:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017fe:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001800:	4a0e      	ldr	r2, [pc, #56]	; (6000183c <TwoWire::begin()+0x64>)
	port->MCR = 0;
60001802:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001804:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
60001806:	2201      	movs	r2, #1
60001808:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000180a:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
6000180c:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
60001810:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
60001812:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
60001816:	6c9e      	ldr	r6, [r3, #72]	; 0x48
60001818:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
6000181a:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
6000181c:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
6000181e:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
60001820:	7e01      	ldrb	r1, [r0, #24]
60001822:	f7ff ff4f 	bl	600016c4 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
60001826:	7e61      	ldrb	r1, [r4, #25]
60001828:	4620      	mov	r0, r4
}
6000182a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
6000182e:	f7ff bf8d 	b.w	6000174c <TwoWire::configSCLpin(unsigned char)>
60001832:	bf00      	nop
60001834:	400fc000 	.word	0x400fc000
60001838:	05050bb8 	.word	0x05050bb8
6000183c:	1928373b 	.word	0x1928373b

60001840 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
60001840:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
{
60001844:	b5f0      	push	{r4, r5, r6, r7, lr}
60001846:	460e      	mov	r6, r1
60001848:	b08d      	sub	sp, #52	; 0x34
6000184a:	bf28      	it	cs
6000184c:	f44f 7660 	movcs.w	r6, #896	; 0x380
60001850:	460f      	mov	r7, r1
60001852:	4605      	mov	r5, r0
	__disable_irq();
60001854:	b672      	cpsid	i
	memory_pool = data;
60001856:	4b2e      	ldr	r3, [pc, #184]	; (60001910 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xd0>)
	memory_pool_first_mask = 0;
60001858:	2400      	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
6000185a:	2270      	movs	r2, #112	; 0x70
	memory_pool = data;
6000185c:	6018      	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
6000185e:	4621      	mov	r1, r4
	memory_pool_first_mask = 0;
60001860:	4b2c      	ldr	r3, [pc, #176]	; (60001914 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xd4>)
		memory_pool_available_mask[i] = 0;
60001862:	482d      	ldr	r0, [pc, #180]	; (60001918 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xd8>)
	memory_pool_first_mask = 0;
60001864:	801c      	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001866:	f000 febf 	bl	600025e8 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
6000186a:	b1cf      	cbz	r7, 600018a0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>
6000186c:	4621      	mov	r1, r4
6000186e:	482a      	ldr	r0, [pc, #168]	; (60001918 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xd8>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001870:	f04f 0c01 	mov.w	ip, #1
60001874:	094a      	lsrs	r2, r1, #5
60001876:	f001 031f 	and.w	r3, r1, #31
	for (i=0; i < num; i++) {
6000187a:	3101      	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
6000187c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
60001880:	fa0c f303 	lsl.w	r3, ip, r3
	for (i=0; i < num; i++) {
60001884:	428e      	cmp	r6, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001886:	ea43 0304 	orr.w	r3, r3, r4
6000188a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i=0; i < num; i++) {
6000188e:	d8f1      	bhi.n	60001874 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x34>
60001890:	4628      	mov	r0, r5
60001892:	2300      	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
60001894:	8043      	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
60001896:	3301      	adds	r3, #1
60001898:	f500 7082 	add.w	r0, r0, #260	; 0x104
6000189c:	429e      	cmp	r6, r3
6000189e:	d8f9      	bhi.n	60001894 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x54>
	}
	if (update_scheduled == false) {
600018a0:	4c1e      	ldr	r4, [pc, #120]	; (6000191c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xdc>)
600018a2:	7825      	ldrb	r5, [r4, #0]
600018a4:	b115      	cbz	r5, 600018ac <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x6c>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
600018a6:	b662      	cpsie	i
}
600018a8:	b00d      	add	sp, #52	; 0x34
600018aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		IntervalTimer *timer = new IntervalTimer();
600018ac:	2008      	movs	r0, #8
600018ae:	f000 fe97 	bl	600025e0 <___Znwj_veneer>
        static_assert(Alignment % alignof(C) == 0,
            "inplace_function cannot be constructed from object with this (large) alignment"
        );

        static const vtable_t vt{inplace_function_detail::wrapper<C>{}};
        vtable_ptr_ = std::addressof(vt);
600018b2:	4b1b      	ldr	r3, [pc, #108]	; (60001920 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xe0>)
// instances may be in use by libraries.
class IntervalTimer {
private:
	static const int32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000); // need to change to int32_t to avoid warnings
public:
	constexpr IntervalTimer() {
600018b4:	2280      	movs	r2, #128	; 0x80
600018b6:	4606      	mov	r6, r0
600018b8:	9300      	str	r3, [sp, #0]
    {}

    inplace_function(const inplace_function& other) :
        vtable_ptr_{other.vtable_ptr_}
    {
        vtable_ptr_->copy_ptr(
600018ba:	a902      	add	r1, sp, #8
        vtable_ptr_{other.vtable_ptr_}
600018bc:	9306      	str	r3, [sp, #24]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
600018be:	4b19      	ldr	r3, [pc, #100]	; (60001924 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xe4>)
600018c0:	7102      	strb	r2, [r0, #4]
600018c2:	6005      	str	r5, [r0, #0]
        vtable_ptr_->copy_ptr(
600018c4:	a808      	add	r0, sp, #32
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
600018c6:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
600018c8:	f000 fe86 	bl	600025d8 <___ZZN6teensy23inplace_function_detail6vtableIvJEEC4IPFvvEEENS0_7wrapperIT_EEENUlPvS9_E0_4_FUNES9_S9__veneer>
	// for precise timing.  Returns true is sucessful, or false if
	// all hardware timers are already in use.
	template <typename period_t>
	bool begin(callback_t funct, period_t period) {
		uint32_t cycles = cyclesFromPeriod(period);
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
600018cc:	a906      	add	r1, sp, #24
600018ce:	4a16      	ldr	r2, [pc, #88]	; (60001928 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xe8>)
600018d0:	4630      	mov	r0, r6
600018d2:	f000 fe59 	bl	60002588 <___ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm_veneer>
        return *this;
    }

    ~inplace_function()
    {
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
600018d6:	9b06      	ldr	r3, [sp, #24]
600018d8:	a808      	add	r0, sp, #32
600018da:	68db      	ldr	r3, [r3, #12]
600018dc:	4798      	blx	r3
600018de:	9b00      	ldr	r3, [sp, #0]
600018e0:	a802      	add	r0, sp, #8
600018e2:	68db      	ldr	r3, [r3, #12]
600018e4:	4798      	blx	r3
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
600018e6:	7823      	ldrb	r3, [r4, #0]
600018e8:	2b00      	cmp	r3, #0
600018ea:	d1dc      	bne.n	600018a6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x66>


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600018ec:	4b0f      	ldr	r3, [pc, #60]	; (6000192c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xec>)
600018ee:	4a10      	ldr	r2, [pc, #64]	; (60001930 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xf0>)
600018f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
600018f4:	490f      	ldr	r1, [pc, #60]	; (60001934 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xf4>)
600018f6:	20d0      	movs	r0, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
600018f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018fc:	2240      	movs	r2, #64	; 0x40
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
600018fe:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
60001902:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
60001906:	2301      	movs	r3, #1
60001908:	7023      	strb	r3, [r4, #0]
	__enable_irq();
6000190a:	b662      	cpsie	i
}
6000190c:	b00d      	add	sp, #52	; 0x34
6000190e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001910:	200042bc 	.word	0x200042bc
60001914:	20004d3a 	.word	0x20004d3a
60001918:	200042c4 	.word	0x200042c4
6000191c:	20004d4d 	.word	0x20004d4d
60001920:	200015ec 	.word	0x200015ec
60001924:	0000caad 	.word	0x0000caad
60001928:	0001101b 	.word	0x0001101b
6000192c:	20003800 	.word	0x20003800
60001930:	0000cab9 	.word	0x0000cab9
60001934:	e000e400 	.word	0xe000e400

60001938 <CrashReportClass::clear()>:
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001938:	4b20      	ldr	r3, [pc, #128]	; (600019bc <CrashReportClass::clear()+0x84>)
6000193a:	2000      	movs	r0, #0
{
6000193c:	b430      	push	{r4, r5}
	info->ipsr  = 0;
6000193e:	e9c3 0020 	strd	r0, r0, [r3, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001942:	e9c3 0022 	strd	r0, r0, [r3, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001946:	e9c3 0024 	strd	r0, r0, [r3, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
6000194a:	e9c3 0026 	strd	r0, r0, [r3, #152]	; 0x98
	info->crc = 0;
6000194e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001952:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001956:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000195a:	4919      	ldr	r1, [pc, #100]	; (600019c0 <CrashReportClass::clear()+0x88>)
6000195c:	4a19      	ldr	r2, [pc, #100]	; (600019c4 <CrashReportClass::clear()+0x8c>)
6000195e:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
60001962:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001966:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000196a:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000196e:	4b16      	ldr	r3, [pc, #88]	; (600019c8 <CrashReportClass::clear()+0x90>)
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
60001970:	4601      	mov	r1, r0
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001972:	4c16      	ldr	r4, [pc, #88]	; (600019cc <CrashReportClass::clear()+0x94>)
60001974:	2201      	movs	r2, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001976:	689d      	ldr	r5, [r3, #8]
		while (len > 0) {
60001978:	f604 74dc 	addw	r4, r4, #4060	; 0xfdc
6000197c:	609d      	str	r5, [r3, #8]
	SRC_GPR5 = 0;
6000197e:	6318      	str	r0, [r3, #48]	; 0x30
		volatile const uint16_t *p = (volatile const uint16_t *)data;
60001980:	4b13      	ldr	r3, [pc, #76]	; (600019d0 <CrashReportClass::clear()+0x98>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001982:	f844 0c1c 	str.w	r0, [r4, #-28]
			a += *p++;
60001986:	4618      	mov	r0, r3
60001988:	3302      	adds	r3, #2
6000198a:	8800      	ldrh	r0, [r0, #0]
		while (len > 0) {
6000198c:	42a3      	cmp	r3, r4
			a += *p++;
6000198e:	fa12 f280 	uxtah	r2, r2, r0
			b += a;
60001992:	4411      	add	r1, r2
		while (len > 0) {
60001994:	d1f7      	bne.n	60001986 <CrashReportClass::clear()+0x4e>
			len -= 2;
		}
		a = a & 65535;
60001996:	b292      	uxth	r2, r2
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001998:	4b0c      	ldr	r3, [pc, #48]	; (600019cc <CrashReportClass::clear()+0x94>)
		b = b & 65535;
		return a | (b << 16);
6000199a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
6000199e:	f8c3 2fdc 	str.w	r2, [r3, #4060]	; 0xfdc
	asm("dsb");
600019a2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
600019a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600019aa:	4a09      	ldr	r2, [pc, #36]	; (600019d0 <CrashReportClass::clear()+0x98>)
600019ac:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
	asm("dsb");
600019b0:	f3bf 8f4f 	dsb	sy
	asm("isb");
600019b4:	f3bf 8f6f 	isb	sy
}
600019b8:	bc30      	pop	{r4, r5}
600019ba:	4770      	bx	lr
600019bc:	2027ff00 	.word	0x2027ff00
600019c0:	2027ff80 	.word	0x2027ff80
600019c4:	2027ffa0 	.word	0x2027ffa0
600019c8:	400f8000 	.word	0x400f8000
600019cc:	2027f000 	.word	0x2027f000
600019d0:	2027ffc0 	.word	0x2027ffc0

600019d4 <CrashReportClass::printTo(Print&) const>:
	if (info->len != sizeof(*info) / 4) return 0;
600019d4:	4bb2      	ldr	r3, [pc, #712]	; (60001ca0 <CrashReportClass::printTo(Print&) const+0x2cc>)
600019d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
600019da:	2a0b      	cmp	r2, #11
{
600019dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
600019e0:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
600019e2:	d11b      	bne.n	60001a1c <CrashReportClass::printTo(Print&) const+0x48>
	crc = 0xFFFFFFFF;
600019e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	data = (uint32_t *)info;
600019e8:	49ae      	ldr	r1, [pc, #696]	; (60001ca4 <CrashReportClass::printTo(Print&) const+0x2d0>)
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
600019ea:	4baf      	ldr	r3, [pc, #700]	; (60001ca8 <CrashReportClass::printTo(Print&) const+0x2d4>)
	while (data < end) {
600019ec:	4eaf      	ldr	r6, [pc, #700]	; (60001cac <CrashReportClass::printTo(Print&) const+0x2d8>)
		crc ^= *data++;
600019ee:	f101 0c04 	add.w	ip, r1, #4
600019f2:	4050      	eors	r0, r2
600019f4:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
600019f6:	f000 0201 	and.w	r2, r0, #1
600019fa:	3c01      	subs	r4, #1
600019fc:	fb03 f202 	mul.w	r2, r3, r2
60001a00:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
60001a04:	d1f7      	bne.n	600019f6 <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
60001a06:	45b4      	cmp	ip, r6
60001a08:	d002      	beq.n	60001a10 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
60001a0a:	684a      	ldr	r2, [r1, #4]
60001a0c:	4661      	mov	r1, ip
60001a0e:	e7ee      	b.n	600019ee <CrashReportClass::printTo(Print&) const+0x1a>
	if (crc != info->crc) return 0;
60001a10:	f8df 828c 	ldr.w	r8, [pc, #652]	; 60001ca0 <CrashReportClass::printTo(Print&) const+0x2cc>
60001a14:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60001a18:	4298      	cmp	r0, r3
60001a1a:	d079      	beq.n	60001b10 <CrashReportClass::printTo(Print&) const+0x13c>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001a1c:	682b      	ldr	r3, [r5, #0]
60001a1e:	2217      	movs	r2, #23
60001a20:	49a3      	ldr	r1, [pc, #652]	; (60001cb0 <CrashReportClass::printTo(Print&) const+0x2dc>)
60001a22:	4628      	mov	r0, r5
60001a24:	685b      	ldr	r3, [r3, #4]
60001a26:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001a28:	4628      	mov	r0, r5
60001a2a:	f000 fdc1 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a2e:	682b      	ldr	r3, [r5, #0]
60001a30:	2248      	movs	r2, #72	; 0x48
60001a32:	49a0      	ldr	r1, [pc, #640]	; (60001cb4 <CrashReportClass::printTo(Print&) const+0x2e0>)
60001a34:	685b      	ldr	r3, [r3, #4]
60001a36:	4628      	mov	r0, r5
60001a38:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a3a:	4628      	mov	r0, r5
60001a3c:	f000 fdb8 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a40:	682b      	ldr	r3, [r5, #0]
60001a42:	2249      	movs	r2, #73	; 0x49
60001a44:	499c      	ldr	r1, [pc, #624]	; (60001cb8 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001a46:	685b      	ldr	r3, [r3, #4]
60001a48:	4628      	mov	r0, r5
60001a4a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a4c:	4628      	mov	r0, r5
60001a4e:	f000 fdaf 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a52:	682b      	ldr	r3, [r5, #0]
60001a54:	2224      	movs	r2, #36	; 0x24
60001a56:	4999      	ldr	r1, [pc, #612]	; (60001cbc <CrashReportClass::printTo(Print&) const+0x2e8>)
60001a58:	685b      	ldr	r3, [r3, #4]
60001a5a:	4628      	mov	r0, r5
60001a5c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a5e:	4628      	mov	r0, r5
60001a60:	f000 fda6 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a64:	682b      	ldr	r3, [r5, #0]
60001a66:	2247      	movs	r2, #71	; 0x47
60001a68:	4995      	ldr	r1, [pc, #596]	; (60001cc0 <CrashReportClass::printTo(Print&) const+0x2ec>)
60001a6a:	685b      	ldr	r3, [r3, #4]
60001a6c:	4628      	mov	r0, r5
60001a6e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a70:	4628      	mov	r0, r5
60001a72:	f000 fd9d 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a76:	682b      	ldr	r3, [r5, #0]
60001a78:	223f      	movs	r2, #63	; 0x3f
60001a7a:	4992      	ldr	r1, [pc, #584]	; (60001cc4 <CrashReportClass::printTo(Print&) const+0x2f0>)
60001a7c:	685b      	ldr	r3, [r3, #4]
60001a7e:	4628      	mov	r0, r5
60001a80:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a82:	4628      	mov	r0, r5
60001a84:	f000 fd94 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
60001a88:	4b8f      	ldr	r3, [pc, #572]	; (60001cc8 <CrashReportClass::printTo(Print&) const+0x2f4>)
60001a8a:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60001a8c:	07a2      	lsls	r2, r4, #30
60001a8e:	d50d      	bpl.n	60001aac <CrashReportClass::printTo(Print&) const+0xd8>
    uint32_t gpr5 = SRC_GPR5;
60001a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
60001a92:	4b8e      	ldr	r3, [pc, #568]	; (60001ccc <CrashReportClass::printTo(Print&) const+0x2f8>)
60001a94:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
60001a96:	682b      	ldr	r3, [r5, #0]
60001a98:	f000 8174 	beq.w	60001d84 <CrashReportClass::printTo(Print&) const+0x3b0>
60001a9c:	2240      	movs	r2, #64	; 0x40
60001a9e:	498c      	ldr	r1, [pc, #560]	; (60001cd0 <CrashReportClass::printTo(Print&) const+0x2fc>)
60001aa0:	685b      	ldr	r3, [r3, #4]
60001aa2:	4628      	mov	r0, r5
60001aa4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001aa6:	4628      	mov	r0, r5
60001aa8:	f000 fd82 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60001aac:	0767      	lsls	r7, r4, #29
60001aae:	f100 815f 	bmi.w	60001d70 <CrashReportClass::printTo(Print&) const+0x39c>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001ab2:	0726      	lsls	r6, r4, #28
60001ab4:	f100 8152 	bmi.w	60001d5c <CrashReportClass::printTo(Print&) const+0x388>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001ab8:	06e0      	lsls	r0, r4, #27
60001aba:	f100 8145 	bmi.w	60001d48 <CrashReportClass::printTo(Print&) const+0x374>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001abe:	06a1      	lsls	r1, r4, #26
60001ac0:	f100 8138 	bmi.w	60001d34 <CrashReportClass::printTo(Print&) const+0x360>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001ac4:	0662      	lsls	r2, r4, #25
60001ac6:	f100 812b 	bmi.w	60001d20 <CrashReportClass::printTo(Print&) const+0x34c>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001aca:	0623      	lsls	r3, r4, #24
60001acc:	f100 80dd 	bmi.w	60001c8a <CrashReportClass::printTo(Print&) const+0x2b6>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001ad0:	f414 7480 	ands.w	r4, r4, #256	; 0x100
60001ad4:	f040 80ad 	bne.w	60001c32 <CrashReportClass::printTo(Print&) const+0x25e>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
60001ad8:	4b71      	ldr	r3, [pc, #452]	; (60001ca0 <CrashReportClass::printTo(Print&) const+0x2cc>)
60001ada:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
60001ade:	b196      	cbz	r6, 60001b06 <CrashReportClass::printTo(Print&) const+0x132>
60001ae0:	f8d3 70dc 	ldr.w	r7, [r3, #220]	; 0xdc
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
60001ae4:	2201      	movs	r2, #1
		volatile const uint16_t *p = (volatile const uint16_t *)data;
60001ae6:	33c0      	adds	r3, #192	; 0xc0
		while (len > 0) {
60001ae8:	487a      	ldr	r0, [pc, #488]	; (60001cd4 <CrashReportClass::printTo(Print&) const+0x300>)
			a += *p++;
60001aea:	4619      	mov	r1, r3
60001aec:	3302      	adds	r3, #2
60001aee:	8809      	ldrh	r1, [r1, #0]
		while (len > 0) {
60001af0:	4283      	cmp	r3, r0
			a += *p++;
60001af2:	fa12 f281 	uxtah	r2, r2, r1
			b += a;
60001af6:	4414      	add	r4, r2
		while (len > 0) {
60001af8:	d1f7      	bne.n	60001aea <CrashReportClass::printTo(Print&) const+0x116>
		a = a & 65535;
60001afa:	b293      	uxth	r3, r2
		return a | (b << 16);
60001afc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
60001b00:	429f      	cmp	r7, r3
60001b02:	f000 817c 	beq.w	60001dfe <CrashReportClass::printTo(Print&) const+0x42a>
  clear();
60001b06:	f7ff ff17 	bl	60001938 <CrashReportClass::clear()>
}
60001b0a:	2001      	movs	r0, #1
60001b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							  return write((const uint8_t *)str, strlen(str)); }
60001b10:	682b      	ldr	r3, [r5, #0]
60001b12:	220c      	movs	r2, #12
60001b14:	4970      	ldr	r1, [pc, #448]	; (60001cd8 <CrashReportClass::printTo(Print&) const+0x304>)
60001b16:	4628      	mov	r0, r5
60001b18:	685b      	ldr	r3, [r3, #4]
60001b1a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b1c:	4628      	mov	r0, r5
60001b1e:	f000 fd47 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b22:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
60001b24:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
60001b28:	4628      	mov	r0, r5
    info->time /= 60;
60001b2a:	4b6c      	ldr	r3, [pc, #432]	; (60001cdc <CrashReportClass::printTo(Print&) const+0x308>)
60001b2c:	f8d2 a004 	ldr.w	sl, [r2, #4]
60001b30:	fba3 2709 	umull	r2, r7, r3, r9
60001b34:	496a      	ldr	r1, [pc, #424]	; (60001ce0 <CrashReportClass::printTo(Print&) const+0x30c>)
60001b36:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
60001b38:	fba3 2307 	umull	r2, r3, r3, r7
60001b3c:	2226      	movs	r2, #38	; 0x26
60001b3e:	095e      	lsrs	r6, r3, #5
60001b40:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
60001b44:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
60001b46:	4967      	ldr	r1, [pc, #412]	; (60001ce4 <CrashReportClass::printTo(Print&) const+0x310>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001b48:	220a      	movs	r2, #10
60001b4a:	4628      	mov	r0, r5
60001b4c:	fba1 3106 	umull	r3, r1, r1, r6
60001b50:	4623      	mov	r3, r4
60001b52:	0909      	lsrs	r1, r1, #4
60001b54:	eb01 0141 	add.w	r1, r1, r1, lsl #1
60001b58:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
60001b5c:	f000 fd1c 	bl	60002598 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b60:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
60001b62:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
60001b66:	2201      	movs	r2, #1
60001b68:	685b      	ldr	r3, [r3, #4]
60001b6a:	4628      	mov	r0, r5
60001b6c:	495e      	ldr	r1, [pc, #376]	; (60001ce8 <CrashReportClass::printTo(Print&) const+0x314>)
60001b6e:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001b70:	4623      	mov	r3, r4
60001b72:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
60001b76:	220a      	movs	r2, #10
60001b78:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
60001b7a:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
60001b7e:	f000 fd0b 	bl	60002598 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b82:	682b      	ldr	r3, [r5, #0]
60001b84:	2201      	movs	r2, #1
60001b86:	4958      	ldr	r1, [pc, #352]	; (60001ce8 <CrashReportClass::printTo(Print&) const+0x314>)
60001b88:	685b      	ldr	r3, [r3, #4]
60001b8a:	4628      	mov	r0, r5
60001b8c:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001b8e:	4623      	mov	r3, r4
60001b90:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
60001b94:	220a      	movs	r2, #10
60001b96:	4628      	mov	r0, r5
60001b98:	f000 fcfe 	bl	60002598 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001b9c:	4628      	mov	r0, r5
60001b9e:	f000 fd07 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001ba2:	682b      	ldr	r3, [r5, #0]
60001ba4:	2224      	movs	r2, #36	; 0x24
60001ba6:	4951      	ldr	r1, [pc, #324]	; (60001cec <CrashReportClass::printTo(Print&) const+0x318>)
60001ba8:	685b      	ldr	r3, [r3, #4]
60001baa:	4628      	mov	r0, r5
60001bac:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001bae:	4623      	mov	r3, r4
60001bb0:	2210      	movs	r2, #16
60001bb2:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
60001bb6:	4628      	mov	r0, r5
60001bb8:	f000 fcee 	bl	60002598 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001bbc:	4628      	mov	r0, r5
60001bbe:	f000 fcf7 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
60001bc2:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
60001bc6:	2e00      	cmp	r6, #0
60001bc8:	f040 80df 	bne.w	60001d8a <CrashReportClass::printTo(Print&) const+0x3b6>
    uint32_t _HFSR = info->hfsr;
60001bcc:	4e34      	ldr	r6, [pc, #208]	; (60001ca0 <CrashReportClass::printTo(Print&) const+0x2cc>)
60001bce:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001bd2:	2c00      	cmp	r4, #0
60001bd4:	f040 80fa 	bne.w	60001dcc <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001bd8:	682b      	ldr	r3, [r5, #0]
60001bda:	2222      	movs	r2, #34	; 0x22
60001bdc:	4944      	ldr	r1, [pc, #272]	; (60001cf0 <CrashReportClass::printTo(Print&) const+0x31c>)
60001bde:	4628      	mov	r0, r5
60001be0:	685b      	ldr	r3, [r3, #4]
60001be2:	4798      	blx	r3
    p.print(info->temp);
60001be4:	4b2e      	ldr	r3, [pc, #184]	; (60001ca0 <CrashReportClass::printTo(Print&) const+0x2cc>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001be6:	2102      	movs	r1, #2
60001be8:	4628      	mov	r0, r5
60001bea:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001bee:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
60001bf2:	f000 fce9 	bl	600025c8 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001bf6:	682b      	ldr	r3, [r5, #0]
60001bf8:	2205      	movs	r2, #5
60001bfa:	493e      	ldr	r1, [pc, #248]	; (60001cf4 <CrashReportClass::printTo(Print&) const+0x320>)
60001bfc:	685b      	ldr	r3, [r3, #4]
60001bfe:	4628      	mov	r0, r5
60001c00:	4798      	blx	r3
60001c02:	682b      	ldr	r3, [r5, #0]
60001c04:	221d      	movs	r2, #29
60001c06:	493c      	ldr	r1, [pc, #240]	; (60001cf8 <CrashReportClass::printTo(Print&) const+0x324>)
60001c08:	685b      	ldr	r3, [r3, #4]
60001c0a:	4628      	mov	r0, r5
60001c0c:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001c0e:	4a3b      	ldr	r2, [pc, #236]	; (60001cfc <CrashReportClass::printTo(Print&) const+0x328>)
60001c10:	483b      	ldr	r0, [pc, #236]	; (60001d00 <CrashReportClass::printTo(Print&) const+0x32c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001c12:	2300      	movs	r3, #0
60001c14:	6811      	ldr	r1, [r2, #0]
60001c16:	220a      	movs	r2, #10
60001c18:	fba0 0101 	umull	r0, r1, r0, r1
60001c1c:	4628      	mov	r0, r5
60001c1e:	0c89      	lsrs	r1, r1, #18
60001c20:	f000 fcba 	bl	60002598 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001c24:	682b      	ldr	r3, [r5, #0]
60001c26:	2204      	movs	r2, #4
60001c28:	4936      	ldr	r1, [pc, #216]	; (60001d04 <CrashReportClass::printTo(Print&) const+0x330>)
60001c2a:	685b      	ldr	r3, [r3, #4]
60001c2c:	4628      	mov	r0, r5
60001c2e:	4798      	blx	r3
60001c30:	e72a      	b.n	60001a88 <CrashReportClass::printTo(Print&) const+0xb4>
60001c32:	682b      	ldr	r3, [r5, #0]
60001c34:	2229      	movs	r2, #41	; 0x29
60001c36:	4934      	ldr	r1, [pc, #208]	; (60001d08 <CrashReportClass::printTo(Print&) const+0x334>)
60001c38:	4628      	mov	r0, r5
60001c3a:	685b      	ldr	r3, [r3, #4]
60001c3c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c3e:	4628      	mov	r0, r5
60001c40:	f000 fcb6 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001c44:	4920      	ldr	r1, [pc, #128]	; (60001cc8 <CrashReportClass::printTo(Print&) const+0x2f4>)
							  return write((const uint8_t *)str, strlen(str)); }
60001c46:	6828      	ldr	r0, [r5, #0]
60001c48:	2221      	movs	r2, #33	; 0x21
60001c4a:	688b      	ldr	r3, [r1, #8]
60001c4c:	6844      	ldr	r4, [r0, #4]
60001c4e:	4628      	mov	r0, r5
60001c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
60001c54:	608b      	str	r3, [r1, #8]
60001c56:	492d      	ldr	r1, [pc, #180]	; (60001d0c <CrashReportClass::printTo(Print&) const+0x338>)
60001c58:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
60001c5a:	4628      	mov	r0, r5
60001c5c:	f000 fca8 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001c60:	682b      	ldr	r3, [r5, #0]
60001c62:	2242      	movs	r2, #66	; 0x42
60001c64:	492a      	ldr	r1, [pc, #168]	; (60001d10 <CrashReportClass::printTo(Print&) const+0x33c>)
60001c66:	685b      	ldr	r3, [r3, #4]
60001c68:	4628      	mov	r0, r5
60001c6a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c6c:	4628      	mov	r0, r5
60001c6e:	f000 fc9f 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001c72:	4a28      	ldr	r2, [pc, #160]	; (60001d14 <CrashReportClass::printTo(Print&) const+0x340>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001c74:	4b28      	ldr	r3, [pc, #160]	; (60001d18 <CrashReportClass::printTo(Print&) const+0x344>)
60001c76:	2107      	movs	r1, #7
60001c78:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001c7a:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001c80:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001c82:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001c86:	bf30      	wfi
60001c88:	e7fd      	b.n	60001c86 <CrashReportClass::printTo(Print&) const+0x2b2>
							  return write((const uint8_t *)str, strlen(str)); }
60001c8a:	682b      	ldr	r3, [r5, #0]
60001c8c:	2221      	movs	r2, #33	; 0x21
60001c8e:	4923      	ldr	r1, [pc, #140]	; (60001d1c <CrashReportClass::printTo(Print&) const+0x348>)
60001c90:	4628      	mov	r0, r5
60001c92:	685b      	ldr	r3, [r3, #4]
60001c94:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c96:	4628      	mov	r0, r5
60001c98:	f000 fc8a 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
60001c9c:	e718      	b.n	60001ad0 <CrashReportClass::printTo(Print&) const+0xfc>
60001c9e:	bf00      	nop
60001ca0:	2027ff00 	.word	0x2027ff00
60001ca4:	2027ff80 	.word	0x2027ff80
60001ca8:	edb88320 	.word	0xedb88320
60001cac:	2027ffa8 	.word	0x2027ffa8
60001cb0:	20002484 	.word	0x20002484
60001cb4:	2000249c 	.word	0x2000249c
60001cb8:	200024e8 	.word	0x200024e8
60001cbc:	20002534 	.word	0x20002534
60001cc0:	2000255c 	.word	0x2000255c
60001cc4:	200025a4 	.word	0x200025a4
60001cc8:	400f8000 	.word	0x400f8000
60001ccc:	0bad00f1 	.word	0x0bad00f1
60001cd0:	20002630 	.word	0x20002630
60001cd4:	2027ffdc 	.word	0x2027ffdc
60001cd8:	20001f70 	.word	0x20001f70
60001cdc:	88888889 	.word	0x88888889
60001ce0:	20001f80 	.word	0x20001f80
60001ce4:	aaaaaaab 	.word	0xaaaaaaab
60001ce8:	20000e3c 	.word	0x20000e3c
60001cec:	20001fa8 	.word	0x20001fa8
60001cf0:	20002430 	.word	0x20002430
60001cf4:	20002454 	.word	0x20002454
60001cf8:	2000245c 	.word	0x2000245c
60001cfc:	20002a28 	.word	0x20002a28
60001d00:	431bde83 	.word	0x431bde83
60001d04:	2000247c 	.word	0x2000247c
60001d08:	20002764 	.word	0x20002764
60001d0c:	20002790 	.word	0x20002790
60001d10:	200027b4 	.word	0x200027b4
60001d14:	400d4000 	.word	0x400d4000
60001d18:	400ac000 	.word	0x400ac000
60001d1c:	20002740 	.word	0x20002740
							  return write((const uint8_t *)str, strlen(str)); }
60001d20:	682b      	ldr	r3, [r5, #0]
60001d22:	2221      	movs	r2, #33	; 0x21
60001d24:	499c      	ldr	r1, [pc, #624]	; (60001f98 <CrashReportClass::printTo(Print&) const+0x5c4>)
60001d26:	4628      	mov	r0, r5
60001d28:	685b      	ldr	r3, [r3, #4]
60001d2a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d2c:	4628      	mov	r0, r5
60001d2e:	f000 fc3f 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
60001d32:	e6ca      	b.n	60001aca <CrashReportClass::printTo(Print&) const+0xf6>
							  return write((const uint8_t *)str, strlen(str)); }
60001d34:	682b      	ldr	r3, [r5, #0]
60001d36:	2229      	movs	r2, #41	; 0x29
60001d38:	4998      	ldr	r1, [pc, #608]	; (60001f9c <CrashReportClass::printTo(Print&) const+0x5c8>)
60001d3a:	4628      	mov	r0, r5
60001d3c:	685b      	ldr	r3, [r3, #4]
60001d3e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d40:	4628      	mov	r0, r5
60001d42:	f000 fc35 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
60001d46:	e6bd      	b.n	60001ac4 <CrashReportClass::printTo(Print&) const+0xf0>
							  return write((const uint8_t *)str, strlen(str)); }
60001d48:	682b      	ldr	r3, [r5, #0]
60001d4a:	2226      	movs	r2, #38	; 0x26
60001d4c:	4994      	ldr	r1, [pc, #592]	; (60001fa0 <CrashReportClass::printTo(Print&) const+0x5cc>)
60001d4e:	4628      	mov	r0, r5
60001d50:	685b      	ldr	r3, [r3, #4]
60001d52:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d54:	4628      	mov	r0, r5
60001d56:	f000 fc2b 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
60001d5a:	e6b0      	b.n	60001abe <CrashReportClass::printTo(Print&) const+0xea>
							  return write((const uint8_t *)str, strlen(str)); }
60001d5c:	682b      	ldr	r3, [r5, #0]
60001d5e:	222a      	movs	r2, #42	; 0x2a
60001d60:	4990      	ldr	r1, [pc, #576]	; (60001fa4 <CrashReportClass::printTo(Print&) const+0x5d0>)
60001d62:	4628      	mov	r0, r5
60001d64:	685b      	ldr	r3, [r3, #4]
60001d66:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d68:	4628      	mov	r0, r5
60001d6a:	f000 fc21 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
60001d6e:	e6a3      	b.n	60001ab8 <CrashReportClass::printTo(Print&) const+0xe4>
							  return write((const uint8_t *)str, strlen(str)); }
60001d70:	682b      	ldr	r3, [r5, #0]
60001d72:	2227      	movs	r2, #39	; 0x27
60001d74:	498c      	ldr	r1, [pc, #560]	; (60001fa8 <CrashReportClass::printTo(Print&) const+0x5d4>)
60001d76:	4628      	mov	r0, r5
60001d78:	685b      	ldr	r3, [r3, #4]
60001d7a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d7c:	4628      	mov	r0, r5
60001d7e:	f000 fc17 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
60001d82:	e696      	b.n	60001ab2 <CrashReportClass::printTo(Print&) const+0xde>
							  return write((const uint8_t *)str, strlen(str)); }
60001d84:	2248      	movs	r2, #72	; 0x48
60001d86:	4989      	ldr	r1, [pc, #548]	; (60001fac <CrashReportClass::printTo(Print&) const+0x5d8>)
60001d88:	e68a      	b.n	60001aa0 <CrashReportClass::printTo(Print&) const+0xcc>
60001d8a:	682b      	ldr	r3, [r5, #0]
60001d8c:	2208      	movs	r2, #8
60001d8e:	4988      	ldr	r1, [pc, #544]	; (60001fb0 <CrashReportClass::printTo(Print&) const+0x5dc>)
60001d90:	4628      	mov	r0, r5
60001d92:	685b      	ldr	r3, [r3, #4]
60001d94:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d96:	4623      	mov	r3, r4
60001d98:	2210      	movs	r2, #16
60001d9a:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001d9e:	4628      	mov	r0, r5
60001da0:	f000 fbfa 	bl	60002598 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001da4:	4628      	mov	r0, r5
60001da6:	f000 fc03 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001daa:	07f4      	lsls	r4, r6, #31
60001dac:	d469      	bmi.n	60001e82 <CrashReportClass::printTo(Print&) const+0x4ae>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001dae:	07b0      	lsls	r0, r6, #30
60001db0:	f100 8153 	bmi.w	6000205a <CrashReportClass::printTo(Print&) const+0x686>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001db4:	0731      	lsls	r1, r6, #28
60001db6:	f100 8144 	bmi.w	60002042 <CrashReportClass::printTo(Print&) const+0x66e>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001dba:	06f2      	lsls	r2, r6, #27
60001dbc:	f100 815d 	bmi.w	6000207a <CrashReportClass::printTo(Print&) const+0x6a6>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001dc0:	06b3      	lsls	r3, r6, #26
60001dc2:	d567      	bpl.n	60001e94 <CrashReportClass::printTo(Print&) const+0x4c0>
							  return write((const uint8_t *)str, strlen(str)); }
60001dc4:	682b      	ldr	r3, [r5, #0]
60001dc6:	222a      	movs	r2, #42	; 0x2a
60001dc8:	497a      	ldr	r1, [pc, #488]	; (60001fb4 <CrashReportClass::printTo(Print&) const+0x5e0>)
60001dca:	e05d      	b.n	60001e88 <CrashReportClass::printTo(Print&) const+0x4b4>
60001dcc:	682b      	ldr	r3, [r5, #0]
60001dce:	2208      	movs	r2, #8
60001dd0:	4979      	ldr	r1, [pc, #484]	; (60001fb8 <CrashReportClass::printTo(Print&) const+0x5e4>)
60001dd2:	4628      	mov	r0, r5
60001dd4:	685b      	ldr	r3, [r3, #4]
60001dd6:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001dd8:	2300      	movs	r3, #0
60001dda:	2210      	movs	r2, #16
60001ddc:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001de0:	4628      	mov	r0, r5
60001de2:	f000 fbd9 	bl	60002598 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001de6:	4628      	mov	r0, r5
60001de8:	f000 fbe2 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001dec:	07a0      	lsls	r0, r4, #30
60001dee:	d467      	bmi.n	60001ec0 <CrashReportClass::printTo(Print&) const+0x4ec>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001df0:	0061      	lsls	r1, r4, #1
60001df2:	f57f aef1 	bpl.w	60001bd8 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001df6:	682b      	ldr	r3, [r5, #0]
60001df8:	221b      	movs	r2, #27
60001dfa:	4970      	ldr	r1, [pc, #448]	; (60001fbc <CrashReportClass::printTo(Print&) const+0x5e8>)
60001dfc:	e063      	b.n	60001ec6 <CrashReportClass::printTo(Print&) const+0x4f2>
60001dfe:	2401      	movs	r4, #1
60001e00:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 60001ff8 <CrashReportClass::printTo(Print&) const+0x624>
60001e04:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 60001ffc <CrashReportClass::printTo(Print&) const+0x628>
      if (bc->bitmask & (1 << i)) {
60001e08:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 60001fe0 <CrashReportClass::printTo(Print&) const+0x60c>
60001e0c:	e005      	b.n	60001e1a <CrashReportClass::printTo(Print&) const+0x446>
    for (int i=0; i < 6; i++) {
60001e0e:	3401      	adds	r4, #1
60001e10:	2c07      	cmp	r4, #7
60001e12:	f43f ae78 	beq.w	60001b06 <CrashReportClass::printTo(Print&) const+0x132>
      if (bc->bitmask & (1 << i)) {
60001e16:	f8d8 60c0 	ldr.w	r6, [r8, #192]	; 0xc0
60001e1a:	1e63      	subs	r3, r4, #1
60001e1c:	2701      	movs	r7, #1
60001e1e:	fa07 f203 	lsl.w	r2, r7, r3
60001e22:	4232      	tst	r2, r6
60001e24:	d0f3      	beq.n	60001e0e <CrashReportClass::printTo(Print&) const+0x43a>
60001e26:	eb09 0683 	add.w	r6, r9, r3, lsl #2
60001e2a:	682b      	ldr	r3, [r5, #0]
60001e2c:	220e      	movs	r2, #14
60001e2e:	4651      	mov	r1, sl
60001e30:	685b      	ldr	r3, [r3, #4]
60001e32:	4628      	mov	r0, r5
60001e34:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001e36:	4621      	mov	r1, r4
60001e38:	4628      	mov	r0, r5
60001e3a:	f000 fbc9 	bl	600025d0 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001e3e:	682b      	ldr	r3, [r5, #0]
60001e40:	2205      	movs	r2, #5
60001e42:	495f      	ldr	r1, [pc, #380]	; (60001fc0 <CrashReportClass::printTo(Print&) const+0x5ec>)
60001e44:	685b      	ldr	r3, [r3, #4]
60001e46:	4628      	mov	r0, r5
60001e48:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001e4a:	6871      	ldr	r1, [r6, #4]
60001e4c:	2300      	movs	r3, #0
60001e4e:	220a      	movs	r2, #10
60001e50:	4628      	mov	r0, r5
60001e52:	f000 fba1 	bl	60002598 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001e56:	682b      	ldr	r3, [r5, #0]
60001e58:	2204      	movs	r2, #4
60001e5a:	495a      	ldr	r1, [pc, #360]	; (60001fc4 <CrashReportClass::printTo(Print&) const+0x5f0>)
60001e5c:	685b      	ldr	r3, [r3, #4]
60001e5e:	4628      	mov	r0, r5
60001e60:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001e62:	6871      	ldr	r1, [r6, #4]
60001e64:	2300      	movs	r3, #0
60001e66:	2210      	movs	r2, #16
60001e68:	4628      	mov	r0, r5
60001e6a:	f000 fb95 	bl	60002598 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001e6e:	682b      	ldr	r3, [r5, #0]
60001e70:	463a      	mov	r2, r7
60001e72:	4955      	ldr	r1, [pc, #340]	; (60001fc8 <CrashReportClass::printTo(Print&) const+0x5f4>)
60001e74:	685b      	ldr	r3, [r3, #4]
60001e76:	4628      	mov	r0, r5
60001e78:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e7a:	4628      	mov	r0, r5
60001e7c:	f000 fb98 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
60001e80:	e7c5      	b.n	60001e0e <CrashReportClass::printTo(Print&) const+0x43a>
							  return write((const uint8_t *)str, strlen(str)); }
60001e82:	682b      	ldr	r3, [r5, #0]
60001e84:	2228      	movs	r2, #40	; 0x28
60001e86:	4951      	ldr	r1, [pc, #324]	; (60001fcc <CrashReportClass::printTo(Print&) const+0x5f8>)
60001e88:	685b      	ldr	r3, [r3, #4]
60001e8a:	4628      	mov	r0, r5
60001e8c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e8e:	4628      	mov	r0, r5
60001e90:	f000 fb8e 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001e94:	0637      	lsls	r7, r6, #24
60001e96:	d43c      	bmi.n	60001f12 <CrashReportClass::printTo(Print&) const+0x53e>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001e98:	05f4      	lsls	r4, r6, #23
60001e9a:	d41b      	bmi.n	60001ed4 <CrashReportClass::printTo(Print&) const+0x500>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001e9c:	05b0      	lsls	r0, r6, #22
60001e9e:	f100 80d8 	bmi.w	60002052 <CrashReportClass::printTo(Print&) const+0x67e>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001ea2:	0571      	lsls	r1, r6, #21
60001ea4:	f100 80d1 	bmi.w	6000204a <CrashReportClass::printTo(Print&) const+0x676>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001ea8:	0532      	lsls	r2, r6, #20
60001eaa:	f100 80e2 	bmi.w	60002072 <CrashReportClass::printTo(Print&) const+0x69e>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001eae:	04f3      	lsls	r3, r6, #19
60001eb0:	f100 80db 	bmi.w	6000206a <CrashReportClass::printTo(Print&) const+0x696>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001eb4:	04b7      	lsls	r7, r6, #18
60001eb6:	d516      	bpl.n	60001ee6 <CrashReportClass::printTo(Print&) const+0x512>
							  return write((const uint8_t *)str, strlen(str)); }
60001eb8:	682b      	ldr	r3, [r5, #0]
60001eba:	2231      	movs	r2, #49	; 0x31
60001ebc:	4944      	ldr	r1, [pc, #272]	; (60001fd0 <CrashReportClass::printTo(Print&) const+0x5fc>)
60001ebe:	e00c      	b.n	60001eda <CrashReportClass::printTo(Print&) const+0x506>
60001ec0:	682b      	ldr	r3, [r5, #0]
60001ec2:	2226      	movs	r2, #38	; 0x26
60001ec4:	4943      	ldr	r1, [pc, #268]	; (60001fd4 <CrashReportClass::printTo(Print&) const+0x600>)
60001ec6:	4628      	mov	r0, r5
60001ec8:	685b      	ldr	r3, [r3, #4]
60001eca:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001ecc:	4628      	mov	r0, r5
60001ece:	f000 fb6f 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
60001ed2:	e681      	b.n	60001bd8 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001ed4:	682b      	ldr	r3, [r5, #0]
60001ed6:	2220      	movs	r2, #32
60001ed8:	493f      	ldr	r1, [pc, #252]	; (60001fd8 <CrashReportClass::printTo(Print&) const+0x604>)
60001eda:	685b      	ldr	r3, [r3, #4]
60001edc:	4628      	mov	r0, r5
60001ede:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001ee0:	4628      	mov	r0, r5
60001ee2:	f000 fb65 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001ee6:	0434      	lsls	r4, r6, #16
60001ee8:	d440      	bmi.n	60001f6c <CrashReportClass::printTo(Print&) const+0x598>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001eea:	03f0      	lsls	r0, r6, #15
60001eec:	d42e      	bmi.n	60001f4c <CrashReportClass::printTo(Print&) const+0x578>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001eee:	03b1      	lsls	r1, r6, #14
60001ef0:	f100 80b7 	bmi.w	60002062 <CrashReportClass::printTo(Print&) const+0x68e>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001ef4:	0372      	lsls	r2, r6, #13
60001ef6:	d44b      	bmi.n	60001f90 <CrashReportClass::printTo(Print&) const+0x5bc>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001ef8:	0333      	lsls	r3, r6, #12
60001efa:	f100 80c6 	bmi.w	6000208a <CrashReportClass::printTo(Print&) const+0x6b6>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001efe:	01f7      	lsls	r7, r6, #7
60001f00:	f100 80bf 	bmi.w	60002082 <CrashReportClass::printTo(Print&) const+0x6ae>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001f04:	01b4      	lsls	r4, r6, #6
60001f06:	f57f ae61 	bpl.w	60001bcc <CrashReportClass::printTo(Print&) const+0x1f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001f0a:	682b      	ldr	r3, [r5, #0]
60001f0c:	221b      	movs	r2, #27
60001f0e:	4933      	ldr	r1, [pc, #204]	; (60001fdc <CrashReportClass::printTo(Print&) const+0x608>)
60001f10:	e01f      	b.n	60001f52 <CrashReportClass::printTo(Print&) const+0x57e>
60001f12:	682b      	ldr	r3, [r5, #0]
60001f14:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001f16:	4c32      	ldr	r4, [pc, #200]	; (60001fe0 <CrashReportClass::printTo(Print&) const+0x60c>)
60001f18:	4628      	mov	r0, r5
60001f1a:	4932      	ldr	r1, [pc, #200]	; (60001fe4 <CrashReportClass::printTo(Print&) const+0x610>)
60001f1c:	685b      	ldr	r3, [r3, #4]
60001f1e:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001f20:	2210      	movs	r2, #16
60001f22:	2300      	movs	r3, #0
60001f24:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001f28:	4628      	mov	r0, r5
60001f2a:	f000 fb35 	bl	60002598 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001f2e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001f32:	2a1f      	cmp	r2, #31
60001f34:	d964      	bls.n	60002000 <CrashReportClass::printTo(Print&) const+0x62c>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001f36:	4b2c      	ldr	r3, [pc, #176]	; (60001fe8 <CrashReportClass::printTo(Print&) const+0x614>)
60001f38:	429a      	cmp	r2, r3
60001f3a:	d303      	bcc.n	60001f44 <CrashReportClass::printTo(Print&) const+0x570>
60001f3c:	3320      	adds	r3, #32
60001f3e:	429a      	cmp	r2, r3
60001f40:	f0c0 80a7 	bcc.w	60002092 <CrashReportClass::printTo(Print&) const+0x6be>
        p.println();
60001f44:	4628      	mov	r0, r5
60001f46:	f000 fb33 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
60001f4a:	e7a5      	b.n	60001e98 <CrashReportClass::printTo(Print&) const+0x4c4>
							  return write((const uint8_t *)str, strlen(str)); }
60001f4c:	682b      	ldr	r3, [r5, #0]
60001f4e:	2223      	movs	r2, #35	; 0x23
60001f50:	4926      	ldr	r1, [pc, #152]	; (60001fec <CrashReportClass::printTo(Print&) const+0x618>)
60001f52:	685b      	ldr	r3, [r3, #4]
60001f54:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001f56:	4e22      	ldr	r6, [pc, #136]	; (60001fe0 <CrashReportClass::printTo(Print&) const+0x60c>)
60001f58:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001f5a:	4628      	mov	r0, r5
60001f5c:	f000 fb28 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
60001f60:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001f64:	2c00      	cmp	r4, #0
60001f66:	f43f ae37 	beq.w	60001bd8 <CrashReportClass::printTo(Print&) const+0x204>
60001f6a:	e72f      	b.n	60001dcc <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001f6c:	682b      	ldr	r3, [r5, #0]
60001f6e:	2221      	movs	r2, #33	; 0x21
60001f70:	491f      	ldr	r1, [pc, #124]	; (60001ff0 <CrashReportClass::printTo(Print&) const+0x61c>)
60001f72:	4628      	mov	r0, r5
60001f74:	685b      	ldr	r3, [r3, #4]
60001f76:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001f78:	4919      	ldr	r1, [pc, #100]	; (60001fe0 <CrashReportClass::printTo(Print&) const+0x60c>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001f7a:	2300      	movs	r3, #0
60001f7c:	2210      	movs	r2, #16
60001f7e:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001f82:	4628      	mov	r0, r5
60001f84:	f000 fb08 	bl	60002598 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001f88:	4628      	mov	r0, r5
60001f8a:	f000 fb11 	bl	600025b0 <___ZN5Print7printlnEv_veneer>
60001f8e:	e7ac      	b.n	60001eea <CrashReportClass::printTo(Print&) const+0x516>
							  return write((const uint8_t *)str, strlen(str)); }
60001f90:	682b      	ldr	r3, [r5, #0]
60001f92:	2228      	movs	r2, #40	; 0x28
60001f94:	4917      	ldr	r1, [pc, #92]	; (60001ff4 <CrashReportClass::printTo(Print&) const+0x620>)
60001f96:	e7dc      	b.n	60001f52 <CrashReportClass::printTo(Print&) const+0x57e>
60001f98:	2000271c 	.word	0x2000271c
60001f9c:	200026f0 	.word	0x200026f0
60001fa0:	200026c8 	.word	0x200026c8
60001fa4:	2000269c 	.word	0x2000269c
60001fa8:	20002674 	.word	0x20002674
60001fac:	200025e4 	.word	0x200025e4
60001fb0:	20001fd0 	.word	0x20001fd0
60001fb4:	20002080 	.word	0x20002080
60001fb8:	200023e0 	.word	0x200023e0
60001fbc:	20002414 	.word	0x20002414
60001fc0:	20002808 	.word	0x20002808
60001fc4:	20002810 	.word	0x20002810
60001fc8:	20002530 	.word	0x20002530
60001fcc:	20001fdc 	.word	0x20001fdc
60001fd0:	200022a4 	.word	0x200022a4
60001fd4:	200023ec 	.word	0x200023ec
60001fd8:	20002194 	.word	0x20002194
60001fdc:	200023c4 	.word	0x200023c4
60001fe0:	2027ff00 	.word	0x2027ff00
60001fe4:	200020ac 	.word	0x200020ac
60001fe8:	20004da0 	.word	0x20004da0
60001fec:	200022fc 	.word	0x200022fc
60001ff0:	200022d8 	.word	0x200022d8
60001ff4:	20002354 	.word	0x20002354
60001ff8:	200027f8 	.word	0x200027f8
60001ffc:	2027ffc0 	.word	0x2027ffc0
60002000:	682b      	ldr	r3, [r5, #0]
60002002:	221e      	movs	r2, #30
60002004:	4926      	ldr	r1, [pc, #152]	; (600020a0 <CrashReportClass::printTo(Print&) const+0x6cc>)
60002006:	4628      	mov	r0, r5
60002008:	685b      	ldr	r3, [r3, #4]
6000200a:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000200c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60002010:	2300      	movs	r3, #0
60002012:	2210      	movs	r2, #16
60002014:	4628      	mov	r0, r5
60002016:	f000 fabf 	bl	60002598 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000201a:	682b      	ldr	r3, [r5, #0]
6000201c:	223e      	movs	r2, #62	; 0x3e
6000201e:	4921      	ldr	r1, [pc, #132]	; (600020a4 <CrashReportClass::printTo(Print&) const+0x6d0>)
60002020:	685b      	ldr	r3, [r3, #4]
60002022:	4628      	mov	r0, r5
60002024:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60002026:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
6000202a:	2300      	movs	r3, #0
6000202c:	2210      	movs	r2, #16
6000202e:	4628      	mov	r0, r5
60002030:	f000 fab2 	bl	60002598 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60002034:	682b      	ldr	r3, [r5, #0]
60002036:	221d      	movs	r2, #29
60002038:	491b      	ldr	r1, [pc, #108]	; (600020a8 <CrashReportClass::printTo(Print&) const+0x6d4>)
6000203a:	685b      	ldr	r3, [r3, #4]
6000203c:	4628      	mov	r0, r5
6000203e:	4798      	blx	r3
60002040:	e780      	b.n	60001f44 <CrashReportClass::printTo(Print&) const+0x570>
60002042:	682b      	ldr	r3, [r5, #0]
60002044:	2229      	movs	r2, #41	; 0x29
60002046:	4919      	ldr	r1, [pc, #100]	; (600020ac <CrashReportClass::printTo(Print&) const+0x6d8>)
60002048:	e71e      	b.n	60001e88 <CrashReportClass::printTo(Print&) const+0x4b4>
6000204a:	682b      	ldr	r3, [r5, #0]
6000204c:	2244      	movs	r2, #68	; 0x44
6000204e:	4918      	ldr	r1, [pc, #96]	; (600020b0 <CrashReportClass::printTo(Print&) const+0x6dc>)
60002050:	e743      	b.n	60001eda <CrashReportClass::printTo(Print&) const+0x506>
60002052:	682b      	ldr	r3, [r5, #0]
60002054:	222c      	movs	r2, #44	; 0x2c
60002056:	4917      	ldr	r1, [pc, #92]	; (600020b4 <CrashReportClass::printTo(Print&) const+0x6e0>)
60002058:	e73f      	b.n	60001eda <CrashReportClass::printTo(Print&) const+0x506>
6000205a:	682b      	ldr	r3, [r5, #0]
6000205c:	2221      	movs	r2, #33	; 0x21
6000205e:	4916      	ldr	r1, [pc, #88]	; (600020b8 <CrashReportClass::printTo(Print&) const+0x6e4>)
60002060:	e712      	b.n	60001e88 <CrashReportClass::printTo(Print&) const+0x4b4>
60002062:	682b      	ldr	r3, [r5, #0]
60002064:	2232      	movs	r2, #50	; 0x32
60002066:	4915      	ldr	r1, [pc, #84]	; (600020bc <CrashReportClass::printTo(Print&) const+0x6e8>)
60002068:	e773      	b.n	60001f52 <CrashReportClass::printTo(Print&) const+0x57e>
6000206a:	682b      	ldr	r3, [r5, #0]
6000206c:	2233      	movs	r2, #51	; 0x33
6000206e:	4914      	ldr	r1, [pc, #80]	; (600020c0 <CrashReportClass::printTo(Print&) const+0x6ec>)
60002070:	e733      	b.n	60001eda <CrashReportClass::printTo(Print&) const+0x506>
60002072:	682b      	ldr	r3, [r5, #0]
60002074:	223f      	movs	r2, #63	; 0x3f
60002076:	4913      	ldr	r1, [pc, #76]	; (600020c4 <CrashReportClass::printTo(Print&) const+0x6f0>)
60002078:	e72f      	b.n	60001eda <CrashReportClass::printTo(Print&) const+0x506>
6000207a:	682b      	ldr	r3, [r5, #0]
6000207c:	2225      	movs	r2, #37	; 0x25
6000207e:	4912      	ldr	r1, [pc, #72]	; (600020c8 <CrashReportClass::printTo(Print&) const+0x6f4>)
60002080:	e702      	b.n	60001e88 <CrashReportClass::printTo(Print&) const+0x4b4>
60002082:	682b      	ldr	r3, [r5, #0]
60002084:	2228      	movs	r2, #40	; 0x28
60002086:	4911      	ldr	r1, [pc, #68]	; (600020cc <CrashReportClass::printTo(Print&) const+0x6f8>)
60002088:	e763      	b.n	60001f52 <CrashReportClass::printTo(Print&) const+0x57e>
6000208a:	682b      	ldr	r3, [r5, #0]
6000208c:	2216      	movs	r2, #22
6000208e:	4910      	ldr	r1, [pc, #64]	; (600020d0 <CrashReportClass::printTo(Print&) const+0x6fc>)
60002090:	e75f      	b.n	60001f52 <CrashReportClass::printTo(Print&) const+0x57e>
60002092:	682b      	ldr	r3, [r5, #0]
60002094:	2241      	movs	r2, #65	; 0x41
60002096:	490f      	ldr	r1, [pc, #60]	; (600020d4 <CrashReportClass::printTo(Print&) const+0x700>)
60002098:	4628      	mov	r0, r5
6000209a:	685b      	ldr	r3, [r3, #4]
6000209c:	4798      	blx	r3
6000209e:	e751      	b.n	60001f44 <CrashReportClass::printTo(Print&) const+0x570>
600020a0:	200020d0 	.word	0x200020d0
600020a4:	200020f0 	.word	0x200020f0
600020a8:	20002130 	.word	0x20002130
600020ac:	2000202c 	.word	0x2000202c
600020b0:	200021e8 	.word	0x200021e8
600020b4:	200021b8 	.word	0x200021b8
600020b8:	20002008 	.word	0x20002008
600020bc:	20002320 	.word	0x20002320
600020c0:	20002270 	.word	0x20002270
600020c4:	20002230 	.word	0x20002230
600020c8:	20002058 	.word	0x20002058
600020cc:	20002398 	.word	0x20002398
600020d0:	20002380 	.word	0x20002380
600020d4:	20002150 	.word	0x20002150

600020d8 <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
600020d8:	4b12      	ldr	r3, [pc, #72]	; (60002124 <CrashReportClass::operator bool()+0x4c>)
600020da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
600020de:	2b0b      	cmp	r3, #11
600020e0:	d11e      	bne.n	60002120 <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
600020e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
600020e6:	4810      	ldr	r0, [pc, #64]	; (60002128 <CrashReportClass::operator bool()+0x50>)
{
600020e8:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
600020ea:	4d10      	ldr	r5, [pc, #64]	; (6000212c <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
600020ec:	4c10      	ldr	r4, [pc, #64]	; (60002130 <CrashReportClass::operator bool()+0x58>)
600020ee:	e001      	b.n	600020f4 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
600020f0:	686b      	ldr	r3, [r5, #4]
600020f2:	4675      	mov	r5, lr
600020f4:	f105 0e04 	add.w	lr, r5, #4
600020f8:	405a      	eors	r2, r3
600020fa:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
600020fc:	f002 0301 	and.w	r3, r2, #1
60002100:	3901      	subs	r1, #1
60002102:	fb00 f303 	mul.w	r3, r0, r3
60002106:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
6000210a:	d1f7      	bne.n	600020fc <CrashReportClass::operator bool()+0x24>
	while (data < end) {
6000210c:	45a6      	cmp	lr, r4
6000210e:	d1ef      	bne.n	600020f0 <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60002110:	4b04      	ldr	r3, [pc, #16]	; (60002124 <CrashReportClass::operator bool()+0x4c>)
60002112:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60002116:	1a80      	subs	r0, r0, r2
60002118:	fab0 f080 	clz	r0, r0
6000211c:	0940      	lsrs	r0, r0, #5
}
6000211e:	bd30      	pop	{r4, r5, pc}
	return false;
60002120:	2000      	movs	r0, #0
}
60002122:	4770      	bx	lr
60002124:	2027ff00 	.word	0x2027ff00
60002128:	edb88320 	.word	0xedb88320
6000212c:	2027ff80 	.word	0x2027ff80
60002130:	2027ffa8 	.word	0x2027ffa8

60002134 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60002134:	4770      	bx	lr
60002136:	bf00      	nop

60002138 <startup_default_middle_hook>:
60002138:	4770      	bx	lr
6000213a:	bf00      	nop

6000213c <startup_default_late_hook>:
6000213c:	4770      	bx	lr
6000213e:	bf00      	nop

60002140 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60002140:	bf00      	nop
60002142:	4770      	bx	lr

60002144 <configure_cache>:
{
60002144:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60002146:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000214a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000214c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000214e:	4831      	ldr	r0, [pc, #196]	; (60002214 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60002150:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60002154:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60002158:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000215a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000215e:	482e      	ldr	r0, [pc, #184]	; (60002218 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60002160:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60002164:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60002166:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000216a:	482c      	ldr	r0, [pc, #176]	; (6000221c <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000216c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60002170:	4a2b      	ldr	r2, [pc, #172]	; (60002220 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60002172:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60002176:	4c2b      	ldr	r4, [pc, #172]	; (60002224 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60002178:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000217c:	482a      	ldr	r0, [pc, #168]	; (60002228 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000217e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60002182:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60002186:	4c29      	ldr	r4, [pc, #164]	; (6000222c <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60002188:	4829      	ldr	r0, [pc, #164]	; (60002230 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000218a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000218e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60002192:	4c28      	ldr	r4, [pc, #160]	; (60002234 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60002194:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60002198:	4827      	ldr	r0, [pc, #156]	; (60002238 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000219a:	4a28      	ldr	r2, [pc, #160]	; (6000223c <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000219c:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600021a0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600021a4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600021a8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600021ac:	4c24      	ldr	r4, [pc, #144]	; (60002240 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600021ae:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600021b0:	4824      	ldr	r0, [pc, #144]	; (60002244 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600021b2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600021b6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600021ba:	4a23      	ldr	r2, [pc, #140]	; (60002248 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600021bc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600021c0:	4c22      	ldr	r4, [pc, #136]	; (6000224c <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600021c2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600021c6:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600021ca:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600021ce:	4820      	ldr	r0, [pc, #128]	; (60002250 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600021d0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600021d4:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600021d6:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600021da:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600021de:	bf00      	nop
	asm("nop");
600021e0:	bf00      	nop
	asm("nop");
600021e2:	bf00      	nop
	asm("nop");
600021e4:	bf00      	nop
	asm("nop");
600021e6:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600021e8:	2201      	movs	r2, #1
600021ea:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600021ee:	f3bf 8f4f 	dsb	sy
	asm("isb");
600021f2:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600021f6:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600021fa:	f3bf 8f4f 	dsb	sy
	asm("isb");
600021fe:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60002202:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60002206:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000220a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000220e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60002212:	4770      	bx	lr
60002214:	1000003f 	.word	0x1000003f
60002218:	07080025 	.word	0x07080025
6000221c:	00100009 	.word	0x00100009
60002220:	20004da0 	.word	0x20004da0
60002224:	00200013 	.word	0x00200013
60002228:	07020021 	.word	0x07020021
6000222c:	20000014 	.word	0x20000014
60002230:	13080025 	.word	0x13080025
60002234:	10000009 	.word	0x10000009
60002238:	20200016 	.word	0x20200016
6000223c:	130b0027 	.word	0x130b0027
60002240:	40000017 	.word	0x40000017
60002244:	60000018 	.word	0x60000018
60002248:	070b002f 	.word	0x070b002f
6000224c:	70000019 	.word	0x70000019
60002250:	8000001a 	.word	0x8000001a

60002254 <usb_pll_start>:
{
60002254:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60002256:	4a15      	ldr	r2, [pc, #84]	; (600022ac <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002258:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000225a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000225e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60002262:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002266:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000226a:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000226e:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60002270:	f013 0f02 	tst.w	r3, #2
60002274:	d10e      	bne.n	60002294 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60002276:	f413 5f00 	tst.w	r3, #8192	; 0x2000
6000227a:	d00f      	beq.n	6000229c <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000227c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60002280:	d00e      	beq.n	600022a0 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60002282:	2b00      	cmp	r3, #0
60002284:	daf3      	bge.n	6000226e <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60002286:	f413 3f80 	tst.w	r3, #65536	; 0x10000
6000228a:	d10b      	bne.n	600022a4 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000228c:	065b      	lsls	r3, r3, #25
6000228e:	d50b      	bpl.n	600022a8 <usb_pll_start+0x54>
}
60002290:	bcf0      	pop	{r4, r5, r6, r7}
60002292:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002294:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60002296:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60002298:	6190      	str	r0, [r2, #24]
			continue;
6000229a:	e7e8      	b.n	6000226e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000229c:	6155      	str	r5, [r2, #20]
			continue;
6000229e:	e7e6      	b.n	6000226e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600022a0:	6156      	str	r6, [r2, #20]
			continue;
600022a2:	e7e4      	b.n	6000226e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600022a4:	6191      	str	r1, [r2, #24]
			continue;
600022a6:	e7e2      	b.n	6000226e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600022a8:	6157      	str	r7, [r2, #20]
			continue;
600022aa:	e7e0      	b.n	6000226e <usb_pll_start+0x1a>
600022ac:	400d8000 	.word	0x400d8000

600022b0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600022b0:	4a3f      	ldr	r2, [pc, #252]	; (600023b0 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600022b2:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600022b4:	493f      	ldr	r1, [pc, #252]	; (600023b4 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600022b6:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600022ba:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600022be:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600022c2:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 600023b8 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600022c6:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600022ca:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 600023bc <tempmon_init+0x10c>
{
600022ce:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600022d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600022d4:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
600022d8:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600022dc:	4d38      	ldr	r5, [pc, #224]	; (600023c0 <tempmon_init+0x110>)
600022de:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600022e0:	4c38      	ldr	r4, [pc, #224]	; (600023c4 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600022e2:	4839      	ldr	r0, [pc, #228]	; (600023c8 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600022e4:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600022e6:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600022ea:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600022ec:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600022f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600022f4:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600022f8:	ee07 1a10 	vmov	s14, r1
600022fc:	4b33      	ldr	r3, [pc, #204]	; (600023cc <tempmon_init+0x11c>)
600022fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002302:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002304:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002308:	4931      	ldr	r1, [pc, #196]	; (600023d0 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000230a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000230e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002312:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002316:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000231a:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000231e:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002322:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002326:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000232a:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000232e:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002332:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002336:	4827      	ldr	r0, [pc, #156]	; (600023d4 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002338:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000233c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002340:	ee75 5a87 	vadd.f32	s11, s11, s14
60002344:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002348:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000234c:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002350:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002354:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002358:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000235c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002360:	ee16 3a10 	vmov	r3, s12
60002364:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000236c:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60002370:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002372:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002376:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000237a:	f3c3 030b 	ubfx	r3, r3, #0, #12
6000237e:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60002382:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60002384:	4914      	ldr	r1, [pc, #80]	; (600023d8 <tempmon_init+0x128>)
60002386:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000238a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000238e:	f043 0302 	orr.w	r3, r3, #2
60002392:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60002396:	4b11      	ldr	r3, [pc, #68]	; (600023dc <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002398:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
6000239c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600023a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600023a4:	2201      	movs	r2, #1
}
600023a6:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600023a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600023ac:	4770      	bx	lr
600023ae:	bf00      	nop
600023b0:	400d8100 	.word	0x400d8100
600023b4:	401f4400 	.word	0x401f4400
600023b8:	42aa0000 	.word	0x42aa0000
600023bc:	42b40000 	.word	0x42b40000
600023c0:	20004a78 	.word	0x20004a78
600023c4:	20004a74 	.word	0x20004a74
600023c8:	20004a7c 	.word	0x20004a7c
600023cc:	20004a80 	.word	0x20004a80
600023d0:	0fff0000 	.word	0x0fff0000
600023d4:	e000e400 	.word	0xe000e400
600023d8:	20003800 	.word	0x20003800
600023dc:	0000e9b5 	.word	0x0000e9b5

600023e0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600023e0:	4b31      	ldr	r3, [pc, #196]	; (600024a8 <usb_init+0xc8>)
600023e2:	f640 7261 	movw	r2, #3937	; 0xf61
{
600023e6:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600023e8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600023ec:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
600023f0:	f000 f8d6 	bl	600025a0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600023f4:	4a2d      	ldr	r2, [pc, #180]	; (600024ac <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
600023f6:	492e      	ldr	r1, [pc, #184]	; (600024b0 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600023f8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600023fc:	482d      	ldr	r0, [pc, #180]	; (600024b4 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600023fe:	f043 0303 	orr.w	r3, r3, #3
60002402:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002406:	4b2c      	ldr	r3, [pc, #176]	; (600024b8 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60002408:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000240c:	6802      	ldr	r2, [r0, #0]
6000240e:	421a      	tst	r2, r3
60002410:	d103      	bne.n	6000241a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60002412:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60002416:	079a      	lsls	r2, r3, #30
60002418:	d01b      	beq.n	60002452 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000241a:	4a25      	ldr	r2, [pc, #148]	; (600024b0 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
6000241c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60002420:	4b24      	ldr	r3, [pc, #144]	; (600024b4 <usb_init+0xd4>)
60002422:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60002424:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60002428:	f043 0302 	orr.w	r3, r3, #2
6000242c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60002430:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60002434:	079b      	lsls	r3, r3, #30
60002436:	d4fb      	bmi.n	60002430 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60002438:	f44f 3000 	mov.w	r0, #131072	; 0x20000
6000243c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002440:	4b1c      	ldr	r3, [pc, #112]	; (600024b4 <usb_init+0xd4>)
60002442:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60002446:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000244a:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000244c:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000244e:	f000 f8ab 	bl	600025a8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60002452:	4a18      	ldr	r2, [pc, #96]	; (600024b4 <usb_init+0xd4>)
60002454:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60002458:	4c15      	ldr	r4, [pc, #84]	; (600024b0 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
6000245a:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000245c:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000245e:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002460:	4b16      	ldr	r3, [pc, #88]	; (600024bc <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60002462:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002464:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60002468:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000246c:	4618      	mov	r0, r3
6000246e:	f000 f8bb 	bl	600025e8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60002472:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002476:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002478:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000247c:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002480:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60002482:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60002486:	641a      	str	r2, [r3, #64]	; 0x40
60002488:	4b0d      	ldr	r3, [pc, #52]	; (600024c0 <usb_init+0xe0>)
6000248a:	4a0e      	ldr	r2, [pc, #56]	; (600024c4 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000248c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60002490:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60002494:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60002498:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000249c:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000249e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600024a2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600024a6:	bd10      	pop	{r4, pc}
600024a8:	400d8000 	.word	0x400d8000
600024ac:	400fc000 	.word	0x400fc000
600024b0:	402e0000 	.word	0x402e0000
600024b4:	400d9000 	.word	0x400d9000
600024b8:	001e1c00 	.word	0x001e1c00
600024bc:	20000000 	.word	0x20000000
600024c0:	20003800 	.word	0x20003800
600024c4:	0000eb9d 	.word	0x0000eb9d

600024c8 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
600024c8:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
600024ca:	4b0e      	ldr	r3, [pc, #56]	; (60002504 <_reboot_Teensyduino_+0x3c>)
600024cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
600024ce:	079b      	lsls	r3, r3, #30
600024d0:	d400      	bmi.n	600024d4 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
600024d2:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
600024d4:	b672      	cpsid	i
		USB1_USBCMD = 0;
600024d6:	4b0c      	ldr	r3, [pc, #48]	; (60002508 <_reboot_Teensyduino_+0x40>)
600024d8:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
600024da:	4a0c      	ldr	r2, [pc, #48]	; (6000250c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
600024dc:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600024e0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
600024e4:	490a      	ldr	r1, [pc, #40]	; (60002510 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600024e6:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
600024ea:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600024ec:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600024ee:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600024f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
600024f6:	4807      	ldr	r0, [pc, #28]	; (60002514 <_reboot_Teensyduino_+0x4c>)
600024f8:	4a07      	ldr	r2, [pc, #28]	; (60002518 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600024fa:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
600024fc:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600024fe:	689b      	ldr	r3, [r3, #8]
60002500:	4798      	blx	r3
	}
	__builtin_unreachable();
60002502:	bf00      	nop
60002504:	401f4400 	.word	0x401f4400
60002508:	402e0000 	.word	0x402e0000
6000250c:	400ac000 	.word	0x400ac000
60002510:	00200003 	.word	0x00200003
60002514:	20208000 	.word	0x20208000
60002518:	eb120000 	.word	0xeb120000

6000251c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000251c:	4b10      	ldr	r3, [pc, #64]	; (60002560 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000251e:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002520:	4a10      	ldr	r2, [pc, #64]	; (60002564 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002522:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60002524:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60002528:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000252a:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000252c:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60002530:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60002532:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60002536:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002538:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000253a:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
6000253c:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000253e:	061b      	lsls	r3, r3, #24
60002540:	d4fc      	bmi.n	6000253c <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002542:	4a09      	ldr	r2, [pc, #36]	; (60002568 <analog_init+0x4c>)
60002544:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002548:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000254a:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000254c:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000254e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60002550:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60002554:	d1fb      	bne.n	6000254e <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60002556:	4a05      	ldr	r2, [pc, #20]	; (6000256c <analog_init+0x50>)
60002558:	7013      	strb	r3, [r2, #0]
}
6000255a:	f85d 4b04 	ldr.w	r4, [sp], #4
6000255e:	4770      	bx	lr
60002560:	400fc000 	.word	0x400fc000
60002564:	400c4000 	.word	0x400c4000
60002568:	400c8000 	.word	0x400c8000
6000256c:	20004d55 	.word	0x20004d55

60002570 <_init>:
60002570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60002572:	bf00      	nop
60002574:	bcf8      	pop	{r3, r4, r5, r6, r7}
60002576:	bc08      	pop	{r3}
60002578:	469e      	mov	lr, r3
6000257a:	4770      	bx	lr
6000257c:	0000      	movs	r0, r0
	...

60002580 <__pwm_init_veneer>:
60002580:	f85f f000 	ldr.w	pc, [pc]	; 60002584 <__pwm_init_veneer+0x4>
60002584:	0000e6b1 	.word	0x0000e6b1

60002588 <___ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm_veneer>:
60002588:	f85f f000 	ldr.w	pc, [pc]	; 6000258c <___ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm_veneer+0x4>
6000258c:	0000d821 	.word	0x0000d821

60002590 <__main_veneer>:
60002590:	f85f f000 	ldr.w	pc, [pc]	; 60002594 <__main_veneer+0x4>
60002594:	0000e305 	.word	0x0000e305

60002598 <___ZN5Print11printNumberEmhh_veneer>:
60002598:	f85f f000 	ldr.w	pc, [pc]	; 6000259c <___ZN5Print11printNumberEmhh_veneer+0x4>
6000259c:	0000dac5 	.word	0x0000dac5

600025a0 <__usb_init_serialnumber_veneer>:
600025a0:	f85f f000 	ldr.w	pc, [pc]	; 600025a4 <__usb_init_serialnumber_veneer+0x4>
600025a4:	0000f30d 	.word	0x0000f30d

600025a8 <__delay_veneer>:
600025a8:	f85f f000 	ldr.w	pc, [pc]	; 600025ac <__delay_veneer+0x4>
600025ac:	0000e121 	.word	0x0000e121

600025b0 <___ZN5Print7printlnEv_veneer>:
600025b0:	f85f f000 	ldr.w	pc, [pc]	; 600025b4 <___ZN5Print7printlnEv_veneer+0x4>
600025b4:	0000da8d 	.word	0x0000da8d

600025b8 <____libc_init_array_veneer>:
600025b8:	f85f f000 	ldr.w	pc, [pc]	; 600025bc <____libc_init_array_veneer+0x4>
600025bc:	00012419 	.word	0x00012419

600025c0 <__set_arm_clock_veneer>:
600025c0:	f85f f000 	ldr.w	pc, [pc]	; 600025c4 <__set_arm_clock_veneer+0x4>
600025c4:	0000de31 	.word	0x0000de31

600025c8 <___ZN5Print10printFloatEdh_veneer>:
600025c8:	f85f f000 	ldr.w	pc, [pc]	; 600025cc <___ZN5Print10printFloatEdh_veneer+0x4>
600025cc:	0000daf1 	.word	0x0000daf1

600025d0 <___ZN5Print5printEl_veneer>:
600025d0:	f85f f000 	ldr.w	pc, [pc]	; 600025d4 <___ZN5Print5printEl_veneer+0x4>
600025d4:	0000da75 	.word	0x0000da75

600025d8 <___ZZN6teensy23inplace_function_detail6vtableIvJEEC4IPFvvEEENS0_7wrapperIT_EEENUlPvS9_E0_4_FUNES9_S9__veneer>:
600025d8:	f85f f000 	ldr.w	pc, [pc]	; 600025dc <___ZZN6teensy23inplace_function_detail6vtableIvJEEC4IPFvvEEENS0_7wrapperIT_EEENUlPvS9_E0_4_FUNES9_S9__veneer+0x4>
600025dc:	0000cb21 	.word	0x0000cb21

600025e0 <___Znwj_veneer>:
600025e0:	f85f f000 	ldr.w	pc, [pc]	; 600025e4 <___Znwj_veneer+0x4>
600025e4:	0000e449 	.word	0x0000e449

600025e8 <__memset_veneer>:
600025e8:	f85f f000 	ldr.w	pc, [pc]	; 600025ec <__memset_veneer+0x4>
600025ec:	00011ded 	.word	0x00011ded

600025f0 <__frame_dummy_init_array_entry>:
600025f0:	00000045 00001a41 00002bb5 000030c9     E...A....+...0..
60002600:	000030e1 000030f9 00003111 00003129     .0...0...1..)1..
60002610:	00003141 00003159 00003171 00003189     A1..Y1..q1...1..
60002620:	000031a1 000031b9 0000365d 00003675     .1...1..]6..u6..
60002630:	0000368d 000036a5 000036bd 000036d5     .6...6...6...6..
60002640:	000036ed 00003705 00003739 00003769     .6...7..97..i7..
60002650:	00003781 00003799 000037b1 000037c9     .7...7...7...7..
60002660:	00004dcd 0000d925                       .M..%...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	// state is explicitly STATE_STOP
	if(state_play >= 8 || state == STATE_STOP) return;

	// toggle back and forth between state_play and STATE_PAUSED
	if(state == state_play) {
		state = STATE_PAUSED;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x14>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x18>)
      24:	1a1b      	subs	r3, r3, r0
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      26:	0fd9      	lsrs	r1, r3, #31
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
    return (cp & 0X3FF) + 0XDC00;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x12>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1c>)
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x12>
    }
    return ptr;
  }
      34:	4718      	bx	r3
      36:	4770      	bx	lr
		in->ref_count--;
      38:	20003ac0 	.word	0x20003ac0
}
      3c:	20003ac0 	.word	0x20003ac0
	if (index >= num_inputs) return NULL;
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
}
      44:	b508      	push	{r3, lr}
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  }
  m_vwd = dir;
  return true;

 fail:
  return false;
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
}
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	count = 0;
	__enable_irq();
	float meansq = sum / (num * AUDIO_BLOCK_SAMPLES);
	// TODO: shift down to 32 bits and use sqrt_uint32
	//       but is that really any more efficient?
	return sqrtf(meansq) / 32767.0;
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
  m_vwd = dir;
  return true;

 fail:
  return false;
}
      5c:	00000000 	.word	0x00000000
	size_t write(const char *str)			{ if (str == nullptr) return 0;
      60:	200049e0 	.word	0x200049e0
      64:	6001f800 	.word	0x6001f800

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <Print::flush()>:
	virtual void flush()				{ }
      6c:	4770      	bx	lr
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
		channel = 0;
	}
#endif
}
      6e:	bf00      	nop

00000070 <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
      70:	6d03      	ldr	r3, [r0, #80]	; 0x50
      72:	b10b      	cbz	r3, 78 <SDFile::isOpen()+0x8>
      74:	2001      	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
      76:	4770      	bx	lr
      78:	6d40      	ldr	r0, [r0, #84]	; 0x54
      7a:	3800      	subs	r0, #0
      7c:	bf18      	it	ne
      7e:	2001      	movne	r0, #1
      80:	4770      	bx	lr
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      82:	bf00      	nop

00000084 <SDFile::close()>:
	virtual void close() {
      84:	b510      	push	{r4, lr}
      86:	4604      	mov	r4, r0
		if (filename) {
      88:	6d80      	ldr	r0, [r0, #88]	; 0x58
      8a:	b118      	cbz	r0, 94 <SDFile::close()+0x10>
			free(filename);
      8c:	f00f ff62 	bl	ff54 <free>
			filename = nullptr;
      90:	2300      	movs	r3, #0
      92:	65a3      	str	r3, [r4, #88]	; 0x58
      94:	6d23      	ldr	r3, [r4, #80]	; 0x50
      96:	b12b      	cbz	r3, a4 <SDFile::close()+0x20>
			sdfatfile.close();
      98:	f104 0018 	add.w	r0, r4, #24
	}
      9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
      a0:	f009 bb18 	b.w	96d4 <FsBaseFile::close()>
      a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
      a6:	2b00      	cmp	r3, #0
      a8:	d1f6      	bne.n	98 <SDFile::close()+0x14>
	}
      aa:	bd10      	pop	{r4, pc}

000000ac <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
      ac:	b5f0      	push	{r4, r5, r6, r7, lr}
      ae:	b095      	sub	sp, #84	; 0x54
	constexpr Print() : write_error(0) {}
      b0:	2200      	movs	r2, #0
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
      b2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
      b6:	4f24      	ldr	r7, [pc, #144]	; (148 <SDFile::openNextFile(unsigned char)+0x9c>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
      b8:	3118      	adds	r1, #24
      ba:	4605      	mov	r5, r0
      bc:	a804      	add	r0, sp, #16
      be:	f88d 200c 	strb.w	r2, [sp, #12]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
      c2:	9700      	str	r7, [sp, #0]
      c4:	e9cd 2401 	strd	r2, r4, [sp, #4]
  FsBaseFile() {}
      c8:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
    tmpFile.openNext(this, oflag);
      cc:	f009 fb6e 	bl	97ac <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
      d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
      d2:	2b00      	cmp	r3, #0
      d4:	d02d      	beq.n	132 <SDFile::openNextFile(unsigned char)+0x86>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
      d6:	205c      	movs	r0, #92	; 0x5c
// FileImpl instances are automatically deleted when the last referencing
// File is closed or goes out of scope.  The refcount variable is meant to
// be maintained by File class instances, never access by FileImpl functions.
// The FileImpl functions are meant to be called only by use of File instances.
//
class FileImpl {
      d8:	2600      	movs	r6, #0
      da:	f00e f9b5 	bl	e448 <operator new(unsigned int)>
class Print
      de:	9b01      	ldr	r3, [sp, #4]
      e0:	4604      	mov	r4, r0
      e2:	6046      	str	r6, [r0, #4]
      e4:	60c3      	str	r3, [r0, #12]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
      e6:	a904      	add	r1, sp, #16
class Stream : public Print
      e8:	9b02      	ldr	r3, [sp, #8]
      ea:	3018      	adds	r0, #24
      ec:	f840 3c08 	str.w	r3, [r0, #-8]
      f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
      f4:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
      f8:	4b14      	ldr	r3, [pc, #80]	; (14c <SDFile::openNextFile(unsigned char)+0xa0>)
      fa:	f840 3c18 	str.w	r3, [r0, #-24]
      fe:	4b14      	ldr	r3, [pc, #80]	; (150 <SDFile::openNextFile(unsigned char)+0xa4>)
     100:	f840 3c10 	str.w	r3, [r0, #-16]
     104:	f009 faa4 	bl	9650 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	// Explicit FileImpl constructor.  Used by libraries which provide
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
     108:	4b12      	ldr	r3, [pc, #72]	; (154 <SDFile::openNextFile(unsigned char)+0xa8>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
     10a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     10e:	60a7      	str	r7, [r4, #8]
     110:	602b      	str	r3, [r5, #0]
		f = file;
		if (f) f->refcount++;
     112:	6863      	ldr	r3, [r4, #4]
     114:	65a6      	str	r6, [r4, #88]	; 0x58
     116:	3301      	adds	r3, #1
	constexpr Print() : write_error(0) {}
     118:	606e      	str	r6, [r5, #4]
     11a:	732e      	strb	r6, [r5, #12]
     11c:	60aa      	str	r2, [r5, #8]
		f = file;
     11e:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
     120:	6063      	str	r3, [r4, #4]
     122:	4b0d      	ldr	r3, [pc, #52]	; (158 <SDFile::openNextFile(unsigned char)+0xac>)
  ~FsBaseFile() {close();}
     124:	a804      	add	r0, sp, #16
     126:	9300      	str	r3, [sp, #0]
     128:	f009 fad4 	bl	96d4 <FsBaseFile::close()>
		return File();
	}
     12c:	4628      	mov	r0, r5
     12e:	b015      	add	sp, #84	; 0x54
     130:	bdf0      	pop	{r4, r5, r6, r7, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     132:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     134:	2b00      	cmp	r3, #0
     136:	d1ce      	bne.n	d6 <SDFile::openNextFile(unsigned char)+0x2a>
	constexpr File() : f(nullptr) { }
     138:	4a06      	ldr	r2, [pc, #24]	; (154 <SDFile::openNextFile(unsigned char)+0xa8>)
     13a:	732b      	strb	r3, [r5, #12]
     13c:	602a      	str	r2, [r5, #0]
     13e:	612b      	str	r3, [r5, #16]
     140:	e9c5 3401 	strd	r3, r4, [r5, #4]
     144:	e7ed      	b.n	122 <SDFile::openNextFile(unsigned char)+0x76>
     146:	bf00      	nop
     148:	2000148c 	.word	0x2000148c
     14c:	200014b0 	.word	0x200014b0
     150:	2000150c 	.word	0x2000150c
     154:	20001460 	.word	0x20001460
     158:	20001310 	.word	0x20001310

0000015c <SDFile::name()>:
	virtual const char * name() {
     15c:	b510      	push	{r4, lr}
     15e:	4604      	mov	r4, r0
		if (!filename) {
     160:	6d80      	ldr	r0, [r0, #88]	; 0x58
     162:	b100      	cbz	r0, 166 <SDFile::name()+0xa>
	}
     164:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     166:	f44f 7080 	mov.w	r0, #256	; 0x100
     16a:	f00f feeb 	bl	ff44 <malloc>
     16e:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
     170:	b1b0      	cbz	r0, 1a0 <SDFile::name()+0x44>
    *name = 0;
     172:	2200      	movs	r2, #0
    return m_fFile ? m_fFile->getName(name, len) :
     174:	6d23      	ldr	r3, [r4, #80]	; 0x50
    *name = 0;
     176:	7002      	strb	r2, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     178:	b13b      	cbz	r3, 18a <SDFile::name()+0x2e>
     17a:	4601      	mov	r1, r0
     17c:	f44f 7280 	mov.w	r2, #256	; 0x100
     180:	4618      	mov	r0, r3
     182:	f008 fef7 	bl	8f74 <FatFile::getName(char*, unsigned int)>
		return filename;
     186:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
     188:	bd10      	pop	{r4, pc}
     18a:	6d63      	ldr	r3, [r4, #84]	; 0x54
           m_xFile ? m_xFile->getName(name, len) : 0;
     18c:	2b00      	cmp	r3, #0
     18e:	d0e9      	beq.n	164 <SDFile::name()+0x8>
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     190:	4601      	mov	r1, r0
     192:	f44f 7280 	mov.w	r2, #256	; 0x100
     196:	4618      	mov	r0, r3
     198:	f006 fb9a 	bl	68d0 <ExFatFile::getName8(char*, unsigned int)>
		return filename;
     19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
     19e:	bd10      	pop	{r4, pc}
				filename = &zeroterm;
     1a0:	4b01      	ldr	r3, [pc, #4]	; (1a8 <SDFile::name()+0x4c>)
     1a2:	4618      	mov	r0, r3
     1a4:	65a3      	str	r3, [r4, #88]	; 0x58
	}
     1a6:	bd10      	pop	{r4, pc}
     1a8:	20004d54 	.word	0x20004d54

000001ac <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     1ac:	b538      	push	{r3, r4, r5, lr}
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     1ae:	6d05      	ldr	r5, [r0, #80]	; 0x50
     1b0:	b16d      	cbz	r5, 1ce <SDFile::truncate(unsigned long long)+0x22>
     1b2:	b10b      	cbz	r3, 1b8 <SDFile::truncate(unsigned long long)+0xc>
	}
     1b4:	2000      	movs	r0, #0
     1b6:	bd38      	pop	{r3, r4, r5, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     1b8:	4611      	mov	r1, r2
     1ba:	4628      	mov	r0, r5
     1bc:	f007 fc16 	bl	79ec <FatFile::seekSet(unsigned long)>
     1c0:	2800      	cmp	r0, #0
     1c2:	d0f7      	beq.n	1b4 <SDFile::truncate(unsigned long long)+0x8>
     1c4:	4628      	mov	r0, r5
     1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     1ca:	f007 bdb1 	b.w	7d30 <FatFile::truncate()>
     1ce:	6d44      	ldr	r4, [r0, #84]	; 0x54
           m_xFile ? m_xFile->truncate(length) : false;
     1d0:	2c00      	cmp	r4, #0
     1d2:	d0ef      	beq.n	1b4 <SDFile::truncate(unsigned long long)+0x8>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     1d4:	4620      	mov	r0, r4
     1d6:	f004 ffcd 	bl	5174 <ExFatFile::seekSet(unsigned long long)>
     1da:	2800      	cmp	r0, #0
     1dc:	d0ea      	beq.n	1b4 <SDFile::truncate(unsigned long long)+0x8>
     1de:	4620      	mov	r0, r4
     1e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     1e4:	f005 be40 	b.w	5e68 <ExFatFile::truncate()>

000001e8 <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     1e8:	798a      	ldrb	r2, [r1, #6]
     1ea:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     1ee:	061b      	lsls	r3, r3, #24
     1f0:	d422      	bmi.n	238 <SDFile::setModifyTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     1f2:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setModifyTime(const DateTimeFields &tm) {
     1f6:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     1f8:	794b      	ldrb	r3, [r1, #5]
	virtual bool setModifyTime(const DateTimeFields &tm) {
     1fa:	b085      	sub	sp, #20
    return m_fFile ?
     1fc:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     1fe:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     200:	790d      	ldrb	r5, [r1, #4]
     202:	788e      	ldrb	r6, [r1, #2]
     204:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     206:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     208:	7809      	ldrb	r1, [r1, #0]
     20a:	b14c      	cbz	r4, 220 <SDFile::setModifyTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     20c:	4620      	mov	r0, r4
     20e:	9601      	str	r6, [sp, #4]
     210:	9500      	str	r5, [sp, #0]
     212:	e9cd 7102 	strd	r7, r1, [sp, #8]
     216:	2104      	movs	r1, #4
     218:	f007 fd1e 	bl	7c58 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     21c:	b005      	add	sp, #20
     21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     220:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
     222:	2800      	cmp	r0, #0
     224:	d0fa      	beq.n	21c <SDFile::setModifyTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     226:	9601      	str	r6, [sp, #4]
     228:	9500      	str	r5, [sp, #0]
     22a:	e9cd 7102 	strd	r7, r1, [sp, #8]
     22e:	2104      	movs	r1, #4
     230:	f005 fd5e 	bl	5cf0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     234:	b005      	add	sp, #20
     236:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     238:	2000      	movs	r0, #0
	}
     23a:	4770      	bx	lr

0000023c <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     23c:	b510      	push	{r4, lr}
     23e:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
     240:	6d00      	ldr	r0, [r0, #80]	; 0x50
     242:	b180      	cbz	r0, 266 <SDFile::rewindDirectory()+0x2a>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     244:	7803      	ldrb	r3, [r0, #0]
     246:	f013 0f70 	tst.w	r3, #112	; 0x70
     24a:	d100      	bne.n	24e <SDFile::rewindDirectory()+0x12>
	}
     24c:	bd10      	pop	{r4, pc}
    seekSet(0);
     24e:	2100      	movs	r1, #0
     250:	f007 fbcc 	bl	79ec <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
     254:	6d60      	ldr	r0, [r4, #84]	; 0x54
     256:	2800      	cmp	r0, #0
     258:	d0f8      	beq.n	24c <SDFile::rewindDirectory()+0x10>
    seekSet(0);
     25a:	2200      	movs	r2, #0
     25c:	2300      	movs	r3, #0
     25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     262:	f004 bf87 	b.w	5174 <ExFatFile::seekSet(unsigned long long)>
     266:	6d60      	ldr	r0, [r4, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
     268:	2800      	cmp	r0, #0
     26a:	d0ef      	beq.n	24c <SDFile::rewindDirectory()+0x10>
     26c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
     270:	f013 0f50 	tst.w	r3, #80	; 0x50
     274:	d0ea      	beq.n	24c <SDFile::rewindDirectory()+0x10>
     276:	2200      	movs	r2, #0
     278:	2300      	movs	r3, #0
     27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     27e:	f004 bf79 	b.w	5174 <ExFatFile::seekSet(unsigned long long)>
			AudioOutputSPDIF::block_right_offset = offset;
		} else {
			AudioOutputSPDIF::block_right_offset = 0;
			AudioStream::release(block);
			AudioOutputSPDIF::block_right_1st = AudioOutputSPDIF::block_right_2nd;
			AudioOutputSPDIF::block_right_2nd = NULL;
     282:	bf00      	nop

00000284 <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
     284:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
     286:	b510      	push	{r4, lr}
     288:	460c      	mov	r4, r1
     28a:	b082      	sub	sp, #8
     28c:	b32b      	cbz	r3, 2da <SDFile::getModifyTime(DateTimeFields&)+0x56>
     28e:	f10d 0206 	add.w	r2, sp, #6
     292:	a901      	add	r1, sp, #4
     294:	4618      	mov	r0, r3
     296:	f006 ff4f 	bl	7138 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     29a:	b338      	cbz	r0, 2ec <SDFile::getModifyTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     29c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
     2a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     2a4:	ea53 0102 	orrs.w	r1, r3, r2
     2a8:	d020      	beq.n	2ec <SDFile::getModifyTime(DateTimeFields&)+0x68>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FS_MINUTE(uint16_t fatTime) {
  return (fatTime >> 5) & 0X3F;
     2aa:	f3c2 1c45 	ubfx	ip, r2, #5, #6
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
     2ae:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
     2b2:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     2b4:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
     2b8:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     2ba:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
     2be:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     2c0:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     2c2:	3901      	subs	r1, #1
  return fatDate & 0X1F;
     2c4:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     2c8:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     2cc:	7020      	strb	r0, [r4, #0]
		return true;
     2ce:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     2d0:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     2d2:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     2d4:	71a2      	strb	r2, [r4, #6]
	}
     2d6:	b002      	add	sp, #8
     2d8:	bd10      	pop	{r4, pc}
     2da:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
     2dc:	b130      	cbz	r0, 2ec <SDFile::getModifyTime(DateTimeFields&)+0x68>
     2de:	f10d 0206 	add.w	r2, sp, #6
     2e2:	a901      	add	r1, sp, #4
     2e4:	f004 fdec 	bl	4ec0 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     2e8:	2800      	cmp	r0, #0
     2ea:	d1d7      	bne.n	29c <SDFile::getModifyTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     2ec:	2000      	movs	r0, #0
	}
     2ee:	b002      	add	sp, #8
     2f0:	bd10      	pop	{r4, pc}
		digitalWriteFast(SPIRAM_CS_PIN, LOW);
		SPI.transfer16((0x02 << 8) | (addr >> 16));
		SPI.transfer16(addr & 0xFFFF);
		while (count) {
			int16_t w = 0;
			if (data) w = *data++;
     2f2:	bf00      	nop

000002f4 <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     2f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
     2f6:	b510      	push	{r4, lr}
     2f8:	460c      	mov	r4, r1
     2fa:	b082      	sub	sp, #8
     2fc:	b32b      	cbz	r3, 34a <SDFile::getCreateTime(DateTimeFields&)+0x56>
     2fe:	f10d 0206 	add.w	r2, sp, #6
     302:	a901      	add	r1, sp, #4
     304:	4618      	mov	r0, r3
     306:	f006 ff07 	bl	7118 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     30a:	b338      	cbz	r0, 35c <SDFile::getCreateTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     30c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
     310:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     314:	ea53 0102 	orrs.w	r1, r3, r2
     318:	d020      	beq.n	35c <SDFile::getCreateTime(DateTimeFields&)+0x68>
  return (fatTime >> 5) & 0X3F;
     31a:	f3c2 1c45 	ubfx	ip, r2, #5, #6
  return 2*(fatTime & 0X1F);
     31e:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
     322:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     324:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
     328:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     32a:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
     32e:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     330:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     332:	3901      	subs	r1, #1
  return fatDate & 0X1F;
     334:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     338:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     33c:	7020      	strb	r0, [r4, #0]
		return true;
     33e:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     340:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     342:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     344:	71a2      	strb	r2, [r4, #6]
	}
     346:	b002      	add	sp, #8
     348:	bd10      	pop	{r4, pc}
     34a:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     34c:	b130      	cbz	r0, 35c <SDFile::getCreateTime(DateTimeFields&)+0x68>
     34e:	f10d 0206 	add.w	r2, sp, #6
     352:	a901      	add	r1, sp, #4
     354:	f004 fda2 	bl	4e9c <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     358:	2800      	cmp	r0, #0
     35a:	d1d7      	bne.n	30c <SDFile::getCreateTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     35c:	2000      	movs	r0, #0
	}
     35e:	b002      	add	sp, #8
     360:	bd10      	pop	{r4, pc}
			ch4_offset = AUDIO_BLOCK_SAMPLES/2;
		} else {
			ch4_offset = 0;
			release(block_ch4_1st);
			block_ch4_1st = block_ch4_2nd;
			block_ch4_2nd = NULL;
     362:	bf00      	nop

00000364 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     364:	b169      	cbz	r1, 382 <Print::write(char const*) [clone .isra.0]+0x1e>
     366:	b570      	push	{r4, r5, r6, lr}
     368:	4605      	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
     36a:	4608      	mov	r0, r1
     36c:	460c      	mov	r4, r1
     36e:	f012 f8e7 	bl	12540 <strlen>
     372:	682b      	ldr	r3, [r5, #0]
     374:	4602      	mov	r2, r0
     376:	4621      	mov	r1, r4
     378:	4628      	mov	r0, r5
     37a:	685b      	ldr	r3, [r3, #4]
     37c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     380:	4718      	bx	r3
     382:	4770      	bx	lr

00000384 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
     384:	6903      	ldr	r3, [r0, #16]
     386:	b1d3      	cbz	r3, 3be <File::write(unsigned char const*, unsigned int)+0x3a>
     388:	480e      	ldr	r0, [pc, #56]	; (3c4 <File::write(unsigned char const*, unsigned int)+0x40>)
	virtual size_t write(const uint8_t *buf, size_t size) {
     38a:	b410      	push	{r4}
		return (f) ? f->write((void*)buf, size) : 0;
     38c:	681c      	ldr	r4, [r3, #0]
     38e:	68e4      	ldr	r4, [r4, #12]
     390:	4284      	cmp	r4, r0
     392:	d10f      	bne.n	3b4 <File::write(unsigned char const*, unsigned int)+0x30>
    return m_fFile ? m_fFile->write(buf, count) :
     394:	6d18      	ldr	r0, [r3, #80]	; 0x50
     396:	b118      	cbz	r0, 3a0 <File::write(unsigned char const*, unsigned int)+0x1c>
	}
     398:	f85d 4b04 	ldr.w	r4, [sp], #4
     39c:	f007 bd02 	b.w	7da4 <FatFile::write(void const*, unsigned int)>
     3a0:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
     3a2:	b118      	cbz	r0, 3ac <File::write(unsigned char const*, unsigned int)+0x28>
     3a4:	f85d 4b04 	ldr.w	r4, [sp], #4
     3a8:	f005 bdd0 	b.w	5f4c <ExFatFile::write(void const*, unsigned int)>
     3ac:	2000      	movs	r0, #0
     3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
     3b2:	4770      	bx	lr
		return (f) ? f->write((void*)buf, size) : 0;
     3b4:	4618      	mov	r0, r3
     3b6:	4623      	mov	r3, r4
	}
     3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
		return (f) ? f->write((void*)buf, size) : 0;
     3bc:	4718      	bx	r3
	}
     3be:	2000      	movs	r0, #0
     3c0:	4770      	bx	lr
     3c2:	bf00      	nop
     3c4:	000006dd 	.word	0x000006dd

000003c8 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
     3c8:	6900      	ldr	r0, [r0, #16]
     3ca:	b190      	cbz	r0, 3f2 <File::available()+0x2a>
     3cc:	6803      	ldr	r3, [r0, #0]
     3ce:	4a15      	ldr	r2, [pc, #84]	; (424 <File::available()+0x5c>)
     3d0:	691b      	ldr	r3, [r3, #16]
     3d2:	4293      	cmp	r3, r2
     3d4:	d125      	bne.n	422 <File::available()+0x5a>
    return m_fFile ? m_fFile->available() :
     3d6:	6d03      	ldr	r3, [r0, #80]	; 0x50
     3d8:	b163      	cbz	r3, 3f4 <File::available()+0x2c>
    return isFile() ? fileSize() - curPosition() : 0;
     3da:	7818      	ldrb	r0, [r3, #0]
     3dc:	f010 0008 	ands.w	r0, r0, #8
     3e0:	d007      	beq.n	3f2 <File::available()+0x2a>
     3e2:	69d8      	ldr	r0, [r3, #28]
     3e4:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     3e6:	1ac0      	subs	r0, r0, r3
     3e8:	bf48      	it	mi
     3ea:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     3ee:	4770      	bx	lr
     3f0:	4618      	mov	r0, r3
	}
     3f2:	4770      	bx	lr
     3f4:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
     3f6:	2b00      	cmp	r3, #0
     3f8:	d0fa      	beq.n	3f0 <File::available()+0x28>
    return isFile() ? fileSize() - curPosition() : 0;
     3fa:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     3fe:	f010 0008 	ands.w	r0, r0, #8
     402:	d0f6      	beq.n	3f2 <File::available()+0x2a>
     404:	6918      	ldr	r0, [r3, #16]
     406:	6819      	ldr	r1, [r3, #0]
     408:	695a      	ldr	r2, [r3, #20]
     40a:	1a40      	subs	r0, r0, r1
     40c:	685b      	ldr	r3, [r3, #4]
     40e:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     412:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     416:	f173 0300 	sbcs.w	r3, r3, #0
     41a:	d3ea      	bcc.n	3f2 <File::available()+0x2a>
     41c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     420:	4770      	bx	lr
		return (f) ? f->available() : 0;
     422:	4718      	bx	r3
     424:	00000631 	.word	0x00000631

00000428 <File::flush()>:
	int peek() {
		return (f) ? f->peek() : -1;
	}
	void flush() {
		if (f) f->flush();
     428:	6903      	ldr	r3, [r0, #16]
     42a:	b163      	cbz	r3, 446 <File::flush()+0x1e>
     42c:	681a      	ldr	r2, [r3, #0]
     42e:	4907      	ldr	r1, [pc, #28]	; (44c <File::flush()+0x24>)
     430:	6992      	ldr	r2, [r2, #24]
     432:	428a      	cmp	r2, r1
     434:	d108      	bne.n	448 <File::flush()+0x20>
    return m_fFile ? m_fFile->sync() :
     436:	6d18      	ldr	r0, [r3, #80]	; 0x50
     438:	b108      	cbz	r0, 43e <File::flush()+0x16>
     43a:	f007 bc07 	b.w	7c4c <FatFile::sync()>
     43e:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->sync() : false;
     440:	b108      	cbz	r0, 446 <File::flush()+0x1e>
     442:	f005 badf 	b.w	5a04 <ExFatFile::sync()>
	}
     446:	4770      	bx	lr
		if (f) f->flush();
     448:	4618      	mov	r0, r3
     44a:	4710      	bx	r2
     44c:	000005b5 	.word	0x000005b5

00000450 <File::peek()>:
		return (f) ? f->peek() : -1;
     450:	6903      	ldr	r3, [r0, #16]
     452:	b173      	cbz	r3, 472 <File::peek()+0x22>
     454:	681a      	ldr	r2, [r3, #0]
     456:	4908      	ldr	r1, [pc, #32]	; (478 <File::peek()+0x28>)
     458:	6952      	ldr	r2, [r2, #20]
     45a:	428a      	cmp	r2, r1
     45c:	d107      	bne.n	46e <File::peek()+0x1e>
    return m_fFile ? m_fFile->peek() :
     45e:	6d18      	ldr	r0, [r3, #80]	; 0x50
     460:	b108      	cbz	r0, 466 <File::peek()+0x16>
     462:	f007 b94f 	b.w	7704 <FatFile::peek()>
     466:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->peek() : -1;
     468:	b118      	cbz	r0, 472 <File::peek()+0x22>
     46a:	f004 be6d 	b.w	5148 <ExFatFile::peek()>
     46e:	4618      	mov	r0, r3
     470:	4710      	bx	r2
	}
     472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     476:	4770      	bx	lr
     478:	0000050d 	.word	0x0000050d

0000047c <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     47c:	6903      	ldr	r3, [r0, #16]
     47e:	b323      	cbz	r3, 4ca <File::read()+0x4e>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     480:	6819      	ldr	r1, [r3, #0]
     482:	4a13      	ldr	r2, [pc, #76]	; (4d0 <File::read()+0x54>)
	int read() {
     484:	b510      	push	{r4, lr}
		if (f->read(&b, 1) < 1) return -1;
     486:	688c      	ldr	r4, [r1, #8]
	int read() {
     488:	b082      	sub	sp, #8
     48a:	4294      	cmp	r4, r2
     48c:	d114      	bne.n	4b8 <File::read()+0x3c>
    return m_fFile ? m_fFile->read(buf, count) :
     48e:	6d18      	ldr	r0, [r3, #80]	; 0x50
     490:	b148      	cbz	r0, 4a6 <File::read()+0x2a>
     492:	2201      	movs	r2, #1
     494:	f10d 0107 	add.w	r1, sp, #7
     498:	f007 f860 	bl	755c <FatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
     49c:	b190      	cbz	r0, 4c4 <File::read()+0x48>
		return b;
     49e:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
     4a2:	b002      	add	sp, #8
     4a4:	bd10      	pop	{r4, pc}
     4a6:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
     4a8:	2800      	cmp	r0, #0
     4aa:	d0f8      	beq.n	49e <File::read()+0x22>
     4ac:	2201      	movs	r2, #1
     4ae:	f10d 0107 	add.w	r1, sp, #7
     4b2:	f004 fd79 	bl	4fa8 <ExFatFile::read(void*, unsigned int)>
     4b6:	e7f1      	b.n	49c <File::read()+0x20>
		if (f->read(&b, 1) < 1) return -1;
     4b8:	2201      	movs	r2, #1
     4ba:	f10d 0107 	add.w	r1, sp, #7
     4be:	4618      	mov	r0, r3
     4c0:	47a0      	blx	r4
     4c2:	e7eb      	b.n	49c <File::read()+0x20>
		if (!f) return -1;
     4c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4c8:	e7eb      	b.n	4a2 <File::read()+0x26>
     4ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
     4ce:	4770      	bx	lr
     4d0:	00000565 	.word	0x00000565

000004d4 <SDFile::position()>:
    return m_fFile ? m_fFile->curPosition() :
     4d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
     4d6:	b113      	cbz	r3, 4de <SDFile::position()+0xa>
     4d8:	6958      	ldr	r0, [r3, #20]
     4da:	2100      	movs	r1, #0
     4dc:	4770      	bx	lr
     4de:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
     4e0:	b113      	cbz	r3, 4e8 <SDFile::position()+0x14>
  uint64_t curPosition() const {return m_curPosition;}
     4e2:	e9d3 0100 	ldrd	r0, r1, [r3]
     4e6:	4770      	bx	lr
     4e8:	4618      	mov	r0, r3
     4ea:	4619      	mov	r1, r3
	}
     4ec:	4770      	bx	lr
					*(dest+7) = val;
					dest+=8;
					oldR = val;
				}
			#elif defined(AUDIO_PT8211_INTERPOLATION_CIC)
				for (int i=0; i< AUDIO_BLOCK_SAMPLES / 2; i++, offsetR++) {
     4ee:	bf00      	nop

000004f0 <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() :
     4f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
     4f2:	b113      	cbz	r3, 4fa <SDFile::size()+0xa>
     4f4:	69d8      	ldr	r0, [r3, #28]
     4f6:	2100      	movs	r1, #0
     4f8:	4770      	bx	lr
     4fa:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
     4fc:	b113      	cbz	r3, 504 <SDFile::size()+0x14>
  uint64_t fileSize() const {return m_validLength;}
     4fe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
     502:	4770      	bx	lr
     504:	4618      	mov	r0, r3
     506:	4619      	mov	r1, r3
	}
     508:	4770      	bx	lr
			memcpy_tointerleaveR(dest, blockR->data + offsetR);
			offsetR += AUDIO_BLOCK_SAMPLES / 2;
		#endif //defined(AUDIO_PT8211_OVERSAMPLING)
	} else {
		#if defined(AUDIO_PT8211_OVERSAMPLING)
			memset(dest,0,AUDIO_BLOCK_SAMPLES*8);
     50a:	bf00      	nop

0000050c <SDFile::peek()>:
    return m_fFile ? m_fFile->peek() :
     50c:	6d03      	ldr	r3, [r0, #80]	; 0x50
     50e:	b113      	cbz	r3, 516 <SDFile::peek()+0xa>
     510:	4618      	mov	r0, r3
     512:	f007 b8f7 	b.w	7704 <FatFile::peek()>
     516:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->peek() : -1;
     518:	b108      	cbz	r0, 51e <SDFile::peek()+0x12>
     51a:	f004 be15 	b.w	5148 <ExFatFile::peek()>
	}
     51e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     522:	4770      	bx	lr

00000524 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     524:	6c83      	ldr	r3, [r0, #72]	; 0x48
     526:	b113      	cbz	r3, 52e <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     528:	4618      	mov	r0, r3
     52a:	f007 b8eb 	b.w	7704 <FatFile::peek()>
     52e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     530:	b108      	cbz	r0, 536 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     532:	f004 be09 	b.w	5148 <ExFatFile::peek()>
  }
     536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     53a:	4770      	bx	lr

0000053c <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
     53c:	6d03      	ldr	r3, [r0, #80]	; 0x50
     53e:	b133      	cbz	r3, 54e <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     540:	781b      	ldrb	r3, [r3, #0]
     542:	f013 0f70 	tst.w	r3, #112	; 0x70
     546:	bf14      	ite	ne
     548:	2001      	movne	r0, #1
     54a:	2000      	moveq	r0, #0
     54c:	4770      	bx	lr
     54e:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
     550:	b130      	cbz	r0, 560 <SDFile::isDirectory()+0x24>
     552:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
     556:	f013 0f50 	tst.w	r3, #80	; 0x50
     55a:	bf14      	ite	ne
     55c:	2001      	movne	r0, #1
     55e:	2000      	moveq	r0, #0
	}
     560:	4770      	bx	lr
     562:	bf00      	nop

00000564 <SDFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     564:	6d03      	ldr	r3, [r0, #80]	; 0x50
     566:	b113      	cbz	r3, 56e <SDFile::read(void*, unsigned int)+0xa>
     568:	4618      	mov	r0, r3
     56a:	f006 bff7 	b.w	755c <FatFile::read(void*, unsigned int)>
     56e:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
     570:	b108      	cbz	r0, 576 <SDFile::read(void*, unsigned int)+0x12>
     572:	f004 bd19 	b.w	4fa8 <ExFatFile::read(void*, unsigned int)>
	}
     576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     57a:	4770      	bx	lr

0000057c <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
     57c:	6c83      	ldr	r3, [r0, #72]	; 0x48
  int read() {
     57e:	b500      	push	{lr}
     580:	b083      	sub	sp, #12
     582:	b163      	cbz	r3, 59e <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     584:	2201      	movs	r2, #1
     586:	f10d 0107 	add.w	r1, sp, #7
     58a:	4618      	mov	r0, r3
     58c:	f006 ffe6 	bl	755c <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     590:	2801      	cmp	r0, #1
     592:	d10c      	bne.n	5ae <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     594:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     598:	b003      	add	sp, #12
     59a:	f85d fb04 	ldr.w	pc, [sp], #4
     59e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     5a0:	b128      	cbz	r0, 5ae <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     5a2:	2201      	movs	r2, #1
     5a4:	f10d 0107 	add.w	r1, sp, #7
     5a8:	f004 fcfe 	bl	4fa8 <ExFatFile::read(void*, unsigned int)>
     5ac:	e7f0      	b.n	590 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     5ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     5b2:	e7f1      	b.n	598 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

000005b4 <SDFile::flush()>:
    return m_fFile ? m_fFile->sync() :
     5b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
     5b6:	b113      	cbz	r3, 5be <SDFile::flush()+0xa>
     5b8:	4618      	mov	r0, r3
     5ba:	f007 bb47 	b.w	7c4c <FatFile::sync()>
     5be:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->sync() : false;
     5c0:	b108      	cbz	r0, 5c6 <SDFile::flush()+0x12>
     5c2:	f005 ba1f 	b.w	5a04 <ExFatFile::sync()>
	}
     5c6:	4770      	bx	lr

000005c8 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
     5c8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     5ca:	b113      	cbz	r3, 5d2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     5cc:	4618      	mov	r0, r3
     5ce:	f007 bb3d 	b.w	7c4c <FatFile::sync()>
     5d2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
     5d4:	b108      	cbz	r0, 5da <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     5d6:	f005 ba15 	b.w	5a04 <ExFatFile::sync()>
  }
     5da:	4770      	bx	lr

000005dc <SDFile::setCreateTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
     5dc:	798a      	ldrb	r2, [r1, #6]
     5de:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     5e2:	061b      	lsls	r3, r3, #24
     5e4:	d422      	bmi.n	62c <SDFile::setCreateTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     5e6:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
     5ea:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     5ec:	794b      	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
     5ee:	b085      	sub	sp, #20
    return m_fFile ?
     5f0:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     5f2:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     5f4:	790d      	ldrb	r5, [r1, #4]
     5f6:	788e      	ldrb	r6, [r1, #2]
     5f8:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     5fa:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     5fc:	7809      	ldrb	r1, [r1, #0]
     5fe:	b14c      	cbz	r4, 614 <SDFile::setCreateTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     600:	4620      	mov	r0, r4
     602:	9601      	str	r6, [sp, #4]
     604:	9500      	str	r5, [sp, #0]
     606:	e9cd 7102 	strd	r7, r1, [sp, #8]
     60a:	2102      	movs	r1, #2
     60c:	f007 fb24 	bl	7c58 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     610:	b005      	add	sp, #20
     612:	bdf0      	pop	{r4, r5, r6, r7, pc}
     614:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
     616:	2800      	cmp	r0, #0
     618:	d0fa      	beq.n	610 <SDFile::setCreateTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     61a:	9601      	str	r6, [sp, #4]
     61c:	9500      	str	r5, [sp, #0]
     61e:	e9cd 7102 	strd	r7, r1, [sp, #8]
     622:	2102      	movs	r1, #2
     624:	f005 fb64 	bl	5cf0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     628:	b005      	add	sp, #20
     62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     62c:	2000      	movs	r0, #0
	}
     62e:	4770      	bx	lr

00000630 <SDFile::available()>:
    return m_fFile ? m_fFile->available() :
     630:	6d03      	ldr	r3, [r0, #80]	; 0x50
     632:	b153      	cbz	r3, 64a <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     634:	7818      	ldrb	r0, [r3, #0]
     636:	f010 0008 	ands.w	r0, r0, #8
     63a:	d00d      	beq.n	658 <SDFile::available()+0x28>
     63c:	69d8      	ldr	r0, [r3, #28]
     63e:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     640:	1ac0      	subs	r0, r0, r3
     642:	bf48      	it	mi
     644:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     648:	4770      	bx	lr
     64a:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
     64c:	b1a3      	cbz	r3, 678 <SDFile::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
     64e:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     652:	f010 0008 	ands.w	r0, r0, #8
     656:	d100      	bne.n	65a <SDFile::available()+0x2a>
	}
     658:	4770      	bx	lr
     65a:	6918      	ldr	r0, [r3, #16]
     65c:	6819      	ldr	r1, [r3, #0]
     65e:	695a      	ldr	r2, [r3, #20]
     660:	1a40      	subs	r0, r0, r1
     662:	685b      	ldr	r3, [r3, #4]
     664:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     668:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     66c:	f173 0300 	sbcs.w	r3, r3, #0
     670:	d3f2      	bcc.n	658 <SDFile::available()+0x28>
     672:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     676:	4770      	bx	lr
     678:	4618      	mov	r0, r3
		return sdfatfile.available();
     67a:	e7ed      	b.n	658 <SDFile::available()+0x28>

0000067c <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     67c:	6c83      	ldr	r3, [r0, #72]	; 0x48
     67e:	b153      	cbz	r3, 696 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     680:	7818      	ldrb	r0, [r3, #0]
     682:	f010 0008 	ands.w	r0, r0, #8
     686:	d00d      	beq.n	6a4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     688:	69d8      	ldr	r0, [r3, #28]
     68a:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     68c:	1ac0      	subs	r0, r0, r3
     68e:	bf48      	it	mi
     690:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     694:	4770      	bx	lr
     696:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     698:	b1a3      	cbz	r3, 6c4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
     69a:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     69e:	f010 0008 	ands.w	r0, r0, #8
     6a2:	d100      	bne.n	6a6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     6a4:	4770      	bx	lr
     6a6:	6918      	ldr	r0, [r3, #16]
     6a8:	6819      	ldr	r1, [r3, #0]
     6aa:	695a      	ldr	r2, [r3, #20]
     6ac:	1a40      	subs	r0, r0, r1
     6ae:	685b      	ldr	r3, [r3, #4]
     6b0:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     6b4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     6b8:	f173 0300 	sbcs.w	r3, r3, #0
     6bc:	d3f2      	bcc.n	6a4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     6be:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     6c2:	4770      	bx	lr
     6c4:	4618      	mov	r0, r3
    return BaseFile::available();
     6c6:	e7ed      	b.n	6a4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

000006c8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     6c8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     6ca:	b113      	cbz	r3, 6d2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     6cc:	4618      	mov	r0, r3
     6ce:	f007 bb69 	b.w	7da4 <FatFile::write(void const*, unsigned int)>
     6d2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     6d4:	b108      	cbz	r0, 6da <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     6d6:	f005 bc39 	b.w	5f4c <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     6da:	4770      	bx	lr

000006dc <SDFile::write(void const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     6dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
     6de:	b113      	cbz	r3, 6e6 <SDFile::write(void const*, unsigned int)+0xa>
     6e0:	4618      	mov	r0, r3
     6e2:	f007 bb5f 	b.w	7da4 <FatFile::write(void const*, unsigned int)>
     6e6:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
     6e8:	b108      	cbz	r0, 6ee <SDFile::write(void const*, unsigned int)+0x12>
     6ea:	f005 bc2f 	b.w	5f4c <ExFatFile::write(void const*, unsigned int)>
	}
     6ee:	4770      	bx	lr

000006f0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     6f0:	b500      	push	{lr}
    return m_fFile ? m_fFile->write(buf, count) :
     6f2:	6c83      	ldr	r3, [r0, #72]	; 0x48
     6f4:	b083      	sub	sp, #12
     6f6:	f88d 1007 	strb.w	r1, [sp, #7]
     6fa:	b143      	cbz	r3, 70e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     6fc:	2201      	movs	r2, #1
     6fe:	f10d 0107 	add.w	r1, sp, #7
     702:	4618      	mov	r0, r3
     704:	f007 fb4e 	bl	7da4 <FatFile::write(void const*, unsigned int)>
  }
     708:	b003      	add	sp, #12
     70a:	f85d fb04 	ldr.w	pc, [sp], #4
     70e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     710:	2800      	cmp	r0, #0
     712:	d0f9      	beq.n	708 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     714:	2201      	movs	r2, #1
     716:	f10d 0107 	add.w	r1, sp, #7
     71a:	f005 fc17 	bl	5f4c <ExFatFile::write(void const*, unsigned int)>
     71e:	b003      	add	sp, #12
     720:	f85d fb04 	ldr.w	pc, [sp], #4

00000724 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     724:	b538      	push	{r3, r4, r5, lr}
     726:	4604      	mov	r4, r0
     728:	4b0c      	ldr	r3, [pc, #48]	; (75c <SDFile::~SDFile()+0x38>)
		if (filename) {
     72a:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     72c:	6023      	str	r3, [r4, #0]
		if (filename) {
     72e:	b118      	cbz	r0, 738 <SDFile::~SDFile()+0x14>
			free(filename);
     730:	f00f fc10 	bl	ff54 <free>
			filename = nullptr;
     734:	2300      	movs	r3, #0
     736:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     738:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     73a:	f104 0518 	add.w	r5, r4, #24
     73e:	b14b      	cbz	r3, 754 <SDFile::~SDFile()+0x30>
     740:	4628      	mov	r0, r5
     742:	f008 ffc7 	bl	96d4 <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
     746:	4b06      	ldr	r3, [pc, #24]	; (760 <SDFile::~SDFile()+0x3c>)
  ~FsBaseFile() {close();}
     748:	4628      	mov	r0, r5
     74a:	60a3      	str	r3, [r4, #8]
     74c:	f008 ffc2 	bl	96d4 <FsBaseFile::close()>
	}
     750:	4620      	mov	r0, r4
     752:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     754:	6d63      	ldr	r3, [r4, #84]	; 0x54
     756:	2b00      	cmp	r3, #0
     758:	d1f2      	bne.n	740 <SDFile::~SDFile()+0x1c>
     75a:	e7f4      	b.n	746 <SDFile::~SDFile()+0x22>
     75c:	200014b0 	.word	0x200014b0
     760:	20001310 	.word	0x20001310

00000764 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     764:	b538      	push	{r3, r4, r5, lr}
     766:	4604      	mov	r4, r0
     768:	4b0e      	ldr	r3, [pc, #56]	; (7a4 <SDFile::~SDFile()+0x40>)
		if (filename) {
     76a:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     76c:	6023      	str	r3, [r4, #0]
		if (filename) {
     76e:	b118      	cbz	r0, 778 <SDFile::~SDFile()+0x14>
			free(filename);
     770:	f00f fbf0 	bl	ff54 <free>
			filename = nullptr;
     774:	2300      	movs	r3, #0
     776:	65a3      	str	r3, [r4, #88]	; 0x58
     778:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     77a:	f104 0518 	add.w	r5, r4, #24
     77e:	b16b      	cbz	r3, 79c <SDFile::~SDFile()+0x38>
     780:	4628      	mov	r0, r5
     782:	f008 ffa7 	bl	96d4 <FsBaseFile::close()>
     786:	4b08      	ldr	r3, [pc, #32]	; (7a8 <SDFile::~SDFile()+0x44>)
  ~FsBaseFile() {close();}
     788:	4628      	mov	r0, r5
     78a:	60a3      	str	r3, [r4, #8]
     78c:	f008 ffa2 	bl	96d4 <FsBaseFile::close()>
	}
     790:	4620      	mov	r0, r4
     792:	215c      	movs	r1, #92	; 0x5c
     794:	f00d fe5a 	bl	e44c <operator delete(void*, unsigned int)>
     798:	4620      	mov	r0, r4
     79a:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     79c:	6d63      	ldr	r3, [r4, #84]	; 0x54
     79e:	2b00      	cmp	r3, #0
     7a0:	d1ee      	bne.n	780 <SDFile::~SDFile()+0x1c>
     7a2:	e7f0      	b.n	786 <SDFile::~SDFile()+0x22>
     7a4:	200014b0 	.word	0x200014b0
     7a8:	20001310 	.word	0x20001310

000007ac <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     7ac:	b500      	push	{lr}
		return (f) ? f->write(&b, 1) : 0;
     7ae:	6900      	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
     7b0:	b083      	sub	sp, #12
     7b2:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
     7b6:	b160      	cbz	r0, 7d2 <File::write(unsigned char)+0x26>
     7b8:	6803      	ldr	r3, [r0, #0]
     7ba:	4a10      	ldr	r2, [pc, #64]	; (7fc <File::write(unsigned char)+0x50>)
     7bc:	68db      	ldr	r3, [r3, #12]
     7be:	4293      	cmp	r3, r2
     7c0:	d115      	bne.n	7ee <File::write(unsigned char)+0x42>
    return m_fFile ? m_fFile->write(buf, count) :
     7c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
     7c4:	b143      	cbz	r3, 7d8 <File::write(unsigned char)+0x2c>
     7c6:	2201      	movs	r2, #1
     7c8:	f10d 0107 	add.w	r1, sp, #7
     7cc:	4618      	mov	r0, r3
     7ce:	f007 fae9 	bl	7da4 <FatFile::write(void const*, unsigned int)>
	}
     7d2:	b003      	add	sp, #12
     7d4:	f85d fb04 	ldr.w	pc, [sp], #4
     7d8:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
     7da:	2800      	cmp	r0, #0
     7dc:	d0f9      	beq.n	7d2 <File::write(unsigned char)+0x26>
     7de:	2201      	movs	r2, #1
     7e0:	f10d 0107 	add.w	r1, sp, #7
     7e4:	f005 fbb2 	bl	5f4c <ExFatFile::write(void const*, unsigned int)>
     7e8:	b003      	add	sp, #12
     7ea:	f85d fb04 	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
     7ee:	2201      	movs	r2, #1
     7f0:	f10d 0107 	add.w	r1, sp, #7
     7f4:	4798      	blx	r3
	}
     7f6:	b003      	add	sp, #12
     7f8:	f85d fb04 	ldr.w	pc, [sp], #4
     7fc:	000006dd 	.word	0x000006dd

00000800 <File::~File()>:
	virtual ~File() {
     800:	b570      	push	{r4, r5, r6, lr}
     802:	4b26      	ldr	r3, [pc, #152]	; (89c <File::~File()+0x9c>)
     804:	4604      	mov	r4, r0
		if (f) dec_refcount();
     806:	6905      	ldr	r5, [r0, #16]
	virtual ~File() {
     808:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     80a:	2d00      	cmp	r5, #0
     80c:	d032      	beq.n	874 <File::~File()+0x74>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     80e:	686e      	ldr	r6, [r5, #4]
     810:	3e01      	subs	r6, #1
     812:	606e      	str	r6, [r5, #4]
     814:	bb76      	cbnz	r6, 874 <File::~File()+0x74>
			f->close();
     816:	682b      	ldr	r3, [r5, #0]
     818:	4a21      	ldr	r2, [pc, #132]	; (8a0 <File::~File()+0xa0>)
     81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     81c:	4293      	cmp	r3, r2
     81e:	d133      	bne.n	888 <File::~File()+0x88>
		if (filename) {
     820:	6da8      	ldr	r0, [r5, #88]	; 0x58
     822:	b110      	cbz	r0, 82a <File::~File()+0x2a>
			free(filename);
     824:	f00f fb96 	bl	ff54 <free>
			filename = nullptr;
     828:	65ae      	str	r6, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     82a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
     82c:	b343      	cbz	r3, 880 <File::~File()+0x80>
			sdfatfile.close();
     82e:	f105 0018 	add.w	r0, r5, #24
     832:	f008 ff4f 	bl	96d4 <FsBaseFile::close()>
			delete f;
     836:	6925      	ldr	r5, [r4, #16]
     838:	b1e5      	cbz	r5, 874 <File::~File()+0x74>
     83a:	682b      	ldr	r3, [r5, #0]
     83c:	4a19      	ldr	r2, [pc, #100]	; (8a4 <File::~File()+0xa4>)
     83e:	685b      	ldr	r3, [r3, #4]
     840:	4293      	cmp	r3, r2
     842:	d128      	bne.n	896 <File::~File()+0x96>
	virtual ~SDFile(void) {
     844:	4b18      	ldr	r3, [pc, #96]	; (8a8 <File::~File()+0xa8>)
		if (filename) {
     846:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     848:	602b      	str	r3, [r5, #0]
		if (filename) {
     84a:	b118      	cbz	r0, 854 <File::~File()+0x54>
			free(filename);
     84c:	f00f fb82 	bl	ff54 <free>
			filename = nullptr;
     850:	2300      	movs	r3, #0
     852:	65ab      	str	r3, [r5, #88]	; 0x58
     854:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     856:	f105 0618 	add.w	r6, r5, #24
     85a:	b1c3      	cbz	r3, 88e <File::~File()+0x8e>
     85c:	4630      	mov	r0, r6
     85e:	f008 ff39 	bl	96d4 <FsBaseFile::close()>
     862:	4b12      	ldr	r3, [pc, #72]	; (8ac <File::~File()+0xac>)
  ~FsBaseFile() {close();}
     864:	4630      	mov	r0, r6
     866:	60ab      	str	r3, [r5, #8]
     868:	f008 ff34 	bl	96d4 <FsBaseFile::close()>
	}
     86c:	215c      	movs	r1, #92	; 0x5c
     86e:	4628      	mov	r0, r5
     870:	f00d fdec 	bl	e44c <operator delete(void*, unsigned int)>
	}
     874:	4620      	mov	r0, r4
     876:	2114      	movs	r1, #20
     878:	f00d fde8 	bl	e44c <operator delete(void*, unsigned int)>
     87c:	4620      	mov	r0, r4
     87e:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     880:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     882:	2b00      	cmp	r3, #0
     884:	d1d3      	bne.n	82e <File::~File()+0x2e>
     886:	e7d6      	b.n	836 <File::~File()+0x36>
			f->close();
     888:	4628      	mov	r0, r5
     88a:	4798      	blx	r3
     88c:	e7d3      	b.n	836 <File::~File()+0x36>
     88e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     890:	2b00      	cmp	r3, #0
     892:	d1e3      	bne.n	85c <File::~File()+0x5c>
     894:	e7e5      	b.n	862 <File::~File()+0x62>
			delete f;
     896:	4628      	mov	r0, r5
     898:	4798      	blx	r3
     89a:	e7eb      	b.n	874 <File::~File()+0x74>
     89c:	20001460 	.word	0x20001460
     8a0:	00000085 	.word	0x00000085
     8a4:	00000765 	.word	0x00000765
     8a8:	200014b0 	.word	0x200014b0
     8ac:	20001310 	.word	0x20001310

000008b0 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     8b0:	b430      	push	{r4, r5}
     8b2:	9c02      	ldr	r4, [sp, #8]
     8b4:	4611      	mov	r1, r2
     8b6:	469c      	mov	ip, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     8b8:	b134      	cbz	r4, 8c8 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     8ba:	2c01      	cmp	r4, #1
     8bc:	d01c      	beq.n	8f8 <SDFile::seek(unsigned long long, int)+0x48>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     8be:	2c02      	cmp	r4, #2
     8c0:	d00e      	beq.n	8e0 <SDFile::seek(unsigned long long, int)+0x30>
	}
     8c2:	2000      	movs	r0, #0
     8c4:	bc30      	pop	{r4, r5}
     8c6:	4770      	bx	lr
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     8c8:	6d05      	ldr	r5, [r0, #80]	; 0x50
     8ca:	b1f5      	cbz	r5, 90a <SDFile::seek(unsigned long long, int)+0x5a>
     8cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     8d0:	4293      	cmp	r3, r2
     8d2:	eb74 040c 	sbcs.w	r4, r4, ip
     8d6:	d3f4      	bcc.n	8c2 <SDFile::seek(unsigned long long, int)+0x12>
     8d8:	4628      	mov	r0, r5
     8da:	bc30      	pop	{r4, r5}
     8dc:	f007 b886 	b.w	79ec <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->fileSize() :
     8e0:	6d02      	ldr	r2, [r0, #80]	; 0x50
     8e2:	b30a      	cbz	r2, 928 <SDFile::seek(unsigned long long, int)+0x78>
     8e4:	69d3      	ldr	r3, [r2, #28]
    return seekSet(fileSize() + offset);
     8e6:	1859      	adds	r1, r3, r1
     8e8:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     8ec:	2b00      	cmp	r3, #0
     8ee:	d1e8      	bne.n	8c2 <SDFile::seek(unsigned long long, int)+0x12>
     8f0:	4610      	mov	r0, r2
     8f2:	bc30      	pop	{r4, r5}
     8f4:	f007 b87a 	b.w	79ec <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->curPosition() :
     8f8:	6d02      	ldr	r2, [r0, #80]	; 0x50
     8fa:	b162      	cbz	r2, 916 <SDFile::seek(unsigned long long, int)+0x66>
     8fc:	6953      	ldr	r3, [r2, #20]
    return seekSet(curPosition() + offset);
     8fe:	1859      	adds	r1, r3, r1
     900:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     904:	2b00      	cmp	r3, #0
     906:	d1dc      	bne.n	8c2 <SDFile::seek(unsigned long long, int)+0x12>
     908:	e7f2      	b.n	8f0 <SDFile::seek(unsigned long long, int)+0x40>
     90a:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->seekSet(pos) : false;
     90c:	2800      	cmp	r0, #0
     90e:	d0d8      	beq.n	8c2 <SDFile::seek(unsigned long long, int)+0x12>
     910:	bc30      	pop	{r4, r5}
     912:	f004 bc2f 	b.w	5174 <ExFatFile::seekSet(unsigned long long)>
     916:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
     918:	2800      	cmp	r0, #0
     91a:	d0d2      	beq.n	8c2 <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(curPosition() + offset);
     91c:	e9d0 2300 	ldrd	r2, r3, [r0]
     920:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
     922:	eb4c 0303 	adc.w	r3, ip, r3
     926:	e7f3      	b.n	910 <SDFile::seek(unsigned long long, int)+0x60>
     928:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
     92a:	2800      	cmp	r0, #0
     92c:	d0c9      	beq.n	8c2 <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(fileSize() + offset);
     92e:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
     932:	bc30      	pop	{r4, r5}
     934:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
     936:	eb4c 0303 	adc.w	r3, ip, r3
     93a:	f004 bc1b 	b.w	5174 <ExFatFile::seekSet(unsigned long long)>
     93e:	bf00      	nop

00000940 <File::~File()>:
	virtual ~File() {
     940:	b570      	push	{r4, r5, r6, lr}
     942:	4b24      	ldr	r3, [pc, #144]	; (9d4 <File::~File()+0x94>)
     944:	4604      	mov	r4, r0
		if (f) dec_refcount();
     946:	6905      	ldr	r5, [r0, #16]
	virtual ~File() {
     948:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     94a:	2d00      	cmp	r5, #0
     94c:	d032      	beq.n	9b4 <File::~File()+0x74>
		if (--(f->refcount) == 0) {
     94e:	686e      	ldr	r6, [r5, #4]
     950:	3e01      	subs	r6, #1
     952:	606e      	str	r6, [r5, #4]
     954:	bb76      	cbnz	r6, 9b4 <File::~File()+0x74>
			f->close();
     956:	682b      	ldr	r3, [r5, #0]
     958:	4a1f      	ldr	r2, [pc, #124]	; (9d8 <File::~File()+0x98>)
     95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     95c:	4293      	cmp	r3, r2
     95e:	d12f      	bne.n	9c0 <File::~File()+0x80>
		if (filename) {
     960:	6da8      	ldr	r0, [r5, #88]	; 0x58
     962:	b110      	cbz	r0, 96a <File::~File()+0x2a>
			free(filename);
     964:	f00f faf6 	bl	ff54 <free>
			filename = nullptr;
     968:	65ae      	str	r6, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     96a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
     96c:	b323      	cbz	r3, 9b8 <File::~File()+0x78>
			sdfatfile.close();
     96e:	f105 0018 	add.w	r0, r5, #24
     972:	f008 feaf 	bl	96d4 <FsBaseFile::close()>
			delete f;
     976:	6925      	ldr	r5, [r4, #16]
     978:	b1e5      	cbz	r5, 9b4 <File::~File()+0x74>
     97a:	682b      	ldr	r3, [r5, #0]
     97c:	4a17      	ldr	r2, [pc, #92]	; (9dc <File::~File()+0x9c>)
     97e:	685b      	ldr	r3, [r3, #4]
     980:	4293      	cmp	r3, r2
     982:	d124      	bne.n	9ce <File::~File()+0x8e>
	virtual ~SDFile(void) {
     984:	4b16      	ldr	r3, [pc, #88]	; (9e0 <File::~File()+0xa0>)
		if (filename) {
     986:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     988:	602b      	str	r3, [r5, #0]
		if (filename) {
     98a:	b118      	cbz	r0, 994 <File::~File()+0x54>
			free(filename);
     98c:	f00f fae2 	bl	ff54 <free>
			filename = nullptr;
     990:	2300      	movs	r3, #0
     992:	65ab      	str	r3, [r5, #88]	; 0x58
     994:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     996:	f105 0618 	add.w	r6, r5, #24
     99a:	b1a3      	cbz	r3, 9c6 <File::~File()+0x86>
     99c:	4630      	mov	r0, r6
     99e:	f008 fe99 	bl	96d4 <FsBaseFile::close()>
     9a2:	4b10      	ldr	r3, [pc, #64]	; (9e4 <File::~File()+0xa4>)
  ~FsBaseFile() {close();}
     9a4:	4630      	mov	r0, r6
     9a6:	60ab      	str	r3, [r5, #8]
     9a8:	f008 fe94 	bl	96d4 <FsBaseFile::close()>
	}
     9ac:	215c      	movs	r1, #92	; 0x5c
     9ae:	4628      	mov	r0, r5
     9b0:	f00d fd4c 	bl	e44c <operator delete(void*, unsigned int)>
	}
     9b4:	4620      	mov	r0, r4
     9b6:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     9b8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     9ba:	2b00      	cmp	r3, #0
     9bc:	d1d7      	bne.n	96e <File::~File()+0x2e>
     9be:	e7da      	b.n	976 <File::~File()+0x36>
			f->close();
     9c0:	4628      	mov	r0, r5
     9c2:	4798      	blx	r3
     9c4:	e7d7      	b.n	976 <File::~File()+0x36>
     9c6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     9c8:	2b00      	cmp	r3, #0
     9ca:	d1e7      	bne.n	99c <File::~File()+0x5c>
     9cc:	e7e9      	b.n	9a2 <File::~File()+0x62>
			delete f;
     9ce:	4628      	mov	r0, r5
     9d0:	4798      	blx	r3
     9d2:	e7ef      	b.n	9b4 <File::~File()+0x74>
     9d4:	20001460 	.word	0x20001460
     9d8:	00000085 	.word	0x00000085
     9dc:	00000765 	.word	0x00000765
     9e0:	200014b0 	.word	0x200014b0
     9e4:	20001310 	.word	0x20001310

000009e8 <AudioPlaySdWav::~AudioPlaySdWav()>:

#include <Arduino.h>     // github.com/PaulStoffregen/cores/blob/master/teensy4/Arduino.h
#include <AudioStream.h> // github.com/PaulStoffregen/cores/blob/master/teensy4/AudioStream.h
#include <SD.h>          // github.com/PaulStoffregen/SD/blob/Juse_Use_SdFat/src/SD.h

class AudioPlaySdWav : public AudioStream
     9e8:	b570      	push	{r4, r5, r6, lr}
     9ea:	4a25      	ldr	r2, [pc, #148]	; (a80 <AudioPlaySdWav::~AudioPlaySdWav()+0x98>)
     9ec:	4604      	mov	r4, r0
	virtual ~File() {
     9ee:	4b25      	ldr	r3, [pc, #148]	; (a84 <AudioPlaySdWav::~AudioPlaySdWav()+0x9c>)
		if (f) dec_refcount();
     9f0:	6a85      	ldr	r5, [r0, #40]	; 0x28
     9f2:	6002      	str	r2, [r0, #0]
	virtual ~File() {
     9f4:	6183      	str	r3, [r0, #24]
		if (f) dec_refcount();
     9f6:	2d00      	cmp	r5, #0
     9f8:	d032      	beq.n	a60 <AudioPlaySdWav::~AudioPlaySdWav()+0x78>
		if (--(f->refcount) == 0) {
     9fa:	686e      	ldr	r6, [r5, #4]
     9fc:	3e01      	subs	r6, #1
     9fe:	606e      	str	r6, [r5, #4]
     a00:	bb76      	cbnz	r6, a60 <AudioPlaySdWav::~AudioPlaySdWav()+0x78>
			f->close();
     a02:	682b      	ldr	r3, [r5, #0]
     a04:	4a20      	ldr	r2, [pc, #128]	; (a88 <AudioPlaySdWav::~AudioPlaySdWav()+0xa0>)
     a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     a08:	4293      	cmp	r3, r2
     a0a:	d12f      	bne.n	a6c <AudioPlaySdWav::~AudioPlaySdWav()+0x84>
		if (filename) {
     a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
     a0e:	b110      	cbz	r0, a16 <AudioPlaySdWav::~AudioPlaySdWav()+0x2e>
			free(filename);
     a10:	f00f faa0 	bl	ff54 <free>
			filename = nullptr;
     a14:	65ae      	str	r6, [r5, #88]	; 0x58
     a16:	6d2b      	ldr	r3, [r5, #80]	; 0x50
     a18:	b323      	cbz	r3, a64 <AudioPlaySdWav::~AudioPlaySdWav()+0x7c>
			sdfatfile.close();
     a1a:	f105 0018 	add.w	r0, r5, #24
     a1e:	f008 fe59 	bl	96d4 <FsBaseFile::close()>
			delete f;
     a22:	6aa5      	ldr	r5, [r4, #40]	; 0x28
     a24:	b1e5      	cbz	r5, a60 <AudioPlaySdWav::~AudioPlaySdWav()+0x78>
     a26:	682b      	ldr	r3, [r5, #0]
     a28:	4a18      	ldr	r2, [pc, #96]	; (a8c <AudioPlaySdWav::~AudioPlaySdWav()+0xa4>)
     a2a:	685b      	ldr	r3, [r3, #4]
     a2c:	4293      	cmp	r3, r2
     a2e:	d124      	bne.n	a7a <AudioPlaySdWav::~AudioPlaySdWav()+0x92>
	virtual ~SDFile(void) {
     a30:	4b17      	ldr	r3, [pc, #92]	; (a90 <AudioPlaySdWav::~AudioPlaySdWav()+0xa8>)
		if (filename) {
     a32:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     a34:	602b      	str	r3, [r5, #0]
		if (filename) {
     a36:	b118      	cbz	r0, a40 <AudioPlaySdWav::~AudioPlaySdWav()+0x58>
			free(filename);
     a38:	f00f fa8c 	bl	ff54 <free>
			filename = nullptr;
     a3c:	2300      	movs	r3, #0
     a3e:	65ab      	str	r3, [r5, #88]	; 0x58
     a40:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     a42:	f105 0618 	add.w	r6, r5, #24
     a46:	b1a3      	cbz	r3, a72 <AudioPlaySdWav::~AudioPlaySdWav()+0x8a>
     a48:	4630      	mov	r0, r6
     a4a:	f008 fe43 	bl	96d4 <FsBaseFile::close()>
     a4e:	4b11      	ldr	r3, [pc, #68]	; (a94 <AudioPlaySdWav::~AudioPlaySdWav()+0xac>)
  ~FsBaseFile() {close();}
     a50:	4630      	mov	r0, r6
     a52:	60ab      	str	r3, [r5, #8]
     a54:	f008 fe3e 	bl	96d4 <FsBaseFile::close()>
	}
     a58:	215c      	movs	r1, #92	; 0x5c
     a5a:	4628      	mov	r0, r5
     a5c:	f00d fcf6 	bl	e44c <operator delete(void*, unsigned int)>
     a60:	4620      	mov	r0, r4
     a62:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     a64:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     a66:	2b00      	cmp	r3, #0
     a68:	d1d7      	bne.n	a1a <AudioPlaySdWav::~AudioPlaySdWav()+0x32>
     a6a:	e7da      	b.n	a22 <AudioPlaySdWav::~AudioPlaySdWav()+0x3a>
			f->close();
     a6c:	4628      	mov	r0, r5
     a6e:	4798      	blx	r3
     a70:	e7d7      	b.n	a22 <AudioPlaySdWav::~AudioPlaySdWav()+0x3a>
     a72:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     a74:	2b00      	cmp	r3, #0
     a76:	d1e7      	bne.n	a48 <AudioPlaySdWav::~AudioPlaySdWav()+0x60>
     a78:	e7e9      	b.n	a4e <AudioPlaySdWav::~AudioPlaySdWav()+0x66>
			delete f;
     a7a:	4628      	mov	r0, r5
     a7c:	4798      	blx	r3
     a7e:	e7ef      	b.n	a60 <AudioPlaySdWav::~AudioPlaySdWav()+0x78>
     a80:	2000134c 	.word	0x2000134c
     a84:	20001460 	.word	0x20001460
     a88:	00000085 	.word	0x00000085
     a8c:	00000765 	.word	0x00000765
     a90:	200014b0 	.word	0x200014b0
     a94:	20001310 	.word	0x20001310

00000a98 <startupSequence() [clone .part.0]>:

/**
 * Powers on amplifier then speaker with delay, wakes system up
 */

void startupSequence() {
     a98:	b510      	push	{r4, lr}
  //startup only if system is asleep
  if (!systemAwake){
    digitalWrite(REL_1, HIGH);  //turns amp on
     a9a:	2101      	movs	r1, #1
     a9c:	2011      	movs	r0, #17
	size_t println(const char s[])			{ return print(s) + println(); }
     a9e:	4c12      	ldr	r4, [pc, #72]	; (ae8 <startupSequence() [clone .part.0]+0x50>)
     aa0:	f00d fbbc 	bl	e21c <digitalWrite>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     aa4:	2109      	movs	r1, #9
     aa6:	4811      	ldr	r0, [pc, #68]	; (aec <startupSequence() [clone .part.0]+0x54>)
     aa8:	f00e ff98 	bl	f9dc <usb_serial_write>
     aac:	4620      	mov	r0, r4
     aae:	f00c ffed 	bl	da8c <Print::println()>
    Serial.println("amp is ON");
    delay(REL_SW_DELAY);
     ab2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     ab6:	f00d fb33 	bl	e120 <delay>
    digitalWrite(REL_2, HIGH);  //turns speaker on
     aba:	2101      	movs	r1, #1
     abc:	2010      	movs	r0, #16
     abe:	f00d fbad 	bl	e21c <digitalWrite>
     ac2:	210d      	movs	r1, #13
     ac4:	480a      	ldr	r0, [pc, #40]	; (af0 <startupSequence() [clone .part.0]+0x58>)
     ac6:	f00e ff89 	bl	f9dc <usb_serial_write>
     aca:	4620      	mov	r0, r4
     acc:	f00c ffde 	bl	da8c <Print::println()>
    Serial.println("speaker is ON");
    delay(REL_SW_DELAY);
     ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     ad4:	f00d fb24 	bl	e120 <delay>

    systemAwake = true; //system wakeup
     ad8:	4906      	ldr	r1, [pc, #24]	; (af4 <startupSequence() [clone .part.0]+0x5c>)
     ada:	2001      	movs	r0, #1
    trackIteration = 0;
     adc:	4b06      	ldr	r3, [pc, #24]	; (af8 <startupSequence() [clone .part.0]+0x60>)
     ade:	2200      	movs	r2, #0
    systemAwake = true; //system wakeup
     ae0:	7008      	strb	r0, [r1, #0]
    trackIteration = 0;
     ae2:	601a      	str	r2, [r3, #0]
  }
}
     ae4:	bd10      	pop	{r4, pc}
     ae6:	bf00      	nop
     ae8:	20002a7c 	.word	0x20002a7c
     aec:	20000d84 	.word	0x20000d84
     af0:	20000d90 	.word	0x20000d90
     af4:	20004d5a 	.word	0x20004d5a
     af8:	20004aa4 	.word	0x20004aa4

00000afc <shutDownSequence() [clone .part.0]>:

/**
 * Powers off speaker then amplifier with delay, puts system to sleep
 */
void shutDownSequence() {
     afc:	b510      	push	{r4, lr}
  //shutdown only if system is awake
  if (systemAwake){
    //stop any audio or light
    wavPlayer.stop();
     afe:	4815      	ldr	r0, [pc, #84]	; (b54 <shutDownSequence() [clone .part.0]+0x58>)
     b00:	f002 fe84 	bl	380c <AudioPlaySdWav::stop()>
    analogWrite(PWM_PIN, 0);  // Set PWM to zero
     b04:	2100      	movs	r1, #0
     b06:	2006      	movs	r0, #6
     b08:	4c13      	ldr	r4, [pc, #76]	; (b58 <shutDownSequence() [clone .part.0]+0x5c>)
     b0a:	f00d fd2d 	bl	e568 <analogWrite>

    digitalWrite(REL_2, LOW);  //turns speaker off
     b0e:	2100      	movs	r1, #0
     b10:	2010      	movs	r0, #16
     b12:	f00d fb83 	bl	e21c <digitalWrite>
     b16:	210e      	movs	r1, #14
     b18:	4810      	ldr	r0, [pc, #64]	; (b5c <shutDownSequence() [clone .part.0]+0x60>)
     b1a:	f00e ff5f 	bl	f9dc <usb_serial_write>
     b1e:	4620      	mov	r0, r4
     b20:	f00c ffb4 	bl	da8c <Print::println()>
    Serial.println("speaker is OFF");
    delay(REL_SW_DELAY);
     b24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     b28:	f00d fafa 	bl	e120 <delay>
    digitalWrite(REL_1, LOW);  //turns amp off
     b2c:	2100      	movs	r1, #0
     b2e:	2011      	movs	r0, #17
     b30:	f00d fb74 	bl	e21c <digitalWrite>
     b34:	210a      	movs	r1, #10
     b36:	480a      	ldr	r0, [pc, #40]	; (b60 <shutDownSequence() [clone .part.0]+0x64>)
     b38:	f00e ff50 	bl	f9dc <usb_serial_write>
     b3c:	4620      	mov	r0, r4
     b3e:	f00c ffa5 	bl	da8c <Print::println()>
    Serial.println("amp is OFF");
    delay(REL_SW_DELAY);
     b42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     b46:	f00d faeb 	bl	e120 <delay>

    systemAwake = false; //puts system asleep
     b4a:	4b06      	ldr	r3, [pc, #24]	; (b64 <shutDownSequence() [clone .part.0]+0x68>)
     b4c:	2200      	movs	r2, #0
     b4e:	701a      	strb	r2, [r3, #0]
  }
}
     b50:	bd10      	pop	{r4, pc}
     b52:	bf00      	nop
     b54:	20004abc 	.word	0x20004abc
     b58:	20002a7c 	.word	0x20002a7c
     b5c:	20000de0 	.word	0x20000de0
     b60:	20000df0 	.word	0x20000df0
     b64:	20004d5a 	.word	0x20004d5a

00000b68 <displayBinaryCode(int)>:
/*
 * helper function to display a status code from 0-15 on the 4 LEDs array
 * @code: integer from 0-15 (included)
 */
void displayBinaryCode(int code) {
  if (code >= 0 && code <= 15) {
     b68:	280f      	cmp	r0, #15
void displayBinaryCode(int code) {
     b6a:	b510      	push	{r4, lr}
  if (code >= 0 && code <= 15) {
     b6c:	d816      	bhi.n	b9c <displayBinaryCode(int)+0x34>
    digitalWrite(LED_ARRAY[i], valuesArray[i]);
     b6e:	4604      	mov	r4, r0
     b70:	f3c0 01c7 	ubfx	r1, r0, #3, #8
     b74:	2002      	movs	r0, #2
     b76:	f00d fb51 	bl	e21c <digitalWrite>
     b7a:	f3c4 0180 	ubfx	r1, r4, #2, #1
     b7e:	2003      	movs	r0, #3
     b80:	f00d fb4c 	bl	e21c <digitalWrite>
     b84:	f3c4 0140 	ubfx	r1, r4, #1, #1
     b88:	2004      	movs	r0, #4
     b8a:	f00d fb47 	bl	e21c <digitalWrite>
     b8e:	f004 0101 	and.w	r1, r4, #1
     b92:	2005      	movs	r0, #5

    setLedPattern(bits[0], bits[1], bits[2], bits[3]);
  } else {
    Serial.println("Status code should be an integer in the 0-15 range");
  }
}
     b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(LED_ARRAY[i], valuesArray[i]);
     b98:	f00d bb40 	b.w	e21c <digitalWrite>
     b9c:	2132      	movs	r1, #50	; 0x32
     b9e:	4804      	ldr	r0, [pc, #16]	; (bb0 <displayBinaryCode(int)+0x48>)
     ba0:	f00e ff1c 	bl	f9dc <usb_serial_write>
     ba4:	4803      	ldr	r0, [pc, #12]	; (bb4 <displayBinaryCode(int)+0x4c>)
}
     ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     baa:	f00c bf6f 	b.w	da8c <Print::println()>
     bae:	bf00      	nop
     bb0:	20000dfc 	.word	0x20000dfc
     bb4:	20002a7c 	.word	0x20002a7c

00000bb8 <setupPlayerID()>:
void setupPlayerID() {
     bb8:	b510      	push	{r4, lr}
  pinMode(SMALL_PIN, INPUT);
     bba:	2100      	movs	r1, #0
     bbc:	201e      	movs	r0, #30
     bbe:	f00d fb69 	bl	e294 <pinMode>
  pinMode(SEASHELL_PIN, INPUT);
     bc2:	2100      	movs	r1, #0
     bc4:	201c      	movs	r0, #28
     bc6:	f00d fb65 	bl	e294 <pinMode>
  pinMode(LONG_PIN, INPUT);
     bca:	2100      	movs	r1, #0
     bcc:	2020      	movs	r0, #32
     bce:	f00d fb61 	bl	e294 <pinMode>
  if (digitalRead(LONG_PIN) == HIGH) {
     bd2:	2020      	movs	r0, #32
     bd4:	f00d fb4c 	bl	e270 <digitalRead>
     bd8:	2801      	cmp	r0, #1
     bda:	d123      	bne.n	c24 <setupPlayerID()+0x6c>
    PLAYER_ID = 0;
     bdc:	4c23      	ldr	r4, [pc, #140]	; (c6c <setupPlayerID()+0xb4>)
     bde:	2300      	movs	r3, #0
     be0:	6023      	str	r3, [r4, #0]
     be2:	210e      	movs	r1, #14
     be4:	4822      	ldr	r0, [pc, #136]	; (c70 <setupPlayerID()+0xb8>)
     be6:	f00e fef9 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     bea:	6821      	ldr	r1, [r4, #0]
     bec:	4821      	ldr	r0, [pc, #132]	; (c74 <setupPlayerID()+0xbc>)
     bee:	f00c ff41 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     bf2:	4820      	ldr	r0, [pc, #128]	; (c74 <setupPlayerID()+0xbc>)
     bf4:	f00c ff4a 	bl	da8c <Print::println()>
  if (PLAYER_ID == 0) {
     bf8:	6823      	ldr	r3, [r4, #0]
     bfa:	b1db      	cbz	r3, c34 <setupPlayerID()+0x7c>
  } else if (PLAYER_ID == 1) {
     bfc:	2b01      	cmp	r3, #1
     bfe:	d02e      	beq.n	c5e <setupPlayerID()+0xa6>
  } else if (PLAYER_ID == 2) {
     c00:	2b02      	cmp	r3, #2
     c02:	d026      	beq.n	c52 <setupPlayerID()+0x9a>
     c04:	2111      	movs	r1, #17
     c06:	481c      	ldr	r0, [pc, #112]	; (c78 <setupPlayerID()+0xc0>)
     c08:	f00e fee8 	bl	f9dc <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
     c0c:	481b      	ldr	r0, [pc, #108]	; (c7c <setupPlayerID()+0xc4>)
     c0e:	f011 fc97 	bl	12540 <strlen>
     c12:	4601      	mov	r1, r0
     c14:	4819      	ldr	r0, [pc, #100]	; (c7c <setupPlayerID()+0xc4>)
     c16:	f00e fee1 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     c1a:	4816      	ldr	r0, [pc, #88]	; (c74 <setupPlayerID()+0xbc>)
}
     c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     c20:	f00c bf34 	b.w	da8c <Print::println()>
  } else if (digitalRead(SMALL_PIN) == HIGH) {
     c24:	201e      	movs	r0, #30
     c26:	f00d fb23 	bl	e270 <digitalRead>
     c2a:	2801      	cmp	r0, #1
     c2c:	d108      	bne.n	c40 <setupPlayerID()+0x88>
    PLAYER_ID = 1;
     c2e:	4c0f      	ldr	r4, [pc, #60]	; (c6c <setupPlayerID()+0xb4>)
     c30:	6020      	str	r0, [r4, #0]
     c32:	e7d6      	b.n	be2 <setupPlayerID()+0x2a>
    strcpy(FILE_NAME, LO_STR);
     c34:	4a12      	ldr	r2, [pc, #72]	; (c80 <setupPlayerID()+0xc8>)
     c36:	4b11      	ldr	r3, [pc, #68]	; (c7c <setupPlayerID()+0xc4>)
     c38:	ca07      	ldmia	r2, {r0, r1, r2}
     c3a:	c303      	stmia	r3!, {r0, r1}
     c3c:	701a      	strb	r2, [r3, #0]
     c3e:	e7e1      	b.n	c04 <setupPlayerID()+0x4c>
  } else if (digitalRead(SEASHELL_PIN) == HIGH) {
     c40:	201c      	movs	r0, #28
    PLAYER_ID = 2;
     c42:	4c0a      	ldr	r4, [pc, #40]	; (c6c <setupPlayerID()+0xb4>)
  } else if (digitalRead(SEASHELL_PIN) == HIGH) {
     c44:	f00d fb14 	bl	e270 <digitalRead>
     c48:	2801      	cmp	r0, #1
    PLAYER_ID = 2;
     c4a:	bf04      	itt	eq
     c4c:	2302      	moveq	r3, #2
     c4e:	6023      	streq	r3, [r4, #0]
     c50:	e7c7      	b.n	be2 <setupPlayerID()+0x2a>
    strcpy(FILE_NAME, SS_STR);
     c52:	4b0c      	ldr	r3, [pc, #48]	; (c84 <setupPlayerID()+0xcc>)
     c54:	4c09      	ldr	r4, [pc, #36]	; (c7c <setupPlayerID()+0xc4>)
     c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     c58:	c407      	stmia	r4!, {r0, r1, r2}
     c5a:	7023      	strb	r3, [r4, #0]
     c5c:	e7d2      	b.n	c04 <setupPlayerID()+0x4c>
    strcpy(FILE_NAME, SM_STR);
     c5e:	4a0a      	ldr	r2, [pc, #40]	; (c88 <setupPlayerID()+0xd0>)
     c60:	4b06      	ldr	r3, [pc, #24]	; (c7c <setupPlayerID()+0xc4>)
     c62:	ca07      	ldmia	r2, {r0, r1, r2}
     c64:	c303      	stmia	r3!, {r0, r1}
     c66:	801a      	strh	r2, [r3, #0]
     c68:	e7cc      	b.n	c04 <setupPlayerID()+0x4c>
     c6a:	bf00      	nop
     c6c:	20003d28 	.word	0x20003d28
     c70:	20000634 	.word	0x20000634
     c74:	20002a7c 	.word	0x20002a7c
     c78:	20000644 	.word	0x20000644
     c7c:	20003d18 	.word	0x20003d18
     c80:	2000039c 	.word	0x2000039c
     c84:	20000658 	.word	0x20000658
     c88:	200003ac 	.word	0x200003ac

00000c8c <clockMe()>:
void clockMe() {
     c8c:	b530      	push	{r4, r5, lr}
     c8e:	b083      	sub	sp, #12
  DateTime input = rtc.now();
     c90:	492b      	ldr	r1, [pc, #172]	; (d40 <clockMe()+0xb4>)
	size_t print(int n)				{ return print((long)n); }
     c92:	4c2c      	ldr	r4, [pc, #176]	; (d44 <clockMe()+0xb8>)
     c94:	4668      	mov	r0, sp
  Serial.print(days[input.dayOfTheWeek()]);
     c96:	4d2c      	ldr	r5, [pc, #176]	; (d48 <clockMe()+0xbc>)
  DateTime input = rtc.now();
     c98:	f00b fc9c 	bl	c5d4 <RTC_DS3231::now()>

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
     c9c:	f89d 1000 	ldrb.w	r1, [sp]
     ca0:	4620      	mov	r0, r4
     ca2:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
     ca6:	f00c fee5 	bl	da74 <Print::print(long)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     caa:	202f      	movs	r0, #47	; 0x2f
     cac:	f00e fe80 	bl	f9b0 <usb_serial_putchar>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     cb0:	f89d 1001 	ldrb.w	r1, [sp, #1]
     cb4:	2300      	movs	r3, #0
     cb6:	220a      	movs	r2, #10
     cb8:	4620      	mov	r0, r4
     cba:	f00c ff03 	bl	dac4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     cbe:	202f      	movs	r0, #47	; 0x2f
     cc0:	f00e fe76 	bl	f9b0 <usb_serial_putchar>
     cc4:	2300      	movs	r3, #0
     cc6:	220a      	movs	r2, #10
     cc8:	f89d 1002 	ldrb.w	r1, [sp, #2]
     ccc:	4620      	mov	r0, r4
     cce:	f00c fef9 	bl	dac4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     cd2:	2102      	movs	r1, #2
     cd4:	481d      	ldr	r0, [pc, #116]	; (d4c <clockMe()+0xc0>)
     cd6:	f00e fe81 	bl	f9dc <usb_serial_write>
  Serial.print(days[input.dayOfTheWeek()]);
     cda:	4668      	mov	r0, sp
     cdc:	f00b fdee 	bl	c8bc <DateTime::dayOfTheWeek() const>
     ce0:	b200      	sxth	r0, r0
     ce2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     ce6:	eb05 0580 	add.w	r5, r5, r0, lsl #2
							  return write((const uint8_t *)str, strlen(str)); }
     cea:	4628      	mov	r0, r5
     cec:	f011 fc28 	bl	12540 <strlen>
     cf0:	4601      	mov	r1, r0
     cf2:	4628      	mov	r0, r5
     cf4:	f00e fe72 	bl	f9dc <usb_serial_write>
     cf8:	2102      	movs	r1, #2
     cfa:	4815      	ldr	r0, [pc, #84]	; (d50 <clockMe()+0xc4>)
     cfc:	f00e fe6e 	bl	f9dc <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     d00:	f89d 1003 	ldrb.w	r1, [sp, #3]
     d04:	2300      	movs	r3, #0
     d06:	220a      	movs	r2, #10
     d08:	4620      	mov	r0, r4
     d0a:	f00c fedb 	bl	dac4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     d0e:	203a      	movs	r0, #58	; 0x3a
     d10:	f00e fe4e 	bl	f9b0 <usb_serial_putchar>
     d14:	f89d 1004 	ldrb.w	r1, [sp, #4]
     d18:	2300      	movs	r3, #0
     d1a:	220a      	movs	r2, #10
     d1c:	4620      	mov	r0, r4
     d1e:	f00c fed1 	bl	dac4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     d22:	203a      	movs	r0, #58	; 0x3a
     d24:	f00e fe44 	bl	f9b0 <usb_serial_putchar>
     d28:	2300      	movs	r3, #0
     d2a:	220a      	movs	r2, #10
     d2c:	f89d 1005 	ldrb.w	r1, [sp, #5]
     d30:	4620      	mov	r0, r4
     d32:	f00c fec7 	bl	dac4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  Serial.println();
     d36:	4620      	mov	r0, r4
     d38:	f00c fea8 	bl	da8c <Print::println()>
}
     d3c:	b003      	add	sp, #12
     d3e:	bd30      	pop	{r4, r5, pc}
     d40:	20004a40 	.word	0x20004a40
     d44:	20002a7c 	.word	0x20002a7c
     d48:	20001a14 	.word	0x20001a14
     d4c:	20000ec0 	.word	0x20000ec0
     d50:	20001fa4 	.word	0x20001fa4

00000d54 <formatTimeToMinutesSecondsMs(unsigned long)>:
  unsigned long seconds = (ms % 60000) / 1000;
     d54:	4a12      	ldr	r2, [pc, #72]	; (da0 <formatTimeToMinutesSecondsMs(unsigned long)+0x4c>)
     d56:	f64e 2360 	movw	r3, #60000	; 0xea60
String formatTimeToMinutesSecondsMs(unsigned long ms) {
     d5a:	b530      	push	{r4, r5, lr}
  unsigned long seconds = (ms % 60000) / 1000;
     d5c:	fba2 5201 	umull	r5, r2, r2, r1
     d60:	4c10      	ldr	r4, [pc, #64]	; (da4 <formatTimeToMinutesSecondsMs(unsigned long)+0x50>)
String formatTimeToMinutesSecondsMs(unsigned long ms) {
     d62:	4605      	mov	r5, r0
     d64:	b087      	sub	sp, #28
  unsigned long seconds = (ms % 60000) / 1000;
     d66:	0b92      	lsrs	r2, r2, #14
     d68:	fb03 1312 	mls	r3, r3, r2, r1
     d6c:	fba4 0303 	umull	r0, r3, r4, r3
  unsigned long milliseconds = ms % 1000;
     d70:	fba4 0401 	umull	r0, r4, r4, r1
     d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  if (sprintf(buffer, "%lu:%02lu:%03lu", (unsigned long)minutes, (unsigned long)seconds, (unsigned long)milliseconds) > 0 && strlen(buffer) < sizeof(buffer)) {
     d78:	099b      	lsrs	r3, r3, #6
  unsigned long milliseconds = ms % 1000;
     d7a:	09a4      	lsrs	r4, r4, #6
     d7c:	fb00 1414 	mls	r4, r0, r4, r1
  if (sprintf(buffer, "%lu:%02lu:%03lu", (unsigned long)minutes, (unsigned long)seconds, (unsigned long)milliseconds) > 0 && strlen(buffer) < sizeof(buffer)) {
     d80:	4909      	ldr	r1, [pc, #36]	; (da8 <formatTimeToMinutesSecondsMs(unsigned long)+0x54>)
     d82:	a802      	add	r0, sp, #8
     d84:	9400      	str	r4, [sp, #0]
     d86:	f010 fe81 	bl	11a8c <sprintf>
    buffer[sizeof(buffer) - 1] = '\0';
     d8a:	2300      	movs	r3, #0
  return String(buffer);
     d8c:	a902      	add	r1, sp, #8
     d8e:	4628      	mov	r0, r5
    buffer[sizeof(buffer) - 1] = '\0';
     d90:	f88d 3016 	strb.w	r3, [sp, #22]
  return String(buffer);
     d94:	f00d f80a 	bl	ddac <String::String(char const*)>
}
     d98:	4628      	mov	r0, r5
     d9a:	b007      	add	sp, #28
     d9c:	bd30      	pop	{r4, r5, pc}
     d9e:	bf00      	nop
     da0:	45e7b273 	.word	0x45e7b273
     da4:	10624dd3 	.word	0x10624dd3
     da8:	20000eb0 	.word	0x20000eb0

00000dac <systemReport(int)>:
void systemReport(int player) {
     dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     db0:	211a      	movs	r1, #26
     db2:	4604      	mov	r4, r0
     db4:	48c4      	ldr	r0, [pc, #784]	; (10c8 <systemReport(int)+0x31c>)
     db6:	ed2d 8b02 	vpush	{d8}
     dba:	b08b      	sub	sp, #44	; 0x2c
     dbc:	f00e fe0e 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     dc0:	48c2      	ldr	r0, [pc, #776]	; (10cc <systemReport(int)+0x320>)
     dc2:	f00c fe63 	bl	da8c <Print::println()>
  if (PLAYER_ID == 0){
     dc6:	4bc2      	ldr	r3, [pc, #776]	; (10d0 <systemReport(int)+0x324>)
     dc8:	681b      	ldr	r3, [r3, #0]
     dca:	2b00      	cmp	r3, #0
     dcc:	f000 8270 	beq.w	12b0 <systemReport(int)+0x504>
     dd0:	210a      	movs	r1, #10
     dd2:	48c0      	ldr	r0, [pc, #768]	; (10d4 <systemReport(int)+0x328>)
     dd4:	f00e fe02 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     dd8:	4621      	mov	r1, r4
     dda:	48bc      	ldr	r0, [pc, #752]	; (10cc <systemReport(int)+0x320>)
     ddc:	f00c fe4a 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     de0:	48ba      	ldr	r0, [pc, #744]	; (10cc <systemReport(int)+0x320>)
     de2:	f00c fe53 	bl	da8c <Print::println()>
     de6:	210d      	movs	r1, #13
     de8:	48bb      	ldr	r0, [pc, #748]	; (10d8 <systemReport(int)+0x32c>)
     dea:	f00e fdf7 	bl	f9dc <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
     dee:	48bb      	ldr	r0, [pc, #748]	; (10dc <systemReport(int)+0x330>)
     df0:	f011 fba6 	bl	12540 <strlen>
     df4:	4601      	mov	r1, r0
     df6:	48b9      	ldr	r0, [pc, #740]	; (10dc <systemReport(int)+0x330>)
     df8:	f00e fdf0 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     dfc:	48b3      	ldr	r0, [pc, #716]	; (10cc <systemReport(int)+0x320>)
     dfe:	f00c fe45 	bl	da8c <Print::println()>
  uint32_t trackLengthMs = wavPlayer.lengthMillis();
     e02:	48b7      	ldr	r0, [pc, #732]	; (10e0 <systemReport(int)+0x334>)
     e04:	f003 fa56 	bl	42b4 <AudioPlaySdWav::lengthMillis()>
     e08:	4605      	mov	r5, r0
  uint32_t trackPositionMs = wavPlayer.positionMillis();
     e0a:	48b5      	ldr	r0, [pc, #724]	; (10e0 <systemReport(int)+0x334>)
     e0c:	f003 fa42 	bl	4294 <AudioPlaySdWav::positionMillis()>
     e10:	4604      	mov	r4, r0
  if (trackLengthMs > 0 && trackPositionMs > 0){
     e12:	b115      	cbz	r5, e1a <systemReport(int)+0x6e>
     e14:	2800      	cmp	r0, #0
     e16:	f040 81f9 	bne.w	120c <systemReport(int)+0x460>
  float temp = tempmonGetTemp();
     e1a:	f00d fdcd 	bl	e9b8 <tempmonGetTemp>
     e1e:	eeb0 8a40 	vmov.f32	s16, s0
     e22:	2110      	movs	r1, #16
     e24:	48af      	ldr	r0, [pc, #700]	; (10e4 <systemReport(int)+0x338>)
     e26:	f00e fdd9 	bl	f9dc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     e2a:	2102      	movs	r1, #2
     e2c:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
     e30:	48a6      	ldr	r0, [pc, #664]	; (10cc <systemReport(int)+0x320>)
     e32:	f00c fe5d 	bl	daf0 <Print::printFloat(double, unsigned char)>
     e36:	2104      	movs	r1, #4
     e38:	48ab      	ldr	r0, [pc, #684]	; (10e8 <systemReport(int)+0x33c>)
  for (int i = 0; i < 4; i++) {
     e3a:	2400      	movs	r4, #0
     e3c:	f00e fdce 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     e40:	48a2      	ldr	r0, [pc, #648]	; (10cc <systemReport(int)+0x320>)
     e42:	f00c fe23 	bl	da8c <Print::println()>
     e46:	2113      	movs	r1, #19
     e48:	48a8      	ldr	r0, [pc, #672]	; (10ec <systemReport(int)+0x340>)
     e4a:	f00e fdc7 	bl	f9dc <usb_serial_write>
     e4e:	489f      	ldr	r0, [pc, #636]	; (10cc <systemReport(int)+0x320>)
     e50:	f00c fe1c 	bl	da8c <Print::println()>
     e54:	2103      	movs	r1, #3
     e56:	48a6      	ldr	r0, [pc, #664]	; (10f0 <systemReport(int)+0x344>)
     e58:	f00e fdc0 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     e5c:	210a      	movs	r1, #10
     e5e:	489b      	ldr	r0, [pc, #620]	; (10cc <systemReport(int)+0x320>)
     e60:	f00c fe08 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     e64:	4899      	ldr	r0, [pc, #612]	; (10cc <systemReport(int)+0x320>)
     e66:	f00c fe11 	bl	da8c <Print::println()>
     e6a:	2105      	movs	r1, #5
     e6c:	48a1      	ldr	r0, [pc, #644]	; (10f4 <systemReport(int)+0x348>)
     e6e:	f00e fdb5 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     e72:	210b      	movs	r1, #11
     e74:	4895      	ldr	r0, [pc, #596]	; (10cc <systemReport(int)+0x320>)
     e76:	f00c fdfd 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     e7a:	4894      	ldr	r0, [pc, #592]	; (10cc <systemReport(int)+0x320>)
     e7c:	f00c fe06 	bl	da8c <Print::println()>
     e80:	2104      	movs	r1, #4
     e82:	489d      	ldr	r0, [pc, #628]	; (10f8 <systemReport(int)+0x34c>)
     e84:	f00e fdaa 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     e88:	210d      	movs	r1, #13
     e8a:	4890      	ldr	r0, [pc, #576]	; (10cc <systemReport(int)+0x320>)
     e8c:	f00c fdf2 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     e90:	488e      	ldr	r0, [pc, #568]	; (10cc <systemReport(int)+0x320>)
     e92:	f00c fdfb 	bl	da8c <Print::println()>
     e96:	2113      	movs	r1, #19
     e98:	4898      	ldr	r0, [pc, #608]	; (10fc <systemReport(int)+0x350>)
     e9a:	f00e fd9f 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     e9e:	488b      	ldr	r0, [pc, #556]	; (10cc <systemReport(int)+0x320>)
     ea0:	f00c fdf4 	bl	da8c <Print::println()>
     ea4:	2106      	movs	r1, #6
     ea6:	4896      	ldr	r0, [pc, #600]	; (1100 <systemReport(int)+0x354>)
     ea8:	f00e fd98 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     eac:	2111      	movs	r1, #17
     eae:	4887      	ldr	r0, [pc, #540]	; (10cc <systemReport(int)+0x320>)
     eb0:	f00c fde0 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     eb4:	4885      	ldr	r0, [pc, #532]	; (10cc <systemReport(int)+0x320>)
     eb6:	f00c fde9 	bl	da8c <Print::println()>
     eba:	2106      	movs	r1, #6
     ebc:	4891      	ldr	r0, [pc, #580]	; (1104 <systemReport(int)+0x358>)
     ebe:	f00e fd8d 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     ec2:	2110      	movs	r1, #16
     ec4:	4881      	ldr	r0, [pc, #516]	; (10cc <systemReport(int)+0x320>)
     ec6:	f00c fdd5 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     eca:	4880      	ldr	r0, [pc, #512]	; (10cc <systemReport(int)+0x320>)
     ecc:	f00c fdde 	bl	da8c <Print::println()>
     ed0:	2106      	movs	r1, #6
     ed2:	488d      	ldr	r0, [pc, #564]	; (1108 <systemReport(int)+0x35c>)
     ed4:	f00e fd82 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     ed8:	2102      	movs	r1, #2
     eda:	487c      	ldr	r0, [pc, #496]	; (10cc <systemReport(int)+0x320>)
     edc:	f00c fdca 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     ee0:	487a      	ldr	r0, [pc, #488]	; (10cc <systemReport(int)+0x320>)
     ee2:	f00c fdd3 	bl	da8c <Print::println()>
     ee6:	2106      	movs	r1, #6
     ee8:	4888      	ldr	r0, [pc, #544]	; (110c <systemReport(int)+0x360>)
     eea:	f00e fd77 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     eee:	2103      	movs	r1, #3
     ef0:	4876      	ldr	r0, [pc, #472]	; (10cc <systemReport(int)+0x320>)
     ef2:	f00c fdbf 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     ef6:	4875      	ldr	r0, [pc, #468]	; (10cc <systemReport(int)+0x320>)
     ef8:	f00c fdc8 	bl	da8c <Print::println()>
     efc:	2106      	movs	r1, #6
     efe:	4884      	ldr	r0, [pc, #528]	; (1110 <systemReport(int)+0x364>)
     f00:	f00e fd6c 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     f04:	2104      	movs	r1, #4
     f06:	4871      	ldr	r0, [pc, #452]	; (10cc <systemReport(int)+0x320>)
     f08:	f00c fdb4 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     f0c:	486f      	ldr	r0, [pc, #444]	; (10cc <systemReport(int)+0x320>)
     f0e:	f00c fdbd 	bl	da8c <Print::println()>
     f12:	2106      	movs	r1, #6
     f14:	487f      	ldr	r0, [pc, #508]	; (1114 <systemReport(int)+0x368>)
     f16:	f00e fd61 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     f1a:	2105      	movs	r1, #5
     f1c:	486b      	ldr	r0, [pc, #428]	; (10cc <systemReport(int)+0x320>)
     f1e:	f00c fda9 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     f22:	486a      	ldr	r0, [pc, #424]	; (10cc <systemReport(int)+0x320>)
     f24:	f00c fdb2 	bl	da8c <Print::println()>
     f28:	2108      	movs	r1, #8
     f2a:	487b      	ldr	r0, [pc, #492]	; (1118 <systemReport(int)+0x36c>)
     f2c:	f00e fd56 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     f30:	2106      	movs	r1, #6
     f32:	4866      	ldr	r0, [pc, #408]	; (10cc <systemReport(int)+0x320>)
     f34:	f00c fd9e 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     f38:	4864      	ldr	r0, [pc, #400]	; (10cc <systemReport(int)+0x320>)
     f3a:	f00c fda7 	bl	da8c <Print::println()>
     f3e:	210a      	movs	r1, #10
     f40:	4876      	ldr	r0, [pc, #472]	; (111c <systemReport(int)+0x370>)
     f42:	f00e fd4b 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     f46:	211e      	movs	r1, #30
     f48:	4860      	ldr	r0, [pc, #384]	; (10cc <systemReport(int)+0x320>)
     f4a:	f00c fd93 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     f4e:	485f      	ldr	r0, [pc, #380]	; (10cc <systemReport(int)+0x320>)
     f50:	f00c fd9c 	bl	da8c <Print::println()>
     f54:	210d      	movs	r1, #13
     f56:	4872      	ldr	r0, [pc, #456]	; (1120 <systemReport(int)+0x374>)
     f58:	f00e fd40 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     f5c:	211c      	movs	r1, #28
     f5e:	485b      	ldr	r0, [pc, #364]	; (10cc <systemReport(int)+0x320>)
     f60:	f00c fd88 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     f64:	4859      	ldr	r0, [pc, #356]	; (10cc <systemReport(int)+0x320>)
     f66:	f00c fd91 	bl	da8c <Print::println()>
     f6a:	2109      	movs	r1, #9
     f6c:	486d      	ldr	r0, [pc, #436]	; (1124 <systemReport(int)+0x378>)
     f6e:	f00e fd35 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     f72:	2120      	movs	r1, #32
     f74:	4855      	ldr	r0, [pc, #340]	; (10cc <systemReport(int)+0x320>)
     f76:	f00c fd7d 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     f7a:	4854      	ldr	r0, [pc, #336]	; (10cc <systemReport(int)+0x320>)
     f7c:	f00c fd86 	bl	da8c <Print::println()>
     f80:	2112      	movs	r1, #18
     f82:	4869      	ldr	r0, [pc, #420]	; (1128 <systemReport(int)+0x37c>)
     f84:	f00e fd2a 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     f88:	4850      	ldr	r0, [pc, #320]	; (10cc <systemReport(int)+0x320>)
     f8a:	f00c fd7f 	bl	da8c <Print::println()>
     f8e:	210d      	movs	r1, #13
     f90:	4866      	ldr	r0, [pc, #408]	; (112c <systemReport(int)+0x380>)
     f92:	f00e fd23 	bl	f9dc <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     f96:	2300      	movs	r3, #0
     f98:	220a      	movs	r2, #10
     f9a:	2116      	movs	r1, #22
     f9c:	484b      	ldr	r0, [pc, #300]	; (10cc <systemReport(int)+0x320>)
     f9e:	f00c fd91 	bl	dac4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
     fa2:	484a      	ldr	r0, [pc, #296]	; (10cc <systemReport(int)+0x320>)
     fa4:	f00c fd72 	bl	da8c <Print::println()>
     fa8:	4e61      	ldr	r6, [pc, #388]	; (1130 <systemReport(int)+0x384>)
     faa:	2110      	movs	r1, #16
     fac:	4861      	ldr	r0, [pc, #388]	; (1134 <systemReport(int)+0x388>)
     fae:	4f62      	ldr	r7, [pc, #392]	; (1138 <systemReport(int)+0x38c>)
     fb0:	f00e fd14 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     fb4:	4d45      	ldr	r5, [pc, #276]	; (10cc <systemReport(int)+0x320>)
	size_t println(const char s[])			{ return print(s) + println(); }
     fb6:	4845      	ldr	r0, [pc, #276]	; (10cc <systemReport(int)+0x320>)
     fb8:	f00c fd68 	bl	da8c <Print::println()>
     fbc:	210a      	movs	r1, #10
     fbe:	4638      	mov	r0, r7
     fc0:	f00e fd0c 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     fc4:	4621      	mov	r1, r4
     fc6:	4628      	mov	r0, r5
     fc8:	3401      	adds	r4, #1
     fca:	f00c fd53 	bl	da74 <Print::print(long)>
     fce:	2102      	movs	r1, #2
     fd0:	485a      	ldr	r0, [pc, #360]	; (113c <systemReport(int)+0x390>)
     fd2:	f00e fd03 	bl	f9dc <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     fd6:	2300      	movs	r3, #0
     fd8:	220a      	movs	r2, #10
     fda:	f816 1b01 	ldrb.w	r1, [r6], #1
     fde:	4628      	mov	r0, r5
     fe0:	f00c fd70 	bl	dac4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
     fe4:	4628      	mov	r0, r5
     fe6:	f00c fd51 	bl	da8c <Print::println()>
     fea:	2c04      	cmp	r4, #4
     fec:	d1e6      	bne.n	fbc <systemReport(int)+0x210>
     fee:	2116      	movs	r1, #22
     ff0:	4853      	ldr	r0, [pc, #332]	; (1140 <systemReport(int)+0x394>)
     ff2:	f00e fcf3 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     ff6:	4835      	ldr	r0, [pc, #212]	; (10cc <systemReport(int)+0x320>)
     ff8:	f00c fd48 	bl	da8c <Print::println()>
     ffc:	210d      	movs	r1, #13
     ffe:	4851      	ldr	r0, [pc, #324]	; (1144 <systemReport(int)+0x398>)
    1000:	f00e fcec 	bl	f9dc <usb_serial_write>
  Serial.println(audioVolume);
    1004:	4b50      	ldr	r3, [pc, #320]	; (1148 <systemReport(int)+0x39c>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1006:	2102      	movs	r1, #2
    1008:	4830      	ldr	r0, [pc, #192]	; (10cc <systemReport(int)+0x320>)
    100a:	ed93 0a00 	vldr	s0, [r3]
    100e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    1012:	f00c fd6d 	bl	daf0 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    1016:	482d      	ldr	r0, [pc, #180]	; (10cc <systemReport(int)+0x320>)
    1018:	f00c fd38 	bl	da8c <Print::println()>
    101c:	210a      	movs	r1, #10
    101e:	484b      	ldr	r0, [pc, #300]	; (114c <systemReport(int)+0x3a0>)
    1020:	f00e fcdc 	bl	f9dc <usb_serial_write>
  Serial.println(rangePWM);
    1024:	4b4a      	ldr	r3, [pc, #296]	; (1150 <systemReport(int)+0x3a4>)
	size_t print(int n)				{ return print((long)n); }
    1026:	4829      	ldr	r0, [pc, #164]	; (10cc <systemReport(int)+0x320>)
    1028:	6819      	ldr	r1, [r3, #0]
    102a:	f00c fd23 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    102e:	4827      	ldr	r0, [pc, #156]	; (10cc <systemReport(int)+0x320>)
    1030:	f00c fd2c 	bl	da8c <Print::println()>
    1034:	210d      	movs	r1, #13
    1036:	4847      	ldr	r0, [pc, #284]	; (1154 <systemReport(int)+0x3a8>)
    1038:	f00e fcd0 	bl	f9dc <usb_serial_write>
  Serial.println(currentCode);
    103c:	4b46      	ldr	r3, [pc, #280]	; (1158 <systemReport(int)+0x3ac>)
	size_t print(int n)				{ return print((long)n); }
    103e:	4823      	ldr	r0, [pc, #140]	; (10cc <systemReport(int)+0x320>)
    1040:	6819      	ldr	r1, [r3, #0]
    1042:	f00c fd17 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1046:	4821      	ldr	r0, [pc, #132]	; (10cc <systemReport(int)+0x320>)
    1048:	f00c fd20 	bl	da8c <Print::println()>
    104c:	210e      	movs	r1, #14
    104e:	4843      	ldr	r0, [pc, #268]	; (115c <systemReport(int)+0x3b0>)
    1050:	f00e fcc4 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1054:	f242 7110 	movw	r1, #10000	; 0x2710
    1058:	481c      	ldr	r0, [pc, #112]	; (10cc <systemReport(int)+0x320>)
    105a:	f00c fd0b 	bl	da74 <Print::print(long)>
    105e:	2103      	movs	r1, #3
    1060:	483f      	ldr	r0, [pc, #252]	; (1160 <systemReport(int)+0x3b4>)
    1062:	f00e fcbb 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1066:	4819      	ldr	r0, [pc, #100]	; (10cc <systemReport(int)+0x320>)
    1068:	f00c fd10 	bl	da8c <Print::println()>
    106c:	2110      	movs	r1, #16
    106e:	483d      	ldr	r0, [pc, #244]	; (1164 <systemReport(int)+0x3b8>)
    1070:	f00e fcb4 	bl	f9dc <usb_serial_write>
  Serial.println(trackIteration);
    1074:	4b3c      	ldr	r3, [pc, #240]	; (1168 <systemReport(int)+0x3bc>)
	size_t print(int n)				{ return print((long)n); }
    1076:	4815      	ldr	r0, [pc, #84]	; (10cc <systemReport(int)+0x320>)
    1078:	6819      	ldr	r1, [r3, #0]
    107a:	f00c fcfb 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    107e:	4813      	ldr	r0, [pc, #76]	; (10cc <systemReport(int)+0x320>)
    1080:	f00c fd04 	bl	da8c <Print::println()>
    1084:	210b      	movs	r1, #11
    1086:	4839      	ldr	r0, [pc, #228]	; (116c <systemReport(int)+0x3c0>)
    1088:	f00e fca8 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    108c:	2106      	movs	r1, #6
    108e:	480f      	ldr	r0, [pc, #60]	; (10cc <systemReport(int)+0x320>)
    1090:	f00c fcf0 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1094:	480d      	ldr	r0, [pc, #52]	; (10cc <systemReport(int)+0x320>)
    1096:	f00c fcf9 	bl	da8c <Print::println()>
    109a:	2109      	movs	r1, #9
    109c:	4834      	ldr	r0, [pc, #208]	; (1170 <systemReport(int)+0x3c4>)
    109e:	f00e fc9d 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    10a2:	2117      	movs	r1, #23
    10a4:	4809      	ldr	r0, [pc, #36]	; (10cc <systemReport(int)+0x320>)
    10a6:	f00c fce5 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    10aa:	4808      	ldr	r0, [pc, #32]	; (10cc <systemReport(int)+0x320>)
    10ac:	f00c fcee 	bl	da8c <Print::println()>
    10b0:	210e      	movs	r1, #14
    10b2:	4830      	ldr	r0, [pc, #192]	; (1174 <systemReport(int)+0x3c8>)
    10b4:	f00e fc92 	bl	f9dc <usb_serial_write>
  Serial.print(pwmFreq);
    10b8:	4b2f      	ldr	r3, [pc, #188]	; (1178 <systemReport(int)+0x3cc>)
	size_t print(int n)				{ return print((long)n); }
    10ba:	4804      	ldr	r0, [pc, #16]	; (10cc <systemReport(int)+0x320>)
    10bc:	6819      	ldr	r1, [r3, #0]
    10be:	f00c fcd9 	bl	da74 <Print::print(long)>
    10c2:	2103      	movs	r1, #3
    10c4:	e05a      	b.n	117c <systemReport(int)+0x3d0>
    10c6:	bf00      	nop
    10c8:	200003d4 	.word	0x200003d4
    10cc:	20002a7c 	.word	0x20002a7c
    10d0:	20003d28 	.word	0x20003d28
    10d4:	200003fc 	.word	0x200003fc
    10d8:	20000408 	.word	0x20000408
    10dc:	20003d18 	.word	0x20003d18
    10e0:	20004abc 	.word	0x20004abc
    10e4:	2000042c 	.word	0x2000042c
    10e8:	20000440 	.word	0x20000440
    10ec:	20000448 	.word	0x20000448
    10f0:	2000045c 	.word	0x2000045c
    10f4:	20000460 	.word	0x20000460
    10f8:	20000468 	.word	0x20000468
    10fc:	20000470 	.word	0x20000470
    1100:	20000484 	.word	0x20000484
    1104:	2000048c 	.word	0x2000048c
    1108:	20000494 	.word	0x20000494
    110c:	2000049c 	.word	0x2000049c
    1110:	200004a4 	.word	0x200004a4
    1114:	200004ac 	.word	0x200004ac
    1118:	200004b4 	.word	0x200004b4
    111c:	200004c0 	.word	0x200004c0
    1120:	200004cc 	.word	0x200004cc
    1124:	200004dc 	.word	0x200004dc
    1128:	200004e8 	.word	0x200004e8
    112c:	200004fc 	.word	0x200004fc
    1130:	20000398 	.word	0x20000398
    1134:	2000050c 	.word	0x2000050c
    1138:	20000520 	.word	0x20000520
    113c:	2000052c 	.word	0x2000052c
    1140:	20000530 	.word	0x20000530
    1144:	20000548 	.word	0x20000548
    1148:	200034a8 	.word	0x200034a8
    114c:	20000558 	.word	0x20000558
    1150:	20003500 	.word	0x20003500
    1154:	20000564 	.word	0x20000564
    1158:	200047c8 	.word	0x200047c8
    115c:	20000574 	.word	0x20000574
    1160:	20000584 	.word	0x20000584
    1164:	20000588 	.word	0x20000588
    1168:	20004aa4 	.word	0x20004aa4
    116c:	2000059c 	.word	0x2000059c
    1170:	200005a8 	.word	0x200005a8
    1174:	200005b4 	.word	0x200005b4
    1178:	200034fc 	.word	0x200034fc
    117c:	4850      	ldr	r0, [pc, #320]	; (12c0 <systemReport(int)+0x514>)
    117e:	f00e fc2d 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1182:	4850      	ldr	r0, [pc, #320]	; (12c4 <systemReport(int)+0x518>)
    1184:	f00c fc82 	bl	da8c <Print::println()>
    1188:	2114      	movs	r1, #20
    118a:	484f      	ldr	r0, [pc, #316]	; (12c8 <systemReport(int)+0x51c>)
    118c:	f00e fc26 	bl	f9dc <usb_serial_write>
    1190:	484c      	ldr	r0, [pc, #304]	; (12c4 <systemReport(int)+0x518>)
    1192:	f00c fc7b 	bl	da8c <Print::println()>
    1196:	210d      	movs	r1, #13
    1198:	484c      	ldr	r0, [pc, #304]	; (12cc <systemReport(int)+0x520>)
    119a:	f00e fc1f 	bl	f9dc <usb_serial_write>
  Serial.println(systemAwake ? "YES" : "NO");
    119e:	4a4c      	ldr	r2, [pc, #304]	; (12d0 <systemReport(int)+0x524>)
    11a0:	4b4c      	ldr	r3, [pc, #304]	; (12d4 <systemReport(int)+0x528>)
    11a2:	7812      	ldrb	r2, [r2, #0]
    11a4:	484c      	ldr	r0, [pc, #304]	; (12d8 <systemReport(int)+0x52c>)
    11a6:	2a00      	cmp	r2, #0
    11a8:	bf12      	itee	ne
    11aa:	2103      	movne	r1, #3
    11ac:	2102      	moveq	r1, #2
    11ae:	4618      	moveq	r0, r3
    11b0:	f00e fc14 	bl	f9dc <usb_serial_write>
    11b4:	4843      	ldr	r0, [pc, #268]	; (12c4 <systemReport(int)+0x518>)
    11b6:	f00c fc69 	bl	da8c <Print::println()>
    11ba:	2110      	movs	r1, #16
    11bc:	4847      	ldr	r0, [pc, #284]	; (12dc <systemReport(int)+0x530>)
    11be:	f00e fc0d 	bl	f9dc <usb_serial_write>
  Serial.println(playbackStatus ? "PLAYING" : "STOPPED");
    11c2:	4947      	ldr	r1, [pc, #284]	; (12e0 <systemReport(int)+0x534>)
    11c4:	4a47      	ldr	r2, [pc, #284]	; (12e4 <systemReport(int)+0x538>)
    11c6:	4b48      	ldr	r3, [pc, #288]	; (12e8 <systemReport(int)+0x53c>)
    11c8:	7808      	ldrb	r0, [r1, #0]
    11ca:	2107      	movs	r1, #7
    11cc:	2800      	cmp	r0, #0
    11ce:	bf14      	ite	ne
    11d0:	4610      	movne	r0, r2
    11d2:	4618      	moveq	r0, r3
    11d4:	f00e fc02 	bl	f9dc <usb_serial_write>
    11d8:	483a      	ldr	r0, [pc, #232]	; (12c4 <systemReport(int)+0x518>)
    11da:	f00c fc57 	bl	da8c <Print::println()>
    11de:	210a      	movs	r1, #10
    11e0:	4842      	ldr	r0, [pc, #264]	; (12ec <systemReport(int)+0x540>)
    11e2:	f00e fbfb 	bl	f9dc <usb_serial_write>
    11e6:	2107      	movs	r1, #7
    11e8:	4841      	ldr	r0, [pc, #260]	; (12f0 <systemReport(int)+0x544>)
    11ea:	f00e fbf7 	bl	f9dc <usb_serial_write>
    11ee:	4835      	ldr	r0, [pc, #212]	; (12c4 <systemReport(int)+0x518>)
    11f0:	f00c fc4c 	bl	da8c <Print::println()>
    11f4:	2118      	movs	r1, #24
    11f6:	483f      	ldr	r0, [pc, #252]	; (12f4 <systemReport(int)+0x548>)
    11f8:	f00e fbf0 	bl	f9dc <usb_serial_write>
    11fc:	4831      	ldr	r0, [pc, #196]	; (12c4 <systemReport(int)+0x518>)
}
    11fe:	b00b      	add	sp, #44	; 0x2c
    1200:	ecbd 8b02 	vpop	{d8}
    1204:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1208:	f00c bc40 	b.w	da8c <Print::println()>
  unsigned long seconds = (ms % 60000) / 1000;
    120c:	4e3a      	ldr	r6, [pc, #232]	; (12f8 <systemReport(int)+0x54c>)
    120e:	210f      	movs	r1, #15
    1210:	4f3a      	ldr	r7, [pc, #232]	; (12fc <systemReport(int)+0x550>)
  unsigned long milliseconds = ms % 1000;
    1212:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    1216:	483a      	ldr	r0, [pc, #232]	; (1300 <systemReport(int)+0x554>)
  unsigned long seconds = (ms % 60000) / 1000;
    1218:	f64e 2960 	movw	r9, #60000	; 0xea60
    121c:	f00e fbde 	bl	f9dc <usb_serial_write>
    1220:	fba7 3204 	umull	r3, r2, r7, r4
  unsigned long milliseconds = ms % 1000;
    1224:	fba6 1304 	umull	r1, r3, r6, r4
  if (sprintf(buffer, "%lu:%02lu:%03lu", (unsigned long)minutes, (unsigned long)seconds, (unsigned long)milliseconds) > 0 && strlen(buffer) < sizeof(buffer)) {
    1228:	a806      	add	r0, sp, #24
  unsigned long seconds = (ms % 60000) / 1000;
    122a:	0b92      	lsrs	r2, r2, #14
  if (sprintf(buffer, "%lu:%02lu:%03lu", (unsigned long)minutes, (unsigned long)seconds, (unsigned long)milliseconds) > 0 && strlen(buffer) < sizeof(buffer)) {
    122c:	4935      	ldr	r1, [pc, #212]	; (1304 <systemReport(int)+0x558>)
  unsigned long milliseconds = ms % 1000;
    122e:	099b      	lsrs	r3, r3, #6
    1230:	fb08 4313 	mls	r3, r8, r3, r4
  unsigned long seconds = (ms % 60000) / 1000;
    1234:	fb09 4412 	mls	r4, r9, r2, r4
  if (sprintf(buffer, "%lu:%02lu:%03lu", (unsigned long)minutes, (unsigned long)seconds, (unsigned long)milliseconds) > 0 && strlen(buffer) < sizeof(buffer)) {
    1238:	9300      	str	r3, [sp, #0]
  unsigned long seconds = (ms % 60000) / 1000;
    123a:	fba6 3404 	umull	r3, r4, r6, r4
  if (sprintf(buffer, "%lu:%02lu:%03lu", (unsigned long)minutes, (unsigned long)seconds, (unsigned long)milliseconds) > 0 && strlen(buffer) < sizeof(buffer)) {
    123e:	09a3      	lsrs	r3, r4, #6
    buffer[sizeof(buffer) - 1] = '\0';
    1240:	2400      	movs	r4, #0
  if (sprintf(buffer, "%lu:%02lu:%03lu", (unsigned long)minutes, (unsigned long)seconds, (unsigned long)milliseconds) > 0 && strlen(buffer) < sizeof(buffer)) {
    1242:	f010 fc23 	bl	11a8c <sprintf>
  return String(buffer);
    1246:	a906      	add	r1, sp, #24
    1248:	a803      	add	r0, sp, #12
    buffer[sizeof(buffer) - 1] = '\0';
    124a:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
  return String(buffer);
    124e:	f00c fdad 	bl	ddac <String::String(char const*)>
    Serial.print(formatTimeToMinutesSecondsMs(trackPositionMs));
    1252:	a903      	add	r1, sp, #12
    1254:	481b      	ldr	r0, [pc, #108]	; (12c4 <systemReport(int)+0x518>)
    1256:	f00c fbe7 	bl	da28 <Print::print(String const&)>
    125a:	a803      	add	r0, sp, #12
    125c:	f00c fdc4 	bl	dde8 <String::~String()>
    1260:	2103      	movs	r1, #3
    1262:	4829      	ldr	r0, [pc, #164]	; (1308 <systemReport(int)+0x55c>)
    1264:	f00e fbba 	bl	f9dc <usb_serial_write>
  unsigned long seconds = (ms % 60000) / 1000;
    1268:	fba7 3205 	umull	r3, r2, r7, r5
  if (sprintf(buffer, "%lu:%02lu:%03lu", (unsigned long)minutes, (unsigned long)seconds, (unsigned long)milliseconds) > 0 && strlen(buffer) < sizeof(buffer)) {
    126c:	4925      	ldr	r1, [pc, #148]	; (1304 <systemReport(int)+0x558>)
    126e:	a806      	add	r0, sp, #24
  unsigned long seconds = (ms % 60000) / 1000;
    1270:	0b92      	lsrs	r2, r2, #14
    1272:	fb09 5912 	mls	r9, r9, r2, r5
    1276:	fba6 3909 	umull	r3, r9, r6, r9
  unsigned long milliseconds = ms % 1000;
    127a:	fba6 3605 	umull	r3, r6, r6, r5
  if (sprintf(buffer, "%lu:%02lu:%03lu", (unsigned long)minutes, (unsigned long)seconds, (unsigned long)milliseconds) > 0 && strlen(buffer) < sizeof(buffer)) {
    127e:	ea4f 1399 	mov.w	r3, r9, lsr #6
  unsigned long milliseconds = ms % 1000;
    1282:	09b6      	lsrs	r6, r6, #6
    1284:	fb08 5516 	mls	r5, r8, r6, r5
  if (sprintf(buffer, "%lu:%02lu:%03lu", (unsigned long)minutes, (unsigned long)seconds, (unsigned long)milliseconds) > 0 && strlen(buffer) < sizeof(buffer)) {
    1288:	9500      	str	r5, [sp, #0]
    128a:	f010 fbff 	bl	11a8c <sprintf>
  return String(buffer);
    128e:	a906      	add	r1, sp, #24
    1290:	a803      	add	r0, sp, #12
    buffer[sizeof(buffer) - 1] = '\0';
    1292:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
  return String(buffer);
    1296:	f00c fd89 	bl	ddac <String::String(char const*)>
	size_t println(const String &s)			{ return print(s) + println(); }
    129a:	a903      	add	r1, sp, #12
    129c:	4809      	ldr	r0, [pc, #36]	; (12c4 <systemReport(int)+0x518>)
    129e:	f00c fbc3 	bl	da28 <Print::print(String const&)>
    12a2:	4808      	ldr	r0, [pc, #32]	; (12c4 <systemReport(int)+0x518>)
    12a4:	f00c fbf2 	bl	da8c <Print::println()>
    Serial.println(formatTimeToMinutesSecondsMs(trackLengthMs));
    12a8:	a803      	add	r0, sp, #12
    12aa:	f00c fd9d 	bl	dde8 <String::~String()>
    12ae:	e5b4      	b.n	e1a <systemReport(int)+0x6e>
    12b0:	2109      	movs	r1, #9
    12b2:	4816      	ldr	r0, [pc, #88]	; (130c <systemReport(int)+0x560>)
    12b4:	f00e fb92 	bl	f9dc <usb_serial_write>
    clockMe();
    12b8:	f7ff fce8 	bl	c8c <clockMe()>
    12bc:	e588      	b.n	dd0 <systemReport(int)+0x24>
    12be:	bf00      	nop
    12c0:	200005c4 	.word	0x200005c4
    12c4:	20002a7c 	.word	0x20002a7c
    12c8:	200005c8 	.word	0x200005c8
    12cc:	200005e0 	.word	0x200005e0
    12d0:	20004d5a 	.word	0x20004d5a
    12d4:	200003cc 	.word	0x200003cc
    12d8:	200003d0 	.word	0x200003d0
    12dc:	20000620 	.word	0x20000620
    12e0:	20004d56 	.word	0x20004d56
    12e4:	200003c4 	.word	0x200003c4
    12e8:	200003bc 	.word	0x200003bc
    12ec:	200005f0 	.word	0x200005f0
    12f0:	200005fc 	.word	0x200005fc
    12f4:	20000604 	.word	0x20000604
    12f8:	10624dd3 	.word	0x10624dd3
    12fc:	45e7b273 	.word	0x45e7b273
    1300:	20000418 	.word	0x20000418
    1304:	20000eb0 	.word	0x20000eb0
    1308:	20000428 	.word	0x20000428
    130c:	200003f0 	.word	0x200003f0

00001310 <playAudio()>:

/**
 * Plays audio file and updates tracking data
 * Increments trackIteration and sets playbackStatus
 */
void playAudio() {
    1310:	b510      	push	{r4, lr}
  wavPlayer.play(FILE_NAME);
    1312:	4927      	ldr	r1, [pc, #156]	; (13b0 <playAudio()+0xa0>)
  delay(50); //debounce
  trackIteration += 1;
    1314:	4c27      	ldr	r4, [pc, #156]	; (13b4 <playAudio()+0xa4>)
  wavPlayer.play(FILE_NAME);
    1316:	4828      	ldr	r0, [pc, #160]	; (13b8 <playAudio()+0xa8>)
void playAudio() {
    1318:	ed2d 8b02 	vpush	{d8}
  wavPlayer.play(FILE_NAME);
    131c:	f002 fb1e 	bl	395c <AudioPlaySdWav::play(char const*)>
  delay(50); //debounce
    1320:	2032      	movs	r0, #50	; 0x32
    1322:	f00c fefd 	bl	e120 <delay>
  trackIteration += 1;
    1326:	6823      	ldr	r3, [r4, #0]
  playbackStatus = true;
    1328:	2001      	movs	r0, #1
    132a:	4a24      	ldr	r2, [pc, #144]	; (13bc <playAudio()+0xac>)
    132c:	210e      	movs	r1, #14
  trackIteration += 1;
    132e:	4403      	add	r3, r0
  playbackStatus = true;
    1330:	7010      	strb	r0, [r2, #0]
    1332:	4823      	ldr	r0, [pc, #140]	; (13c0 <playAudio()+0xb0>)
  trackIteration += 1;
    1334:	6023      	str	r3, [r4, #0]
    1336:	f00e fb51 	bl	f9dc <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    133a:	481d      	ldr	r0, [pc, #116]	; (13b0 <playAudio()+0xa0>)
    133c:	f011 f900 	bl	12540 <strlen>
    1340:	4601      	mov	r1, r0
    1342:	481b      	ldr	r0, [pc, #108]	; (13b0 <playAudio()+0xa0>)
    1344:	f00e fb4a 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1348:	481e      	ldr	r0, [pc, #120]	; (13c4 <playAudio()+0xb4>)
    134a:	f00c fb9f 	bl	da8c <Print::println()>
    134e:	2113      	movs	r1, #19
    1350:	481d      	ldr	r0, [pc, #116]	; (13c8 <playAudio()+0xb8>)
    1352:	f00e fb43 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1356:	6821      	ldr	r1, [r4, #0]
    1358:	481a      	ldr	r0, [pc, #104]	; (13c4 <playAudio()+0xb4>)
    135a:	f00c fb8b 	bl	da74 <Print::print(long)>
    135e:	2141      	movs	r1, #65	; 0x41
    1360:	481a      	ldr	r0, [pc, #104]	; (13cc <playAudio()+0xbc>)
    1362:	f00e fb3b 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1366:	4817      	ldr	r0, [pc, #92]	; (13c4 <playAudio()+0xb4>)
    1368:	f00c fb90 	bl	da8c <Print::println()>
  Serial.println(FILE_NAME);
  Serial.print("Track iteration nr ");
  Serial.print(trackIteration);
  Serial.println(" during curent session (will be deleted tomorrow morning at 6AM).");

  float temp = tempmonGetTemp();
    136c:	f00d fb24 	bl	e9b8 <tempmonGetTemp>
    1370:	eeb0 8a40 	vmov.f32	s16, s0
    1374:	2110      	movs	r1, #16
    1376:	4816      	ldr	r0, [pc, #88]	; (13d0 <playAudio()+0xc0>)
    1378:	f00e fb30 	bl	f9dc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    137c:	2102      	movs	r1, #2
    137e:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
    1382:	4810      	ldr	r0, [pc, #64]	; (13c4 <playAudio()+0xb4>)
    1384:	f00c fbb4 	bl	daf0 <Print::printFloat(double, unsigned char)>
    1388:	2104      	movs	r1, #4
    138a:	4812      	ldr	r0, [pc, #72]	; (13d4 <playAudio()+0xc4>)
    138c:	f00e fb26 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1390:	480c      	ldr	r0, [pc, #48]	; (13c4 <playAudio()+0xb4>)
    1392:	f00c fb7b 	bl	da8c <Print::println()>
  Serial.print("CPU temperature ");
  Serial.print(temp);
  Serial.println(" °C");

  if (PLAYER_ID == 0){
    1396:	4b10      	ldr	r3, [pc, #64]	; (13d8 <playAudio()+0xc8>)
    1398:	681b      	ldr	r3, [r3, #0]
    139a:	b113      	cbz	r3, 13a2 <playAudio()+0x92>
    clockMe();
  }
}
    139c:	ecbd 8b02 	vpop	{d8}
    13a0:	bd10      	pop	{r4, pc}
    13a2:	ecbd 8b02 	vpop	{d8}
    13a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clockMe();
    13aa:	f7ff bc6f 	b.w	c8c <clockMe()>
    13ae:	bf00      	nop
    13b0:	20003d18 	.word	0x20003d18
    13b4:	20004aa4 	.word	0x20004aa4
    13b8:	20004abc 	.word	0x20004abc
    13bc:	20004d56 	.word	0x20004d56
    13c0:	20000f64 	.word	0x20000f64
    13c4:	20002a7c 	.word	0x20002a7c
    13c8:	20000f74 	.word	0x20000f74
    13cc:	20000f88 	.word	0x20000f88
    13d0:	2000042c 	.word	0x2000042c
    13d4:	20000440 	.word	0x20000440
    13d8:	20003d28 	.word	0x20003d28

000013dc <sendStatusToLeader()>:

/**
 * Sends status information back to the leader via Serial3
 * Only used by followers (PLAYER_ID != 0)
 */
void sendStatusToLeader() {
    13dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Only followers should send status
  if (PLAYER_ID == 0) return;
    13e0:	4d29      	ldr	r5, [pc, #164]	; (1488 <sendStatusToLeader()+0xac>)
void sendStatusToLeader() {
    13e2:	ed2d 8b02 	vpush	{d8}
    13e6:	b086      	sub	sp, #24
  if (PLAYER_ID == 0) return;
    13e8:	682b      	ldr	r3, [r5, #0]
void sendStatusToLeader() {
    13ea:	af06      	add	r7, sp, #24
  if (PLAYER_ID == 0) return;
    13ec:	b923      	cbnz	r3, 13f8 <sendStatusToLeader()+0x1c>
  // Send the status message to leader
  Serial3.println(statusMsg);
  
  Serial.print("Sent status to leader: ");
  Serial.println(statusMsg);
}
    13ee:	46bd      	mov	sp, r7
    13f0:	ecbd 8b02 	vpop	{d8}
    13f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  char statusMsg[MSG_BUFFER_SIZE];
    13f8:	466e      	mov	r6, sp
    13fa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
  float temp = tempmonGetTemp();
    13fe:	f00d fadb 	bl	e9b8 <tempmonGetTemp>
  if (wavPlayer.isPlaying()) {
    1402:	4822      	ldr	r0, [pc, #136]	; (148c <sendStatusToLeader()+0xb0>)
  float temp = tempmonGetTemp();
    1404:	eeb0 8a40 	vmov.f32	s16, s0
  char statusMsg[MSG_BUFFER_SIZE];
    1408:	ac06      	add	r4, sp, #24
  if (wavPlayer.isPlaying()) {
    140a:	f002 ff3b 	bl	4284 <AudioPlaySdWav::isPlaying()>
    140e:	bb90      	cbnz	r0, 1476 <sendStatusToLeader()+0x9a>
  uint32_t positionMs = 0;
    1410:	4680      	mov	r8, r0
  snprintf(statusMsg, MSG_BUFFER_SIZE, ":STATUS|%d|%.1f|%d|%d|%lu|%lu", 
    1412:	491f      	ldr	r1, [pc, #124]	; (1490 <sendStatusToLeader()+0xb4>)
    1414:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
    1418:	682b      	ldr	r3, [r5, #0]
    141a:	4a1e      	ldr	r2, [pc, #120]	; (1494 <sendStatusToLeader()+0xb8>)
    141c:	e9cd 8004 	strd	r8, r0, [sp, #16]
    1420:	7809      	ldrb	r1, [r1, #0]
    1422:	9103      	str	r1, [sp, #12]
    1424:	f44f 7100 	mov.w	r1, #512	; 0x200
    1428:	7810      	ldrb	r0, [r2, #0]
    142a:	4a1b      	ldr	r2, [pc, #108]	; (1498 <sendStatusToLeader()+0xbc>)
    142c:	9002      	str	r0, [sp, #8]
    142e:	4620      	mov	r0, r4
    1430:	ed8d 8b00 	vstr	d8, [sp]
    1434:	f00f fa3e 	bl	108b4 <snprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    1438:	4620      	mov	r0, r4
    143a:	f011 f881 	bl	12540 <strlen>
    143e:	4621      	mov	r1, r4
    1440:	4602      	mov	r2, r0
    1442:	4816      	ldr	r0, [pc, #88]	; (149c <sendStatusToLeader()+0xc0>)
    1444:	f00c fac8 	bl	d9d8 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    1448:	4814      	ldr	r0, [pc, #80]	; (149c <sendStatusToLeader()+0xc0>)
    144a:	f00c fb1f 	bl	da8c <Print::println()>
    144e:	2117      	movs	r1, #23
    1450:	4813      	ldr	r0, [pc, #76]	; (14a0 <sendStatusToLeader()+0xc4>)
    1452:	f00e fac3 	bl	f9dc <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    1456:	4620      	mov	r0, r4
    1458:	f011 f872 	bl	12540 <strlen>
    145c:	4601      	mov	r1, r0
    145e:	4620      	mov	r0, r4
    1460:	f00e fabc 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1464:	480f      	ldr	r0, [pc, #60]	; (14a4 <sendStatusToLeader()+0xc8>)
    1466:	f00c fb11 	bl	da8c <Print::println()>
    146a:	46b5      	mov	sp, r6
}
    146c:	46bd      	mov	sp, r7
    146e:	ecbd 8b02 	vpop	{d8}
    1472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    positionMs = wavPlayer.positionMillis();
    1476:	4805      	ldr	r0, [pc, #20]	; (148c <sendStatusToLeader()+0xb0>)
    1478:	f002 ff0c 	bl	4294 <AudioPlaySdWav::positionMillis()>
    147c:	4680      	mov	r8, r0
    lengthMs = wavPlayer.lengthMillis();
    147e:	4803      	ldr	r0, [pc, #12]	; (148c <sendStatusToLeader()+0xb0>)
    1480:	f002 ff18 	bl	42b4 <AudioPlaySdWav::lengthMillis()>
    1484:	e7c5      	b.n	1412 <sendStatusToLeader()+0x36>
    1486:	bf00      	nop
    1488:	20003d28 	.word	0x20003d28
    148c:	20004abc 	.word	0x20004abc
    1490:	20004d56 	.word	0x20004d56
    1494:	20004d5a 	.word	0x20004d5a
    1498:	20000e64 	.word	0x20000e64
    149c:	20002a8c 	.word	0x20002a8c
    14a0:	20000e84 	.word	0x20000e84
    14a4:	20002a7c 	.word	0x20002a7c

000014a8 <processCommand(char)>:
/**
 * Processes single-character commands
 * @param cmd Command character
 * @return True if command processed successfully
 */
bool processCommand(char cmd) {
    14a8:	b538      	push	{r3, r4, r5, lr}
  switch(cmd) {
    14aa:	f1a0 0321 	sub.w	r3, r0, #33	; 0x21
    14ae:	2b39      	cmp	r3, #57	; 0x39
    14b0:	d83b      	bhi.n	152a <processCommand(char)+0x82>
    14b2:	e8df f013 	tbh	[pc, r3, lsl #1]
    14b6:	004f      	.short	0x004f
    14b8:	003a003a 	.word	0x003a003a
    14bc:	003a003a 	.word	0x003a003a
    14c0:	003a003a 	.word	0x003a003a
    14c4:	003a003a 	.word	0x003a003a
    14c8:	005b003a 	.word	0x005b003a
    14cc:	0073003a 	.word	0x0073003a
    14d0:	003a003a 	.word	0x003a003a
    14d4:	00a2003a 	.word	0x00a2003a
    14d8:	00c200b2 	.word	0x00c200b2
    14dc:	003a00d2 	.word	0x003a00d2
    14e0:	003a003a 	.word	0x003a003a
    14e4:	003a003a 	.word	0x003a003a
    14e8:	003a003a 	.word	0x003a003a
    14ec:	003a00e2 	.word	0x003a00e2
    14f0:	003a00f6 	.word	0x003a00f6
    14f4:	003a003a 	.word	0x003a003a
    14f8:	003a003a 	.word	0x003a003a
    14fc:	003a003a 	.word	0x003a003a
    1500:	003a003a 	.word	0x003a003a
    1504:	003a0100 	.word	0x003a0100
    1508:	003a003a 	.word	0x003a003a
    150c:	003a003a 	.word	0x003a003a
    1510:	003a003a 	.word	0x003a003a
    1514:	003a0164 	.word	0x003a0164
    1518:	017c016f 	.word	0x017c016f
    151c:	003a003a 	.word	0x003a003a
    1520:	0181003a 	.word	0x0181003a
    1524:	003a003a 	.word	0x003a003a
    1528:	0191      	.short	0x0191
    152a:	4604      	mov	r4, r0
    152c:	2110      	movs	r1, #16
    152e:	48be      	ldr	r0, [pc, #760]	; (1828 <processCommand(char)+0x380>)
    1530:	f00e fa54 	bl	f9dc <usb_serial_write>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1534:	4620      	mov	r0, r4
    1536:	f00e fa3b 	bl	f9b0 <usb_serial_putchar>
	size_t println(char c)				{ return print(c) + println(); }
    153a:	48bc      	ldr	r0, [pc, #752]	; (182c <processCommand(char)+0x384>)
    153c:	f00c faa6 	bl	da8c <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1540:	211f      	movs	r1, #31
    1542:	48bb      	ldr	r0, [pc, #748]	; (1830 <processCommand(char)+0x388>)
      
    default:
      Serial.print("Unknown command ");
      Serial.println(cmd);
      Serial.println("Type 'h' for available commands");
      return false;
    1544:	2400      	movs	r4, #0
    1546:	f00e fa49 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    154a:	48b8      	ldr	r0, [pc, #736]	; (182c <processCommand(char)+0x384>)
    154c:	f00c fa9e 	bl	da8c <Print::println()>
  }
  
  return false;
}
    1550:	4620      	mov	r0, r4
    1552:	bd38      	pop	{r3, r4, r5, pc}
      wavPlayer.stop();
    1554:	48b7      	ldr	r0, [pc, #732]	; (1834 <processCommand(char)+0x38c>)
      return true;
    1556:	2401      	movs	r4, #1
      wavPlayer.stop();
    1558:	f002 f958 	bl	380c <AudioPlaySdWav::stop()>
    155c:	210e      	movs	r1, #14
    155e:	48b6      	ldr	r0, [pc, #728]	; (1838 <processCommand(char)+0x390>)
    1560:	f00e fa3c 	bl	f9dc <usb_serial_write>
    1564:	48b1      	ldr	r0, [pc, #708]	; (182c <processCommand(char)+0x384>)
    1566:	f00c fa91 	bl	da8c <Print::println()>
    156a:	e7f1      	b.n	1550 <processCommand(char)+0xa8>
      audioVolume += 0.1f;
    156c:	4db3      	ldr	r5, [pc, #716]	; (183c <processCommand(char)+0x394>)
      if (audioVolume > 1.0f) audioVolume = 1.0f;
    156e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
      audioVolume += 0.1f;
    1572:	eddf 6ab3 	vldr	s13, [pc, #716]	; 1840 <processCommand(char)+0x398>
    1576:	edd5 7a00 	vldr	s15, [r5]
    157a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      if (audioVolume > 1.0f) audioVolume = 1.0f;
    157e:	eef4 7ac7 	vcmpe.f32	s15, s14
    1582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1586:	f340 8138 	ble.w	17fa <processCommand(char)+0x352>
    158a:	2181      	movs	r1, #129	; 0x81
    158c:	ed85 7a00 	vstr	s14, [r5]
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    1590:	48ac      	ldr	r0, [pc, #688]	; (1844 <processCommand(char)+0x39c>)
    1592:	f001 fc97 	bl	2ec4 <AudioControlSGTL5000::volumeInteger(unsigned int)>
    1596:	2114      	movs	r1, #20
    1598:	48ab      	ldr	r0, [pc, #684]	; (1848 <processCommand(char)+0x3a0>)
    159a:	e01e      	b.n	15da <processCommand(char)+0x132>
      audioVolume -= 0.1f;
    159c:	4da7      	ldr	r5, [pc, #668]	; (183c <processCommand(char)+0x394>)
      if (audioVolume < 0.0f) audioVolume = 0.0f;
    159e:	2300      	movs	r3, #0
      audioVolume -= 0.1f;
    15a0:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 1840 <processCommand(char)+0x398>
    15a4:	edd5 7a00 	vldr	s15, [r5]
    15a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (audioVolume < 0.0f) audioVolume = 0.0f;
    15ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    15b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15b4:	f100 811e 	bmi.w	17f4 <processCommand(char)+0x34c>
    15b8:	eddf 6aa4 	vldr	s13, [pc, #656]	; 184c <processCommand(char)+0x3a4>
    15bc:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 1850 <processCommand(char)+0x3a8>
      audioVolume -= 0.1f;
    15c0:	edc5 7a00 	vstr	s15, [r5]
    15c4:	eea7 7aa6 	vfma.f32	s14, s15, s13
    15c8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    15cc:	ee17 1a90 	vmov	r1, s15
    15d0:	489c      	ldr	r0, [pc, #624]	; (1844 <processCommand(char)+0x39c>)
    15d2:	f001 fc77 	bl	2ec4 <AudioControlSGTL5000::volumeInteger(unsigned int)>
    15d6:	2114      	movs	r1, #20
    15d8:	489e      	ldr	r0, [pc, #632]	; (1854 <processCommand(char)+0x3ac>)
    15da:	f00e f9ff 	bl	f9dc <usb_serial_write>
      Serial.println(audioVolume);
    15de:	ed95 0a00 	vldr	s0, [r5]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    15e2:	2102      	movs	r1, #2
      return true;
    15e4:	2401      	movs	r4, #1
    15e6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    15ea:	4890      	ldr	r0, [pc, #576]	; (182c <processCommand(char)+0x384>)
    15ec:	f00c fa80 	bl	daf0 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    15f0:	488e      	ldr	r0, [pc, #568]	; (182c <processCommand(char)+0x384>)
    15f2:	f00c fa4b 	bl	da8c <Print::println()>
}
    15f6:	4620      	mov	r0, r4
    15f8:	bd38      	pop	{r3, r4, r5, pc}
      digitalWrite(LED_ARRAY[ledIndex], !digitalRead(LED_ARRAY[ledIndex]));
    15fa:	2002      	movs	r0, #2
      return true;
    15fc:	2401      	movs	r4, #1
      digitalWrite(LED_ARRAY[ledIndex], !digitalRead(LED_ARRAY[ledIndex]));
    15fe:	f00c fe37 	bl	e270 <digitalRead>
    1602:	4601      	mov	r1, r0
    1604:	2002      	movs	r0, #2
    1606:	fab1 f181 	clz	r1, r1
    160a:	0949      	lsrs	r1, r1, #5
    160c:	f00c fe06 	bl	e21c <digitalWrite>
    1610:	210d      	movs	r1, #13
    1612:	4891      	ldr	r0, [pc, #580]	; (1858 <processCommand(char)+0x3b0>)
    1614:	f00e f9e2 	bl	f9dc <usb_serial_write>
    1618:	e79a      	b.n	1550 <processCommand(char)+0xa8>
      digitalWrite(LED_ARRAY[ledIndex], !digitalRead(LED_ARRAY[ledIndex]));
    161a:	2003      	movs	r0, #3
      return true;
    161c:	2401      	movs	r4, #1
      digitalWrite(LED_ARRAY[ledIndex], !digitalRead(LED_ARRAY[ledIndex]));
    161e:	f00c fe27 	bl	e270 <digitalRead>
    1622:	4601      	mov	r1, r0
    1624:	2003      	movs	r0, #3
    1626:	fab1 f181 	clz	r1, r1
    162a:	0949      	lsrs	r1, r1, #5
    162c:	f00c fdf6 	bl	e21c <digitalWrite>
    1630:	210d      	movs	r1, #13
    1632:	488a      	ldr	r0, [pc, #552]	; (185c <processCommand(char)+0x3b4>)
    1634:	f00e f9d2 	bl	f9dc <usb_serial_write>
    1638:	e78a      	b.n	1550 <processCommand(char)+0xa8>
      digitalWrite(LED_ARRAY[ledIndex], !digitalRead(LED_ARRAY[ledIndex]));
    163a:	2004      	movs	r0, #4
      return true;
    163c:	2401      	movs	r4, #1
      digitalWrite(LED_ARRAY[ledIndex], !digitalRead(LED_ARRAY[ledIndex]));
    163e:	f00c fe17 	bl	e270 <digitalRead>
    1642:	4601      	mov	r1, r0
    1644:	2004      	movs	r0, #4
    1646:	fab1 f181 	clz	r1, r1
    164a:	0949      	lsrs	r1, r1, #5
    164c:	f00c fde6 	bl	e21c <digitalWrite>
    1650:	210d      	movs	r1, #13
    1652:	4883      	ldr	r0, [pc, #524]	; (1860 <processCommand(char)+0x3b8>)
    1654:	f00e f9c2 	bl	f9dc <usb_serial_write>
    1658:	e77a      	b.n	1550 <processCommand(char)+0xa8>
      digitalWrite(LED_ARRAY[ledIndex], !digitalRead(LED_ARRAY[ledIndex]));
    165a:	2005      	movs	r0, #5
      return true;
    165c:	2401      	movs	r4, #1
      digitalWrite(LED_ARRAY[ledIndex], !digitalRead(LED_ARRAY[ledIndex]));
    165e:	f00c fe07 	bl	e270 <digitalRead>
    1662:	4601      	mov	r1, r0
    1664:	2005      	movs	r0, #5
    1666:	fab1 f181 	clz	r1, r1
    166a:	40c1      	lsrs	r1, r0
    166c:	f00c fdd6 	bl	e21c <digitalWrite>
    1670:	210d      	movs	r1, #13
    1672:	487c      	ldr	r0, [pc, #496]	; (1864 <processCommand(char)+0x3bc>)
    1674:	f00e f9b2 	bl	f9dc <usb_serial_write>
    1678:	e76a      	b.n	1550 <processCommand(char)+0xa8>
      rangePWM -= 25;
    167a:	4c7b      	ldr	r4, [pc, #492]	; (1868 <processCommand(char)+0x3c0>)
    167c:	2117      	movs	r1, #23
    167e:	487b      	ldr	r0, [pc, #492]	; (186c <processCommand(char)+0x3c4>)
    1680:	6823      	ldr	r3, [r4, #0]
      if (rangePWM < 0) rangePWM = 0;
    1682:	3b19      	subs	r3, #25
    1684:	bf48      	it	mi
    1686:	2300      	movmi	r3, #0
    1688:	6023      	str	r3, [r4, #0]
    168a:	f00e f9a7 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    168e:	6821      	ldr	r1, [r4, #0]
    1690:	4866      	ldr	r0, [pc, #408]	; (182c <processCommand(char)+0x384>)
      return true;
    1692:	2401      	movs	r4, #1
    1694:	f00c f9ee 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1698:	4864      	ldr	r0, [pc, #400]	; (182c <processCommand(char)+0x384>)
    169a:	f00c f9f7 	bl	da8c <Print::println()>
}
    169e:	4620      	mov	r0, r4
    16a0:	bd38      	pop	{r3, r4, r5, pc}
      rangePWM += 25;
    16a2:	4c71      	ldr	r4, [pc, #452]	; (1868 <processCommand(char)+0x3c0>)
    16a4:	2117      	movs	r1, #23
    16a6:	4872      	ldr	r0, [pc, #456]	; (1870 <processCommand(char)+0x3c8>)
    16a8:	6823      	ldr	r3, [r4, #0]
    16aa:	3319      	adds	r3, #25
      if (rangePWM > 255) rangePWM = 255;
    16ac:	2bff      	cmp	r3, #255	; 0xff
    16ae:	bfc8      	it	gt
    16b0:	23ff      	movgt	r3, #255	; 0xff
    16b2:	6023      	str	r3, [r4, #0]
    16b4:	e7e9      	b.n	168a <processCommand(char)+0x1e2>
    16b6:	211f      	movs	r1, #31
    16b8:	486e      	ldr	r0, [pc, #440]	; (1874 <processCommand(char)+0x3cc>)
    16ba:	f00e f98f 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    16be:	485b      	ldr	r0, [pc, #364]	; (182c <processCommand(char)+0x384>)
    16c0:	f00c f9e4 	bl	da8c <Print::println()>
    16c4:	2123      	movs	r1, #35	; 0x23
    16c6:	486c      	ldr	r0, [pc, #432]	; (1878 <processCommand(char)+0x3d0>)
      return true;
    16c8:	2401      	movs	r4, #1
    16ca:	f00e f987 	bl	f9dc <usb_serial_write>
    16ce:	4857      	ldr	r0, [pc, #348]	; (182c <processCommand(char)+0x384>)
    16d0:	f00c f9dc 	bl	da8c <Print::println()>
    16d4:	2122      	movs	r1, #34	; 0x22
    16d6:	4869      	ldr	r0, [pc, #420]	; (187c <processCommand(char)+0x3d4>)
    16d8:	f00e f980 	bl	f9dc <usb_serial_write>
    16dc:	4853      	ldr	r0, [pc, #332]	; (182c <processCommand(char)+0x384>)
    16de:	f00c f9d5 	bl	da8c <Print::println()>
    16e2:	211a      	movs	r1, #26
    16e4:	4866      	ldr	r0, [pc, #408]	; (1880 <processCommand(char)+0x3d8>)
    16e6:	f00e f979 	bl	f9dc <usb_serial_write>
    16ea:	4850      	ldr	r0, [pc, #320]	; (182c <processCommand(char)+0x384>)
    16ec:	f00c f9ce 	bl	da8c <Print::println()>
    16f0:	211e      	movs	r1, #30
    16f2:	4864      	ldr	r0, [pc, #400]	; (1884 <processCommand(char)+0x3dc>)
    16f4:	f00e f972 	bl	f9dc <usb_serial_write>
    16f8:	484c      	ldr	r0, [pc, #304]	; (182c <processCommand(char)+0x384>)
    16fa:	f00c f9c7 	bl	da8c <Print::println()>
    16fe:	2114      	movs	r1, #20
    1700:	4861      	ldr	r0, [pc, #388]	; (1888 <processCommand(char)+0x3e0>)
    1702:	f00e f96b 	bl	f9dc <usb_serial_write>
    1706:	4849      	ldr	r0, [pc, #292]	; (182c <processCommand(char)+0x384>)
    1708:	f00c f9c0 	bl	da8c <Print::println()>
    170c:	2114      	movs	r1, #20
    170e:	485f      	ldr	r0, [pc, #380]	; (188c <processCommand(char)+0x3e4>)
    1710:	f00e f964 	bl	f9dc <usb_serial_write>
    1714:	4845      	ldr	r0, [pc, #276]	; (182c <processCommand(char)+0x384>)
    1716:	f00c f9b9 	bl	da8c <Print::println()>
    171a:	2118      	movs	r1, #24
    171c:	485c      	ldr	r0, [pc, #368]	; (1890 <processCommand(char)+0x3e8>)
    171e:	f00e f95d 	bl	f9dc <usb_serial_write>
    1722:	4842      	ldr	r0, [pc, #264]	; (182c <processCommand(char)+0x384>)
    1724:	f00c f9b2 	bl	da8c <Print::println()>
    1728:	211a      	movs	r1, #26
    172a:	485a      	ldr	r0, [pc, #360]	; (1894 <processCommand(char)+0x3ec>)
    172c:	f00e f956 	bl	f9dc <usb_serial_write>
    1730:	483e      	ldr	r0, [pc, #248]	; (182c <processCommand(char)+0x384>)
    1732:	f00c f9ab 	bl	da8c <Print::println()>
    1736:	211c      	movs	r1, #28
    1738:	4857      	ldr	r0, [pc, #348]	; (1898 <processCommand(char)+0x3f0>)
    173a:	f00e f94f 	bl	f9dc <usb_serial_write>
    173e:	483b      	ldr	r0, [pc, #236]	; (182c <processCommand(char)+0x384>)
    1740:	f00c f9a4 	bl	da8c <Print::println()>
    1744:	211c      	movs	r1, #28
    1746:	4855      	ldr	r0, [pc, #340]	; (189c <processCommand(char)+0x3f4>)
    1748:	f00e f948 	bl	f9dc <usb_serial_write>
    174c:	4837      	ldr	r0, [pc, #220]	; (182c <processCommand(char)+0x384>)
    174e:	f00c f99d 	bl	da8c <Print::println()>
    1752:	211f      	movs	r1, #31
    1754:	4852      	ldr	r0, [pc, #328]	; (18a0 <processCommand(char)+0x3f8>)
    1756:	f00e f941 	bl	f9dc <usb_serial_write>
    175a:	4834      	ldr	r0, [pc, #208]	; (182c <processCommand(char)+0x384>)
    175c:	f00c f996 	bl	da8c <Print::println()>
    1760:	2122      	movs	r1, #34	; 0x22
    1762:	4850      	ldr	r0, [pc, #320]	; (18a4 <processCommand(char)+0x3fc>)
    1764:	f00e f93a 	bl	f9dc <usb_serial_write>
    1768:	4830      	ldr	r0, [pc, #192]	; (182c <processCommand(char)+0x384>)
    176a:	f00c f98f 	bl	da8c <Print::println()>
    176e:	211f      	movs	r1, #31
    1770:	484d      	ldr	r0, [pc, #308]	; (18a8 <processCommand(char)+0x400>)
    1772:	f00e f933 	bl	f9dc <usb_serial_write>
    1776:	482d      	ldr	r0, [pc, #180]	; (182c <processCommand(char)+0x384>)
    1778:	f00c f988 	bl	da8c <Print::println()>
    177c:	e6e8      	b.n	1550 <processCommand(char)+0xa8>
      playAudio();
    177e:	f7ff fdc7 	bl	1310 <playAudio()>
    1782:	210d      	movs	r1, #13
    1784:	4849      	ldr	r0, [pc, #292]	; (18ac <processCommand(char)+0x404>)
      return true;
    1786:	2401      	movs	r4, #1
    1788:	f00e f928 	bl	f9dc <usb_serial_write>
    178c:	4827      	ldr	r0, [pc, #156]	; (182c <processCommand(char)+0x384>)
    178e:	f00c f97d 	bl	da8c <Print::println()>
    1792:	e6dd      	b.n	1550 <processCommand(char)+0xa8>
    1794:	211b      	movs	r1, #27
    1796:	4846      	ldr	r0, [pc, #280]	; (18b0 <processCommand(char)+0x408>)
    1798:	f00e f920 	bl	f9dc <usb_serial_write>
    179c:	4823      	ldr	r0, [pc, #140]	; (182c <processCommand(char)+0x384>)
    179e:	f00c f975 	bl	da8c <Print::println()>
      systemReport(PLAYER_ID);
    17a2:	4b44      	ldr	r3, [pc, #272]	; (18b4 <processCommand(char)+0x40c>)
      return true;
    17a4:	2401      	movs	r4, #1
      systemReport(PLAYER_ID);
    17a6:	6818      	ldr	r0, [r3, #0]
    17a8:	f7ff fb00 	bl	dac <systemReport(int)>
      return true;
    17ac:	e6d0      	b.n	1550 <processCommand(char)+0xa8>
      if (systemAwake) {
    17ae:	4b42      	ldr	r3, [pc, #264]	; (18b8 <processCommand(char)+0x410>)
    17b0:	781c      	ldrb	r4, [r3, #0]
    17b2:	bb7c      	cbnz	r4, 1814 <processCommand(char)+0x36c>
      return true;
    17b4:	2401      	movs	r4, #1
    17b6:	e6cb      	b.n	1550 <processCommand(char)+0xa8>
      if (!systemAwake) {
    17b8:	4b3f      	ldr	r3, [pc, #252]	; (18b8 <processCommand(char)+0x410>)
    17ba:	781c      	ldrb	r4, [r3, #0]
    17bc:	2c00      	cmp	r4, #0
    17be:	f47f aec7 	bne.w	1550 <processCommand(char)+0xa8>
  if (!systemAwake){
    17c2:	f7ff f969 	bl	a98 <startupSequence() [clone .part.0]>
    17c6:	210f      	movs	r1, #15
    17c8:	483c      	ldr	r0, [pc, #240]	; (18bc <processCommand(char)+0x414>)
      return true;
    17ca:	2401      	movs	r4, #1
    17cc:	f00e f906 	bl	f9dc <usb_serial_write>
    17d0:	4816      	ldr	r0, [pc, #88]	; (182c <processCommand(char)+0x384>)
    17d2:	f00c f95b 	bl	da8c <Print::println()>
    17d6:	e6bb      	b.n	1550 <processCommand(char)+0xa8>
      wavPlayer.stop();
    17d8:	4816      	ldr	r0, [pc, #88]	; (1834 <processCommand(char)+0x38c>)
      return true;
    17da:	2401      	movs	r4, #1
      wavPlayer.stop();
    17dc:	f002 f816 	bl	380c <AudioPlaySdWav::stop()>
      playAudio();
    17e0:	f7ff fd96 	bl	1310 <playAudio()>
    17e4:	2122      	movs	r1, #34	; 0x22
    17e6:	4836      	ldr	r0, [pc, #216]	; (18c0 <processCommand(char)+0x418>)
    17e8:	f00e f8f8 	bl	f9dc <usb_serial_write>
    17ec:	480f      	ldr	r0, [pc, #60]	; (182c <processCommand(char)+0x384>)
    17ee:	f00c f94d 	bl	da8c <Print::println()>
    17f2:	e6ad      	b.n	1550 <processCommand(char)+0xa8>
      if (audioVolume < 0.0f) audioVolume = 0.0f;
    17f4:	2100      	movs	r1, #0
    17f6:	602b      	str	r3, [r5, #0]
    17f8:	e6ea      	b.n	15d0 <processCommand(char)+0x128>
    17fa:	eddf 6a14 	vldr	s13, [pc, #80]	; 184c <processCommand(char)+0x3a4>
    17fe:	ed9f 7a14 	vldr	s14, [pc, #80]	; 1850 <processCommand(char)+0x3a8>
      audioVolume += 0.1f;
    1802:	edc5 7a00 	vstr	s15, [r5]
    1806:	eea7 7aa6 	vfma.f32	s14, s15, s13
    180a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    180e:	ee17 1a90 	vmov	r1, s15
    1812:	e6bd      	b.n	1590 <processCommand(char)+0xe8>
  if (systemAwake){
    1814:	f7ff f972 	bl	afc <shutDownSequence() [clone .part.0]>
    1818:	2115      	movs	r1, #21
    181a:	482a      	ldr	r0, [pc, #168]	; (18c4 <processCommand(char)+0x41c>)
    181c:	f00e f8de 	bl	f9dc <usb_serial_write>
    1820:	4802      	ldr	r0, [pc, #8]	; (182c <processCommand(char)+0x384>)
    1822:	f00c f933 	bl	da8c <Print::println()>
    1826:	e693      	b.n	1550 <processCommand(char)+0xa8>
    1828:	20000970 	.word	0x20000970
    182c:	20002a7c 	.word	0x20002a7c
    1830:	20000984 	.word	0x20000984
    1834:	20004abc 	.word	0x20004abc
    1838:	200008c0 	.word	0x200008c0
    183c:	200034a8 	.word	0x200034a8
    1840:	3dcccccd 	.word	0x3dcccccd
    1844:	20004a88 	.word	0x20004a88
    1848:	200008d0 	.word	0x200008d0
    184c:	43010000 	.word	0x43010000
    1850:	3eff7cee 	.word	0x3eff7cee
    1854:	200008e8 	.word	0x200008e8
    1858:	20000930 	.word	0x20000930
    185c:	20000940 	.word	0x20000940
    1860:	20000950 	.word	0x20000950
    1864:	20000960 	.word	0x20000960
    1868:	20003500 	.word	0x20003500
    186c:	20000918 	.word	0x20000918
    1870:	20000900 	.word	0x20000900
    1874:	20000698 	.word	0x20000698
    1878:	200006b8 	.word	0x200006b8
    187c:	200006dc 	.word	0x200006dc
    1880:	20000700 	.word	0x20000700
    1884:	2000071c 	.word	0x2000071c
    1888:	2000073c 	.word	0x2000073c
    188c:	20000754 	.word	0x20000754
    1890:	2000076c 	.word	0x2000076c
    1894:	20000788 	.word	0x20000788
    1898:	200007a4 	.word	0x200007a4
    189c:	200007c4 	.word	0x200007c4
    18a0:	200007e4 	.word	0x200007e4
    18a4:	20000804 	.word	0x20000804
    18a8:	20000828 	.word	0x20000828
    18ac:	2000088c 	.word	0x2000088c
    18b0:	20000848 	.word	0x20000848
    18b4:	20003d28 	.word	0x20003d28
    18b8:	20004d5a 	.word	0x20004d5a
    18bc:	20000864 	.word	0x20000864
    18c0:	2000089c 	.word	0x2000089c
    18c4:	20000874 	.word	0x20000874

000018c8 <setupRTC()>:
}
//###########################################################################
// HELPERS
//
//helper function to setup the RTC module - always updates time when connected via USB
void setupRTC() {
    18c8:	b500      	push	{lr}
  if (!rtc.begin()) {
    18ca:	4928      	ldr	r1, [pc, #160]	; (196c <setupRTC()+0xa4>)
void setupRTC() {
    18cc:	b083      	sub	sp, #12
  if (!rtc.begin()) {
    18ce:	4828      	ldr	r0, [pc, #160]	; (1970 <setupRTC()+0xa8>)
    18d0:	f00a fdf0 	bl	c4b4 <RTC_DS3231::begin(TwoWire*)>
    18d4:	b960      	cbnz	r0, 18f0 <setupRTC()+0x28>
    18d6:	2111      	movs	r1, #17
    18d8:	4826      	ldr	r0, [pc, #152]	; (1974 <setupRTC()+0xac>)
    18da:	f00e f87f 	bl	f9dc <usb_serial_write>
    18de:	4826      	ldr	r0, [pc, #152]	; (1978 <setupRTC()+0xb0>)
    18e0:	f00c f8d4 	bl	da8c <Print::println()>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    18e4:	f00e f8ae 	bl	fa44 <usb_serial_flush_output>
    Serial.println("Couldn't find RTC");
    Serial.flush();
    while (1) delay(10);
    18e8:	200a      	movs	r0, #10
    18ea:	f00c fc19 	bl	e120 <delay>
    18ee:	e7fb      	b.n	18e8 <setupRTC()+0x20>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
    18f0:	f00e f8f2 	bl	fad8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18f4:	4b21      	ldr	r3, [pc, #132]	; (197c <setupRTC()+0xb4>)
    18f6:	781b      	ldrb	r3, [r3, #0]
    18f8:	b933      	cbnz	r3, 1908 <setupRTC()+0x40>
    Serial.println("USB connected - updating RTC time from compilation timestamp");
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    
    // Display the new time
    clockMe();
  } else if (rtc.lostPower()) {
    18fa:	481d      	ldr	r0, [pc, #116]	; (1970 <setupRTC()+0xa8>)
    18fc:	f00a fdf2 	bl	c4e4 <RTC_DS3231::lostPower()>
    1900:	bb10      	cbnz	r0, 1948 <setupRTC()+0x80>
    // Still update if power was lost, even if USB is not connected
    Serial.println("RTC lost power, setting time from compile timestamp");
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }
}
    1902:	b003      	add	sp, #12
    1904:	f85d fb04 	ldr.w	pc, [sp], #4
    1908:	4b1d      	ldr	r3, [pc, #116]	; (1980 <setupRTC()+0xb8>)
    190a:	781b      	ldrb	r3, [r3, #0]
    190c:	07db      	lsls	r3, r3, #31
    190e:	d5f4      	bpl.n	18fa <setupRTC()+0x32>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1910:	4b1c      	ldr	r3, [pc, #112]	; (1984 <setupRTC()+0xbc>)
    1912:	4a1d      	ldr	r2, [pc, #116]	; (1988 <setupRTC()+0xc0>)
    1914:	681b      	ldr	r3, [r3, #0]
    1916:	6812      	ldr	r2, [r2, #0]
    1918:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    191a:	2b0e      	cmp	r3, #14
    191c:	d9ed      	bls.n	18fa <setupRTC()+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    191e:	213c      	movs	r1, #60	; 0x3c
    1920:	481a      	ldr	r0, [pc, #104]	; (198c <setupRTC()+0xc4>)
    1922:	f00e f85b 	bl	f9dc <usb_serial_write>
    1926:	4814      	ldr	r0, [pc, #80]	; (1978 <setupRTC()+0xb0>)
    1928:	f00c f8b0 	bl	da8c <Print::println()>
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    192c:	4a18      	ldr	r2, [pc, #96]	; (1990 <setupRTC()+0xc8>)
    192e:	4668      	mov	r0, sp
    1930:	4918      	ldr	r1, [pc, #96]	; (1994 <setupRTC()+0xcc>)
    1932:	f00a ff0d 	bl	c750 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)>
    1936:	4669      	mov	r1, sp
    1938:	480d      	ldr	r0, [pc, #52]	; (1970 <setupRTC()+0xa8>)
    193a:	f00a fddb 	bl	c4f4 <RTC_DS3231::adjust(DateTime const&)>
}
    193e:	b003      	add	sp, #12
    1940:	f85d eb04 	ldr.w	lr, [sp], #4
    clockMe();
    1944:	f7ff b9a2 	b.w	c8c <clockMe()>
    1948:	2133      	movs	r1, #51	; 0x33
    194a:	4813      	ldr	r0, [pc, #76]	; (1998 <setupRTC()+0xd0>)
    194c:	f00e f846 	bl	f9dc <usb_serial_write>
    1950:	4809      	ldr	r0, [pc, #36]	; (1978 <setupRTC()+0xb0>)
    1952:	f00c f89b 	bl	da8c <Print::println()>
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    1956:	4a0e      	ldr	r2, [pc, #56]	; (1990 <setupRTC()+0xc8>)
    1958:	490e      	ldr	r1, [pc, #56]	; (1994 <setupRTC()+0xcc>)
    195a:	4668      	mov	r0, sp
    195c:	f00a fef8 	bl	c750 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)>
    1960:	4669      	mov	r1, sp
    1962:	4803      	ldr	r0, [pc, #12]	; (1970 <setupRTC()+0xa8>)
    1964:	f00a fdc6 	bl	c4f4 <RTC_DS3231::adjust(DateTime const&)>
}
    1968:	e7cb      	b.n	1902 <setupRTC()+0x3a>
    196a:	bf00      	nop
    196c:	20002aec 	.word	0x20002aec
    1970:	20004a40 	.word	0x20004a40
    1974:	20000ec4 	.word	0x20000ec4
    1978:	20002a7c 	.word	0x20002a7c
    197c:	20004d5f 	.word	0x20004d5f
    1980:	20004d5e 	.word	0x20004d5e
    1984:	20004a9c 	.word	0x20004a9c
    1988:	20004ab0 	.word	0x20004ab0
    198c:	20000ed8 	.word	0x20000ed8
    1990:	20000f18 	.word	0x20000f18
    1994:	20000f24 	.word	0x20000f24
    1998:	20000f30 	.word	0x20000f30

0000199c <writeOutPWM(unsigned char)>:
    199c:	4922      	ldr	r1, [pc, #136]	; (1a28 <writeOutPWM(unsigned char)+0x8c>)
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    199e:	4a23      	ldr	r2, [pc, #140]	; (1a2c <writeOutPWM(unsigned char)+0x90>)
    19a0:	680b      	ldr	r3, [r1, #0]
/*
 * helper function to write pwm output from peak or rms 
 * @pin: Pin to write PWM output.
 * @peak: TRUE for peak mode, FALSE for RMS mode.
 */
void writeOutPWM(uint8_t pin) {
    19a2:	b430      	push	{r4, r5}
  if (pwmTimer >= pwmFreq) {
    19a4:	4c22      	ldr	r4, [pc, #136]	; (1a30 <writeOutPWM(unsigned char)+0x94>)
    19a6:	6815      	ldr	r5, [r2, #0]
    19a8:	6824      	ldr	r4, [r4, #0]
    19aa:	1b5b      	subs	r3, r3, r5
    19ac:	429c      	cmp	r4, r3
    19ae:	d80b      	bhi.n	19c8 <writeOutPWM(unsigned char)+0x2c>
    19b0:	680b      	ldr	r3, [r1, #0]
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    19b2:	6013      	str	r3, [r2, #0]
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
		min_sample = 32767;
		max_sample = -32768;
	}
	bool available(void) {
		__disable_irq();
    19b4:	b672      	cpsid	i
		bool flag = new_output;
    19b6:	4b1f      	ldr	r3, [pc, #124]	; (1a34 <writeOutPWM(unsigned char)+0x98>)
    19b8:	7f1a      	ldrb	r2, [r3, #28]
		if (flag) new_output = false;
    19ba:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    19be:	b10a      	cbz	r2, 19c4 <writeOutPWM(unsigned char)+0x28>
    19c0:	2200      	movs	r2, #0
    19c2:	771a      	strb	r2, [r3, #28]
		__enable_irq();
    19c4:	b662      	cpsie	i
    pwmTimer = 0;  // Reset timer
    
    // Simplified peak/RMS handling
    if (PEAK_MODE) {
      if (audioPeak.available()) {
    19c6:	b909      	cbnz	r1, 19cc <writeOutPWM(unsigned char)+0x30>
        int pwmValue = audioRMS.read() * rangePWM;
        analogWrite(pin, pwmValue);
      }
    }
  }
}
    19c8:	bc30      	pop	{r4, r5}
    19ca:	4770      	bx	lr
		return flag;
	}
	float read(void) {
		__disable_irq();
    19cc:	b672      	cpsid	i
		int min = min_sample;
		int max = max_sample;
		min_sample = 32767;
    19ce:	f647 71ff 	movw	r1, #32767	; 0x7fff
		max_sample = -32768;
    19d2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
		int min = min_sample;
    19d6:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
		min_sample = 32767;
    19da:	83d9      	strh	r1, [r3, #30]
		int max = max_sample;
    19dc:	f9b3 1020 	ldrsh.w	r1, [r3, #32]
		max_sample = -32768;
    19e0:	841c      	strh	r4, [r3, #32]
		__enable_irq();
    19e2:	b662      	cpsie	i
		min = abs(min);
    19e4:	2a00      	cmp	r2, #0
		max = abs(max);
		if (min > max) max = min;
		return (float)max / 32767.0f;
    19e6:	ed9f 6a14 	vldr	s12, [pc, #80]	; 1a38 <writeOutPWM(unsigned char)+0x9c>
        int pwmValue = audioPeak.read() * rangePWM;
    19ea:	4c14      	ldr	r4, [pc, #80]	; (1a3c <writeOutPWM(unsigned char)+0xa0>)
		min = abs(min);
    19ec:	bfb8      	it	lt
    19ee:	4252      	neglt	r2, r2
		max = abs(max);
    19f0:	2900      	cmp	r1, #0
    19f2:	edd4 6a00 	vldr	s13, [r4]
    19f6:	bfb8      	it	lt
    19f8:	4249      	neglt	r1, r1
		min = abs(min);
    19fa:	b293      	uxth	r3, r2
    19fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		max = abs(max);
    1a00:	b28a      	uxth	r2, r1
		return (float)max / 32767.0f;
    1a02:	4293      	cmp	r3, r2
    1a04:	bfb8      	it	lt
    1a06:	4613      	movlt	r3, r2
    1a08:	ee07 3a90 	vmov	s15, r3
    1a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    1a10:	bc30      	pop	{r4, r5}
    1a12:	ee87 7a86 	vdiv.f32	s14, s15, s12
        int pwmValue = audioPeak.read() * rangePWM;
    1a16:	ee67 7a26 	vmul.f32	s15, s14, s13
        analogWrite(pin, pwmValue);
    1a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1a1e:	ee17 1a90 	vmov	r1, s15
    1a22:	f00c bda1 	b.w	e568 <analogWrite>
    1a26:	bf00      	nop
    1a28:	20004a9c 	.word	0x20004a9c
    1a2c:	20004a34 	.word	0x20004a34
    1a30:	200034fc 	.word	0x200034fc
    1a34:	200047a0 	.word	0x200047a0
    1a38:	46fffe00 	.word	0x46fffe00
    1a3c:	20003500 	.word	0x20003500

00001a40 <_GLOBAL__sub_I__Z13setLedPatternbbbb>:
      }
      displayBinaryCode(1);
      analogWrite(PWM_PIN, 0);  // Set PWM to zero
    }
  }
}
    1a40:	b570      	push	{r4, r5, r6, lr}
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    1a42:	4d5f      	ldr	r5, [pc, #380]	; (1bc0 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x180>)
		num_inputs(ninput), inputQueue(iqueue) {
    1a44:	2100      	movs	r1, #0
    1a46:	4a5f      	ldr	r2, [pc, #380]	; (1bc4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x184>)
    1a48:	b082      	sub	sp, #8
    1a4a:	4e5f      	ldr	r6, [pc, #380]	; (1bc8 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x188>)
			if (first_update == NULL) {
    1a4c:	682b      	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1a4e:	6016      	str	r6, [r2, #0]
    1a50:	6111      	str	r1, [r2, #16]
			active = false;
    1a52:	8111      	strh	r1, [r2, #8]
			destination_list = NULL;
    1a54:	60d1      	str	r1, [r2, #12]
			if (first_update == NULL) {
    1a56:	2b00      	cmp	r3, #0
    1a58:	f000 80ac 	beq.w	1bb4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x174>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    1a5c:	4619      	mov	r1, r3
    1a5e:	695b      	ldr	r3, [r3, #20]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d1fb      	bne.n	1a5c <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1c>
				p->next_update = this;
    1a64:	614a      	str	r2, [r1, #20]
{
public:
	AudioPlaySdWav(void) : AudioStream(0, NULL), block_left(NULL), block_right(NULL) { begin(); }
    1a66:	4b59      	ldr	r3, [pc, #356]	; (1bcc <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x18c>)
			}
			next_update = NULL;
    1a68:	2400      	movs	r4, #0
    1a6a:	4856      	ldr	r0, [pc, #344]	; (1bc4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x184>)
    1a6c:	6013      	str	r3, [r2, #0]
    1a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1a72:	6154      	str	r4, [r2, #20]
    1a74:	6213      	str	r3, [r2, #32]
	constexpr File() : f(nullptr) { }
    1a76:	4b56      	ldr	r3, [pc, #344]	; (1bd0 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x190>)
			cpu_cycles = 0;
    1a78:	6054      	str	r4, [r2, #4]
    1a7a:	6193      	str	r3, [r2, #24]
			cpu_cycles_max = 0;
			numConnections = 0;
    1a7c:	7294      	strb	r4, [r2, #10]
	constexpr Print() : write_error(0) {}
    1a7e:	61d4      	str	r4, [r2, #28]
    1a80:	f882 4024 	strb.w	r4, [r2, #36]	; 0x24
    1a84:	6294      	str	r4, [r2, #40]	; 0x28
    1a86:	e9c2 4418 	strd	r4, r4, [r2, #96]	; 0x60
    1a8a:	f001 fea9 	bl	37e0 <AudioPlaySdWav::begin()>
AudioPlaySdWav wavPlayer;
    1a8e:	4a51      	ldr	r2, [pc, #324]	; (1bd4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x194>)
    1a90:	4951      	ldr	r1, [pc, #324]	; (1bd8 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x198>)
    1a92:	484c      	ldr	r0, [pc, #304]	; (1bc4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x184>)
    1a94:	f00e f88c 	bl	fbb0 <__aeabi_atexit>
		num_inputs(ninput), inputQueue(iqueue) {
    1a98:	4950      	ldr	r1, [pc, #320]	; (1bdc <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x19c>)
			active = false;
    1a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
		num_inputs(ninput), inputQueue(iqueue) {
    1a9e:	460b      	mov	r3, r1
			destination_list = NULL;
    1aa0:	60cc      	str	r4, [r1, #12]
				inputQueue[i] = NULL;
    1aa2:	618c      	str	r4, [r1, #24]
			if (first_update == NULL) {
    1aa4:	682c      	ldr	r4, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1aa6:	f843 6b18 	str.w	r6, [r3], #24
			active = false;
    1aaa:	810a      	strh	r2, [r1, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    1aac:	610b      	str	r3, [r1, #16]
			if (first_update == NULL) {
    1aae:	2c00      	cmp	r4, #0
    1ab0:	f000 8082 	beq.w	1bb8 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x178>
    1ab4:	4623      	mov	r3, r4
				for (p=first_update; p->next_update; p = p->next_update) ;
    1ab6:	461a      	mov	r2, r3
    1ab8:	695b      	ldr	r3, [r3, #20]
    1aba:	2b00      	cmp	r3, #0
    1abc:	d1fb      	bne.n	1ab6 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x76>
				p->next_update = this;
    1abe:	6151      	str	r1, [r2, #20]
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
    1ac0:	4847      	ldr	r0, [pc, #284]	; (1be0 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1a0>)
			next_update = NULL;
    1ac2:	2300      	movs	r3, #0
		num_inputs(ninput), inputQueue(iqueue) {
    1ac4:	4a47      	ldr	r2, [pc, #284]	; (1be4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1a4>)
    1ac6:	6008      	str	r0, [r1, #0]
		min_sample = 32767;
    1ac8:	f647 70ff 	movw	r0, #32767	; 0x7fff
			next_update = NULL;
    1acc:	614b      	str	r3, [r1, #20]
    1ace:	83c8      	strh	r0, [r1, #30]
		max_sample = -32768;
    1ad0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
			cpu_cycles = 0;
    1ad4:	604b      	str	r3, [r1, #4]
			numConnections = 0;
    1ad6:	728b      	strb	r3, [r1, #10]
    1ad8:	8408      	strh	r0, [r1, #32]
		num_inputs(ninput), inputQueue(iqueue) {
    1ada:	2001      	movs	r0, #1
    1adc:	f102 0118 	add.w	r1, r2, #24
			active = false;
    1ae0:	7213      	strb	r3, [r2, #8]
			destination_list = NULL;
    1ae2:	60d3      	str	r3, [r2, #12]
				inputQueue[i] = NULL;
    1ae4:	6193      	str	r3, [r2, #24]
    1ae6:	4623      	mov	r3, r4
		num_inputs(ninput), inputQueue(iqueue) {
    1ae8:	7250      	strb	r0, [r2, #9]
    1aea:	6111      	str	r1, [r2, #16]
				for (p=first_update; p->next_update; p = p->next_update) ;
    1aec:	4619      	mov	r1, r3
    1aee:	695b      	ldr	r3, [r3, #20]
    1af0:	2b00      	cmp	r3, #0
    1af2:	d1fb      	bne.n	1aec <_GLOBAL__sub_I__Z13setLedPatternbbbb+0xac>
	audio_block_t *inputQueueArray[1];
	int64_t accum;
	uint32_t count;

public:
	AudioAnalyzeRMS(void) : AudioStream(1, inputQueueArray) {
    1af4:	483c      	ldr	r0, [pc, #240]	; (1be8 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1a8>)
				p->next_update = this;
    1af6:	614a      	str	r2, [r1, #20]
		accum = 0;
    1af8:	2100      	movs	r1, #0
	AudioAnalyzeRMS(void) : AudioStream(1, inputQueueArray) {
    1afa:	6010      	str	r0, [r2, #0]
		accum = 0;
    1afc:	2000      	movs	r0, #0
			cpu_cycles = 0;
    1afe:	6053      	str	r3, [r2, #4]
			next_update = NULL;
    1b00:	6153      	str	r3, [r2, #20]
			numConnections = 0;
    1b02:	7293      	strb	r3, [r2, #10]
		count = 0;
    1b04:	6293      	str	r3, [r2, #40]	; 0x28
		accum = 0;
    1b06:	e9c2 0108 	strd	r0, r1, [r2, #32]
		num_inputs(ninput), inputQueue(iqueue) {
    1b0a:	4a38      	ldr	r2, [pc, #224]	; (1bec <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1ac>)
    1b0c:	2002      	movs	r0, #2
    1b0e:	f102 0118 	add.w	r1, r2, #24
			active = false;
    1b12:	7213      	strb	r3, [r2, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    1b14:	7250      	strb	r0, [r2, #9]
    1b16:	e9c2 3103 	strd	r3, r1, [r2, #12]
				inputQueue[i] = NULL;
    1b1a:	e9c2 3306 	strd	r3, r3, [r2, #24]
				for (p=first_update; p->next_update; p = p->next_update) ;
    1b1e:	4623      	mov	r3, r4
    1b20:	6964      	ldr	r4, [r4, #20]
    1b22:	2c00      	cmp	r4, #0
    1b24:	d1fb      	bne.n	1b1e <_GLOBAL__sub_I__Z13setLedPatternbbbb+0xde>
#if !defined(KINETISL)

class AudioOutputI2S : public AudioStream
{
public:
	AudioOutputI2S(void) : AudioStream(2, inputQueueArray) { begin(); }
    1b26:	4932      	ldr	r1, [pc, #200]	; (1bf0 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1b0>)
				p->next_update = this;
    1b28:	615a      	str	r2, [r3, #20]
			cpu_cycles = 0;
    1b2a:	6054      	str	r4, [r2, #4]
			next_update = NULL;
    1b2c:	6154      	str	r4, [r2, #20]
			numConnections = 0;
    1b2e:	7294      	strb	r4, [r2, #10]
    1b30:	6011      	str	r1, [r2, #0]
    1b32:	482e      	ldr	r0, [pc, #184]	; (1bec <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1ac>)
    1b34:	f001 fd24 	bl	3580 <AudioOutputI2S::begin()>
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
    1b38:	4b2e      	ldr	r3, [pc, #184]	; (1bf4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1b4>)
    1b3a:	492f      	ldr	r1, [pc, #188]	; (1bf8 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1b8>)
    1b3c:	220a      	movs	r2, #10
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
    1b3e:	482f      	ldr	r0, [pc, #188]	; (1bfc <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1bc>)
    1b40:	6019      	str	r1, [r3, #0]
    1b42:	721a      	strb	r2, [r3, #8]
    1b44:	f00b f8a4 	bl	cc90 <AudioConnection::AudioConnection()>
    1b48:	4b28      	ldr	r3, [pc, #160]	; (1bec <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1ac>)
    1b4a:	4622      	mov	r2, r4
    1b4c:	9400      	str	r4, [sp, #0]
    1b4e:	491d      	ldr	r1, [pc, #116]	; (1bc4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x184>)
    1b50:	482a      	ldr	r0, [pc, #168]	; (1bfc <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1bc>)
    1b52:	f00b f911 	bl	cd78 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord1(wavPlayer, 0, audioOutput, 0);
    1b56:	4a1f      	ldr	r2, [pc, #124]	; (1bd4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x194>)
    1b58:	4929      	ldr	r1, [pc, #164]	; (1c00 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1c0>)
    1b5a:	4828      	ldr	r0, [pc, #160]	; (1bfc <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1bc>)
    1b5c:	f00e f828 	bl	fbb0 <__aeabi_atexit>
    1b60:	4828      	ldr	r0, [pc, #160]	; (1c04 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1c4>)
    1b62:	f00b f895 	bl	cc90 <AudioConnection::AudioConnection()>
    1b66:	4b1d      	ldr	r3, [pc, #116]	; (1bdc <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x19c>)
    1b68:	4622      	mov	r2, r4
    1b6a:	9400      	str	r4, [sp, #0]
    1b6c:	4915      	ldr	r1, [pc, #84]	; (1bc4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x184>)
    1b6e:	4825      	ldr	r0, [pc, #148]	; (1c04 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1c4>)
    1b70:	f00b f902 	bl	cd78 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord2(wavPlayer, 0, audioPeak, 0);
    1b74:	4a17      	ldr	r2, [pc, #92]	; (1bd4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x194>)
    1b76:	4922      	ldr	r1, [pc, #136]	; (1c00 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1c0>)
    1b78:	4822      	ldr	r0, [pc, #136]	; (1c04 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1c4>)
    1b7a:	f00e f819 	bl	fbb0 <__aeabi_atexit>
    1b7e:	4822      	ldr	r0, [pc, #136]	; (1c08 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1c8>)
    1b80:	f00b f886 	bl	cc90 <AudioConnection::AudioConnection()>
    1b84:	4b17      	ldr	r3, [pc, #92]	; (1be4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1a4>)
    1b86:	4622      	mov	r2, r4
    1b88:	9400      	str	r4, [sp, #0]
    1b8a:	490e      	ldr	r1, [pc, #56]	; (1bc4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x184>)
    1b8c:	481e      	ldr	r0, [pc, #120]	; (1c08 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1c8>)
    1b8e:	f00b f8f3 	bl	cd78 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord3(wavPlayer, 0, audioRMS, 0);
    1b92:	4a10      	ldr	r2, [pc, #64]	; (1bd4 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x194>)
    1b94:	491a      	ldr	r1, [pc, #104]	; (1c00 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1c0>)
    1b96:	481c      	ldr	r0, [pc, #112]	; (1c08 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1c8>)
    1b98:	f00e f80a 	bl	fbb0 <__aeabi_atexit>
    1b9c:	4b1b      	ldr	r3, [pc, #108]	; (1c0c <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1cc>)
	elapsedMillis(void) { ms = millis(); }
    1b9e:	491c      	ldr	r1, [pc, #112]	; (1c10 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1d0>)
    1ba0:	6818      	ldr	r0, [r3, #0]
    1ba2:	4c1c      	ldr	r4, [pc, #112]	; (1c14 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1d4>)
    1ba4:	681d      	ldr	r5, [r3, #0]
    1ba6:	4a1c      	ldr	r2, [pc, #112]	; (1c18 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x1d8>)
    1ba8:	681b      	ldr	r3, [r3, #0]
    1baa:	6025      	str	r5, [r4, #0]
    1bac:	6008      	str	r0, [r1, #0]
    1bae:	6013      	str	r3, [r2, #0]
}
    1bb0:	b002      	add	sp, #8
    1bb2:	bd70      	pop	{r4, r5, r6, pc}
				first_update = this;
    1bb4:	602a      	str	r2, [r5, #0]
    1bb6:	e756      	b.n	1a66 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x26>
    1bb8:	460c      	mov	r4, r1
    1bba:	6029      	str	r1, [r5, #0]
    1bbc:	e780      	b.n	1ac0 <_GLOBAL__sub_I__Z13setLedPatternbbbb+0x80>
    1bbe:	bf00      	nop
    1bc0:	200042c0 	.word	0x200042c0
    1bc4:	20004abc 	.word	0x20004abc
    1bc8:	20001334 	.word	0x20001334
    1bcc:	2000134c 	.word	0x2000134c
    1bd0:	20001460 	.word	0x20001460
    1bd4:	20002f18 	.word	0x20002f18
    1bd8:	000009e9 	.word	0x000009e9
    1bdc:	200047a0 	.word	0x200047a0
    1be0:	20001364 	.word	0x20001364
    1be4:	20003ce0 	.word	0x20003ce0
    1be8:	20001358 	.word	0x20001358
    1bec:	20004780 	.word	0x20004780
    1bf0:	20001340 	.word	0x20001340
    1bf4:	20004a88 	.word	0x20004a88
    1bf8:	20001444 	.word	0x20001444
    1bfc:	200049f8 	.word	0x200049f8
    1c00:	0000ce2d 	.word	0x0000ce2d
    1c04:	20004a0c 	.word	0x20004a0c
    1c08:	20004a20 	.word	0x20004a20
    1c0c:	20004a9c 	.word	0x20004a9c
    1c10:	20004a34 	.word	0x20004a34
    1c14:	200047c4 	.word	0x200047c4
    1c18:	20004a94 	.word	0x20004a94

00001c1c <processMessage(char*)>:
/**
 * Processes string messages that start with ':'
 * @param msg Pointer to the message string
 * @return True if message processed successfully
 */
bool processMessage(char* msg) {
    1c1c:	b530      	push	{r4, r5, lr}
    1c1e:	ed2d 8b02 	vpush	{d8}
  char* content = msg;
  if (content[0] == ':') {
    1c22:	7805      	ldrb	r5, [r0, #0]
bool processMessage(char* msg) {
    1c24:	b085      	sub	sp, #20
    1c26:	4604      	mov	r4, r0
  if (content[0] == ':') {
    1c28:	2d3a      	cmp	r5, #58	; 0x3a
    1c2a:	d029      	beq.n	1c80 <processMessage(char*)+0x64>
    content++;
  }
  
  if (strlen(content) == 0) {
    1c2c:	b365      	cbz	r5, 1c88 <processMessage(char*)+0x6c>
    Serial.println("Empty message received");
    return false;
  }

  // Help command
  if (strcmp(content, "help") == 0) {
    1c2e:	49be      	ldr	r1, [pc, #760]	; (1f28 <processMessage(char*)+0x30c>)
    1c30:	4620      	mov	r0, r4
    1c32:	f010 fa29 	bl	12088 <strcmp>
    1c36:	2800      	cmp	r0, #0
    1c38:	f000 80bb 	beq.w	1db2 <processMessage(char*)+0x196>
    Serial.println("Help command received via message");
    processCommand(CMD_HELP);
    return true;
  }
  // Report command
  else if (strcmp(content, "report") == 0) {
    1c3c:	49bb      	ldr	r1, [pc, #748]	; (1f2c <processMessage(char*)+0x310>)
    1c3e:	4620      	mov	r0, r4
    1c40:	f010 fa22 	bl	12088 <strcmp>
    1c44:	2800      	cmp	r0, #0
    1c46:	f000 80c3 	beq.w	1dd0 <processMessage(char*)+0x1b4>
    Serial.println("Report command received via message");
    processCommand(CMD_REPORT);
    return true;
  }

  else if (strcmp(content, MSG_REQUEST_SEASHELL) == 0) {
    1c4a:	49b9      	ldr	r1, [pc, #740]	; (1f30 <processMessage(char*)+0x314>)
    1c4c:	4620      	mov	r0, r4
    1c4e:	f010 fa1b 	bl	12088 <strcmp>
    1c52:	bb28      	cbnz	r0, 1ca0 <processMessage(char*)+0x84>
    if (PLAYER_ID == 2) {
    1c54:	4bb7      	ldr	r3, [pc, #732]	; (1f34 <processMessage(char*)+0x318>)
    1c56:	681b      	ldr	r3, [r3, #0]
    1c58:	2b02      	cmp	r3, #2
    1c5a:	f000 80c8 	beq.w	1dee <processMessage(char*)+0x1d2>
      delay(10);
      sendStatusToLeader();
      return true;
    } else if (PLAYER_ID == 1) {
      // This player (small) should not respond - temporarily disable Serial3
      Serial3.end();  // Disable the serial port
    1c5e:	48b6      	ldr	r0, [pc, #728]	; (1f38 <processMessage(char*)+0x31c>)
    1c60:	f00b fac6 	bl	d1f0 <HardwareSerialIMXRT::end()>
      delay(250);     // Give time for the other player to respond
    1c64:	20fa      	movs	r0, #250	; 0xfa
    1c66:	f00c fa5b 	bl	e120 <delay>
      Serial3.begin(9600);  // Re-enable with same baud rate
    1c6a:	48b3      	ldr	r0, [pc, #716]	; (1f38 <processMessage(char*)+0x31c>)
    1c6c:	2200      	movs	r2, #0
    1c6e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    1c72:	f00b faf1 	bl	d258 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>
      return true;
    1c76:	2001      	movs	r0, #1
    Serial.print(content);
    Serial.println("'");
    Serial.println("Type ':help' for available messages");
    return false;
  }
}
    1c78:	b005      	add	sp, #20
    1c7a:	ecbd 8b02 	vpop	{d8}
    1c7e:	bd30      	pop	{r4, r5, pc}
  if (strlen(content) == 0) {
    1c80:	7845      	ldrb	r5, [r0, #1]
    content++;
    1c82:	3401      	adds	r4, #1
  if (strlen(content) == 0) {
    1c84:	2d00      	cmp	r5, #0
    1c86:	d1d2      	bne.n	1c2e <processMessage(char*)+0x12>
    1c88:	2116      	movs	r1, #22
    1c8a:	48ac      	ldr	r0, [pc, #688]	; (1f3c <processMessage(char*)+0x320>)
    1c8c:	f00d fea6 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1c90:	48ab      	ldr	r0, [pc, #684]	; (1f40 <processMessage(char*)+0x324>)
    1c92:	f00b fefb 	bl	da8c <Print::println()>
    return false;
    1c96:	4628      	mov	r0, r5
}
    1c98:	b005      	add	sp, #20
    1c9a:	ecbd 8b02 	vpop	{d8}
    1c9e:	bd30      	pop	{r4, r5, pc}
  else if (strcmp(content, MSG_REQUEST_SMALL) == 0) {
    1ca0:	49a8      	ldr	r1, [pc, #672]	; (1f44 <processMessage(char*)+0x328>)
    1ca2:	4620      	mov	r0, r4
    1ca4:	f010 f9f0 	bl	12088 <strcmp>
    1ca8:	2800      	cmp	r0, #0
    1caa:	d06f      	beq.n	1d8c <processMessage(char*)+0x170>
  else if (strncmp(content, "STATUS|", 7) == 0) {
    1cac:	2207      	movs	r2, #7
    1cae:	49a6      	ldr	r1, [pc, #664]	; (1f48 <processMessage(char*)+0x32c>)
    1cb0:	4620      	mov	r0, r4
    1cb2:	f010 f8ed 	bl	11e90 <strncmp>
    1cb6:	4605      	mov	r5, r0
    1cb8:	2800      	cmp	r0, #0
    1cba:	f000 80b2 	beq.w	1e22 <processMessage(char*)+0x206>
  else if (strcmp(content, "wakeup") == 0) {
    1cbe:	49a3      	ldr	r1, [pc, #652]	; (1f4c <processMessage(char*)+0x330>)
    1cc0:	4620      	mov	r0, r4
    1cc2:	f010 f9e1 	bl	12088 <strcmp>
    1cc6:	2800      	cmp	r0, #0
    1cc8:	f000 817c 	beq.w	1fc4 <processMessage(char*)+0x3a8>
  else if (strcmp(content, "sleep") == 0) {
    1ccc:	49a0      	ldr	r1, [pc, #640]	; (1f50 <processMessage(char*)+0x334>)
    1cce:	4620      	mov	r0, r4
    1cd0:	f010 f9da 	bl	12088 <strcmp>
    1cd4:	2800      	cmp	r0, #0
    1cd6:	f000 8181 	beq.w	1fdc <processMessage(char*)+0x3c0>
  else if (strcmp(content, "play") == 0) {
    1cda:	499e      	ldr	r1, [pc, #632]	; (1f54 <processMessage(char*)+0x338>)
    1cdc:	4620      	mov	r0, r4
    1cde:	f010 f9d3 	bl	12088 <strcmp>
    1ce2:	2800      	cmp	r0, #0
    1ce4:	f000 8186 	beq.w	1ff4 <processMessage(char*)+0x3d8>
  else if (strcmp(content, "stop") == 0) {
    1ce8:	499b      	ldr	r1, [pc, #620]	; (1f58 <processMessage(char*)+0x33c>)
    1cea:	4620      	mov	r0, r4
    1cec:	f010 f9cc 	bl	12088 <strcmp>
    1cf0:	2800      	cmp	r0, #0
    1cf2:	f000 808a 	beq.w	1e0a <processMessage(char*)+0x1ee>
  else if (strcmp(content, "replay") == 0) {
    1cf6:	4999      	ldr	r1, [pc, #612]	; (1f5c <processMessage(char*)+0x340>)
    1cf8:	4620      	mov	r0, r4
    1cfa:	f010 f9c5 	bl	12088 <strcmp>
    1cfe:	2800      	cmp	r0, #0
    1d00:	f000 8184 	beq.w	200c <processMessage(char*)+0x3f0>
  else if (strcmp(content, "volup") == 0) {
    1d04:	4996      	ldr	r1, [pc, #600]	; (1f60 <processMessage(char*)+0x344>)
    1d06:	4620      	mov	r0, r4
    1d08:	f010 f9be 	bl	12088 <strcmp>
    1d0c:	2800      	cmp	r0, #0
    1d0e:	f000 8189 	beq.w	2024 <processMessage(char*)+0x408>
  else if (strcmp(content, "voldown") == 0) {
    1d12:	4994      	ldr	r1, [pc, #592]	; (1f64 <processMessage(char*)+0x348>)
    1d14:	4620      	mov	r0, r4
    1d16:	f010 f9b7 	bl	12088 <strcmp>
    1d1a:	2800      	cmp	r0, #0
    1d1c:	f000 818e 	beq.w	203c <processMessage(char*)+0x420>
  else if (strcmp(content, "pwmup") == 0) {
    1d20:	4991      	ldr	r1, [pc, #580]	; (1f68 <processMessage(char*)+0x34c>)
    1d22:	4620      	mov	r0, r4
    1d24:	f010 f9b0 	bl	12088 <strcmp>
    1d28:	2800      	cmp	r0, #0
    1d2a:	f000 8193 	beq.w	2054 <processMessage(char*)+0x438>
  else if (strcmp(content, "pwmdown") == 0) {
    1d2e:	498f      	ldr	r1, [pc, #572]	; (1f6c <processMessage(char*)+0x350>)
    1d30:	4620      	mov	r0, r4
    1d32:	f010 f9a9 	bl	12088 <strcmp>
    1d36:	2800      	cmp	r0, #0
    1d38:	f000 81b3 	beq.w	20a2 <processMessage(char*)+0x486>
  else if (strcmp(content, "led1") == 0) {
    1d3c:	498c      	ldr	r1, [pc, #560]	; (1f70 <processMessage(char*)+0x354>)
    1d3e:	4620      	mov	r0, r4
    1d40:	f010 f9a2 	bl	12088 <strcmp>
    1d44:	2800      	cmp	r0, #0
    1d46:	f000 81b8 	beq.w	20ba <processMessage(char*)+0x49e>
  else if (strcmp(content, "led2") == 0) {
    1d4a:	498a      	ldr	r1, [pc, #552]	; (1f74 <processMessage(char*)+0x358>)
    1d4c:	4620      	mov	r0, r4
    1d4e:	f010 f99b 	bl	12088 <strcmp>
    1d52:	2800      	cmp	r0, #0
    1d54:	f000 81bd 	beq.w	20d2 <processMessage(char*)+0x4b6>
  else if (strcmp(content, "led3") == 0) {
    1d58:	4987      	ldr	r1, [pc, #540]	; (1f78 <processMessage(char*)+0x35c>)
    1d5a:	4620      	mov	r0, r4
    1d5c:	f010 f994 	bl	12088 <strcmp>
    1d60:	2800      	cmp	r0, #0
    1d62:	f000 81c2 	beq.w	20ea <processMessage(char*)+0x4ce>
  else if (strcmp(content, "led4") == 0) {
    1d66:	4985      	ldr	r1, [pc, #532]	; (1f7c <processMessage(char*)+0x360>)
    1d68:	4620      	mov	r0, r4
    1d6a:	f010 f98d 	bl	12088 <strcmp>
    1d6e:	2800      	cmp	r0, #0
    1d70:	f040 817c 	bne.w	206c <processMessage(char*)+0x450>
    1d74:	2122      	movs	r1, #34	; 0x22
    1d76:	4882      	ldr	r0, [pc, #520]	; (1f80 <processMessage(char*)+0x364>)
    1d78:	f00d fe30 	bl	f9dc <usb_serial_write>
    1d7c:	4870      	ldr	r0, [pc, #448]	; (1f40 <processMessage(char*)+0x324>)
    1d7e:	f00b fe85 	bl	da8c <Print::println()>
    processCommand(CMD_LED_4);
    1d82:	2034      	movs	r0, #52	; 0x34
    1d84:	f7ff fb90 	bl	14a8 <processCommand(char)>
    return true;
    1d88:	2001      	movs	r0, #1
    1d8a:	e775      	b.n	1c78 <processMessage(char*)+0x5c>
    if (PLAYER_ID == 1) {
    1d8c:	4b69      	ldr	r3, [pc, #420]	; (1f34 <processMessage(char*)+0x318>)
    1d8e:	681d      	ldr	r5, [r3, #0]
    1d90:	2d01      	cmp	r5, #1
    1d92:	f47f af64 	bne.w	1c5e <processMessage(char*)+0x42>
    1d96:	212d      	movs	r1, #45	; 0x2d
    1d98:	487a      	ldr	r0, [pc, #488]	; (1f84 <processMessage(char*)+0x368>)
    1d9a:	f00d fe1f 	bl	f9dc <usb_serial_write>
    1d9e:	4868      	ldr	r0, [pc, #416]	; (1f40 <processMessage(char*)+0x324>)
    1da0:	f00b fe74 	bl	da8c <Print::println()>
      delay(10);
    1da4:	200a      	movs	r0, #10
    1da6:	f00c f9bb 	bl	e120 <delay>
      sendStatusToLeader();
    1daa:	f7ff fb17 	bl	13dc <sendStatusToLeader()>
      return true;
    1dae:	4628      	mov	r0, r5
    1db0:	e762      	b.n	1c78 <processMessage(char*)+0x5c>
    1db2:	2121      	movs	r1, #33	; 0x21
    1db4:	4874      	ldr	r0, [pc, #464]	; (1f88 <processMessage(char*)+0x36c>)
    1db6:	f00d fe11 	bl	f9dc <usb_serial_write>
    1dba:	4861      	ldr	r0, [pc, #388]	; (1f40 <processMessage(char*)+0x324>)
    1dbc:	f00b fe66 	bl	da8c <Print::println()>
    processCommand(CMD_HELP);
    1dc0:	2048      	movs	r0, #72	; 0x48
    1dc2:	f7ff fb71 	bl	14a8 <processCommand(char)>
    return true;
    1dc6:	2001      	movs	r0, #1
}
    1dc8:	b005      	add	sp, #20
    1dca:	ecbd 8b02 	vpop	{d8}
    1dce:	bd30      	pop	{r4, r5, pc}
    1dd0:	2123      	movs	r1, #35	; 0x23
    1dd2:	486e      	ldr	r0, [pc, #440]	; (1f8c <processMessage(char*)+0x370>)
    1dd4:	f00d fe02 	bl	f9dc <usb_serial_write>
    1dd8:	4859      	ldr	r0, [pc, #356]	; (1f40 <processMessage(char*)+0x324>)
    1dda:	f00b fe57 	bl	da8c <Print::println()>
    processCommand(CMD_REPORT);
    1dde:	2052      	movs	r0, #82	; 0x52
    1de0:	f7ff fb62 	bl	14a8 <processCommand(char)>
    return true;
    1de4:	2001      	movs	r0, #1
}
    1de6:	b005      	add	sp, #20
    1de8:	ecbd 8b02 	vpop	{d8}
    1dec:	bd30      	pop	{r4, r5, pc}
    1dee:	2130      	movs	r1, #48	; 0x30
    1df0:	4867      	ldr	r0, [pc, #412]	; (1f90 <processMessage(char*)+0x374>)
    1df2:	f00d fdf3 	bl	f9dc <usb_serial_write>
    1df6:	4852      	ldr	r0, [pc, #328]	; (1f40 <processMessage(char*)+0x324>)
    1df8:	f00b fe48 	bl	da8c <Print::println()>
      delay(10);
    1dfc:	200a      	movs	r0, #10
    1dfe:	f00c f98f 	bl	e120 <delay>
      sendStatusToLeader();
    1e02:	f7ff faeb 	bl	13dc <sendStatusToLeader()>
      return true;
    1e06:	2001      	movs	r0, #1
    1e08:	e736      	b.n	1c78 <processMessage(char*)+0x5c>
    1e0a:	2121      	movs	r1, #33	; 0x21
    1e0c:	4861      	ldr	r0, [pc, #388]	; (1f94 <processMessage(char*)+0x378>)
    1e0e:	f00d fde5 	bl	f9dc <usb_serial_write>
    1e12:	484b      	ldr	r0, [pc, #300]	; (1f40 <processMessage(char*)+0x324>)
    1e14:	f00b fe3a 	bl	da8c <Print::println()>
    processCommand(CMD_STOP);
    1e18:	2021      	movs	r0, #33	; 0x21
    1e1a:	f7ff fb45 	bl	14a8 <processCommand(char)>
    return true;
    1e1e:	2001      	movs	r0, #1
    1e20:	e72a      	b.n	1c78 <processMessage(char*)+0x5c>
    1e22:	211e      	movs	r1, #30
    1e24:	485c      	ldr	r0, [pc, #368]	; (1f98 <processMessage(char*)+0x37c>)
    1e26:	f00d fdd9 	bl	f9dc <usb_serial_write>
    1e2a:	4845      	ldr	r0, [pc, #276]	; (1f40 <processMessage(char*)+0x324>)
    1e2c:	f00b fe2e 	bl	da8c <Print::println()>
    char* token = strtok(content + 7, "|"); // Skip "STATUS|" prefix
    1e30:	495a      	ldr	r1, [pc, #360]	; (1f9c <processMessage(char*)+0x380>)
    1e32:	1de0      	adds	r0, r4, #7
    1e34:	f010 f8a4 	bl	11f80 <strtok>
    if (token != NULL) {
    1e38:	2800      	cmp	r0, #0
    1e3a:	d072      	beq.n	1f22 <processMessage(char*)+0x306>
      int followerId = atoi(token);
    1e3c:	f00e f87e 	bl	ff3c <atoi>
    1e40:	4604      	mov	r4, r0
    1e42:	210b      	movs	r1, #11
    1e44:	4856      	ldr	r0, [pc, #344]	; (1fa0 <processMessage(char*)+0x384>)
    1e46:	f00d fdc9 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1e4a:	4621      	mov	r1, r4
    1e4c:	483c      	ldr	r0, [pc, #240]	; (1f40 <processMessage(char*)+0x324>)
    1e4e:	f00b fe11 	bl	da74 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1e52:	483b      	ldr	r0, [pc, #236]	; (1f40 <processMessage(char*)+0x324>)
    1e54:	f00b fe1a 	bl	da8c <Print::println()>
      token = strtok(NULL, "|");
    1e58:	4950      	ldr	r1, [pc, #320]	; (1f9c <processMessage(char*)+0x380>)
    1e5a:	4628      	mov	r0, r5
    1e5c:	f010 f890 	bl	11f80 <strtok>
      if (token != NULL) {
    1e60:	2800      	cmp	r0, #0
    1e62:	d05e      	beq.n	1f22 <processMessage(char*)+0x306>
        float followerTemp = atof(token);
    1e64:	f00e f866 	bl	ff34 <atof>
    1e68:	eeb0 8b40 	vmov.f64	d8, d0
    1e6c:	2111      	movs	r1, #17
    1e6e:	484d      	ldr	r0, [pc, #308]	; (1fa4 <processMessage(char*)+0x388>)
    1e70:	f00d fdb4 	bl	f9dc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1e74:	2102      	movs	r1, #2
    1e76:	eeb7 0bc8 	vcvt.f32.f64	s0, d8
    1e7a:	4831      	ldr	r0, [pc, #196]	; (1f40 <processMessage(char*)+0x324>)
    1e7c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    1e80:	f00b fe36 	bl	daf0 <Print::printFloat(double, unsigned char)>
    1e84:	2104      	movs	r1, #4
    1e86:	4848      	ldr	r0, [pc, #288]	; (1fa8 <processMessage(char*)+0x38c>)
    1e88:	f00d fda8 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1e8c:	482c      	ldr	r0, [pc, #176]	; (1f40 <processMessage(char*)+0x324>)
    1e8e:	f00b fdfd 	bl	da8c <Print::println()>
        token = strtok(NULL, "|");
    1e92:	4942      	ldr	r1, [pc, #264]	; (1f9c <processMessage(char*)+0x380>)
    1e94:	4628      	mov	r0, r5
    1e96:	f010 f873 	bl	11f80 <strtok>
        if (token != NULL) {
    1e9a:	2800      	cmp	r0, #0
    1e9c:	d041      	beq.n	1f22 <processMessage(char*)+0x306>
          bool followerAwake = (atoi(token) == 1);
    1e9e:	f00e f84d 	bl	ff3c <atoi>
    1ea2:	4604      	mov	r4, r0
    1ea4:	210e      	movs	r1, #14
    1ea6:	4841      	ldr	r0, [pc, #260]	; (1fac <processMessage(char*)+0x390>)
    1ea8:	f00d fd98 	bl	f9dc <usb_serial_write>
          Serial.println(followerAwake ? "YES" : "NO");
    1eac:	2c01      	cmp	r4, #1
    1eae:	4b40      	ldr	r3, [pc, #256]	; (1fb0 <processMessage(char*)+0x394>)
    1eb0:	bf0c      	ite	eq
    1eb2:	2103      	moveq	r1, #3
    1eb4:	2102      	movne	r1, #2
    1eb6:	483f      	ldr	r0, [pc, #252]	; (1fb4 <processMessage(char*)+0x398>)
    1eb8:	bf18      	it	ne
    1eba:	4618      	movne	r0, r3
    1ebc:	f00d fd8e 	bl	f9dc <usb_serial_write>
    1ec0:	481f      	ldr	r0, [pc, #124]	; (1f40 <processMessage(char*)+0x324>)
    1ec2:	f00b fde3 	bl	da8c <Print::println()>
          token = strtok(NULL, "|");
    1ec6:	4935      	ldr	r1, [pc, #212]	; (1f9c <processMessage(char*)+0x380>)
    1ec8:	4628      	mov	r0, r5
    1eca:	f010 f859 	bl	11f80 <strtok>
          if (token != NULL) {
    1ece:	b340      	cbz	r0, 1f22 <processMessage(char*)+0x306>
            bool followerPlaying = (atoi(token) == 1);
    1ed0:	f00e f834 	bl	ff3c <atoi>
    1ed4:	2111      	movs	r1, #17
    1ed6:	4604      	mov	r4, r0
    1ed8:	4837      	ldr	r0, [pc, #220]	; (1fb8 <processMessage(char*)+0x39c>)
    1eda:	f00d fd7f 	bl	f9dc <usb_serial_write>
            Serial.println(followerPlaying ? "PLAYING" : "STOPPED");
    1ede:	4b37      	ldr	r3, [pc, #220]	; (1fbc <processMessage(char*)+0x3a0>)
    1ee0:	4837      	ldr	r0, [pc, #220]	; (1fc0 <processMessage(char*)+0x3a4>)
    1ee2:	2107      	movs	r1, #7
    1ee4:	2c01      	cmp	r4, #1
    1ee6:	bf18      	it	ne
    1ee8:	4618      	movne	r0, r3
    1eea:	f00d fd77 	bl	f9dc <usb_serial_write>
    1eee:	4814      	ldr	r0, [pc, #80]	; (1f40 <processMessage(char*)+0x324>)
    1ef0:	f00b fdcc 	bl	da8c <Print::println()>
            token = strtok(NULL, "|");
    1ef4:	4929      	ldr	r1, [pc, #164]	; (1f9c <processMessage(char*)+0x380>)
    1ef6:	2000      	movs	r0, #0
    1ef8:	f010 f842 	bl	11f80 <strtok>
            if (token != NULL) {
    1efc:	b188      	cbz	r0, 1f22 <processMessage(char*)+0x306>
              uint32_t followerPosition = strtoul(token, NULL, 10);
    1efe:	2100      	movs	r1, #0
    1f00:	220a      	movs	r2, #10
    1f02:	f00f fdb5 	bl	11a70 <strtoul>
              token = strtok(NULL, "|");
    1f06:	4925      	ldr	r1, [pc, #148]	; (1f9c <processMessage(char*)+0x380>)
              uint32_t followerPosition = strtoul(token, NULL, 10);
    1f08:	4605      	mov	r5, r0
              token = strtok(NULL, "|");
    1f0a:	2000      	movs	r0, #0
    1f0c:	f010 f838 	bl	11f80 <strtok>
              if (token != NULL) {
    1f10:	b138      	cbz	r0, 1f22 <processMessage(char*)+0x306>
                uint32_t followerLength = strtoul(token, NULL, 10);
    1f12:	220a      	movs	r2, #10
    1f14:	2100      	movs	r1, #0
    1f16:	f00f fdab 	bl	11a70 <strtoul>
                if (followerLength > 0) {
    1f1a:	4604      	mov	r4, r0
    1f1c:	2800      	cmp	r0, #0
    1f1e:	f040 80f0 	bne.w	2102 <processMessage(char*)+0x4e6>
    return true;
    1f22:	2001      	movs	r0, #1
    1f24:	e6a8      	b.n	1c78 <processMessage(char*)+0x5c>
    1f26:	bf00      	nop
    1f28:	200009bc 	.word	0x200009bc
    1f2c:	200006f8 	.word	0x200006f8
    1f30:	20000a0c 	.word	0x20000a0c
    1f34:	20003d28 	.word	0x20003d28
    1f38:	20002a8c 	.word	0x20002a8c
    1f3c:	200009a4 	.word	0x200009a4
    1f40:	20002a7c 	.word	0x20002a7c
    1f44:	20000a4c 	.word	0x20000a4c
    1f48:	20000a84 	.word	0x20000a84
    1f4c:	20000b08 	.word	0x20000b08
    1f50:	20000884 	.word	0x20000884
    1f54:	20000b58 	.word	0x20000b58
    1f58:	20000b84 	.word	0x20000b84
    1f5c:	20000bb0 	.word	0x20000bb0
    1f60:	20000bdc 	.word	0x20000bdc
    1f64:	20000c0c 	.word	0x20000c0c
    1f68:	20000c40 	.word	0x20000c40
    1f6c:	20000c6c 	.word	0x20000c6c
    1f70:	20000c9c 	.word	0x20000c9c
    1f74:	20000cc8 	.word	0x20000cc8
    1f78:	20000cf4 	.word	0x20000cf4
    1f7c:	20000d20 	.word	0x20000d20
    1f80:	20000d28 	.word	0x20000d28
    1f84:	20000a54 	.word	0x20000a54
    1f88:	200009c4 	.word	0x200009c4
    1f8c:	200009e8 	.word	0x200009e8
    1f90:	20000a18 	.word	0x20000a18
    1f94:	20000b8c 	.word	0x20000b8c
    1f98:	20000a8c 	.word	0x20000a8c
    1f9c:	20000aac 	.word	0x20000aac
    1fa0:	20000ab0 	.word	0x20000ab0
    1fa4:	20000abc 	.word	0x20000abc
    1fa8:	20000440 	.word	0x20000440
    1fac:	20000ad0 	.word	0x20000ad0
    1fb0:	200003cc 	.word	0x200003cc
    1fb4:	200003d0 	.word	0x200003d0
    1fb8:	20000ae0 	.word	0x20000ae0
    1fbc:	200003bc 	.word	0x200003bc
    1fc0:	200003c4 	.word	0x200003c4
    1fc4:	2123      	movs	r1, #35	; 0x23
    1fc6:	4860      	ldr	r0, [pc, #384]	; (2148 <processMessage(char*)+0x52c>)
    1fc8:	f00d fd08 	bl	f9dc <usb_serial_write>
    1fcc:	485f      	ldr	r0, [pc, #380]	; (214c <processMessage(char*)+0x530>)
    1fce:	f00b fd5d 	bl	da8c <Print::println()>
    processCommand(CMD_WAKEUP);
    1fd2:	2057      	movs	r0, #87	; 0x57
    1fd4:	f7ff fa68 	bl	14a8 <processCommand(char)>
    return true;
    1fd8:	2001      	movs	r0, #1
    1fda:	e64d      	b.n	1c78 <processMessage(char*)+0x5c>
    1fdc:	2122      	movs	r1, #34	; 0x22
    1fde:	485c      	ldr	r0, [pc, #368]	; (2150 <processMessage(char*)+0x534>)
    1fe0:	f00d fcfc 	bl	f9dc <usb_serial_write>
    1fe4:	4859      	ldr	r0, [pc, #356]	; (214c <processMessage(char*)+0x530>)
    1fe6:	f00b fd51 	bl	da8c <Print::println()>
    processCommand(CMD_SLEEP);
    1fea:	2053      	movs	r0, #83	; 0x53
    1fec:	f7ff fa5c 	bl	14a8 <processCommand(char)>
    return true;
    1ff0:	2001      	movs	r0, #1
    1ff2:	e641      	b.n	1c78 <processMessage(char*)+0x5c>
    1ff4:	2121      	movs	r1, #33	; 0x21
    1ff6:	4857      	ldr	r0, [pc, #348]	; (2154 <processMessage(char*)+0x538>)
    1ff8:	f00d fcf0 	bl	f9dc <usb_serial_write>
    1ffc:	4853      	ldr	r0, [pc, #332]	; (214c <processMessage(char*)+0x530>)
    1ffe:	f00b fd45 	bl	da8c <Print::println()>
    processCommand(CMD_PLAY);
    2002:	2050      	movs	r0, #80	; 0x50
    2004:	f7ff fa50 	bl	14a8 <processCommand(char)>
    return true;
    2008:	2001      	movs	r0, #1
    200a:	e635      	b.n	1c78 <processMessage(char*)+0x5c>
    200c:	2123      	movs	r1, #35	; 0x23
    200e:	4852      	ldr	r0, [pc, #328]	; (2158 <processMessage(char*)+0x53c>)
    2010:	f00d fce4 	bl	f9dc <usb_serial_write>
    2014:	484d      	ldr	r0, [pc, #308]	; (214c <processMessage(char*)+0x530>)
    2016:	f00b fd39 	bl	da8c <Print::println()>
    processCommand(CMD_REPLAY);
    201a:	205a      	movs	r0, #90	; 0x5a
    201c:	f7ff fa44 	bl	14a8 <processCommand(char)>
    return true;
    2020:	2001      	movs	r0, #1
    2022:	e629      	b.n	1c78 <processMessage(char*)+0x5c>
    2024:	2126      	movs	r1, #38	; 0x26
    2026:	484d      	ldr	r0, [pc, #308]	; (215c <processMessage(char*)+0x540>)
    2028:	f00d fcd8 	bl	f9dc <usb_serial_write>
    202c:	4847      	ldr	r0, [pc, #284]	; (214c <processMessage(char*)+0x530>)
    202e:	f00b fd2d 	bl	da8c <Print::println()>
    processCommand(CMD_VOL_UP);
    2032:	202b      	movs	r0, #43	; 0x2b
    2034:	f7ff fa38 	bl	14a8 <processCommand(char)>
    return true;
    2038:	2001      	movs	r0, #1
    203a:	e61d      	b.n	1c78 <processMessage(char*)+0x5c>
    203c:	2128      	movs	r1, #40	; 0x28
    203e:	4848      	ldr	r0, [pc, #288]	; (2160 <processMessage(char*)+0x544>)
    2040:	f00d fccc 	bl	f9dc <usb_serial_write>
    2044:	4841      	ldr	r0, [pc, #260]	; (214c <processMessage(char*)+0x530>)
    2046:	f00b fd21 	bl	da8c <Print::println()>
    processCommand(CMD_VOL_DOWN);
    204a:	202d      	movs	r0, #45	; 0x2d
    204c:	f7ff fa2c 	bl	14a8 <processCommand(char)>
    return true;
    2050:	2001      	movs	r0, #1
    2052:	e611      	b.n	1c78 <processMessage(char*)+0x5c>
    2054:	2123      	movs	r1, #35	; 0x23
    2056:	4843      	ldr	r0, [pc, #268]	; (2164 <processMessage(char*)+0x548>)
    2058:	f00d fcc0 	bl	f9dc <usb_serial_write>
    205c:	483b      	ldr	r0, [pc, #236]	; (214c <processMessage(char*)+0x530>)
    205e:	f00b fd15 	bl	da8c <Print::println()>
    processCommand(CMD_PWM_UP);
    2062:	203e      	movs	r0, #62	; 0x3e
    2064:	f7ff fa20 	bl	14a8 <processCommand(char)>
    return true;
    2068:	2001      	movs	r0, #1
    206a:	e605      	b.n	1c78 <processMessage(char*)+0x5c>
    206c:	2112      	movs	r1, #18
    206e:	483e      	ldr	r0, [pc, #248]	; (2168 <processMessage(char*)+0x54c>)
    2070:	f00d fcb4 	bl	f9dc <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    2074:	4620      	mov	r0, r4
    2076:	f010 fa63 	bl	12540 <strlen>
    207a:	4601      	mov	r1, r0
    207c:	4620      	mov	r0, r4
    207e:	f00d fcad 	bl	f9dc <usb_serial_write>
    2082:	2101      	movs	r1, #1
    2084:	4839      	ldr	r0, [pc, #228]	; (216c <processMessage(char*)+0x550>)
    2086:	f00d fca9 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    208a:	4830      	ldr	r0, [pc, #192]	; (214c <processMessage(char*)+0x530>)
    208c:	f00b fcfe 	bl	da8c <Print::println()>
    2090:	2123      	movs	r1, #35	; 0x23
    2092:	4837      	ldr	r0, [pc, #220]	; (2170 <processMessage(char*)+0x554>)
    2094:	f00d fca2 	bl	f9dc <usb_serial_write>
    2098:	482c      	ldr	r0, [pc, #176]	; (214c <processMessage(char*)+0x530>)
    209a:	f00b fcf7 	bl	da8c <Print::println()>
    return false;
    209e:	2000      	movs	r0, #0
    20a0:	e5ea      	b.n	1c78 <processMessage(char*)+0x5c>
    20a2:	2125      	movs	r1, #37	; 0x25
    20a4:	4833      	ldr	r0, [pc, #204]	; (2174 <processMessage(char*)+0x558>)
    20a6:	f00d fc99 	bl	f9dc <usb_serial_write>
    20aa:	4828      	ldr	r0, [pc, #160]	; (214c <processMessage(char*)+0x530>)
    20ac:	f00b fcee 	bl	da8c <Print::println()>
    processCommand(CMD_PWM_DOWN);
    20b0:	203c      	movs	r0, #60	; 0x3c
    20b2:	f7ff f9f9 	bl	14a8 <processCommand(char)>
    return true;
    20b6:	2001      	movs	r0, #1
    20b8:	e5de      	b.n	1c78 <processMessage(char*)+0x5c>
    20ba:	2122      	movs	r1, #34	; 0x22
    20bc:	482e      	ldr	r0, [pc, #184]	; (2178 <processMessage(char*)+0x55c>)
    20be:	f00d fc8d 	bl	f9dc <usb_serial_write>
    20c2:	4822      	ldr	r0, [pc, #136]	; (214c <processMessage(char*)+0x530>)
    20c4:	f00b fce2 	bl	da8c <Print::println()>
    processCommand(CMD_LED_1);
    20c8:	2031      	movs	r0, #49	; 0x31
    20ca:	f7ff f9ed 	bl	14a8 <processCommand(char)>
    return true;
    20ce:	2001      	movs	r0, #1
    20d0:	e5d2      	b.n	1c78 <processMessage(char*)+0x5c>
    20d2:	2122      	movs	r1, #34	; 0x22
    20d4:	4829      	ldr	r0, [pc, #164]	; (217c <processMessage(char*)+0x560>)
    20d6:	f00d fc81 	bl	f9dc <usb_serial_write>
    20da:	481c      	ldr	r0, [pc, #112]	; (214c <processMessage(char*)+0x530>)
    20dc:	f00b fcd6 	bl	da8c <Print::println()>
    processCommand(CMD_LED_2);
    20e0:	2032      	movs	r0, #50	; 0x32
    20e2:	f7ff f9e1 	bl	14a8 <processCommand(char)>
    return true;
    20e6:	2001      	movs	r0, #1
    20e8:	e5c6      	b.n	1c78 <processMessage(char*)+0x5c>
    20ea:	2122      	movs	r1, #34	; 0x22
    20ec:	4824      	ldr	r0, [pc, #144]	; (2180 <processMessage(char*)+0x564>)
    20ee:	f00d fc75 	bl	f9dc <usb_serial_write>
    20f2:	4816      	ldr	r0, [pc, #88]	; (214c <processMessage(char*)+0x530>)
    20f4:	f00b fcca 	bl	da8c <Print::println()>
    processCommand(CMD_LED_3);
    20f8:	2033      	movs	r0, #51	; 0x33
    20fa:	f7ff f9d5 	bl	14a8 <processCommand(char)>
    return true;
    20fe:	2001      	movs	r0, #1
    2100:	e5ba      	b.n	1c78 <processMessage(char*)+0x5c>
	size_t print(const char s[])			{ return write(s); }
    2102:	4920      	ldr	r1, [pc, #128]	; (2184 <processMessage(char*)+0x568>)
    2104:	4811      	ldr	r0, [pc, #68]	; (214c <processMessage(char*)+0x530>)
    2106:	f7fe f92d 	bl	364 <Print::write(char const*) [clone .isra.0]>
                  Serial.print(formatTimeToMinutesSecondsMs(followerPosition));
    210a:	a801      	add	r0, sp, #4
    210c:	4629      	mov	r1, r5
    210e:	f7fe fe21 	bl	d54 <formatTimeToMinutesSecondsMs(unsigned long)>
    2112:	a901      	add	r1, sp, #4
    2114:	480d      	ldr	r0, [pc, #52]	; (214c <processMessage(char*)+0x530>)
    2116:	f00b fc87 	bl	da28 <Print::print(String const&)>
    211a:	a801      	add	r0, sp, #4
    211c:	f00b fe64 	bl	dde8 <String::~String()>
    2120:	4919      	ldr	r1, [pc, #100]	; (2188 <processMessage(char*)+0x56c>)
    2122:	480a      	ldr	r0, [pc, #40]	; (214c <processMessage(char*)+0x530>)
    2124:	f7fe f91e 	bl	364 <Print::write(char const*) [clone .isra.0]>
                  Serial.println(formatTimeToMinutesSecondsMs(followerLength));
    2128:	4621      	mov	r1, r4
    212a:	a801      	add	r0, sp, #4
    212c:	f7fe fe12 	bl	d54 <formatTimeToMinutesSecondsMs(unsigned long)>
	size_t println(const String &s)			{ return print(s) + println(); }
    2130:	a901      	add	r1, sp, #4
    2132:	4806      	ldr	r0, [pc, #24]	; (214c <processMessage(char*)+0x530>)
    2134:	f00b fc78 	bl	da28 <Print::print(String const&)>
    2138:	4804      	ldr	r0, [pc, #16]	; (214c <processMessage(char*)+0x530>)
    213a:	f00b fca7 	bl	da8c <Print::println()>
    213e:	a801      	add	r0, sp, #4
    2140:	f00b fe52 	bl	dde8 <String::~String()>
    return true;
    2144:	2001      	movs	r0, #1
    2146:	e597      	b.n	1c78 <processMessage(char*)+0x5c>
    2148:	20000b10 	.word	0x20000b10
    214c:	20002a7c 	.word	0x20002a7c
    2150:	20000b34 	.word	0x20000b34
    2154:	20000b60 	.word	0x20000b60
    2158:	20000bb8 	.word	0x20000bb8
    215c:	20000be4 	.word	0x20000be4
    2160:	20000c14 	.word	0x20000c14
    2164:	20000c48 	.word	0x20000c48
    2168:	20000d4c 	.word	0x20000d4c
    216c:	20000e38 	.word	0x20000e38
    2170:	20000d60 	.word	0x20000d60
    2174:	20000c74 	.word	0x20000c74
    2178:	20000ca4 	.word	0x20000ca4
    217c:	20000cd0 	.word	0x20000cd0
    2180:	20000cfc 	.word	0x20000cfc
    2184:	20000af4 	.word	0x20000af4
    2188:	20000428 	.word	0x20000428

0000218c <checkUsbMessages()>:
  }
  
  return commandProcessed;
}

bool checkUsbMessages() {
    218c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  memset(messageBuffer, 0, MSG_BUFFER_SIZE);
    2190:	4d43      	ldr	r5, [pc, #268]	; (22a0 <checkUsbMessages()+0x114>)
    2192:	f44f 7200 	mov.w	r2, #512	; 0x200
    2196:	2100      	movs	r1, #0
    2198:	4628      	mov	r0, r5
    219a:	f00f fe27 	bl	11dec <memset>
        virtual int available() { return usb_serial_available(); }
    219e:	f00d fbb3 	bl	f908 <usb_serial_available>
  bool messageProcessed = false;

  // No data available
  if (!Serial.available()) {
    21a2:	b910      	cbnz	r0, 21aa <checkUsbMessages()+0x1e>
    return messageProcessed;
    21a4:	2000      	movs	r0, #0
    Serial3.print(messageBuffer);
  }
  
  messageProcessed = true;
  return messageProcessed;
}
    21a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        virtual int peek() { return usb_serial_peekchar(); }
    21aa:	f00d fb8b 	bl	f8c4 <usb_serial_peekchar>
  if (firstChar != ':') {
    21ae:	fa5f f980 	uxtb.w	r9, r0
    21b2:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
    21b6:	d1f5      	bne.n	21a4 <checkUsbMessages()+0x18>
    21b8:	4f3a      	ldr	r7, [pc, #232]	; (22a4 <checkUsbMessages()+0x118>)
        virtual int read() { return usb_serial_getchar(); }
    21ba:	f00d fbe9 	bl	f990 <usb_serial_getchar>
  messageBuffer[index++] = ':';  // Store ':'
    21be:	2401      	movs	r4, #1
  while (!messageComplete && index < MSG_BUFFER_SIZE - 1) {
    21c0:	f240 16ff 	movw	r6, #511	; 0x1ff
    21c4:	f8d7 8000 	ldr.w	r8, [r7]
  messageBuffer[index++] = ':';  // Store ':'
    21c8:	f885 9000 	strb.w	r9, [r5]
        virtual int available() { return usb_serial_available(); }
    21cc:	f00d fb9c 	bl	f908 <usb_serial_available>
    if (Serial.available()) {
    21d0:	b9f0      	cbnz	r0, 2210 <checkUsbMessages()+0x84>
    21d2:	683b      	ldr	r3, [r7, #0]
    } else if (millis() - startTime > 250) {
    21d4:	eba3 0308 	sub.w	r3, r3, r8
    21d8:	2bfa      	cmp	r3, #250	; 0xfa
    21da:	d924      	bls.n	2226 <checkUsbMessages()+0x9a>
  messageBuffer[index] = '\0';
    21dc:	2300      	movs	r3, #0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    21de:	2111      	movs	r1, #17
    21e0:	4831      	ldr	r0, [pc, #196]	; (22a8 <checkUsbMessages()+0x11c>)
    21e2:	552b      	strb	r3, [r5, r4]
    21e4:	f00d fbfa 	bl	f9dc <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    21e8:	482d      	ldr	r0, [pc, #180]	; (22a0 <checkUsbMessages()+0x114>)
    21ea:	f010 f9a9 	bl	12540 <strlen>
    21ee:	4601      	mov	r1, r0
    21f0:	482b      	ldr	r0, [pc, #172]	; (22a0 <checkUsbMessages()+0x114>)
    21f2:	f00d fbf3 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    21f6:	482d      	ldr	r0, [pc, #180]	; (22ac <checkUsbMessages()+0x120>)
    21f8:	f00b fc48 	bl	da8c <Print::println()>
  processMessage(messageBuffer);
    21fc:	4828      	ldr	r0, [pc, #160]	; (22a0 <checkUsbMessages()+0x114>)
    21fe:	f7ff fd0d 	bl	1c1c <processMessage(char*)>
  if (PLAYER_ID == 0 && index > 1) {
    2202:	4b2b      	ldr	r3, [pc, #172]	; (22b0 <checkUsbMessages()+0x124>)
    2204:	681b      	ldr	r3, [r3, #0]
    2206:	2b00      	cmp	r3, #0
    2208:	d041      	beq.n	228e <checkUsbMessages()+0x102>
							  return write((const uint8_t *)str, strlen(str)); }
    220a:	2001      	movs	r0, #1
}
    220c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        virtual int read() { return usb_serial_getchar(); }
    2210:	f00d fbbe 	bl	f990 <usb_serial_getchar>
      char c = Serial.read();
    2214:	b2c0      	uxtb	r0, r0
      if (c == '\n' || c == '\r' || c == ';') {
    2216:	280a      	cmp	r0, #10
    2218:	d03c      	beq.n	2294 <checkUsbMessages()+0x108>
    221a:	280d      	cmp	r0, #13
    221c:	d03a      	beq.n	2294 <checkUsbMessages()+0x108>
    221e:	283b      	cmp	r0, #59	; 0x3b
    2220:	d03a      	beq.n	2298 <checkUsbMessages()+0x10c>
        messageBuffer[index++] = c;
    2222:	5528      	strb	r0, [r5, r4]
    2224:	3401      	adds	r4, #1
  while (!messageComplete && index < MSG_BUFFER_SIZE - 1) {
    2226:	42b4      	cmp	r4, r6
    2228:	d1d0      	bne.n	21cc <checkUsbMessages()+0x40>
  messageBuffer[index] = '\0';
    222a:	2300      	movs	r3, #0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    222c:	2111      	movs	r1, #17
    222e:	481e      	ldr	r0, [pc, #120]	; (22a8 <checkUsbMessages()+0x11c>)
    2230:	552b      	strb	r3, [r5, r4]
    2232:	f00d fbd3 	bl	f9dc <usb_serial_write>
    2236:	481a      	ldr	r0, [pc, #104]	; (22a0 <checkUsbMessages()+0x114>)
    2238:	f010 f982 	bl	12540 <strlen>
    223c:	4601      	mov	r1, r0
    223e:	4818      	ldr	r0, [pc, #96]	; (22a0 <checkUsbMessages()+0x114>)
    2240:	f00d fbcc 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2244:	4819      	ldr	r0, [pc, #100]	; (22ac <checkUsbMessages()+0x120>)
    2246:	f00b fc21 	bl	da8c <Print::println()>
  processMessage(messageBuffer);
    224a:	4815      	ldr	r0, [pc, #84]	; (22a0 <checkUsbMessages()+0x114>)
    224c:	f7ff fce6 	bl	1c1c <processMessage(char*)>
  if (PLAYER_ID == 0 && index > 1) {
    2250:	4b17      	ldr	r3, [pc, #92]	; (22b0 <checkUsbMessages()+0x124>)
    2252:	681b      	ldr	r3, [r3, #0]
    2254:	2b00      	cmp	r3, #0
    2256:	d1d8      	bne.n	220a <checkUsbMessages()+0x7e>
    2258:	2109      	movs	r1, #9
    225a:	4816      	ldr	r0, [pc, #88]	; (22b4 <checkUsbMessages()+0x128>)
    225c:	f00d fbbe 	bl	f9dc <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    2260:	480f      	ldr	r0, [pc, #60]	; (22a0 <checkUsbMessages()+0x114>)
    2262:	f010 f96d 	bl	12540 <strlen>
    2266:	4601      	mov	r1, r0
    2268:	480d      	ldr	r0, [pc, #52]	; (22a0 <checkUsbMessages()+0x114>)
    226a:	f00d fbb7 	bl	f9dc <usb_serial_write>
    226e:	2115      	movs	r1, #21
    2270:	4811      	ldr	r0, [pc, #68]	; (22b8 <checkUsbMessages()+0x12c>)
    2272:	f00d fbb3 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2276:	480d      	ldr	r0, [pc, #52]	; (22ac <checkUsbMessages()+0x120>)
    2278:	f00b fc08 	bl	da8c <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    227c:	4808      	ldr	r0, [pc, #32]	; (22a0 <checkUsbMessages()+0x114>)
    227e:	f010 f95f 	bl	12540 <strlen>
    2282:	4907      	ldr	r1, [pc, #28]	; (22a0 <checkUsbMessages()+0x114>)
    2284:	4602      	mov	r2, r0
    2286:	480d      	ldr	r0, [pc, #52]	; (22bc <checkUsbMessages()+0x130>)
    2288:	f00b fba6 	bl	d9d8 <Print::write(unsigned char const*, unsigned int)>
    228c:	e7bd      	b.n	220a <checkUsbMessages()+0x7e>
    228e:	2c01      	cmp	r4, #1
    2290:	d0bb      	beq.n	220a <checkUsbMessages()+0x7e>
    2292:	e7e1      	b.n	2258 <checkUsbMessages()+0xcc>
        if (c == ';') {
    2294:	283b      	cmp	r0, #59	; 0x3b
    2296:	d1a1      	bne.n	21dc <checkUsbMessages()+0x50>
          messageBuffer[index++] = c;
    2298:	233b      	movs	r3, #59	; 0x3b
    229a:	552b      	strb	r3, [r5, r4]
    229c:	3401      	adds	r4, #1
    229e:	e7c4      	b.n	222a <checkUsbMessages()+0x9e>
    22a0:	200047e0 	.word	0x200047e0
    22a4:	20004a9c 	.word	0x20004a9c
    22a8:	20000dcc 	.word	0x20000dcc
    22ac:	20002a7c 	.word	0x20002a7c
    22b0:	20003d28 	.word	0x20003d28
    22b4:	20000e40 	.word	0x20000e40
    22b8:	20000e4c 	.word	0x20000e4c
    22bc:	20002a8c 	.word	0x20002a8c

000022c0 <receiveSerialMessage()>:
void receiveSerialMessage() {
    22c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  memset(messageBuffer, 0, MSG_BUFFER_SIZE);
    22c4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 236c <receiveSerialMessage()+0xac>
    22c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    22cc:	2100      	movs	r1, #0
  messageBuffer[index++] = (char)Serial3.read();
    22ce:	2401      	movs	r4, #1
  memset(messageBuffer, 0, MSG_BUFFER_SIZE);
    22d0:	4640      	mov	r0, r8
    22d2:	4646      	mov	r6, r8
    22d4:	f00f fd8a 	bl	11dec <memset>
  messageBuffer[index++] = (char)Serial3.read();
    22d8:	4822      	ldr	r0, [pc, #136]	; (2364 <receiveSerialMessage()+0xa4>)
    22da:	f00a ff31 	bl	d140 <HardwareSerialIMXRT::read()>
  while (!messageComplete && index < MSG_BUFFER_SIZE - 1 && Serial3.available()) {
    22de:	4d21      	ldr	r5, [pc, #132]	; (2364 <receiveSerialMessage()+0xa4>)
    22e0:	f240 17ff 	movw	r7, #511	; 0x1ff
  messageBuffer[index++] = (char)Serial3.read();
    22e4:	f888 0000 	strb.w	r0, [r8]
  while (!messageComplete && index < MSG_BUFFER_SIZE - 1 && Serial3.available()) {
    22e8:	e008      	b.n	22fc <receiveSerialMessage()+0x3c>
    if (c == '\n' || c == '\r' || c == ';') {
    22ea:	2b3b      	cmp	r3, #59	; 0x3b
    22ec:	d030      	beq.n	2350 <receiveSerialMessage()+0x90>
      messageBuffer[index++] = c;
    22ee:	3401      	adds	r4, #1
    22f0:	f806 3f01 	strb.w	r3, [r6, #1]!
    delay(1);
    22f4:	f00b ff14 	bl	e120 <delay>
  while (!messageComplete && index < MSG_BUFFER_SIZE - 1 && Serial3.available()) {
    22f8:	42bc      	cmp	r4, r7
    22fa:	d013      	beq.n	2324 <receiveSerialMessage()+0x64>
    22fc:	4628      	mov	r0, r5
    22fe:	f00a fecd 	bl	d09c <HardwareSerialIMXRT::available()>
    2302:	4603      	mov	r3, r0
    char c = (char)Serial3.read();
    2304:	4628      	mov	r0, r5
  while (!messageComplete && index < MSG_BUFFER_SIZE - 1 && Serial3.available()) {
    2306:	b16b      	cbz	r3, 2324 <receiveSerialMessage()+0x64>
    char c = (char)Serial3.read();
    2308:	f00a ff1a 	bl	d140 <HardwareSerialIMXRT::read()>
    230c:	b2c3      	uxtb	r3, r0
    if (c == '\n' || c == '\r' || c == ';') {
    230e:	2b0a      	cmp	r3, #10
    2310:	d003      	beq.n	231a <receiveSerialMessage()+0x5a>
    2312:	2b0d      	cmp	r3, #13
    delay(1);
    2314:	f04f 0001 	mov.w	r0, #1
    if (c == '\n' || c == '\r' || c == ';') {
    2318:	d1e7      	bne.n	22ea <receiveSerialMessage()+0x2a>
      if (c == ';') {
    231a:	2b3b      	cmp	r3, #59	; 0x3b
    231c:	d018      	beq.n	2350 <receiveSerialMessage()+0x90>
    delay(1);
    231e:	2001      	movs	r0, #1
    2320:	f00b fefe 	bl	e120 <delay>
  messageBuffer[index] = '\0';
    2324:	2300      	movs	r3, #0
    2326:	2111      	movs	r1, #17
    2328:	480f      	ldr	r0, [pc, #60]	; (2368 <receiveSerialMessage()+0xa8>)
    232a:	f808 3004 	strb.w	r3, [r8, r4]
    232e:	f00d fb55 	bl	f9dc <usb_serial_write>
    2332:	480e      	ldr	r0, [pc, #56]	; (236c <receiveSerialMessage()+0xac>)
    2334:	f010 f904 	bl	12540 <strlen>
    2338:	4601      	mov	r1, r0
    233a:	480c      	ldr	r0, [pc, #48]	; (236c <receiveSerialMessage()+0xac>)
    233c:	f00d fb4e 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2340:	480b      	ldr	r0, [pc, #44]	; (2370 <receiveSerialMessage()+0xb0>)
    2342:	f00b fba3 	bl	da8c <Print::println()>
  processMessage(messageBuffer);
    2346:	4809      	ldr	r0, [pc, #36]	; (236c <receiveSerialMessage()+0xac>)
}
    2348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  processMessage(messageBuffer);
    234c:	f7ff bc66 	b.w	1c1c <processMessage(char*)>
        messageBuffer[index++] = c;
    2350:	1c63      	adds	r3, r4, #1
    2352:	223b      	movs	r2, #59	; 0x3b
    delay(1);
    2354:	2001      	movs	r0, #1
        messageBuffer[index++] = c;
    2356:	f808 2004 	strb.w	r2, [r8, r4]
    235a:	461c      	mov	r4, r3
    delay(1);
    235c:	f00b fee0 	bl	e120 <delay>
  while (!messageComplete && index < MSG_BUFFER_SIZE - 1 && Serial3.available()) {
    2360:	e7e0      	b.n	2324 <receiveSerialMessage()+0x64>
    2362:	bf00      	nop
    2364:	20002a8c 	.word	0x20002a8c
    2368:	20000e9c 	.word	0x20000e9c
    236c:	200047e0 	.word	0x200047e0
    2370:	20002a7c 	.word	0x20002a7c

00002374 <follower()>:
  static elapsedMillis commandCheckTimer;
    2374:	4b39      	ldr	r3, [pc, #228]	; (245c <follower()+0xe8>)
    2376:	681a      	ldr	r2, [r3, #0]
void follower() {
    2378:	b570      	push	{r4, r5, r6, lr}
  static elapsedMillis commandCheckTimer;
    237a:	07d4      	lsls	r4, r2, #31
    237c:	d523      	bpl.n	23c6 <follower()+0x52>
  static elapsedMillis updateTimer;
    237e:	4b38      	ldr	r3, [pc, #224]	; (2460 <follower()+0xec>)
	operator unsigned long () const { return millis() - ms; }
    2380:	4938      	ldr	r1, [pc, #224]	; (2464 <follower()+0xf0>)
    2382:	6818      	ldr	r0, [r3, #0]
    2384:	4c38      	ldr	r4, [pc, #224]	; (2468 <follower()+0xf4>)
    2386:	07c0      	lsls	r0, r0, #31
    2388:	680a      	ldr	r2, [r1, #0]
    238a:	d526      	bpl.n	23da <follower()+0x66>
    238c:	6823      	ldr	r3, [r4, #0]
    238e:	4d37      	ldr	r5, [pc, #220]	; (246c <follower()+0xf8>)
    2390:	1a9b      	subs	r3, r3, r2
  if (commandCheckTimer >= 10) {
    2392:	2b09      	cmp	r3, #9
    2394:	d82a      	bhi.n	23ec <follower()+0x78>
    2396:	6823      	ldr	r3, [r4, #0]
    2398:	682a      	ldr	r2, [r5, #0]
    239a:	1a9b      	subs	r3, r3, r2
  if (updateTimer >= UPDATE_RATE) {
    239c:	2b13      	cmp	r3, #19
    239e:	d947      	bls.n	2430 <follower()+0xbc>
    if (systemAwake) {
    23a0:	4b33      	ldr	r3, [pc, #204]	; (2470 <follower()+0xfc>)
    23a2:	6822      	ldr	r2, [r4, #0]
    23a4:	781b      	ldrb	r3, [r3, #0]
      if (wavPlayer.isPlaying()) {
    23a6:	4833      	ldr	r0, [pc, #204]	; (2474 <follower()+0x100>)
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    23a8:	602a      	str	r2, [r5, #0]
    if (systemAwake) {
    23aa:	2b00      	cmp	r3, #0
    23ac:	d041      	beq.n	2432 <follower()+0xbe>
      if (wavPlayer.isPlaying()) {
    23ae:	f001 ff69 	bl	4284 <AudioPlaySdWav::isPlaying()>
    23b2:	2800      	cmp	r0, #0
    23b4:	d049      	beq.n	244a <follower()+0xd6>
        writeOutPWM(PWM_PIN);
    23b6:	2006      	movs	r0, #6
    23b8:	f7ff faf0 	bl	199c <writeOutPWM(unsigned char)>
        displayBinaryCode(8);
    23bc:	2008      	movs	r0, #8
}
    23be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        displayBinaryCode(8);
    23c2:	f7fe bbd1 	b.w	b68 <displayBinaryCode(int)>
  static elapsedMillis commandCheckTimer;
    23c6:	2001      	movs	r0, #1
    23c8:	4c27      	ldr	r4, [pc, #156]	; (2468 <follower()+0xf4>)
	elapsedMillis(void) { ms = millis(); }
    23ca:	4926      	ldr	r1, [pc, #152]	; (2464 <follower()+0xf0>)
    23cc:	6018      	str	r0, [r3, #0]
  static elapsedMillis updateTimer;
    23ce:	4b24      	ldr	r3, [pc, #144]	; (2460 <follower()+0xec>)
    23d0:	6822      	ldr	r2, [r4, #0]
    23d2:	6818      	ldr	r0, [r3, #0]
    23d4:	600a      	str	r2, [r1, #0]
    23d6:	07c0      	lsls	r0, r0, #31
    23d8:	d4d8      	bmi.n	238c <follower()+0x18>
    23da:	6820      	ldr	r0, [r4, #0]
    23dc:	4d23      	ldr	r5, [pc, #140]	; (246c <follower()+0xf8>)
    23de:	6028      	str	r0, [r5, #0]
    23e0:	2001      	movs	r0, #1
    23e2:	6018      	str	r0, [r3, #0]
    23e4:	6823      	ldr	r3, [r4, #0]
	operator unsigned long () const { return millis() - ms; }
    23e6:	1a9b      	subs	r3, r3, r2
  if (commandCheckTimer >= 10) {
    23e8:	2b09      	cmp	r3, #9
    23ea:	d9d4      	bls.n	2396 <follower()+0x22>
    23ec:	6823      	ldr	r3, [r4, #0]
    if (Serial3.available()) {
    23ee:	4822      	ldr	r0, [pc, #136]	; (2478 <follower()+0x104>)
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    23f0:	600b      	str	r3, [r1, #0]
    23f2:	f00a fe53 	bl	d09c <HardwareSerialIMXRT::available()>
    23f6:	2800      	cmp	r0, #0
    23f8:	d0cd      	beq.n	2396 <follower()+0x22>
      if (Serial3.peek() == ':') {
    23fa:	481f      	ldr	r0, [pc, #124]	; (2478 <follower()+0x104>)
    23fc:	f00a fe62 	bl	d0c4 <HardwareSerialIMXRT::peek()>
    2400:	283a      	cmp	r0, #58	; 0x3a
    2402:	d028      	beq.n	2456 <follower()+0xe2>
        char inChar = (char)Serial3.read();
    2404:	481c      	ldr	r0, [pc, #112]	; (2478 <follower()+0x104>)
    2406:	f00a fe9b 	bl	d140 <HardwareSerialIMXRT::read()>
        processCommand(inChar);
    240a:	b2c0      	uxtb	r0, r0
    240c:	f7ff f84c 	bl	14a8 <processCommand(char)>
      while (Serial3.available()) {
    2410:	4e19      	ldr	r6, [pc, #100]	; (2478 <follower()+0x104>)
    2412:	e001      	b.n	2418 <follower()+0xa4>
        Serial3.read();
    2414:	f00a fe94 	bl	d140 <HardwareSerialIMXRT::read()>
      while (Serial3.available()) {
    2418:	4630      	mov	r0, r6
    241a:	f00a fe3f 	bl	d09c <HardwareSerialIMXRT::available()>
    241e:	4603      	mov	r3, r0
        Serial3.read();
    2420:	4630      	mov	r0, r6
      while (Serial3.available()) {
    2422:	2b00      	cmp	r3, #0
    2424:	d1f6      	bne.n	2414 <follower()+0xa0>
    2426:	6823      	ldr	r3, [r4, #0]
	operator unsigned long () const { return millis() - ms; }
    2428:	682a      	ldr	r2, [r5, #0]
    242a:	1a9b      	subs	r3, r3, r2
  if (updateTimer >= UPDATE_RATE) {
    242c:	2b13      	cmp	r3, #19
    242e:	d8b7      	bhi.n	23a0 <follower()+0x2c>
}
    2430:	bd70      	pop	{r4, r5, r6, pc}
      if (wavPlayer.isPlaying()) {
    2432:	f001 ff27 	bl	4284 <AudioPlaySdWav::isPlaying()>
    2436:	b950      	cbnz	r0, 244e <follower()+0xda>
      displayBinaryCode(1);
    2438:	2001      	movs	r0, #1
    243a:	f7fe fb95 	bl	b68 <displayBinaryCode(int)>
      analogWrite(PWM_PIN, 0);  // Set PWM to zero
    243e:	2100      	movs	r1, #0
    2440:	2006      	movs	r0, #6
}
    2442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      analogWrite(PWM_PIN, 0);  // Set PWM to zero
    2446:	f00c b88f 	b.w	e568 <analogWrite>
        displayBinaryCode(2);
    244a:	2002      	movs	r0, #2
    244c:	e7f5      	b.n	243a <follower()+0xc6>
        wavPlayer.stop();
    244e:	4809      	ldr	r0, [pc, #36]	; (2474 <follower()+0x100>)
    2450:	f001 f9dc 	bl	380c <AudioPlaySdWav::stop()>
    2454:	e7f0      	b.n	2438 <follower()+0xc4>
        receiveSerialMessage();
    2456:	f7ff ff33 	bl	22c0 <receiveSerialMessage()>
    245a:	e7d9      	b.n	2410 <follower()+0x9c>
    245c:	20004210 	.word	0x20004210
    2460:	2000420c 	.word	0x2000420c
    2464:	2000446c 	.word	0x2000446c
    2468:	20004a9c 	.word	0x20004a9c
    246c:	20004468 	.word	0x20004468
    2470:	20004d5a 	.word	0x20004d5a
    2474:	20004abc 	.word	0x20004abc
    2478:	20002a8c 	.word	0x20002a8c

0000247c <sendSerialCommand(char)>:
void sendSerialCommand(char command) {
    247c:	b510      	push	{r4, lr}
    247e:	4604      	mov	r4, r0
	// Transmit a single byte
	size_t write(long n) { return write((uint8_t)n); }
	// Transmit a single byte
	size_t write(unsigned int n) { return write((uint8_t)n); }
	// Transmit a single byte
	size_t write(int n) { return write((uint8_t)n); }
    2480:	480b      	ldr	r0, [pc, #44]	; (24b0 <sendSerialCommand(char)+0x34>)
    2482:	4621      	mov	r1, r4
    2484:	f00b f8c4 	bl	d610 <HardwareSerialIMXRT::write(unsigned char)>
    2488:	2109      	movs	r1, #9
    248a:	480a      	ldr	r0, [pc, #40]	; (24b4 <sendSerialCommand(char)+0x38>)
    248c:	f00d faa6 	bl	f9dc <usb_serial_write>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2490:	4620      	mov	r0, r4
    2492:	f00d fa8d 	bl	f9b0 <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2496:	2115      	movs	r1, #21
    2498:	4807      	ldr	r0, [pc, #28]	; (24b8 <sendSerialCommand(char)+0x3c>)
    249a:	f00d fa9f 	bl	f9dc <usb_serial_write>
    249e:	4807      	ldr	r0, [pc, #28]	; (24bc <sendSerialCommand(char)+0x40>)
    24a0:	f00b faf4 	bl	da8c <Print::println()>
  delay(50); //debounce
    24a4:	2032      	movs	r0, #50	; 0x32
}
    24a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(50); //debounce
    24aa:	f00b be39 	b.w	e120 <delay>
    24ae:	bf00      	nop
    24b0:	20002a8c 	.word	0x20002a8c
    24b4:	20000e30 	.word	0x20000e30
    24b8:	20000e4c 	.word	0x20000e4c
    24bc:	20002a7c 	.word	0x20002a7c

000024c0 <checkUsbCommands()>:
bool checkUsbCommands() {
    24c0:	b510      	push	{r4, lr}
        virtual int available() { return usb_serial_available(); }
    24c2:	f00d fa21 	bl	f908 <usb_serial_available>
  if (Serial.available() > 0) {
    24c6:	2800      	cmp	r0, #0
    24c8:	dc02      	bgt.n	24d0 <checkUsbCommands()+0x10>
  bool commandProcessed = false;
    24ca:	2400      	movs	r4, #0
}
    24cc:	4620      	mov	r0, r4
    24ce:	bd10      	pop	{r4, pc}
        virtual int read() { return usb_serial_getchar(); }
    24d0:	f00d fa5e 	bl	f990 <usb_serial_getchar>
    char inChar = (char)Serial.read();
    24d4:	b2c4      	uxtb	r4, r0
    if (inChar > 32) {  // Non-whitespace, non-control character
    24d6:	2c20      	cmp	r4, #32
    24d8:	d809      	bhi.n	24ee <checkUsbCommands()+0x2e>
  bool commandProcessed = false;
    24da:	2400      	movs	r4, #0
    24dc:	e001      	b.n	24e2 <checkUsbCommands()+0x22>
    24de:	f00d fa57 	bl	f990 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    24e2:	f00d fa11 	bl	f908 <usb_serial_available>
    while (Serial.available() > 0) {
    24e6:	2800      	cmp	r0, #0
    24e8:	dcf9      	bgt.n	24de <checkUsbCommands()+0x1e>
}
    24ea:	4620      	mov	r0, r4
    24ec:	bd10      	pop	{r4, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    24ee:	2116      	movs	r1, #22
    24f0:	481d      	ldr	r0, [pc, #116]	; (2568 <checkUsbCommands()+0xa8>)
    24f2:	f00d fa73 	bl	f9dc <usb_serial_write>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    24f6:	4620      	mov	r0, r4
    24f8:	f00d fa5a 	bl	f9b0 <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    24fc:	2101      	movs	r1, #1
    24fe:	481b      	ldr	r0, [pc, #108]	; (256c <checkUsbCommands()+0xac>)
    2500:	f00d fa6c 	bl	f9dc <usb_serial_write>
    2504:	481a      	ldr	r0, [pc, #104]	; (2570 <checkUsbCommands()+0xb0>)
    2506:	f00b fac1 	bl	da8c <Print::println()>
      if (PLAYER_ID == 0) {
    250a:	4b1a      	ldr	r3, [pc, #104]	; (2574 <checkUsbCommands()+0xb4>)
    250c:	681b      	ldr	r3, [r3, #0]
    250e:	b333      	cbz	r3, 255e <checkUsbCommands()+0x9e>
      switch(inChar) {
    2510:	2c34      	cmp	r4, #52	; 0x34
    2512:	dd17      	ble.n	2544 <checkUsbCommands()+0x84>
    2514:	f1a4 023c 	sub.w	r2, r4, #60	; 0x3c
    2518:	2a1e      	cmp	r2, #30
    251a:	d803      	bhi.n	2524 <checkUsbCommands()+0x64>
    251c:	4b16      	ldr	r3, [pc, #88]	; (2578 <checkUsbCommands()+0xb8>)
    251e:	40d3      	lsrs	r3, r2
    2520:	07da      	lsls	r2, r3, #31
    2522:	d417      	bmi.n	2554 <checkUsbCommands()+0x94>
    2524:	2111      	movs	r1, #17
    2526:	4815      	ldr	r0, [pc, #84]	; (257c <checkUsbCommands()+0xbc>)
    2528:	f00d fa58 	bl	f9dc <usb_serial_write>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    252c:	4620      	mov	r0, r4
    252e:	f00d fa3f 	bl	f9b0 <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2532:	2101      	movs	r1, #1
    2534:	480d      	ldr	r0, [pc, #52]	; (256c <checkUsbCommands()+0xac>)
  bool commandProcessed = false;
    2536:	2400      	movs	r4, #0
    2538:	f00d fa50 	bl	f9dc <usb_serial_write>
    253c:	480c      	ldr	r0, [pc, #48]	; (2570 <checkUsbCommands()+0xb0>)
    253e:	f00b faa5 	bl	da8c <Print::println()>
    2542:	e7ce      	b.n	24e2 <checkUsbCommands()+0x22>
      switch(inChar) {
    2544:	2c20      	cmp	r4, #32
    2546:	dded      	ble.n	2524 <checkUsbCommands()+0x64>
    2548:	f1a4 0221 	sub.w	r2, r4, #33	; 0x21
    254c:	4b0c      	ldr	r3, [pc, #48]	; (2580 <checkUsbCommands()+0xc0>)
    254e:	40d3      	lsrs	r3, r2
    2550:	07db      	lsls	r3, r3, #31
    2552:	d5e7      	bpl.n	2524 <checkUsbCommands()+0x64>
          commandProcessed = processCommand(inChar);
    2554:	4620      	mov	r0, r4
    2556:	f7fe ffa7 	bl	14a8 <processCommand(char)>
    255a:	4604      	mov	r4, r0
          break;
    255c:	e7c1      	b.n	24e2 <checkUsbCommands()+0x22>
        sendSerialCommand(inChar);
    255e:	4620      	mov	r0, r4
    2560:	f7ff ff8c 	bl	247c <sendSerialCommand(char)>
    2564:	e7d4      	b.n	2510 <checkUsbCommands()+0x50>
    2566:	bf00      	nop
    2568:	20000da0 	.word	0x20000da0
    256c:	20000e38 	.word	0x20000e38
    2570:	20002a7c 	.word	0x20002a7c
    2574:	20003d28 	.word	0x20003d28
    2578:	48d01005 	.word	0x48d01005
    257c:	20000db8 	.word	0x20000db8
    2580:	000f1401 	.word	0x000f1401

00002584 <statusUpdates()>:
/**
 * Updates system state based on time of day
 * For LONG player, manages wake/sleep state based on configured hours
 * For SMALL and SEASHELL, it only controls playback status
 */
void statusUpdates() {
    2584:	b570      	push	{r4, r5, r6, lr}
  static unsigned long lastCheck = 0;
  static bool lastActiveState = false;
  static bool initialCheckDone = false;
  
  // check first 5 seconds after setup, then every minute
  unsigned long checkInterval = initialCheckDone ? CHECK_INTERVAL : STARTUP_DELAY;
    2586:	4a2e      	ldr	r2, [pc, #184]	; (2640 <statusUpdates()+0xbc>)
    2588:	f64e 2360 	movw	r3, #60000	; 0xea60
  
  //if current time minus last check time is greater than interval, it's time to check status
  if (PLAYER_ID == 0 && (millis() - lastCheck > checkInterval)) {
    258c:	4c2d      	ldr	r4, [pc, #180]	; (2644 <statusUpdates()+0xc0>)
  unsigned long checkInterval = initialCheckDone ? CHECK_INTERVAL : STARTUP_DELAY;
    258e:	f242 7110 	movw	r1, #10000	; 0x2710
    2592:	7810      	ldrb	r0, [r2, #0]
void statusUpdates() {
    2594:	b082      	sub	sp, #8
  if (PLAYER_ID == 0 && (millis() - lastCheck > checkInterval)) {
    2596:	6824      	ldr	r4, [r4, #0]
  unsigned long checkInterval = initialCheckDone ? CHECK_INTERVAL : STARTUP_DELAY;
    2598:	2800      	cmp	r0, #0
    259a:	bf08      	it	eq
    259c:	460b      	moveq	r3, r1
  if (PLAYER_ID == 0 && (millis() - lastCheck > checkInterval)) {
    259e:	b934      	cbnz	r4, 25ae <statusUpdates()+0x2a>
    25a0:	4d29      	ldr	r5, [pc, #164]	; (2648 <statusUpdates()+0xc4>)
    25a2:	482a      	ldr	r0, [pc, #168]	; (264c <statusUpdates()+0xc8>)
    25a4:	6829      	ldr	r1, [r5, #0]
    25a6:	6806      	ldr	r6, [r0, #0]
    25a8:	1b89      	subs	r1, r1, r6
    25aa:	4299      	cmp	r1, r3
    25ac:	d807      	bhi.n	25be <statusUpdates()+0x3a>
      }
    }
  }
  
  // Update playback status
  if (!wavPlayer.isPlaying()) {
    25ae:	4828      	ldr	r0, [pc, #160]	; (2650 <statusUpdates()+0xcc>)
    25b0:	f001 fe68 	bl	4284 <AudioPlaySdWav::isPlaying()>
    25b4:	b908      	cbnz	r0, 25ba <statusUpdates()+0x36>
    playbackStatus = false;
    25b6:	4b27      	ldr	r3, [pc, #156]	; (2654 <statusUpdates()+0xd0>)
    25b8:	7018      	strb	r0, [r3, #0]
  }
}
    25ba:	b002      	add	sp, #8
    25bc:	bd70      	pop	{r4, r5, r6, pc}
    25be:	682b      	ldr	r3, [r5, #0]
    initialCheckDone = true;
    25c0:	2501      	movs	r5, #1
    DateTime now = rtc.now();
    25c2:	4925      	ldr	r1, [pc, #148]	; (2658 <statusUpdates()+0xd4>)
    lastCheck = millis();
    25c4:	6003      	str	r3, [r0, #0]
    DateTime now = rtc.now();
    25c6:	4668      	mov	r0, sp
    initialCheckDone = true;
    25c8:	7015      	strb	r5, [r2, #0]
    DateTime now = rtc.now();
    25ca:	f00a f803 	bl	c5d4 <RTC_DS3231::now()>
    bool isActive = (currentHour >= START_HOUR && currentHour < END_HOUR);
    25ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
    25d2:	3b06      	subs	r3, #6
    25d4:	2b10      	cmp	r3, #16
    if (isActive != lastActiveState) {
    25d6:	4b21      	ldr	r3, [pc, #132]	; (265c <statusUpdates()+0xd8>)
    25d8:	781a      	ldrb	r2, [r3, #0]
    bool isActive = (currentHour >= START_HOUR && currentHour < END_HOUR);
    25da:	d916      	bls.n	260a <statusUpdates()+0x86>
    if (isActive != lastActiveState) {
    25dc:	2a00      	cmp	r2, #0
    25de:	d0e6      	beq.n	25ae <statusUpdates()+0x2a>
        if (systemAwake) {
    25e0:	4d1f      	ldr	r5, [pc, #124]	; (2660 <statusUpdates()+0xdc>)
      lastActiveState = isActive;
    25e2:	701c      	strb	r4, [r3, #0]
        if (systemAwake) {
    25e4:	782b      	ldrb	r3, [r5, #0]
    25e6:	2b00      	cmp	r3, #0
    25e8:	d0e1      	beq.n	25ae <statusUpdates()+0x2a>
    25ea:	2114      	movs	r1, #20
    25ec:	481d      	ldr	r0, [pc, #116]	; (2664 <statusUpdates()+0xe0>)
    25ee:	f00d f9f5 	bl	f9dc <usb_serial_write>
    25f2:	481d      	ldr	r0, [pc, #116]	; (2668 <statusUpdates()+0xe4>)
    25f4:	f00b fa4a 	bl	da8c <Print::println()>
          sendSerialCommand(CMD_SLEEP);
    25f8:	2053      	movs	r0, #83	; 0x53
    25fa:	f7ff ff3f 	bl	247c <sendSerialCommand(char)>
  if (systemAwake){
    25fe:	782b      	ldrb	r3, [r5, #0]
    2600:	2b00      	cmp	r3, #0
    2602:	d0d4      	beq.n	25ae <statusUpdates()+0x2a>
    2604:	f7fe fa7a 	bl	afc <shutDownSequence() [clone .part.0]>
    2608:	e7d1      	b.n	25ae <statusUpdates()+0x2a>
    if (isActive != lastActiveState) {
    260a:	2a00      	cmp	r2, #0
    260c:	d1cf      	bne.n	25ae <statusUpdates()+0x2a>
        if (!systemAwake) {
    260e:	4c14      	ldr	r4, [pc, #80]	; (2660 <statusUpdates()+0xdc>)
      lastActiveState = isActive;
    2610:	701d      	strb	r5, [r3, #0]
        if (!systemAwake) {
    2612:	7823      	ldrb	r3, [r4, #0]
    2614:	2b00      	cmp	r3, #0
    2616:	d1ca      	bne.n	25ae <statusUpdates()+0x2a>
    2618:	2115      	movs	r1, #21
    261a:	4814      	ldr	r0, [pc, #80]	; (266c <statusUpdates()+0xe8>)
    261c:	f00d f9de 	bl	f9dc <usb_serial_write>
    2620:	4811      	ldr	r0, [pc, #68]	; (2668 <statusUpdates()+0xe4>)
    2622:	f00b fa33 	bl	da8c <Print::println()>
          sendSerialCommand(CMD_WAKEUP);
    2626:	2057      	movs	r0, #87	; 0x57
    2628:	f7ff ff28 	bl	247c <sendSerialCommand(char)>
  if (!systemAwake){
    262c:	7823      	ldrb	r3, [r4, #0]
    262e:	b11b      	cbz	r3, 2638 <statusUpdates()+0xb4>
          displayBinaryCode(15);
    2630:	200f      	movs	r0, #15
    2632:	f7fe fa99 	bl	b68 <displayBinaryCode(int)>
    2636:	e7ba      	b.n	25ae <statusUpdates()+0x2a>
    2638:	f7fe fa2e 	bl	a98 <startupSequence() [clone .part.0]>
    263c:	e7f8      	b.n	2630 <statusUpdates()+0xac>
    263e:	bf00      	nop
    2640:	20004d52 	.word	0x20004d52
    2644:	20003d28 	.word	0x20003d28
    2648:	20004a9c 	.word	0x20004a9c
    264c:	20004458 	.word	0x20004458
    2650:	20004abc 	.word	0x20004abc
    2654:	20004d56 	.word	0x20004d56
    2658:	20004a40 	.word	0x20004a40
    265c:	20004d51 	.word	0x20004d51
    2660:	20004d5a 	.word	0x20004d5a
    2664:	20000680 	.word	0x20000680
    2668:	20002a7c 	.word	0x20002a7c
    266c:	20000668 	.word	0x20000668

00002670 <leader()>:
void leader() {
    2670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static elapsedMillis playbackTimer;
    2672:	4b43      	ldr	r3, [pc, #268]	; (2780 <leader()+0x110>)
    2674:	4c43      	ldr	r4, [pc, #268]	; (2784 <leader()+0x114>)
    2676:	681a      	ldr	r2, [r3, #0]
    2678:	07d0      	lsls	r0, r2, #31
    267a:	d404      	bmi.n	2686 <leader()+0x16>
	elapsedMillis(void) { ms = millis(); }
    267c:	4a42      	ldr	r2, [pc, #264]	; (2788 <leader()+0x118>)
    267e:	2001      	movs	r0, #1
    2680:	6821      	ldr	r1, [r4, #0]
    2682:	6018      	str	r0, [r3, #0]
    2684:	6011      	str	r1, [r2, #0]
  static elapsedMillis updateTimer;
    2686:	4b41      	ldr	r3, [pc, #260]	; (278c <leader()+0x11c>)
    2688:	681a      	ldr	r2, [r3, #0]
    268a:	07d1      	lsls	r1, r2, #31
    268c:	d550      	bpl.n	2730 <leader()+0xc0>
    268e:	4d40      	ldr	r5, [pc, #256]	; (2790 <leader()+0x120>)
  static elapsedMillis serialCheckTimer;
    2690:	4b40      	ldr	r3, [pc, #256]	; (2794 <leader()+0x124>)
    2692:	681a      	ldr	r2, [r3, #0]
    2694:	07d2      	lsls	r2, r2, #31
    2696:	d52d      	bpl.n	26f4 <leader()+0x84>
  if (systemAwake && !wavPlayer.isPlaying() && playbackTimer >= RETRY_INTERVAL) {
    2698:	4f3f      	ldr	r7, [pc, #252]	; (2798 <leader()+0x128>)
    269a:	4e40      	ldr	r6, [pc, #256]	; (279c <leader()+0x12c>)
    269c:	783b      	ldrb	r3, [r7, #0]
    269e:	2b00      	cmp	r3, #0
    26a0:	d131      	bne.n	2706 <leader()+0x96>
    26a2:	6823      	ldr	r3, [r4, #0]
	operator unsigned long () const { return millis() - ms; }
    26a4:	6832      	ldr	r2, [r6, #0]
    26a6:	1a9b      	subs	r3, r3, r2
  if (serialCheckTimer >= 10) {  // Check every 10ms
    26a8:	2b09      	cmp	r3, #9
    26aa:	d847      	bhi.n	273c <leader()+0xcc>
    26ac:	6823      	ldr	r3, [r4, #0]
    26ae:	682a      	ldr	r2, [r5, #0]
    26b0:	1a9b      	subs	r3, r3, r2
  if (updateTimer >= UPDATE_RATE) {
    26b2:	2b13      	cmp	r3, #19
    26b4:	d910      	bls.n	26d8 <leader()+0x68>
    26b6:	6822      	ldr	r2, [r4, #0]
    if (systemAwake) {
    26b8:	783b      	ldrb	r3, [r7, #0]
      if (wavPlayer.isPlaying()) {
    26ba:	4839      	ldr	r0, [pc, #228]	; (27a0 <leader()+0x130>)
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    26bc:	602a      	str	r2, [r5, #0]
    if (systemAwake) {
    26be:	b163      	cbz	r3, 26da <leader()+0x6a>
      if (wavPlayer.isPlaying()) {
    26c0:	f001 fde0 	bl	4284 <AudioPlaySdWav::isPlaying()>
    26c4:	2800      	cmp	r0, #0
    26c6:	d051      	beq.n	276c <leader()+0xfc>
        writeOutPWM(PWM_PIN);
    26c8:	2006      	movs	r0, #6
    26ca:	f7ff f967 	bl	199c <writeOutPWM(unsigned char)>
        displayBinaryCode(8);
    26ce:	2008      	movs	r0, #8
}
    26d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        displayBinaryCode(8);
    26d4:	f7fe ba48 	b.w	b68 <displayBinaryCode(int)>
}
    26d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (wavPlayer.isPlaying()) {
    26da:	f001 fdd3 	bl	4284 <AudioPlaySdWav::isPlaying()>
    26de:	2800      	cmp	r0, #0
    26e0:	d146      	bne.n	2770 <leader()+0x100>
      displayBinaryCode(1);
    26e2:	2001      	movs	r0, #1
    26e4:	f7fe fa40 	bl	b68 <displayBinaryCode(int)>
      analogWrite(PWM_PIN, 0);  // Set PWM to zero
    26e8:	2100      	movs	r1, #0
    26ea:	2006      	movs	r0, #6
}
    26ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      analogWrite(PWM_PIN, 0);  // Set PWM to zero
    26f0:	f00b bf3a 	b.w	e568 <analogWrite>
    26f4:	6822      	ldr	r2, [r4, #0]
	elapsedMillis(void) { ms = millis(); }
    26f6:	4e29      	ldr	r6, [pc, #164]	; (279c <leader()+0x12c>)
  if (systemAwake && !wavPlayer.isPlaying() && playbackTimer >= RETRY_INTERVAL) {
    26f8:	4f27      	ldr	r7, [pc, #156]	; (2798 <leader()+0x128>)
    26fa:	6032      	str	r2, [r6, #0]
  static elapsedMillis serialCheckTimer;
    26fc:	2201      	movs	r2, #1
    26fe:	601a      	str	r2, [r3, #0]
  if (systemAwake && !wavPlayer.isPlaying() && playbackTimer >= RETRY_INTERVAL) {
    2700:	783b      	ldrb	r3, [r7, #0]
    2702:	2b00      	cmp	r3, #0
    2704:	d0cd      	beq.n	26a2 <leader()+0x32>
    2706:	4826      	ldr	r0, [pc, #152]	; (27a0 <leader()+0x130>)
    2708:	f001 fdbc 	bl	4284 <AudioPlaySdWav::isPlaying()>
    270c:	2800      	cmp	r0, #0
    270e:	d1c8      	bne.n	26a2 <leader()+0x32>
	operator unsigned long () const { return millis() - ms; }
    2710:	4a1d      	ldr	r2, [pc, #116]	; (2788 <leader()+0x118>)
    2712:	f242 710f 	movw	r1, #9999	; 0x270f
    2716:	6823      	ldr	r3, [r4, #0]
    2718:	6810      	ldr	r0, [r2, #0]
    271a:	1a1b      	subs	r3, r3, r0
    271c:	428b      	cmp	r3, r1
    271e:	d9c0      	bls.n	26a2 <leader()+0x32>
    2720:	6823      	ldr	r3, [r4, #0]
    sendSerialCommand(CMD_PLAY);
    2722:	2050      	movs	r0, #80	; 0x50
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    2724:	6013      	str	r3, [r2, #0]
    2726:	f7ff fea9 	bl	247c <sendSerialCommand(char)>
    playAudio();
    272a:	f7fe fdf1 	bl	1310 <playAudio()>
    272e:	e7b8      	b.n	26a2 <leader()+0x32>
    2730:	6821      	ldr	r1, [r4, #0]
  static elapsedMillis updateTimer;
    2732:	2201      	movs	r2, #1
	elapsedMillis(void) { ms = millis(); }
    2734:	4d16      	ldr	r5, [pc, #88]	; (2790 <leader()+0x120>)
    2736:	601a      	str	r2, [r3, #0]
    2738:	6029      	str	r1, [r5, #0]
    273a:	e7a9      	b.n	2690 <leader()+0x20>
    273c:	6823      	ldr	r3, [r4, #0]
    if (Serial3.available()) {
    273e:	4819      	ldr	r0, [pc, #100]	; (27a4 <leader()+0x134>)
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    2740:	6033      	str	r3, [r6, #0]
    2742:	f00a fcab 	bl	d09c <HardwareSerialIMXRT::available()>
    2746:	2800      	cmp	r0, #0
    2748:	d0b0      	beq.n	26ac <leader()+0x3c>
      if (Serial3.peek() == ':') {
    274a:	4816      	ldr	r0, [pc, #88]	; (27a4 <leader()+0x134>)
    274c:	f00a fcba 	bl	d0c4 <HardwareSerialIMXRT::peek()>
    2750:	283a      	cmp	r0, #58	; 0x3a
    2752:	d011      	beq.n	2778 <leader()+0x108>
        while (Serial3.available()) {
    2754:	4e13      	ldr	r6, [pc, #76]	; (27a4 <leader()+0x134>)
    2756:	e001      	b.n	275c <leader()+0xec>
          Serial3.read();
    2758:	f00a fcf2 	bl	d140 <HardwareSerialIMXRT::read()>
        while (Serial3.available()) {
    275c:	4630      	mov	r0, r6
    275e:	f00a fc9d 	bl	d09c <HardwareSerialIMXRT::available()>
    2762:	4603      	mov	r3, r0
          Serial3.read();
    2764:	4630      	mov	r0, r6
        while (Serial3.available()) {
    2766:	2b00      	cmp	r3, #0
    2768:	d1f6      	bne.n	2758 <leader()+0xe8>
    276a:	e79f      	b.n	26ac <leader()+0x3c>
        displayBinaryCode(2);
    276c:	2002      	movs	r0, #2
    276e:	e7b9      	b.n	26e4 <leader()+0x74>
        wavPlayer.stop();
    2770:	480b      	ldr	r0, [pc, #44]	; (27a0 <leader()+0x130>)
    2772:	f001 f84b 	bl	380c <AudioPlaySdWav::stop()>
    2776:	e7b4      	b.n	26e2 <leader()+0x72>
        receiveSerialMessage();  // Process the incoming message from follower
    2778:	f7ff fda2 	bl	22c0 <receiveSerialMessage()>
    277c:	e796      	b.n	26ac <leader()+0x3c>
    277e:	bf00      	nop
    2780:	20004204 	.word	0x20004204
    2784:	20004a9c 	.word	0x20004a9c
    2788:	20004460 	.word	0x20004460
    278c:	20004200 	.word	0x20004200
    2790:	2000445c 	.word	0x2000445c
    2794:	20004208 	.word	0x20004208
    2798:	20004d5a 	.word	0x20004d5a
    279c:	20004464 	.word	0x20004464
    27a0:	20004abc 	.word	0x20004abc
    27a4:	20002a8c 	.word	0x20002a8c

000027a8 <loop>:
void loop() {
    27a8:	b538      	push	{r3, r4, r5, lr}
    27aa:	4c1b      	ldr	r4, [pc, #108]	; (2818 <loop+0x70>)
	operator unsigned long () const { return millis() - ms; }
    27ac:	4d1b      	ldr	r5, [pc, #108]	; (281c <loop+0x74>)
    27ae:	6823      	ldr	r3, [r4, #0]
    27b0:	682a      	ldr	r2, [r5, #0]
    27b2:	1a9b      	subs	r3, r3, r2
  if (statusTimer >= 1000) {
    27b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    27b8:	d216      	bcs.n	27e8 <loop+0x40>
        virtual int available() { return usb_serial_available(); }
    27ba:	f00d f8a5 	bl	f908 <usb_serial_available>
  if (Serial.available()) {
    27be:	b9d8      	cbnz	r0, 27f8 <loop+0x50>
  if (PLAYER_ID == 0) {
    27c0:	4c17      	ldr	r4, [pc, #92]	; (2820 <loop+0x78>)
    27c2:	6823      	ldr	r3, [r4, #0]
    27c4:	b133      	cbz	r3, 27d4 <loop+0x2c>
    follower();
    27c6:	f7ff fdd5 	bl	2374 <follower()>
  delay(5);
    27ca:	2005      	movs	r0, #5
}
    27cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(5);
    27d0:	f00b bca6 	b.w	e120 <delay>
    leader();
    27d4:	f7ff ff4c 	bl	2670 <leader()>
  if (PLAYER_ID != 0) {
    27d8:	6823      	ldr	r3, [r4, #0]
    27da:	2b00      	cmp	r3, #0
    27dc:	d1f3      	bne.n	27c6 <loop+0x1e>
  delay(5);
    27de:	2005      	movs	r0, #5
}
    27e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(5);
    27e4:	f00b bc9c 	b.w	e120 <delay>
    statusUpdates();
    27e8:	f7ff fecc 	bl	2584 <statusUpdates()>
    27ec:	6823      	ldr	r3, [r4, #0]
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    27ee:	602b      	str	r3, [r5, #0]
    27f0:	f00d f88a 	bl	f908 <usb_serial_available>
  if (Serial.available()) {
    27f4:	2800      	cmp	r0, #0
    27f6:	d0e3      	beq.n	27c0 <loop+0x18>
        virtual int peek() { return usb_serial_peekchar(); }
    27f8:	f00d f864 	bl	f8c4 <usb_serial_peekchar>
    if (Serial.peek() == ':') {
    27fc:	283a      	cmp	r0, #58	; 0x3a
    27fe:	d005      	beq.n	280c <loop+0x64>
      checkUsbCommands();
    2800:	f7ff fe5e 	bl	24c0 <checkUsbCommands()>
    2804:	6822      	ldr	r2, [r4, #0]
    2806:	4b07      	ldr	r3, [pc, #28]	; (2824 <loop+0x7c>)
    2808:	601a      	str	r2, [r3, #0]
    280a:	e7d9      	b.n	27c0 <loop+0x18>
      checkUsbMessages();
    280c:	f7ff fcbe 	bl	218c <checkUsbMessages()>
    2810:	6822      	ldr	r2, [r4, #0]
    2812:	4b04      	ldr	r3, [pc, #16]	; (2824 <loop+0x7c>)
    2814:	601a      	str	r2, [r3, #0]
    2816:	e7d3      	b.n	27c0 <loop+0x18>
    2818:	20004a9c 	.word	0x20004a9c
    281c:	20004a94 	.word	0x20004a94
    2820:	20003d28 	.word	0x20003d28
    2824:	200047c4 	.word	0x200047c4

00002828 <setup>:
void setup() {
    2828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
    282c:	4d92      	ldr	r5, [pc, #584]	; (2a78 <setup+0x250>)
    282e:	b083      	sub	sp, #12
    2830:	4c92      	ldr	r4, [pc, #584]	; (2a7c <setup+0x254>)
				if (elapsed > 750) break;
    2832:	f240 28ee 	movw	r8, #750	; 0x2ee
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2836:	4f92      	ldr	r7, [pc, #584]	; (2a80 <setup+0x258>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2838:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 2b04 <setup+0x2dc>
		uint32_t millis_begin = systick_millis_count;
    283c:	682e      	ldr	r6, [r5, #0]
		yield();
    283e:	f00d f94b 	bl	fad8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2842:	7823      	ldrb	r3, [r4, #0]
    2844:	2b00      	cmp	r3, #0
    2846:	d037      	beq.n	28b8 <setup+0x90>
    2848:	783b      	ldrb	r3, [r7, #0]
    284a:	07db      	lsls	r3, r3, #31
    284c:	d534      	bpl.n	28b8 <setup+0x90>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    284e:	682b      	ldr	r3, [r5, #0]
    2850:	f8d9 2000 	ldr.w	r2, [r9]
    2854:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2856:	2b0e      	cmp	r3, #14
    2858:	d92e      	bls.n	28b8 <setup+0x90>
  Serial3.begin(9600);
    285a:	488a      	ldr	r0, [pc, #552]	; (2a84 <setup+0x25c>)
    285c:	2200      	movs	r2, #0
    285e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    2862:	f00a fcf9 	bl	d258 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>
  if (CrashReport) {
    2866:	4888      	ldr	r0, [pc, #544]	; (2a88 <setup+0x260>)
    2868:	f015 fe0e 	bl	18488 <___ZN16CrashReportClasscvbEv_veneer>
    286c:	2800      	cmp	r0, #0
    286e:	f000 80c7 	beq.w	2a00 <setup+0x1d8>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2872:	2119      	movs	r1, #25
    2874:	4885      	ldr	r0, [pc, #532]	; (2a8c <setup+0x264>)
    2876:	f00d f8b1 	bl	f9dc <usb_serial_write>
	// Print an object instance in human readable format, and a newline
	size_t println(const Printable &obj)		{ return obj.printTo(*this) + println(); }
    287a:	4985      	ldr	r1, [pc, #532]	; (2a90 <setup+0x268>)
    287c:	4882      	ldr	r0, [pc, #520]	; (2a88 <setup+0x260>)
    287e:	f015 fe0b 	bl	18498 <___ZNK16CrashReportClass7printToER5Print_veneer>
    2882:	4883      	ldr	r0, [pc, #524]	; (2a90 <setup+0x268>)
    2884:	f00b f902 	bl	da8c <Print::println()>
    delay(1000);
    2888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    288c:	f00b fc48 	bl	e120 <delay>
  setupPlayerID();
    2890:	2002      	movs	r0, #2
    2892:	4c80      	ldr	r4, [pc, #512]	; (2a94 <setup+0x26c>)
    2894:	9001      	str	r0, [sp, #4]
    2896:	1ce5      	adds	r5, r4, #3
    2898:	f7fe f98e 	bl	bb8 <setupPlayerID()>
  for (int j = 0; j < 4; j++) {
    289c:	9801      	ldr	r0, [sp, #4]
    pinMode(LED_ARRAY[j], OUTPUT);
    289e:	2101      	movs	r1, #1
    28a0:	9001      	str	r0, [sp, #4]
    28a2:	f00b fcf7 	bl	e294 <pinMode>
    digitalWrite(LED_ARRAY[j], LOW); // Start with LEDs off
    28a6:	9801      	ldr	r0, [sp, #4]
    28a8:	2100      	movs	r1, #0
    28aa:	f00b fcb7 	bl	e21c <digitalWrite>
  for (int j = 0; j < 4; j++) {
    28ae:	42a5      	cmp	r5, r4
    28b0:	d00f      	beq.n	28d2 <setup+0xaa>
    pinMode(LED_ARRAY[j], OUTPUT);
    28b2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    28b6:	e7f2      	b.n	289e <setup+0x76>
			uint32_t elapsed = systick_millis_count - millis_begin;
    28b8:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    28ba:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    28bc:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    28be:	b12a      	cbz	r2, 28cc <setup+0xa4>
				if (elapsed > 2000) break;
    28c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    28c4:	d8c9      	bhi.n	285a <setup+0x32>
			yield();
    28c6:	f00d f907 	bl	fad8 <yield>
    28ca:	e7b8      	b.n	283e <setup+0x16>
				if (elapsed > 750) break;
    28cc:	4543      	cmp	r3, r8
    28ce:	d9fa      	bls.n	28c6 <setup+0x9e>
    28d0:	e7c3      	b.n	285a <setup+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    28d2:	2110      	movs	r1, #16
    28d4:	4870      	ldr	r0, [pc, #448]	; (2a98 <setup+0x270>)
    28d6:	f00d f881 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    28da:	486d      	ldr	r0, [pc, #436]	; (2a90 <setup+0x268>)
    28dc:	f00b f8d6 	bl	da8c <Print::println()>
  pinMode(REL_1, OUTPUT);
    28e0:	2101      	movs	r1, #1
    28e2:	2011      	movs	r0, #17
    28e4:	f00b fcd6 	bl	e294 <pinMode>
  digitalWrite(REL_1, LOW);
    28e8:	2100      	movs	r1, #0
    28ea:	2011      	movs	r0, #17
    28ec:	f00b fc96 	bl	e21c <digitalWrite>
  pinMode(REL_2, OUTPUT);
    28f0:	2101      	movs	r1, #1
    28f2:	2010      	movs	r0, #16
    28f4:	f00b fcce 	bl	e294 <pinMode>
  digitalWrite(REL_2, LOW);
    28f8:	2100      	movs	r1, #0
    28fa:	2010      	movs	r0, #16
    28fc:	f00b fc8e 	bl	e21c <digitalWrite>
    2900:	2112      	movs	r1, #18
    2902:	4866      	ldr	r0, [pc, #408]	; (2a9c <setup+0x274>)
    2904:	f00d f86a 	bl	f9dc <usb_serial_write>
    2908:	4861      	ldr	r0, [pc, #388]	; (2a90 <setup+0x268>)
    290a:	f00b f8bf 	bl	da8c <Print::println()>
  pinMode(PWM_PIN, OUTPUT);
    290e:	2101      	movs	r1, #1
    2910:	2006      	movs	r0, #6
    2912:	f00b fcbf 	bl	e294 <pinMode>
  digitalWrite(PWM_PIN, LOW); // Start with PWM off
    2916:	2100      	movs	r1, #0
    2918:	2006      	movs	r0, #6
    291a:	f00b fc7f 	bl	e21c <digitalWrite>
    291e:	210d      	movs	r1, #13
    2920:	485f      	ldr	r0, [pc, #380]	; (2aa0 <setup+0x278>)
    2922:	f00d f85b 	bl	f9dc <usb_serial_write>
    2926:	485a      	ldr	r0, [pc, #360]	; (2a90 <setup+0x268>)
    2928:	f00b f8b0 	bl	da8c <Print::println()>
  if (AudioMemoryUsage() > 0) {
    292c:	4b5d      	ldr	r3, [pc, #372]	; (2aa4 <setup+0x27c>)
    292e:	881b      	ldrh	r3, [r3, #0]
    2930:	2b00      	cmp	r3, #0
    2932:	d05d      	beq.n	29f0 <setup+0x1c8>
    2934:	211b      	movs	r1, #27
    2936:	485c      	ldr	r0, [pc, #368]	; (2aa8 <setup+0x280>)
    2938:	f00d f850 	bl	f9dc <usb_serial_write>
    293c:	4854      	ldr	r0, [pc, #336]	; (2a90 <setup+0x268>)
    293e:	f00b f8a5 	bl	da8c <Print::println()>
  AudioMemory(64);
    2942:	2140      	movs	r1, #64	; 0x40
    2944:	4859      	ldr	r0, [pc, #356]	; (2aac <setup+0x284>)
  while (!sgtl5000.enable()) {
    2946:	4d5a      	ldr	r5, [pc, #360]	; (2ab0 <setup+0x288>)
    2948:	4c5a      	ldr	r4, [pc, #360]	; (2ab4 <setup+0x28c>)
    294a:	4e51      	ldr	r6, [pc, #324]	; (2a90 <setup+0x268>)
  AudioMemory(64);
    294c:	f015 fda0 	bl	18490 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
  while (!sgtl5000.enable()) {
    2950:	e00b      	b.n	296a <setup+0x142>
    2952:	f00d f843 	bl	f9dc <usb_serial_write>
    2956:	4630      	mov	r0, r6
    2958:	f00b f898 	bl	da8c <Print::println()>
    displayBinaryCode(13); // Error indication
    295c:	200d      	movs	r0, #13
    295e:	f7fe f903 	bl	b68 <displayBinaryCode(int)>
    delay(1000);
    2962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2966:	f00b fbdb 	bl	e120 <delay>
  while (!sgtl5000.enable()) {
    296a:	4628      	mov	r0, r5
    296c:	f000 fa64 	bl	2e38 <AudioControlSGTL5000::enable()>
    2970:	4603      	mov	r3, r0
    2972:	2123      	movs	r1, #35	; 0x23
    2974:	4620      	mov	r0, r4
    2976:	2b00      	cmp	r3, #0
    2978:	d0eb      	beq.n	2952 <setup+0x12a>
  sgtl5000.volume(audioVolume);
    297a:	4b4f      	ldr	r3, [pc, #316]	; (2ab8 <setup+0x290>)
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    297c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 2abc <setup+0x294>
    2980:	edd3 6a00 	vldr	s13, [r3]
    2984:	eddf 7a4e 	vldr	s15, [pc, #312]	; 2ac0 <setup+0x298>
    2988:	4849      	ldr	r0, [pc, #292]	; (2ab0 <setup+0x288>)
    298a:	eee6 7a87 	vfma.f32	s15, s13, s14
    298e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2992:	ee17 1a90 	vmov	r1, s15
    2996:	f000 fa95 	bl	2ec4 <AudioControlSGTL5000::volumeInteger(unsigned int)>
    299a:	2116      	movs	r1, #22
    299c:	4849      	ldr	r0, [pc, #292]	; (2ac4 <setup+0x29c>)
    299e:	f00d f81d 	bl	f9dc <usb_serial_write>
    29a2:	483b      	ldr	r0, [pc, #236]	; (2a90 <setup+0x268>)
    29a4:	f00b f872 	bl	da8c <Print::println()>
  SPI.setMOSI(SDCARD_MOSI_PIN);
    29a8:	210b      	movs	r1, #11
    29aa:	4847      	ldr	r0, [pc, #284]	; (2ac8 <setup+0x2a0>)
    29ac:	f001 fe54 	bl	4658 <SPIClass::setMOSI(unsigned char)>
  SPI.setSCK(SDCARD_SCK_PIN);
    29b0:	210d      	movs	r1, #13
    29b2:	4845      	ldr	r0, [pc, #276]	; (2ac8 <setup+0x2a0>)
    29b4:	f001 fe52 	bl	465c <SPIClass::setSCK(unsigned char)>
    29b8:	2119      	movs	r1, #25
    29ba:	4844      	ldr	r0, [pc, #272]	; (2acc <setup+0x2a4>)
    29bc:	f00d f80e 	bl	f9dc <usb_serial_write>
    29c0:	4833      	ldr	r0, [pc, #204]	; (2a90 <setup+0x268>)
    29c2:	f00b f863 	bl	da8c <Print::println()>
  if (!(SD.begin(SDCARD_CS_PIN))) {
    29c6:	210a      	movs	r1, #10
    29c8:	4841      	ldr	r0, [pc, #260]	; (2ad0 <setup+0x2a8>)
    29ca:	f002 f995 	bl	4cf8 <SDClass::begin(unsigned char)>
    29ce:	b9f8      	cbnz	r0, 2a10 <setup+0x1e8>
    29d0:	4d40      	ldr	r5, [pc, #256]	; (2ad4 <setup+0x2ac>)
    29d2:	4c2f      	ldr	r4, [pc, #188]	; (2a90 <setup+0x268>)
    29d4:	211c      	movs	r1, #28
    29d6:	4628      	mov	r0, r5
    29d8:	f00d f800 	bl	f9dc <usb_serial_write>
    29dc:	4620      	mov	r0, r4
    29de:	f00b f855 	bl	da8c <Print::println()>
      displayBinaryCode(3);
    29e2:	2003      	movs	r0, #3
    29e4:	f7fe f8c0 	bl	b68 <displayBinaryCode(int)>
      delay(100);
    29e8:	2064      	movs	r0, #100	; 0x64
    29ea:	f00b fb99 	bl	e120 <delay>
    while (1) {
    29ee:	e7f1      	b.n	29d4 <setup+0x1ac>
    29f0:	2129      	movs	r1, #41	; 0x29
    29f2:	4839      	ldr	r0, [pc, #228]	; (2ad8 <setup+0x2b0>)
    29f4:	f00c fff2 	bl	f9dc <usb_serial_write>
    29f8:	4825      	ldr	r0, [pc, #148]	; (2a90 <setup+0x268>)
    29fa:	f00b f847 	bl	da8c <Print::println()>
    29fe:	e7a0      	b.n	2942 <setup+0x11a>
    2a00:	211a      	movs	r1, #26
    2a02:	4836      	ldr	r0, [pc, #216]	; (2adc <setup+0x2b4>)
    2a04:	f00c ffea 	bl	f9dc <usb_serial_write>
    2a08:	4821      	ldr	r0, [pc, #132]	; (2a90 <setup+0x268>)
    2a0a:	f00b f83f 	bl	da8c <Print::println()>
    2a0e:	e73f      	b.n	2890 <setup+0x68>
    2a10:	210e      	movs	r1, #14
    2a12:	4833      	ldr	r0, [pc, #204]	; (2ae0 <setup+0x2b8>)
    2a14:	f00c ffe2 	bl	f9dc <usb_serial_write>
    2a18:	481d      	ldr	r0, [pc, #116]	; (2a90 <setup+0x268>)
    2a1a:	f00b f837 	bl	da8c <Print::println()>
  if (PLAYER_ID == 0) {
    2a1e:	4b31      	ldr	r3, [pc, #196]	; (2ae4 <setup+0x2bc>)
    2a20:	681b      	ldr	r3, [r3, #0]
    2a22:	b183      	cbz	r3, 2a46 <setup+0x21e>
    2a24:	2131      	movs	r1, #49	; 0x31
    2a26:	4830      	ldr	r0, [pc, #192]	; (2ae8 <setup+0x2c0>)
    2a28:	f00c ffd8 	bl	f9dc <usb_serial_write>
    2a2c:	4818      	ldr	r0, [pc, #96]	; (2a90 <setup+0x268>)
    2a2e:	f00b f82d 	bl	da8c <Print::println()>
  systemAwake = false;
    2a32:	2300      	movs	r3, #0
    2a34:	482d      	ldr	r0, [pc, #180]	; (2aec <setup+0x2c4>)
  playbackStatus = false;
    2a36:	492e      	ldr	r1, [pc, #184]	; (2af0 <setup+0x2c8>)
  trackIteration = 0;
    2a38:	4a2e      	ldr	r2, [pc, #184]	; (2af4 <setup+0x2cc>)
  systemAwake = false;
    2a3a:	7003      	strb	r3, [r0, #0]
  playbackStatus = false;
    2a3c:	700b      	strb	r3, [r1, #0]
  trackIteration = 0;
    2a3e:	6013      	str	r3, [r2, #0]
}
    2a40:	b003      	add	sp, #12
    2a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    setupRTC();
    2a46:	f7fe ff3f 	bl	18c8 <setupRTC()>
    2a4a:	2112      	movs	r1, #18
    2a4c:	482a      	ldr	r0, [pc, #168]	; (2af8 <setup+0x2d0>)
    2a4e:	f00c ffc5 	bl	f9dc <usb_serial_write>
    2a52:	480f      	ldr	r0, [pc, #60]	; (2a90 <setup+0x268>)
    2a54:	f00b f81a 	bl	da8c <Print::println()>
    2a58:	2125      	movs	r1, #37	; 0x25
    2a5a:	4828      	ldr	r0, [pc, #160]	; (2afc <setup+0x2d4>)
    2a5c:	f00c ffbe 	bl	f9dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    2a60:	210a      	movs	r1, #10
    2a62:	480b      	ldr	r0, [pc, #44]	; (2a90 <setup+0x268>)
    2a64:	f00b f806 	bl	da74 <Print::print(long)>
    2a68:	2102      	movs	r1, #2
    2a6a:	4825      	ldr	r0, [pc, #148]	; (2b00 <setup+0x2d8>)
    2a6c:	f00c ffb6 	bl	f9dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2a70:	4807      	ldr	r0, [pc, #28]	; (2a90 <setup+0x268>)
    2a72:	f00b f80b 	bl	da8c <Print::println()>
    2a76:	e7dc      	b.n	2a32 <setup+0x20a>
    2a78:	20004a9c 	.word	0x20004a9c
    2a7c:	20004d5f 	.word	0x20004d5f
    2a80:	20004d5e 	.word	0x20004d5e
    2a84:	20002a8c 	.word	0x20002a8c
    2a88:	20002a20 	.word	0x20002a20
    2a8c:	20001dbc 	.word	0x20001dbc
    2a90:	20002a7c 	.word	0x20002a7c
    2a94:	20000398 	.word	0x20000398
    2a98:	20001df4 	.word	0x20001df4
    2a9c:	20001e08 	.word	0x20001e08
    2aa0:	20001e1c 	.word	0x20001e1c
    2aa4:	20004d32 	.word	0x20004d32
    2aa8:	20001e2c 	.word	0x20001e2c
    2aac:	20200000 	.word	0x20200000
    2ab0:	20004a88 	.word	0x20004a88
    2ab4:	20001e74 	.word	0x20001e74
    2ab8:	200034a8 	.word	0x200034a8
    2abc:	43010000 	.word	0x43010000
    2ac0:	3eff7cee 	.word	0x3eff7cee
    2ac4:	20001e98 	.word	0x20001e98
    2ac8:	20002a2c 	.word	0x20002a2c
    2acc:	20001eb0 	.word	0x20001eb0
    2ad0:	20003d2c 	.word	0x20003d2c
    2ad4:	20001ecc 	.word	0x20001ecc
    2ad8:	20001e48 	.word	0x20001e48
    2adc:	20001dd8 	.word	0x20001dd8
    2ae0:	20001eec 	.word	0x20001eec
    2ae4:	20003d28 	.word	0x20003d28
    2ae8:	20001f3c 	.word	0x20001f3c
    2aec:	20004d5a 	.word	0x20004d5a
    2af0:	20004d56 	.word	0x20004d56
    2af4:	20004aa4 	.word	0x20004aa4
    2af8:	20001efc 	.word	0x20001efc
    2afc:	20001f10 	.word	0x20001f10
    2b00:	20001f38 	.word	0x20001f38
    2b04:	20004ab0 	.word	0x20004ab0

00002b08 <AudioAnalyzePeak::update()>:

#include <Arduino.h>
#include "analyze_peak.h"

void AudioAnalyzePeak::update(void)
{
    2b08:	b510      	push	{r4, lr}
	audio_block_t *block;
	const int16_t *p, *end;
	int32_t min, max;

	block = receiveReadOnly();
    2b0a:	2100      	movs	r1, #0
{
    2b0c:	4604      	mov	r4, r0
	block = receiveReadOnly();
    2b0e:	f00a f8b3 	bl	cc78 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) {
    2b12:	b1c8      	cbz	r0, 2b48 <AudioAnalyzePeak::update()+0x40>
		return;
	}
	p = block->data;
    2b14:	1d03      	adds	r3, r0, #4
	end = p + AUDIO_BLOCK_SAMPLES;
	min = min_sample;
    2b16:	f9b4 c01e 	ldrsh.w	ip, [r4, #30]
	max = max_sample;
    2b1a:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
    2b1e:	f500 7e82 	add.w	lr, r0, #260	; 0x104
	do {
		int16_t d=*p++;
		// TODO: can we speed this up with SSUB16 and SEL
		// http://www.m4-unleashed.com/parallel-comparison/
		if (d<min) min=d;
    2b22:	f933 2b02 	ldrsh.w	r2, [r3], #2
    2b26:	4594      	cmp	ip, r2
    2b28:	bfa8      	it	ge
    2b2a:	4694      	movge	ip, r2
		if (d>max) max=d;
    2b2c:	4291      	cmp	r1, r2
    2b2e:	bfb8      	it	lt
    2b30:	4611      	movlt	r1, r2
	} while (p < end);
    2b32:	4573      	cmp	r3, lr
    2b34:	d1f5      	bne.n	2b22 <AudioAnalyzePeak::update()+0x1a>
	min_sample = min;
	max_sample = max;
	new_output = true;
    2b36:	2301      	movs	r3, #1
	min_sample = min;
    2b38:	f8a4 c01e 	strh.w	ip, [r4, #30]
	max_sample = max;
    2b3c:	8421      	strh	r1, [r4, #32]
	new_output = true;
    2b3e:	7723      	strb	r3, [r4, #28]
	release(block);
}
    2b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	release(block);
    2b44:	f00a b84c 	b.w	cbe0 <AudioStream::release(audio_block_struct*)>
}
    2b48:	bd10      	pop	{r4, pc}
    2b4a:	bf00      	nop

00002b4c <AudioAnalyzeRMS::update()>:
{
    2b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	audio_block_t *block = receiveReadOnly();
    2b50:	2100      	movs	r1, #0
{
    2b52:	4680      	mov	r8, r0
	audio_block_t *block = receiveReadOnly();
    2b54:	f00a f890 	bl	cc78 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) {
    2b58:	b1f8      	cbz	r0, 2b9a <AudioAnalyzeRMS::update()+0x4e>
	int64_t sum = accum;
    2b5a:	f100 0114 	add.w	r1, r0, #20
    2b5e:	f500 7c8a 	add.w	ip, r0, #276	; 0x114
    2b62:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
		uint32_t n2 = *p++;
    2b66:	e951 7604 	ldrd	r7, r6, [r1, #-16]
		uint32_t n4 = *p++;
    2b6a:	e951 5402 	ldrd	r5, r4, [r1, #-8]
}

// // computes sum += ((a[15:0] * b[15:0]) + (a[31:16] * b[31:16]))
static inline int64_t multiply_accumulate_16tx16t_add_16bx16b(int64_t sum, uint32_t a, uint32_t b)
{
	asm volatile("smlald %Q0, %R0, %1, %2" : "+r" (sum) : "r" (a), "r" (b));
    2b6e:	fbc7 23c7 	smlald	r2, r3, r7, r7
    2b72:	fbc6 23c6 	smlald	r2, r3, r6, r6
    2b76:	fbc5 23c5 	smlald	r2, r3, r5, r5
    2b7a:	fbc4 23c4 	smlald	r2, r3, r4, r4
	} while (p < end);
    2b7e:	3110      	adds	r1, #16
    2b80:	4561      	cmp	r1, ip
    2b82:	d1f0      	bne.n	2b66 <AudioAnalyzeRMS::update()+0x1a>
	count++;
    2b84:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
    2b88:	3101      	adds	r1, #1
	accum = sum;
    2b8a:	e9c8 2308 	strd	r2, r3, [r8, #32]
	count++;
    2b8e:	f8c8 1028 	str.w	r1, [r8, #40]	; 0x28
}
    2b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	release(block);
    2b96:	f00a b823 	b.w	cbe0 <AudioStream::release(audio_block_struct*)>
		count++;
    2b9a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    2b9e:	3301      	adds	r3, #1
    2ba0:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
}
    2ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002ba8 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    2ba8:	b510      	push	{r4, lr}
    2baa:	4604      	mov	r4, r0
		release();
    2bac:	f00a f9d4 	bl	cf58 <DMAChannel::release()>
	}
    2bb0:	4620      	mov	r0, r4
    2bb2:	bd10      	pop	{r4, pc}

00002bb4 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE>:
static float bufferL[bufferLength];

volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

DMAChannel AsyncAudioInputSPDIF3::dma(false);
    2bb4:	4a02      	ldr	r2, [pc, #8]	; (2bc0 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0xc>)
    2bb6:	4903      	ldr	r1, [pc, #12]	; (2bc4 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x10>)
    2bb8:	4803      	ldr	r0, [pc, #12]	; (2bc8 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x14>)
    2bba:	f00c bff9 	b.w	fbb0 <__aeabi_atexit>
    2bbe:	bf00      	nop
    2bc0:	20002f18 	.word	0x20002f18
    2bc4:	00002ba9 	.word	0x00002ba9
    2bc8:	20004448 	.word	0x20004448

00002bcc <AudioControlSGTL5000::disable()>:
	bool disable(void) { return false; }
    2bcc:	2000      	movs	r0, #0
    2bce:	4770      	bx	lr

00002bd0 <AudioControlSGTL5000::inputLevel(float)>:
	bool inputLevel(float n) {return false;}
    2bd0:	2000      	movs	r0, #0
    2bd2:	4770      	bx	lr

00002bd4 <AudioControlSGTL5000::read(unsigned int)>:
	return true;
}


unsigned int AudioControlSGTL5000::read(unsigned int reg)
{
    2bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    2bd6:	2701      	movs	r7, #1
		txBuffer[0] = (address << 1);
    2bd8:	7a02      	ldrb	r2, [r0, #8]
    2bda:	4c1e      	ldr	r4, [pc, #120]	; (2c54 <AudioControlSGTL5000::read(unsigned int)+0x80>)
    2bdc:	460d      	mov	r5, r1
    2bde:	40ba      	lsls	r2, r7
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    2be0:	f3c1 2107 	ubfx	r1, r1, #8, #8
    2be4:	4606      	mov	r6, r0
    2be6:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
    2be8:	f884 20a5 	strb.w	r2, [r4, #165]	; 0xa5
		transmitting = 1;
    2bec:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		txBufferLength = 1;
    2bf0:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		return write((uint8_t)n);
    2bf4:	f009 f9ee 	bl	bfd4 <TwoWire::write(unsigned char)>
    2bf8:	b2e9      	uxtb	r1, r5
    2bfa:	4620      	mov	r0, r4
    2bfc:	f009 f9ea 	bl	bfd4 <TwoWire::write(unsigned char)>
	unsigned int val;
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	if (Wire.endTransmission(false) != 0) return 0;
    2c00:	2100      	movs	r1, #0
    2c02:	4620      	mov	r0, r4
    2c04:	f009 fabe 	bl	c184 <TwoWire::endTransmission(unsigned char)>
    2c08:	b108      	cbz	r0, 2c0e <AudioControlSGTL5000::read(unsigned int)+0x3a>
    2c0a:	2000      	movs	r0, #0
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
	val = Wire.read() << 8;
	val |= Wire.read();
	return val;
}
    2c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    2c0e:	463b      	mov	r3, r7
    2c10:	2202      	movs	r2, #2
    2c12:	7a31      	ldrb	r1, [r6, #8]
    2c14:	4620      	mov	r0, r4
    2c16:	f009 fb35 	bl	c284 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
    2c1a:	2801      	cmp	r0, #1
    2c1c:	d9f5      	bls.n	2c0a <AudioControlSGTL5000::read(unsigned int)+0x36>
		if (rxBufferIndex >= rxBufferLength) return -1;
    2c1e:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
    2c22:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    2c26:	4282      	cmp	r2, r0
    2c28:	d210      	bcs.n	2c4c <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    2c2a:	1c53      	adds	r3, r2, #1
    2c2c:	18a1      	adds	r1, r4, r2
    2c2e:	b2db      	uxtb	r3, r3
    2c30:	7e89      	ldrb	r1, [r1, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    2c32:	4298      	cmp	r0, r3
	val = Wire.read() << 8;
    2c34:	ea4f 2101 	mov.w	r1, r1, lsl #8
		return rxBuffer[rxBufferIndex++];
    2c38:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		if (rxBufferIndex >= rxBufferLength) return -1;
    2c3c:	d906      	bls.n	2c4c <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    2c3e:	4423      	add	r3, r4
    2c40:	3202      	adds	r2, #2
    2c42:	7e98      	ldrb	r0, [r3, #26]
    2c44:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
	val |= Wire.read();
    2c48:	4308      	orrs	r0, r1
}
    2c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c52:	bf00      	nop
    2c54:	20002aec 	.word	0x20002aec

00002c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    2c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		transmitting = 1;
    2c5a:	2701      	movs	r7, #1
		txBuffer[0] = (address << 1);
    2c5c:	7a03      	ldrb	r3, [r0, #8]
    2c5e:	4c14      	ldr	r4, [pc, #80]	; (2cb0 <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x58>)
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    2c60:	2924      	cmp	r1, #36	; 0x24
    2c62:	fa03 f307 	lsl.w	r3, r3, r7
{
    2c66:	460d      	mov	r5, r1
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    2c68:	bf08      	it	eq
    2c6a:	80c2      	strheq	r2, [r0, #6]
{
    2c6c:	4616      	mov	r6, r2
		return write((uint8_t)n);
    2c6e:	f3c1 2107 	ubfx	r1, r1, #8, #8
    2c72:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
    2c74:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		transmitting = 1;
    2c78:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		txBufferLength = 1;
    2c7c:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		return write((uint8_t)n);
    2c80:	f009 f9a8 	bl	bfd4 <TwoWire::write(unsigned char)>
    2c84:	b2e9      	uxtb	r1, r5
    2c86:	4620      	mov	r0, r4
    2c88:	f009 f9a4 	bl	bfd4 <TwoWire::write(unsigned char)>
    2c8c:	f3c6 2107 	ubfx	r1, r6, #8, #8
    2c90:	4620      	mov	r0, r4
    2c92:	f009 f99f 	bl	bfd4 <TwoWire::write(unsigned char)>
    2c96:	4620      	mov	r0, r4
    2c98:	b2f1      	uxtb	r1, r6
    2c9a:	f009 f99b 	bl	bfd4 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    2c9e:	4639      	mov	r1, r7
    2ca0:	4620      	mov	r0, r4
    2ca2:	f009 fa6f 	bl	c184 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    2ca6:	fab0 f080 	clz	r0, r0
    2caa:	0940      	lsrs	r0, r0, #5
    2cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cae:	bf00      	nop
    2cb0:	20002aec 	.word	0x20002aec

00002cb4 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]>:
bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
    2cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        muted = true;
    2cb8:	f04f 0801 	mov.w	r8, #1
bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
    2cbc:	460f      	mov	r7, r1
    2cbe:	4615      	mov	r5, r2
	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    2cc0:	2130      	movs	r1, #48	; 0x30
    2cc2:	f244 0260 	movw	r2, #16480	; 0x4060
        muted = true;
    2cc6:	f880 8004 	strb.w	r8, [r0, #4]
bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
    2cca:	4604      	mov	r4, r0
	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    2ccc:	f7ff ffc4 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    2cd0:	4606      	mov	r6, r0
    2cd2:	b910      	cbnz	r0, 2cda <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x26>
}
    2cd4:	4630      	mov	r0, r6
    2cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    2cda:	226c      	movs	r2, #108	; 0x6c
    2cdc:	2126      	movs	r1, #38	; 0x26
    2cde:	4620      	mov	r0, r4
    2ce0:	f7ff ffba 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    2ce4:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
    2ce8:	2128      	movs	r1, #40	; 0x28
    2cea:	4620      	mov	r0, r4
    2cec:	f7ff ffb4 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    2cf0:	f640 7222 	movw	r2, #3874	; 0xf22
    2cf4:	212c      	movs	r1, #44	; 0x2c
    2cf6:	4620      	mov	r0, r4
    2cf8:	f7ff ffae 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    2cfc:	f244 4246 	movw	r2, #17478	; 0x4446
    2d00:	213c      	movs	r1, #60	; 0x3c
    2d02:	4620      	mov	r0, r4
    2d04:	f7ff ffa8 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    2d08:	f240 1237 	movw	r2, #311	; 0x137
    2d0c:	2124      	movs	r1, #36	; 0x24
    2d0e:	4620      	mov	r0, r4
    2d10:	f7ff ffa2 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (extMCLK > 0) {
    2d14:	2f00      	cmp	r7, #0
    2d16:	d06b      	beq.n	2df0 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x13c>
		if (extMCLK > 17000000) {
    2d18:	4b45      	ldr	r3, [pc, #276]	; (2e30 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x17c>)
			write(CHIP_CLK_TOP_CTRL, 0);
    2d1a:	2134      	movs	r1, #52	; 0x34
    2d1c:	4620      	mov	r0, r4
		if (extMCLK > 17000000) {
    2d1e:	429f      	cmp	r7, r3
			write(CHIP_CLK_TOP_CTRL, 1);
    2d20:	bf8c      	ite	hi
    2d22:	4642      	movhi	r2, r8
			write(CHIP_CLK_TOP_CTRL, 0);
    2d24:	2200      	movls	r2, #0
    2d26:	f7ff ff97 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    2d2a:	ee07 5a90 	vmov	s15, r5
    2d2e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 2e34 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x180>
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    2d32:	2132      	movs	r1, #50	; 0x32
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    2d34:	eeb8 6a67 	vcvt.f32.u32	s12, s15
    2d38:	ee07 7a90 	vmov	s15, r7
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    2d3c:	4620      	mov	r0, r4
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    2d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    2d42:	fbb5 f2f7 	udiv	r2, r5, r7
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    2d46:	eec6 7a26 	vdiv.f32	s15, s12, s13
		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    2d4a:	f002 021f 	and.w	r2, r2, #31
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    2d4e:	ee06 2a90 	vmov	s13, r2
    2d52:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    2d56:	ee77 7ae6 	vsub.f32	s15, s15, s13
    2d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
    2d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2d62:	ee17 3a90 	vmov	r3, s15
    2d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    2d6a:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
    2d6e:	f7ff ff73 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
    2d72:	f244 52ff 	movw	r2, #17919	; 0x45ff
    2d76:	2130      	movs	r1, #48	; 0x30
    2d78:	4620      	mov	r0, r4
    2d7a:	f7ff ff6d 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    2d7e:	2273      	movs	r2, #115	; 0x73
    2d80:	2102      	movs	r1, #2
    2d82:	4620      	mov	r0, r4
    2d84:	f7ff ff68 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    2d88:	f44f 70c8 	mov.w	r0, #400	; 0x190
    2d8c:	f00b f9c8 	bl	e120 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    2d90:	f641 521d 	movw	r2, #7453	; 0x1d1d
    2d94:	212e      	movs	r1, #46	; 0x2e
    2d96:	4620      	mov	r0, r4
    2d98:	f7ff ff5e 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
    2d9c:	2207      	movs	r2, #7
    2d9e:	2104      	movs	r1, #4
    2da0:	4620      	mov	r0, r4
    2da2:	f7ff ff59 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
    2da6:	22b0      	movs	r2, #176	; 0xb0
    2da8:	2106      	movs	r1, #6
    2daa:	4620      	mov	r0, r4
    2dac:	f7ff ff54 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    2db0:	2210      	movs	r2, #16
    2db2:	210a      	movs	r1, #10
    2db4:	4620      	mov	r0, r4
    2db6:	f7ff ff4f 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    2dba:	2200      	movs	r2, #0
    2dbc:	210e      	movs	r1, #14
    2dbe:	4620      	mov	r0, r4
    2dc0:	f7ff ff4a 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    2dc4:	f643 423c 	movw	r2, #15420	; 0x3c3c
    2dc8:	2110      	movs	r1, #16
    2dca:	4620      	mov	r0, r4
    2dcc:	f7ff ff44 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    2dd0:	f647 727f 	movw	r2, #32639	; 0x7f7f
    2dd4:	2122      	movs	r1, #34	; 0x22
    2dd6:	4620      	mov	r0, r4
    2dd8:	f7ff ff3e 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    2ddc:	2236      	movs	r2, #54	; 0x36
    2dde:	2124      	movs	r1, #36	; 0x24
    2de0:	4620      	mov	r0, r4
    2de2:	f7ff ff39 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	semi_automated = true;
    2de6:	2301      	movs	r3, #1
}
    2de8:	4630      	mov	r0, r6
	semi_automated = true;
    2dea:	7263      	strb	r3, [r4, #9]
}
    2dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    2df0:	f244 02ff 	movw	r2, #16639	; 0x40ff
    2df4:	2130      	movs	r1, #48	; 0x30
    2df6:	4620      	mov	r0, r4
    2df8:	f7ff ff2e 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    2dfc:	2273      	movs	r2, #115	; 0x73
    2dfe:	2102      	movs	r1, #2
    2e00:	4620      	mov	r0, r4
    2e02:	f7ff ff29 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    2e06:	f44f 70c8 	mov.w	r0, #400	; 0x190
    2e0a:	f00b f989 	bl	e120 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    2e0e:	f641 521d 	movw	r2, #7453	; 0x1d1d
    2e12:	212e      	movs	r1, #46	; 0x2e
    2e14:	4620      	mov	r0, r4
    2e16:	f7ff ff1f 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    2e1a:	2204      	movs	r2, #4
    2e1c:	4620      	mov	r0, r4
    2e1e:	4611      	mov	r1, r2
    2e20:	f7ff ff1a 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
    2e24:	2230      	movs	r2, #48	; 0x30
    2e26:	2106      	movs	r1, #6
    2e28:	4620      	mov	r0, r4
    2e2a:	f7ff ff15 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    2e2e:	e7bf      	b.n	2db0 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0xfc>
    2e30:	01036640 	.word	0x01036640
    2e34:	45000000 	.word	0x45000000

00002e38 <AudioControlSGTL5000::enable()>:
bool AudioControlSGTL5000::enable(void) {
    2e38:	b510      	push	{r4, lr}
    2e3a:	4604      	mov	r4, r0
	Wire.begin();
    2e3c:	4808      	ldr	r0, [pc, #32]	; (2e60 <AudioControlSGTL5000::enable()+0x28>)
    2e3e:	f015 fb33 	bl	184a8 <___ZN7TwoWire5beginEv_veneer>
	delay(5);
    2e42:	2005      	movs	r0, #5
    2e44:	f00b f96c 	bl	e120 <delay>
	unsigned int n = read(CHIP_I2S_CTRL);
    2e48:	2106      	movs	r1, #6
    2e4a:	4620      	mov	r0, r4
    2e4c:	f7ff fec2 	bl	2bd4 <AudioControlSGTL5000::read(unsigned int)>
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
    2e50:	4620      	mov	r0, r4
    2e52:	4a04      	ldr	r2, [pc, #16]	; (2e64 <AudioControlSGTL5000::enable()+0x2c>)
    2e54:	2100      	movs	r1, #0
}
    2e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2e5a:	f7ff bf2b 	b.w	2cb4 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]>
    2e5e:	bf00      	nop
    2e60:	20002aec 	.word	0x20002aec
    2e64:	0ac44000 	.word	0x0ac44000

00002e68 <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    2e68:	b510      	push	{r4, lr}
    2e6a:	4604      	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    2e6c:	b1d1      	cbz	r1, 2ea4 <AudioControlSGTL5000::inputSelect(int)+0x3c>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    2e6e:	2901      	cmp	r1, #1
    2e70:	d001      	beq.n	2e76 <AudioControlSGTL5000::inputSelect(int)+0xe>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    2e72:	2000      	movs	r0, #0
    2e74:	bd10      	pop	{r4, pc}
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    2e76:	f240 1273 	movw	r2, #371	; 0x173
    2e7a:	212a      	movs	r1, #42	; 0x2a
    2e7c:	f7ff feec 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    2e80:	2800      	cmp	r0, #0
    2e82:	d0f6      	beq.n	2e72 <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    2e84:	2288      	movs	r2, #136	; 0x88
    2e86:	2120      	movs	r1, #32
    2e88:	4620      	mov	r0, r4
    2e8a:	f7ff fee5 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    2e8e:	2800      	cmp	r0, #0
    2e90:	d0ef      	beq.n	2e72 <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    2e92:	88e2      	ldrh	r2, [r4, #6]
    2e94:	4620      	mov	r0, r4
    2e96:	2124      	movs	r1, #36	; 0x24
    2e98:	f022 0204 	bic.w	r2, r2, #4
	}
    2e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    2ea0:	f7ff beda 	b.w	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    2ea4:	2255      	movs	r2, #85	; 0x55
    2ea6:	2120      	movs	r1, #32
    2ea8:	f7ff fed6 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    2eac:	2800      	cmp	r0, #0
    2eae:	d0e0      	beq.n	2e72 <AudioControlSGTL5000::inputSelect(int)+0xa>
    2eb0:	88e2      	ldrh	r2, [r4, #6]
    2eb2:	4620      	mov	r0, r4
    2eb4:	2124      	movs	r1, #36	; 0x24
    2eb6:	f042 0204 	orr.w	r2, r2, #4
	}
    2eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    2ebe:	f7ff becb 	b.w	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    2ec2:	bf00      	nop

00002ec4 <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    2ec4:	b538      	push	{r3, r4, r5, lr}
    2ec6:	4605      	mov	r5, r0
	if (n == 0) {
    2ec8:	b311      	cbz	r1, 2f10 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x4c>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    2eca:	2980      	cmp	r1, #128	; 0x80
    2ecc:	d80c      	bhi.n	2ee8 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x24>
		n = 0;
	} else {
		n = 0x80 - n;
    2ece:	f1c1 0480 	rsb	r4, r1, #128	; 0x80
	}
	if (muted) {
    2ed2:	792b      	ldrb	r3, [r5, #4]
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
    2ed4:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
	if (muted) {
    2ed8:	b953      	cbnz	r3, 2ef0 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x2c>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    2eda:	4622      	mov	r2, r4
    2edc:	4628      	mov	r0, r5
    2ede:	2122      	movs	r1, #34	; 0x22
}
    2ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    2ee4:	f7ff beb8 	b.w	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (muted) {
    2ee8:	792b      	ldrb	r3, [r5, #4]
    2eea:	2400      	movs	r4, #0
    2eec:	2b00      	cmp	r3, #0
    2eee:	d0f4      	beq.n	2eda <AudioControlSGTL5000::volumeInteger(unsigned int)+0x16>
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    2ef0:	88ea      	ldrh	r2, [r5, #6]
		muted = false;
    2ef2:	2300      	movs	r3, #0
    2ef4:	2124      	movs	r1, #36	; 0x24
    2ef6:	4628      	mov	r0, r5
    2ef8:	f022 0210 	bic.w	r2, r2, #16
    2efc:	712b      	strb	r3, [r5, #4]
    2efe:	f7ff feab 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    2f02:	4622      	mov	r2, r4
    2f04:	4628      	mov	r0, r5
    2f06:	2122      	movs	r1, #34	; 0x22
}
    2f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    2f0c:	f7ff bea4 	b.w	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		muted = true;
    2f10:	2301      	movs	r3, #1
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    2f12:	f647 727f 	movw	r2, #32639	; 0x7f7f
    2f16:	2122      	movs	r1, #34	; 0x22
		muted = true;
    2f18:	7103      	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    2f1a:	f7ff fe9d 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    2f1e:	88ea      	ldrh	r2, [r5, #6]
    2f20:	4628      	mov	r0, r5
    2f22:	2124      	movs	r1, #36	; 0x24
    2f24:	f042 0210 	orr.w	r2, r2, #16
}
    2f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2f2c:	f7ff be94 	b.w	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

00002f30 <AudioControlSGTL5000::volume(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    2f30:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 2fb0 <AudioControlSGTL5000::volume(float)+0x80>
    2f34:	eddf 7a1f 	vldr	s15, [pc, #124]	; 2fb4 <AudioControlSGTL5000::volume(float)+0x84>
    2f38:	eee0 7a07 	vfma.f32	s15, s0, s14
    2f3c:	b538      	push	{r3, r4, r5, lr}
    2f3e:	4605      	mov	r5, r0
    2f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2f44:	ee17 4a90 	vmov	r4, s15
	if (n == 0) {
    2f48:	b314      	cbz	r4, 2f90 <AudioControlSGTL5000::volume(float)+0x60>
	} else if (n > 0x80) {
    2f4a:	2c80      	cmp	r4, #128	; 0x80
    2f4c:	d80c      	bhi.n	2f68 <AudioControlSGTL5000::volume(float)+0x38>
		n = 0x80 - n;
    2f4e:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (muted) {
    2f52:	792b      	ldrb	r3, [r5, #4]
	n = n | (n << 8);
    2f54:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
	if (muted) {
    2f58:	b953      	cbnz	r3, 2f70 <AudioControlSGTL5000::volume(float)+0x40>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    2f5a:	4622      	mov	r2, r4
    2f5c:	4628      	mov	r0, r5
    2f5e:	2122      	movs	r1, #34	; 0x22
    2f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2f64:	f7ff be78 	b.w	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (muted) {
    2f68:	792b      	ldrb	r3, [r5, #4]
    2f6a:	2400      	movs	r4, #0
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d0f4      	beq.n	2f5a <AudioControlSGTL5000::volume(float)+0x2a>
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    2f70:	88ea      	ldrh	r2, [r5, #6]
		muted = false;
    2f72:	2300      	movs	r3, #0
    2f74:	2124      	movs	r1, #36	; 0x24
    2f76:	4628      	mov	r0, r5
    2f78:	f022 0210 	bic.w	r2, r2, #16
    2f7c:	712b      	strb	r3, [r5, #4]
    2f7e:	f7ff fe6b 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    2f82:	4622      	mov	r2, r4
    2f84:	4628      	mov	r0, r5
    2f86:	2122      	movs	r1, #34	; 0x22
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    2f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2f8c:	f7ff be64 	b.w	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		muted = true;
    2f90:	2301      	movs	r3, #1
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    2f92:	f647 727f 	movw	r2, #32639	; 0x7f7f
    2f96:	2122      	movs	r1, #34	; 0x22
		muted = true;
    2f98:	7103      	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    2f9a:	f7ff fe5d 	bl	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    2f9e:	88ea      	ldrh	r2, [r5, #6]
    2fa0:	4628      	mov	r0, r5
    2fa2:	2124      	movs	r1, #36	; 0x24
    2fa4:	f042 0210 	orr.w	r2, r2, #16
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    2fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    2fac:	f7ff be54 	b.w	2c58 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    2fb0:	43010000 	.word	0x43010000
    2fb4:	3eff7cee 	.word	0x3eff7cee

00002fb8 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    2fb8:	b430      	push	{r4, r5}
    2fba:	b082      	sub	sp, #8
    2fbc:	460c      	mov	r4, r1
    2fbe:	ab02      	add	r3, sp, #8
    2fc0:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    2fc4:	7cc3      	ldrb	r3, [r0, #19]
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d030      	beq.n	302c <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    2fca:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2fcc:	7cc3      	ldrb	r3, [r0, #19]
    2fce:	07da      	lsls	r2, r3, #31
    2fd0:	d508      	bpl.n	2fe4 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2fd2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2fd6:	6945      	ldr	r5, [r0, #20]
    2fd8:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    2fdc:	402a      	ands	r2, r5
    2fde:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    2fe0:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    2fe4:	079d      	lsls	r5, r3, #30
    2fe6:	d508      	bpl.n	2ffa <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2fe8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2fec:	6985      	ldr	r5, [r0, #24]
    2fee:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    2ff2:	402a      	ands	r2, r5
    2ff4:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    2ff6:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    2ffa:	0759      	lsls	r1, r3, #29
    2ffc:	d508      	bpl.n	3010 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    2ffe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3002:	69c5      	ldr	r5, [r0, #28]
    3004:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    3008:	402a      	ands	r2, r5
    300a:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    300c:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    3010:	071a      	lsls	r2, r3, #28
    3012:	d508      	bpl.n	3026 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    3014:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3018:	6a05      	ldr	r5, [r0, #32]
    301a:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    301e:	402a      	ands	r2, r5
    3020:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    3022:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    3026:	06db      	lsls	r3, r3, #27
    3028:	d42f      	bmi.n	308a <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    302a:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    302c:	6883      	ldr	r3, [r0, #8]
    302e:	429c      	cmp	r4, r3
    3030:	d035      	beq.n	309e <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    3032:	4b22      	ldr	r3, [pc, #136]	; (30bc <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    3034:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    3036:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    3038:	4a21      	ldr	r2, [pc, #132]	; (30c0 <SPIClass::beginTransaction(SPISettings)+0x108>)
    303a:	f3c3 1101 	ubfx	r1, r3, #4, #2
    303e:	f3c3 6382 	ubfx	r3, r3, #26, #3
    3042:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    3046:	3301      	adds	r3, #1
    3048:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    304c:	b1cc      	cbz	r4, 3082 <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    304e:	4294      	cmp	r4, r2
    3050:	d827      	bhi.n	30a2 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    3052:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    3056:	fbb2 f2f3 	udiv	r2, r2, r3
    305a:	4294      	cmp	r4, r2
    305c:	d32c      	bcc.n	30b8 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    305e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    3062:	d320      	bcc.n	30a6 <SPIClass::beginTransaction(SPISettings)+0xee>
    3064:	4c17      	ldr	r4, [pc, #92]	; (30c4 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    3066:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3068:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    306a:	2203      	movs	r2, #3
		port().CR = 0;
    306c:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    306e:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    3070:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    3072:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    3074:	2201      	movs	r2, #1
		port().CCR = _ccr;
    3076:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    3078:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    307a:	611a      	str	r2, [r3, #16]
	}
    307c:	b002      	add	sp, #8
    307e:	bc30      	pop	{r4, r5}
    3080:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    3082:	4299      	cmp	r1, r3
    3084:	d3ef      	bcc.n	3066 <SPIClass::beginTransaction(SPISettings)+0xae>
    3086:	1c53      	adds	r3, r2, #1
    3088:	e7e9      	b.n	305e <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    308a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    308e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    3090:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    3094:	400b      	ands	r3, r1
    3096:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    3098:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    309c:	e7c5      	b.n	302a <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    309e:	68c4      	ldr	r4, [r0, #12]
    30a0:	e7e2      	b.n	3068 <SPIClass::beginTransaction(SPISettings)+0xb0>
    30a2:	2400      	movs	r4, #0
    30a4:	e7df      	b.n	3066 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    30a6:	2b02      	cmp	r3, #2
    30a8:	d9fb      	bls.n	30a2 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    30aa:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    30ac:	085a      	lsrs	r2, r3, #1
    30ae:	0214      	lsls	r4, r2, #8
    30b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    30b4:	431c      	orrs	r4, r3
    30b6:	e7d6      	b.n	3066 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    30b8:	461a      	mov	r2, r3
    30ba:	e7e4      	b.n	3086 <SPIClass::beginTransaction(SPISettings)+0xce>
    30bc:	400fc000 	.word	0x400fc000
    30c0:	200015fc 	.word	0x200015fc
    30c4:	007f7fff 	.word	0x007f7fff

000030c8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:
#include <Arduino.h>
#include "input_adc.h"

extern "C" void xbar_connect(unsigned int input, unsigned int output);

DMAChannel AudioInputAnalog::dma(false);
    30c8:	4a02      	ldr	r2, [pc, #8]	; (30d4 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    30ca:	4903      	ldr	r1, [pc, #12]	; (30d8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    30cc:	4803      	ldr	r0, [pc, #12]	; (30dc <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    30ce:	f00c bd6f 	b.w	fbb0 <__aeabi_atexit>
    30d2:	bf00      	nop
    30d4:	20002f18 	.word	0x20002f18
    30d8:	00002ba9 	.word	0x00002ba9
    30dc:	200043c4 	.word	0x200043c4

000030e0 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    30e0:	4a02      	ldr	r2, [pc, #8]	; (30ec <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    30e2:	4903      	ldr	r1, [pc, #12]	; (30f0 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    30e4:	4803      	ldr	r0, [pc, #12]	; (30f4 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    30e6:	f00c bd63 	b.w	fbb0 <__aeabi_atexit>
    30ea:	bf00      	nop
    30ec:	20002f18 	.word	0x20002f18
    30f0:	00002ba9 	.word	0x00002ba9
    30f4:	2000433c 	.word	0x2000433c

000030f8 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    30f8:	4a02      	ldr	r2, [pc, #8]	; (3104 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    30fa:	4903      	ldr	r1, [pc, #12]	; (3108 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    30fc:	4803      	ldr	r0, [pc, #12]	; (310c <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    30fe:	f00c bd57 	b.w	fbb0 <__aeabi_atexit>
    3102:	bf00      	nop
    3104:	20002f18 	.word	0x20002f18
    3108:	00002ba9 	.word	0x00002ba9
    310c:	20004354 	.word	0x20004354

00003110 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    3110:	4a02      	ldr	r2, [pc, #8]	; (311c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    3112:	4903      	ldr	r1, [pc, #12]	; (3120 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    3114:	4803      	ldr	r0, [pc, #12]	; (3124 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    3116:	f00c bd4b 	b.w	fbb0 <__aeabi_atexit>
    311a:	bf00      	nop
    311c:	20002f18 	.word	0x20002f18
    3120:	00002ba9 	.word	0x00002ba9
    3124:	200043cc 	.word	0x200043cc

00003128 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    3128:	4a02      	ldr	r2, [pc, #8]	; (3134 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    312a:	4903      	ldr	r1, [pc, #12]	; (3138 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    312c:	4803      	ldr	r0, [pc, #12]	; (313c <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    312e:	f00c bd3f 	b.w	fbb0 <__aeabi_atexit>
    3132:	bf00      	nop
    3134:	20002f18 	.word	0x20002f18
    3138:	00002ba9 	.word	0x00002ba9
    313c:	200043d4 	.word	0x200043d4

00003140 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    3140:	4a02      	ldr	r2, [pc, #8]	; (314c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    3142:	4903      	ldr	r1, [pc, #12]	; (3150 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    3144:	4803      	ldr	r0, [pc, #12]	; (3154 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    3146:	f00c bd33 	b.w	fbb0 <__aeabi_atexit>
    314a:	bf00      	nop
    314c:	20002f18 	.word	0x20002f18
    3150:	00002ba9 	.word	0x00002ba9
    3154:	200043ec 	.word	0x200043ec

00003158 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:
#if defined(__IMXRT1062__) || defined(KINETISK)
DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    3158:	4a02      	ldr	r2, [pc, #8]	; (3164 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    315a:	4903      	ldr	r1, [pc, #12]	; (3168 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    315c:	4803      	ldr	r0, [pc, #12]	; (316c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    315e:	f00c bd27 	b.w	fbb0 <__aeabi_atexit>
    3162:	bf00      	nop
    3164:	20002f18 	.word	0x20002f18
    3168:	00002ba9 	.word	0x00002ba9
    316c:	20004344 	.word	0x20004344

00003170 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM2::block_left = NULL;
bool AudioInputPDM2::update_responsibility = false;
DMAChannel AudioInputPDM2::dma(false);
    3170:	4a02      	ldr	r2, [pc, #8]	; (317c <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0xc>)
    3172:	4903      	ldr	r1, [pc, #12]	; (3180 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x10>)
    3174:	4803      	ldr	r0, [pc, #12]	; (3184 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x14>)
    3176:	f00c bd1b 	b.w	fbb0 <__aeabi_atexit>
    317a:	bf00      	nop
    317c:	20002f18 	.word	0x20002f18
    3180:	00002ba9 	.word	0x00002ba9
    3184:	2000435c 	.word	0x2000435c

00003188 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    3188:	4a02      	ldr	r2, [pc, #8]	; (3194 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    318a:	4903      	ldr	r1, [pc, #12]	; (3198 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    318c:	4803      	ldr	r0, [pc, #12]	; (319c <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    318e:	f00c bd0f 	b.w	fbb0 <__aeabi_atexit>
    3192:	bf00      	nop
    3194:	20002f18 	.word	0x20002f18
    3198:	00002ba9 	.word	0x00002ba9
    319c:	200043dc 	.word	0x200043dc

000031a0 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    31a0:	4a02      	ldr	r2, [pc, #8]	; (31ac <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    31a2:	4903      	ldr	r1, [pc, #12]	; (31b0 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    31a4:	4803      	ldr	r0, [pc, #12]	; (31b4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    31a6:	f00c bd03 	b.w	fbb0 <__aeabi_atexit>
    31aa:	bf00      	nop
    31ac:	20002f18 	.word	0x20002f18
    31b0:	00002ba9 	.word	0x00002ba9
    31b4:	2000434c 	.word	0x2000434c

000031b8 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
audio_block_t * AudioInputTDM2::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM2::update_responsibility = false;
DMAChannel AudioInputTDM2::dma(false);
    31b8:	4a02      	ldr	r2, [pc, #8]	; (31c4 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    31ba:	4903      	ldr	r1, [pc, #12]	; (31c8 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    31bc:	4803      	ldr	r0, [pc, #12]	; (31cc <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    31be:	f00c bcf7 	b.w	fbb0 <__aeabi_atexit>
    31c2:	bf00      	nop
    31c4:	20002f18 	.word	0x20002f18
    31c8:	00002ba9 	.word	0x00002ba9
    31cc:	20004364 	.word	0x20004364

000031d0 <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
    31d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
    31d4:	f500 7e80 	add.w	lr, r0, #256	; 0x100

000031d8 <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    31d8:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
    31dc:	e8b2 1540 	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
    31e0:	eac5 4306 	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
    31e4:	eac6 4425 	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
    31e8:	eac7 4508 	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
    31ec:	eac8 4627 	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
    31f0:	eac9 470a 	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
    31f4:	eaca 4829 	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
    31f8:	eacb 490c 	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
    31fc:	eacc 4a2b 	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
    3200:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
    3204:	4586      	cmp	lr, r0
	bne .loopLR
    3206:	d1e7      	bne.n	31d8 <.loopLR>

	pop	{r4-r11,r14}	
    3208:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8}
#endif
	BX lr
    320c:	4770      	bx	lr

0000320e <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
    320e:	f04f 0200 	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    3212:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    3216:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    321a:	bf00      	nop

0000321c <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    321c:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
    3220:	eac5 0302 	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
    3224:	eac2 4425 	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
    3228:	eac7 0502 	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
    322c:	eac2 4627 	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
    3230:	eac9 0702 	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
    3234:	eac2 4829 	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
    3238:	eacb 0902 	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
    323c:	eac2 4a2b 	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
    3240:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    3244:	4584      	cmp	ip, r0
	bne .loopL
    3246:	d1e9      	bne.n	321c <.loopL>

	pop	{r4-r11}
    3248:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
    324c:	4770      	bx	lr

0000324e <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
    324e:	f04f 0200 	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    3252:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    3256:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    325a:	bf00      	nop

0000325c <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
    325c:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
    3260:	eac2 4305 	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
    3264:	eac2 0405 	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
    3268:	eac2 4507 	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
    326c:	eac2 0607 	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
    3270:	eac2 4709 	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
    3274:	eac2 0809 	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
    3278:	eac2 490b 	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
    327c:	eac2 0a0b 	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
    3280:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    3284:	4584      	cmp	ip, r0
	bne .loopR
    3286:	d1e9      	bne.n	325c <.loopR>

	pop	{r4-r11}
    3288:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
    328c:	4770      	bx	lr

0000328e <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
    328e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
    3292:	9c08      	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
    3294:	f500 7b00 	add.w	fp, r0, #512	; 0x200

00003298 <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
    3298:	f851 5b04 	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
    329c:	f853 6b04 	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
    32a0:	eac5 4706 	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
    32a4:	eac6 4925 	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
    32a8:	f852 5b04 	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
    32ac:	f854 6b04 	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
    32b0:	eac5 4806 	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
    32b4:	eac6 4a25 	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
    32b8:	e8a0 0780 	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
    32bc:	4583      	cmp	fp, r0
	bne .loopQuad
    32be:	d1eb      	bne.n	3298 <.loopQuad>

	pop	{r4-r11}
    32c0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
    32c4:	4770      	bx	lr
    32c6:	bf00      	nop

000032c8 <AudioOutputI2S::isr()>:
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    32c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    32cc:	4b45      	ldr	r3, [pc, #276]	; (33e4 <AudioOutputI2S::isr()+0x11c>)
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    32ce:	4c46      	ldr	r4, [pc, #280]	; (33e8 <AudioOutputI2S::isr()+0x120>)
	saddr = (uint32_t)(dma.TCD->SADDR);
    32d0:	6818      	ldr	r0, [r3, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    32d2:	7919      	ldrb	r1, [r3, #4]
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    32d4:	f504 7580 	add.w	r5, r4, #256	; 0x100
	saddr = (uint32_t)(dma.TCD->SADDR);
    32d8:	6803      	ldr	r3, [r0, #0]
    32da:	4a44      	ldr	r2, [pc, #272]	; (33ec <AudioOutputI2S::isr()+0x124>)
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    32dc:	42ab      	cmp	r3, r5
    32de:	77d1      	strb	r1, [r2, #31]
    32e0:	d20b      	bcs.n	32fa <AudioOutputI2S::isr()+0x32>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    32e2:	4b43      	ldr	r3, [pc, #268]	; (33f0 <AudioOutputI2S::isr()+0x128>)
    32e4:	781b      	ldrb	r3, [r3, #0]
    32e6:	2b00      	cmp	r3, #0
    32e8:	d04b      	beq.n	3382 <AudioOutputI2S::isr()+0xba>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    32ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    32ee:	2240      	movs	r2, #64	; 0x40
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    32f0:	462c      	mov	r4, r5
	uint32_t end_addr = (uint32_t)addr + size;
    32f2:	f505 7580 	add.w	r5, r5, #256	; 0x100
    32f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    32fa:	4b3e      	ldr	r3, [pc, #248]	; (33f4 <AudioOutputI2S::isr()+0x12c>)
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
    32fc:	f8df a104 	ldr.w	sl, [pc, #260]	; 3404 <AudioOutputI2S::isr()+0x13c>
	blockL = AudioOutputI2S::block_left_1st;
    3300:	f8d3 8000 	ldr.w	r8, [r3]
	offsetR = AudioOutputI2S::block_right_offset;
    3304:	f8df 9100 	ldr.w	r9, [pc, #256]	; 3408 <AudioOutputI2S::isr()+0x140>
	blockR = AudioOutputI2S::block_right_1st;
    3308:	4b3b      	ldr	r3, [pc, #236]	; (33f8 <AudioOutputI2S::isr()+0x130>)
	offsetL = AudioOutputI2S::block_left_offset;
    330a:	f8ba 6000 	ldrh.w	r6, [sl]
	blockR = AudioOutputI2S::block_right_1st;
    330e:	f8d3 b000 	ldr.w	fp, [r3]
	offsetR = AudioOutputI2S::block_right_offset;
    3312:	f8b9 7000 	ldrh.w	r7, [r9]

	if (blockL && blockR) {
    3316:	f1b8 0f00 	cmp.w	r8, #0
    331a:	d04f      	beq.n	33bc <AudioOutputI2S::isr()+0xf4>
    331c:	f1bb 0f00 	cmp.w	fp, #0
    3320:	d121      	bne.n	3366 <AudioOutputI2S::isr()+0x9e>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
    3322:	f1b8 0f00 	cmp.w	r8, #0
    3326:	d049      	beq.n	33bc <AudioOutputI2S::isr()+0xf4>
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    3328:	f108 0104 	add.w	r1, r8, #4
    332c:	4620      	mov	r0, r4
    332e:	eb01 0146 	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    3332:	3640      	adds	r6, #64	; 0x40
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    3334:	f7ff ff6b 	bl	320e <memcpy_tointerleaveL>
	asm("dsb");
    3338:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    333c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3340:	f8c2 4f70 	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
    3344:	3420      	adds	r4, #32
	} while (location < end_addr);
    3346:	42ac      	cmp	r4, r5
    3348:	d3fa      	bcc.n	3340 <AudioOutputI2S::isr()+0x78>
	asm("dsb");
    334a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    334e:	f3bf 8f6f 	isb	sy
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
	}

	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    3352:	2e7f      	cmp	r6, #127	; 0x7f
    3354:	d826      	bhi.n	33a4 <AudioOutputI2S::isr()+0xdc>
		AudioOutputI2S::block_left_offset = offsetL;
    3356:	f8aa 6000 	strh.w	r6, [sl]
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    335a:	2f7f      	cmp	r7, #127	; 0x7f
    335c:	d815      	bhi.n	338a <AudioOutputI2S::isr()+0xc2>
		AudioOutputI2S::block_right_offset = offsetR;
    335e:	f8a9 7000 	strh.w	r7, [r9]
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
    3362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    3366:	f10b 0204 	add.w	r2, fp, #4
    336a:	f108 0104 	add.w	r1, r8, #4
    336e:	4620      	mov	r0, r4
    3370:	eb02 0247 	add.w	r2, r2, r7, lsl #1
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    3374:	3740      	adds	r7, #64	; 0x40
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    3376:	eb01 0146 	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    337a:	3640      	adds	r6, #64	; 0x40
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    337c:	f7ff ff28 	bl	31d0 <memcpy_tointerleaveLR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    3380:	e7da      	b.n	3338 <AudioOutputI2S::isr()+0x70>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3382:	462c      	mov	r4, r5
	uint32_t end_addr = (uint32_t)addr + size;
    3384:	f505 7580 	add.w	r5, r5, #256	; 0x100
    3388:	e7b7      	b.n	32fa <AudioOutputI2S::isr()+0x32>
		AudioOutputI2S::block_right_offset = 0;
    338a:	2400      	movs	r4, #0
		AudioStream::release(blockR);
    338c:	4658      	mov	r0, fp
		AudioOutputI2S::block_right_offset = 0;
    338e:	f8a9 4000 	strh.w	r4, [r9]
		AudioStream::release(blockR);
    3392:	f009 fc25 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    3396:	4b19      	ldr	r3, [pc, #100]	; (33fc <AudioOutputI2S::isr()+0x134>)
    3398:	681a      	ldr	r2, [r3, #0]
		AudioOutputI2S::block_right_2nd = NULL;
    339a:	601c      	str	r4, [r3, #0]
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    339c:	4b16      	ldr	r3, [pc, #88]	; (33f8 <AudioOutputI2S::isr()+0x130>)
    339e:	601a      	str	r2, [r3, #0]
}
    33a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		AudioOutputI2S::block_left_offset = 0;
    33a4:	2400      	movs	r4, #0
		AudioStream::release(blockL);
    33a6:	4640      	mov	r0, r8
		AudioOutputI2S::block_left_offset = 0;
    33a8:	f8aa 4000 	strh.w	r4, [sl]
		AudioStream::release(blockL);
    33ac:	f009 fc18 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    33b0:	4a13      	ldr	r2, [pc, #76]	; (3400 <AudioOutputI2S::isr()+0x138>)
    33b2:	4b10      	ldr	r3, [pc, #64]	; (33f4 <AudioOutputI2S::isr()+0x12c>)
    33b4:	6811      	ldr	r1, [r2, #0]
		AudioOutputI2S::block_left_2nd = NULL;
    33b6:	6014      	str	r4, [r2, #0]
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    33b8:	6019      	str	r1, [r3, #0]
		AudioOutputI2S::block_left_2nd = NULL;
    33ba:	e7ce      	b.n	335a <AudioOutputI2S::isr()+0x92>
	} else if (blockR) {
    33bc:	f1bb 0f00 	cmp.w	fp, #0
    33c0:	d008      	beq.n	33d4 <AudioOutputI2S::isr()+0x10c>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    33c2:	f10b 0104 	add.w	r1, fp, #4
    33c6:	4620      	mov	r0, r4
    33c8:	eb01 0147 	add.w	r1, r1, r7, lsl #1
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    33cc:	3740      	adds	r7, #64	; 0x40
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    33ce:	f7ff ff3e 	bl	324e <memcpy_tointerleaveR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    33d2:	e7b1      	b.n	3338 <AudioOutputI2S::isr()+0x70>
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    33d4:	f44f 7280 	mov.w	r2, #256	; 0x100
    33d8:	4659      	mov	r1, fp
    33da:	4620      	mov	r0, r4
    33dc:	f00e fd06 	bl	11dec <memset>
    33e0:	e7aa      	b.n	3338 <AudioOutputI2S::isr()+0x70>
    33e2:	bf00      	nop
    33e4:	2000437c 	.word	0x2000437c
    33e8:	20204100 	.word	0x20204100
    33ec:	400e8000 	.word	0x400e8000
    33f0:	20004d4e 	.word	0x20004d4e
    33f4:	2000436c 	.word	0x2000436c
    33f8:	20004374 	.word	0x20004374
    33fc:	20004378 	.word	0x20004378
    3400:	20004370 	.word	0x20004370
    3404:	20004d3c 	.word	0x20004d3c
    3408:	20004d3e 	.word	0x20004d3e

0000340c <AudioOutputI2S::update()>:




void AudioOutputI2S::update(void)
{
    340c:	b538      	push	{r3, r4, r5, lr}
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    340e:	2100      	movs	r1, #0
{
    3410:	4604      	mov	r4, r0
	block = receiveReadOnly(0); // input 0 = left channel
    3412:	f009 fc31 	bl	cc78 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    3416:	b188      	cbz	r0, 343c <AudioOutputI2S::update()+0x30>
		__disable_irq();
    3418:	b672      	cpsid	i
		if (block_left_1st == NULL) {
    341a:	4a1c      	ldr	r2, [pc, #112]	; (348c <AudioOutputI2S::update()+0x80>)
    341c:	6813      	ldr	r3, [r2, #0]
    341e:	2b00      	cmp	r3, #0
    3420:	d02b      	beq.n	347a <AudioOutputI2S::update()+0x6e>
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
    3422:	491b      	ldr	r1, [pc, #108]	; (3490 <AudioOutputI2S::update()+0x84>)
    3424:	680d      	ldr	r5, [r1, #0]
    3426:	2d00      	cmp	r5, #0
    3428:	d02c      	beq.n	3484 <AudioOutputI2S::update()+0x78>
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
    342a:	6015      	str	r5, [r2, #0]
			block_left_2nd = block;
    342c:	6008      	str	r0, [r1, #0]
			block_left_offset = 0;
    342e:	2100      	movs	r1, #0
    3430:	4a18      	ldr	r2, [pc, #96]	; (3494 <AudioOutputI2S::update()+0x88>)
    3432:	8011      	strh	r1, [r2, #0]
			__enable_irq();
    3434:	b662      	cpsie	i
			release(tmp);
    3436:	4618      	mov	r0, r3
    3438:	f009 fbd2 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // input 1 = right channel
    343c:	2101      	movs	r1, #1
    343e:	4620      	mov	r0, r4
    3440:	f009 fc1a 	bl	cc78 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    3444:	b198      	cbz	r0, 346e <AudioOutputI2S::update()+0x62>
		__disable_irq();
    3446:	b672      	cpsid	i
		if (block_right_1st == NULL) {
    3448:	4a13      	ldr	r2, [pc, #76]	; (3498 <AudioOutputI2S::update()+0x8c>)
    344a:	6813      	ldr	r3, [r2, #0]
    344c:	b183      	cbz	r3, 3470 <AudioOutputI2S::update()+0x64>
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
    344e:	4913      	ldr	r1, [pc, #76]	; (349c <AudioOutputI2S::update()+0x90>)
    3450:	680c      	ldr	r4, [r1, #0]
    3452:	b154      	cbz	r4, 346a <AudioOutputI2S::update()+0x5e>
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
    3454:	6014      	str	r4, [r2, #0]
			block_right_2nd = block;
			block_right_offset = 0;
    3456:	2400      	movs	r4, #0
    3458:	4a11      	ldr	r2, [pc, #68]	; (34a0 <AudioOutputI2S::update()+0x94>)
			block_right_2nd = block;
    345a:	6008      	str	r0, [r1, #0]
			block_right_offset = 0;
    345c:	8014      	strh	r4, [r2, #0]
			__enable_irq();
    345e:	b662      	cpsie	i
			release(tmp);
    3460:	4618      	mov	r0, r3
		}
	}
}
    3462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			release(tmp);
    3466:	f009 bbbb 	b.w	cbe0 <AudioStream::release(audio_block_struct*)>
			block_right_2nd = block;
    346a:	6008      	str	r0, [r1, #0]
			__enable_irq();
    346c:	b662      	cpsie	i
}
    346e:	bd38      	pop	{r3, r4, r5, pc}
			block_right_offset = 0;
    3470:	490b      	ldr	r1, [pc, #44]	; (34a0 <AudioOutputI2S::update()+0x94>)
			block_right_1st = block;
    3472:	6010      	str	r0, [r2, #0]
			block_right_offset = 0;
    3474:	800b      	strh	r3, [r1, #0]
			__enable_irq();
    3476:	b662      	cpsie	i
}
    3478:	bd38      	pop	{r3, r4, r5, pc}
			block_left_offset = 0;
    347a:	4906      	ldr	r1, [pc, #24]	; (3494 <AudioOutputI2S::update()+0x88>)
			block_left_1st = block;
    347c:	6010      	str	r0, [r2, #0]
			block_left_offset = 0;
    347e:	800b      	strh	r3, [r1, #0]
			__enable_irq();
    3480:	b662      	cpsie	i
    3482:	e7db      	b.n	343c <AudioOutputI2S::update()+0x30>
			block_left_2nd = block;
    3484:	6008      	str	r0, [r1, #0]
			__enable_irq();
    3486:	b662      	cpsie	i
    3488:	e7d8      	b.n	343c <AudioOutputI2S::update()+0x30>
    348a:	bf00      	nop
    348c:	2000436c 	.word	0x2000436c
    3490:	20004370 	.word	0x20004370
    3494:	20004d3c 	.word	0x20004d3c
    3498:	20004374 	.word	0x20004374
    349c:	20004378 	.word	0x20004378
    34a0:	20004d3e 	.word	0x20004d3e

000034a4 <AudioOutputI2S::config_i2s(bool)>:
#endif
#endif


void AudioOutputI2S::config_i2s(bool only_bclk)
{
    34a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    34a6:	4c2d      	ldr	r4, [pc, #180]	; (355c <AudioOutputI2S::config_i2s(bool)+0xb8>)
{
    34a8:	4605      	mov	r5, r0

	// if either transmitter or receiver is enabled, do nothing
	if ((I2S1_TCSR & I2S_TCSR_TE) != 0 || (I2S1_RCSR & I2S_RCSR_RE) != 0)
    34aa:	4a2d      	ldr	r2, [pc, #180]	; (3560 <AudioOutputI2S::config_i2s(bool)+0xbc>)
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    34ac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    34ae:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    34b2:	67e3      	str	r3, [r4, #124]	; 0x7c
	if ((I2S1_TCSR & I2S_TCSR_TE) != 0 || (I2S1_RCSR & I2S_RCSR_RE) != 0)
    34b4:	6893      	ldr	r3, [r2, #8]
    34b6:	2b00      	cmp	r3, #0
    34b8:	db46      	blt.n	3548 <AudioOutputI2S::config_i2s(bool)+0xa4>
    34ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    34be:	2b00      	cmp	r3, #0
    34c0:	db42      	blt.n	3548 <AudioOutputI2S::config_i2s(bool)+0xa4>

	double C = ((double)fs * 256 * n1 * n2) / 24000000;
	int c0 = C;
	int c2 = 10000;
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);
    34c2:	2300      	movs	r3, #0
    34c4:	f242 7210 	movw	r2, #10000	; 0x2710
    34c8:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
    34cc:	201c      	movs	r0, #28
    34ce:	f014 ffef 	bl	184b0 <___Z14set_audioClockilmb_veneer>

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    34d2:	69e3      	ldr	r3, [r4, #28]
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    34d4:	4a23      	ldr	r2, [pc, #140]	; (3564 <AudioOutputI2S::config_i2s(bool)+0xc0>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    34d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    34da:	4923      	ldr	r1, [pc, #140]	; (3568 <AudioOutputI2S::config_i2s(bool)+0xc4>)
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    34dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    34e0:	61e3      	str	r3, [r4, #28]
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    34e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    34e4:	401a      	ands	r2, r3
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    34e6:	4b21      	ldr	r3, [pc, #132]	; (356c <AudioOutputI2S::config_i2s(bool)+0xc8>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    34e8:	f042 02ce 	orr.w	r2, r2, #206	; 0xce
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    34ec:	62a2      	str	r2, [r4, #40]	; 0x28
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    34ee:	684a      	ldr	r2, [r1, #4]
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    34f0:	4013      	ands	r3, r2
    34f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    34f6:	604b      	str	r3, [r1, #4]

	if (!only_bclk)
    34f8:	b92d      	cbnz	r5, 3506 <AudioOutputI2S::config_i2s(bool)+0x62>
	{
	  CORE_PIN23_CONFIG = 3;  //1:MCLK
    34fa:	4b1d      	ldr	r3, [pc, #116]	; (3570 <AudioOutputI2S::config_i2s(bool)+0xcc>)
    34fc:	2203      	movs	r2, #3
    34fe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	  CORE_PIN20_CONFIG = 3;  //1:RX_SYNC  (LRCLK)
    3502:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	}
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    3506:	4e1a      	ldr	r6, [pc, #104]	; (3570 <AudioOutputI2S::config_i2s(bool)+0xcc>)
    3508:	2703      	movs	r7, #3

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
    350a:	4b15      	ldr	r3, [pc, #84]	; (3560 <AudioOutputI2S::config_i2s(bool)+0xbc>)
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    350c:	2401      	movs	r4, #1
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    350e:	f8c6 7128 	str.w	r7, [r6, #296]	; 0x128
	I2S1_TMR = 0;
    3512:	2500      	movs	r5, #0
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
    3514:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
    3518:	4916      	ldr	r1, [pc, #88]	; (3574 <AudioOutputI2S::config_i2s(bool)+0xd0>)
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    351a:	4a17      	ldr	r2, [pc, #92]	; (3578 <AudioOutputI2S::config_i2s(bool)+0xd4>)
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
    351c:	4e17      	ldr	r6, [pc, #92]	; (357c <AudioOutputI2S::config_i2s(bool)+0xd8>)
	I2S1_TMR = 0;
    351e:	661d      	str	r5, [r3, #96]	; 0x60
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    3520:	60dc      	str	r4, [r3, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
    3522:	611e      	str	r6, [r3, #16]
	I2S1_TCR3 = I2S_TCR3_TCE;
    3524:	6158      	str	r0, [r3, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
    3526:	6199      	str	r1, [r3, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    3528:	61da      	str	r2, [r3, #28]

	I2S1_RMR = 0;
    352a:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
    352e:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
    3532:	f104 64e0 	add.w	r4, r4, #117440512	; 0x7000000
    3536:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
	I2S1_RCR3 = I2S_RCR3_RCE;
    353a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
    353e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
    3542:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

#endif
}
    3546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  if (!only_bclk) // if previous transmitter/receiver only activated BCLK, activate the other clock pins now
    3548:	2d00      	cmp	r5, #0
    354a:	d1fc      	bne.n	3546 <AudioOutputI2S::config_i2s(bool)+0xa2>
	    CORE_PIN23_CONFIG = 3;  //1:MCLK
    354c:	4b08      	ldr	r3, [pc, #32]	; (3570 <AudioOutputI2S::config_i2s(bool)+0xcc>)
    354e:	2203      	movs	r2, #3
    3550:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC (LRCLK)
    3554:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
    3558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    355a:	bf00      	nop
    355c:	400fc000 	.word	0x400fc000
    3560:	40384000 	.word	0x40384000
    3564:	fffffe00 	.word	0xfffffe00
    3568:	400ac000 	.word	0x400ac000
    356c:	fff7fff8 	.word	0xfff7fff8
    3570:	401f8000 	.word	0x401f8000
    3574:	00011f1b 	.word	0x00011f1b
    3578:	1f1f1f00 	.word	0x1f1f1f00
    357c:	47000001 	.word	0x47000001

00003580 <AudioOutputI2S::begin()>:
{
    3580:	b570      	push	{r4, r5, r6, lr}
	dma.begin(true); // Allocate the DMA channel first
    3582:	4d26      	ldr	r5, [pc, #152]	; (361c <AudioOutputI2S::begin()+0x9c>)
	block_left_1st = NULL;
    3584:	2400      	movs	r4, #0
	dma.begin(true); // Allocate the DMA channel first
    3586:	2101      	movs	r1, #1
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    3588:	4e25      	ldr	r6, [pc, #148]	; (3620 <AudioOutputI2S::begin()+0xa0>)
	dma.begin(true); // Allocate the DMA channel first
    358a:	4628      	mov	r0, r5
    358c:	f009 fc8a 	bl	cea4 <DMAChannel::begin(bool)>
	block_left_1st = NULL;
    3590:	4a24      	ldr	r2, [pc, #144]	; (3624 <AudioOutputI2S::begin()+0xa4>)
	block_right_1st = NULL;
    3592:	4b25      	ldr	r3, [pc, #148]	; (3628 <AudioOutputI2S::begin()+0xa8>)
	config_i2s();
    3594:	4620      	mov	r0, r4
	block_left_1st = NULL;
    3596:	6014      	str	r4, [r2, #0]
	block_right_1st = NULL;
    3598:	601c      	str	r4, [r3, #0]
	config_i2s();
    359a:	f7ff ff83 	bl	34a4 <AudioOutputI2S::config_i2s(bool)>
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    359e:	4b23      	ldr	r3, [pc, #140]	; (362c <AudioOutputI2S::begin()+0xac>)
    35a0:	2103      	movs	r1, #3
	dma.TCD->SADDR = i2s_tx_buffer;
    35a2:	4a23      	ldr	r2, [pc, #140]	; (3630 <AudioOutputI2S::begin()+0xb0>)
	dma.TCD->NBYTES_MLNO = 2;
    35a4:	2002      	movs	r0, #2
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    35a6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
	dma.TCD->SADDR = i2s_tx_buffer;
    35aa:	682b      	ldr	r3, [r5, #0]
	dma.TCD->SOFF = 2;
    35ac:	4921      	ldr	r1, [pc, #132]	; (3634 <AudioOutputI2S::begin()+0xb4>)
	dma.TCD->SADDR = i2s_tx_buffer;
    35ae:	601a      	str	r2, [r3, #0]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    35b0:	f44f 7280 	mov.w	r2, #256	; 0x100
	dma.TCD->DLASTSGA = 0;
    35b4:	619c      	str	r4, [r3, #24]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    35b6:	82da      	strh	r2, [r3, #22]
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    35b8:	83da      	strh	r2, [r3, #30]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    35ba:	2206      	movs	r2, #6
	dma.TCD->DOFF = 0;
    35bc:	829c      	strh	r4, [r3, #20]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    35be:	839a      	strh	r2, [r3, #28]
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    35c0:	4a1d      	ldr	r2, [pc, #116]	; (3638 <AudioOutputI2S::begin()+0xb8>)
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    35c2:	60de      	str	r6, [r3, #12]
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    35c4:	611a      	str	r2, [r3, #16]
	dma.TCD->SOFF = 2;
    35c6:	e9c3 1001 	strd	r1, r0, [r3, #4]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    35ca:	7929      	ldrb	r1, [r5, #4]
    35cc:	481b      	ldr	r0, [pc, #108]	; (363c <AudioOutputI2S::begin()+0xbc>)
    35ce:	fa0f fc81 	sxth.w	ip, r1
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    35d2:	4b1b      	ldr	r3, [pc, #108]	; (3640 <AudioOutputI2S::begin()+0xc0>)
		*mux = 0;
    35d4:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    35d8:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    35dc:	4b19      	ldr	r3, [pc, #100]	; (3644 <AudioOutputI2S::begin()+0xc4>)
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    35de:	481a      	ldr	r0, [pc, #104]	; (3648 <AudioOutputI2S::begin()+0xc8>)
    35e0:	76d9      	strb	r1, [r3, #27]
	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    35e2:	f8d2 3066 	ldr.w	r3, [r2, #102]	; 0x66
	update_responsibility = update_setup();
    35e6:	4c19      	ldr	r4, [pc, #100]	; (364c <AudioOutputI2S::begin()+0xcc>)
	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    35e8:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    35ec:	f8c2 3066 	str.w	r3, [r2, #102]	; 0x66
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    35f0:	f842 0c1a 	str.w	r0, [r2, #-26]
	update_responsibility = update_setup();
    35f4:	f009 fc34 	bl	ce60 <AudioStream::update_setup()>
    35f8:	792a      	ldrb	r2, [r5, #4]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    35fa:	4b15      	ldr	r3, [pc, #84]	; (3650 <AudioOutputI2S::begin()+0xd0>)
    35fc:	2101      	movs	r1, #1
    35fe:	7020      	strb	r0, [r4, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    3600:	f102 0010 	add.w	r0, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    3604:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    3608:	f002 021f 	and.w	r2, r2, #31
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    360c:	4c11      	ldr	r4, [pc, #68]	; (3654 <AudioOutputI2S::begin()+0xd4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    360e:	4091      	lsls	r1, r2
    3610:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    3612:	4a11      	ldr	r2, [pc, #68]	; (3658 <AudioOutputI2S::begin()+0xd8>)
    3614:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    3618:	6019      	str	r1, [r3, #0]
}
    361a:	bd70      	pop	{r4, r5, r6, pc}
    361c:	2000437c 	.word	0x2000437c
    3620:	fffffe00 	.word	0xfffffe00
    3624:	2000436c 	.word	0x2000436c
    3628:	20004374 	.word	0x20004374
    362c:	401f8000 	.word	0x401f8000
    3630:	20204100 	.word	0x20204100
    3634:	01010002 	.word	0x01010002
    3638:	40384022 	.word	0x40384022
    363c:	400ec000 	.word	0x400ec000
    3640:	80000014 	.word	0x80000014
    3644:	400e8000 	.word	0x400e8000
    3648:	90000001 	.word	0x90000001
    364c:	20004d4e 	.word	0x20004d4e
    3650:	38003840 	.word	0x38003840
    3654:	000032c9 	.word	0x000032c9
    3658:	20003800 	.word	0x20003800

0000365c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
DMAChannel AudioOutputI2S::dma(false);
    365c:	4a02      	ldr	r2, [pc, #8]	; (3668 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    365e:	4903      	ldr	r1, [pc, #12]	; (366c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    3660:	4803      	ldr	r0, [pc, #12]	; (3670 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    3662:	f00c baa5 	b.w	fbb0 <__aeabi_atexit>
    3666:	bf00      	nop
    3668:	20002f18 	.word	0x20002f18
    366c:	00002ba9 	.word	0x00002ba9
    3670:	2000437c 	.word	0x2000437c

00003674 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    3674:	4a02      	ldr	r2, [pc, #8]	; (3680 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    3676:	4903      	ldr	r1, [pc, #12]	; (3684 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    3678:	4803      	ldr	r0, [pc, #12]	; (3688 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    367a:	f00c ba99 	b.w	fbb0 <__aeabi_atexit>
    367e:	bf00      	nop
    3680:	20002f18 	.word	0x20002f18
    3684:	00002ba9 	.word	0x00002ba9
    3688:	200043b4 	.word	0x200043b4

0000368c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    368c:	4a02      	ldr	r2, [pc, #8]	; (3698 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    368e:	4903      	ldr	r1, [pc, #12]	; (369c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    3690:	4803      	ldr	r0, [pc, #12]	; (36a0 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    3692:	f00c ba8d 	b.w	fbb0 <__aeabi_atexit>
    3696:	bf00      	nop
    3698:	20002f18 	.word	0x20002f18
    369c:	00002ba9 	.word	0x00002ba9
    36a0:	200043f4 	.word	0x200043f4

000036a4 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
DMAChannel AudioOutputI2SOct::dma(false);
    36a4:	4a02      	ldr	r2, [pc, #8]	; (36b0 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    36a6:	4903      	ldr	r1, [pc, #12]	; (36b4 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    36a8:	4803      	ldr	r0, [pc, #12]	; (36b8 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    36aa:	f00c ba81 	b.w	fbb0 <__aeabi_atexit>
    36ae:	bf00      	nop
    36b0:	20002f18 	.word	0x20002f18
    36b4:	00002ba9 	.word	0x00002ba9
    36b8:	200043fc 	.word	0x200043fc

000036bc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    36bc:	4a02      	ldr	r2, [pc, #8]	; (36c8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    36be:	4903      	ldr	r1, [pc, #12]	; (36cc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    36c0:	4803      	ldr	r0, [pc, #12]	; (36d0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    36c2:	f00c ba75 	b.w	fbb0 <__aeabi_atexit>
    36c6:	bf00      	nop
    36c8:	20002f18 	.word	0x20002f18
    36cc:	00002ba9 	.word	0x00002ba9
    36d0:	2000441c 	.word	0x2000441c

000036d4 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    36d4:	4a02      	ldr	r2, [pc, #8]	; (36e0 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    36d6:	4903      	ldr	r1, [pc, #12]	; (36e4 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    36d8:	4803      	ldr	r0, [pc, #12]	; (36e8 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    36da:	f00c ba69 	b.w	fbb0 <__aeabi_atexit>
    36de:	bf00      	nop
    36e0:	20002f18 	.word	0x20002f18
    36e4:	00002ba9 	.word	0x00002ba9
    36e8:	20004384 	.word	0x20004384

000036ec <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    36ec:	4a02      	ldr	r2, [pc, #8]	; (36f8 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    36ee:	4903      	ldr	r1, [pc, #12]	; (36fc <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    36f0:	4803      	ldr	r0, [pc, #12]	; (3700 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    36f2:	f00c ba5d 	b.w	fbb0 <__aeabi_atexit>
    36f6:	bf00      	nop
    36f8:	20002f18 	.word	0x20002f18
    36fc:	00002ba9 	.word	0x00002ba9
    3700:	20004404 	.word	0x20004404

00003704 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
DMAChannel AudioOutputPT8211_2::dma(false);
    3704:	4a02      	ldr	r2, [pc, #8]	; (3710 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    3706:	4903      	ldr	r1, [pc, #12]	; (3714 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    3708:	4803      	ldr	r0, [pc, #12]	; (3718 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    370a:	f00c ba51 	b.w	fbb0 <__aeabi_atexit>
    370e:	bf00      	nop
    3710:	20002f18 	.word	0x20002f18
    3714:	00002ba9 	.word	0x00002ba9
    3718:	20004424 	.word	0x20004424

0000371c <__tcf_0>:

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    371c:	b510      	push	{r4, lr}
		release();
    371e:	4c05      	ldr	r4, [pc, #20]	; (3734 <__tcf_0+0x18>)
    3720:	f104 0008 	add.w	r0, r4, #8
    3724:	f009 fc18 	bl	cf58 <DMAChannel::release()>
    3728:	4620      	mov	r0, r4
    372a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    372e:	f009 bc13 	b.w	cf58 <DMAChannel::release()>
    3732:	bf00      	nop
    3734:	2000438c 	.word	0x2000438c

00003738 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
	old_block = (audio_block_t*)block ;  // block is defined as volatile
	block = new_block ;
	__enable_irq();
	if (old_block)
		release (old_block);
}
    3738:	b510      	push	{r4, lr}
		begin();
    373a:	4c08      	ldr	r4, [pc, #32]	; (375c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x24>)
    373c:	2100      	movs	r1, #0
    373e:	4620      	mov	r0, r4
    3740:	f009 fbb0 	bl	cea4 <DMAChannel::begin(bool)>
    3744:	f104 0008 	add.w	r0, r4, #8
    3748:	2100      	movs	r1, #0
    374a:	f009 fbab 	bl	cea4 <DMAChannel::begin(bool)>
DMAChannel AudioOutputPWM::dma[2];
    374e:	4a04      	ldr	r2, [pc, #16]	; (3760 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x28>)
    3750:	4904      	ldr	r1, [pc, #16]	; (3764 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x2c>)
    3752:	2000      	movs	r0, #0
}
    3754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
DMAChannel AudioOutputPWM::dma[2];
    3758:	f00c ba2a 	b.w	fbb0 <__aeabi_atexit>
    375c:	2000438c 	.word	0x2000438c
    3760:	20002f18 	.word	0x20002f18
    3764:	0000371d 	.word	0x0000371d

00003768 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
DMAChannel AudioOutputSPDIF::dma(false);
    3768:	4a02      	ldr	r2, [pc, #8]	; (3774 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    376a:	4903      	ldr	r1, [pc, #12]	; (3778 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    376c:	4803      	ldr	r0, [pc, #12]	; (377c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    376e:	f00c ba1f 	b.w	fbb0 <__aeabi_atexit>
    3772:	bf00      	nop
    3774:	20002f18 	.word	0x20002f18
    3778:	00002ba9 	.word	0x00002ba9
    377c:	200043e4 	.word	0x200043e4

00003780 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    3780:	4a02      	ldr	r2, [pc, #8]	; (378c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    3782:	4903      	ldr	r1, [pc, #12]	; (3790 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    3784:	4803      	ldr	r0, [pc, #12]	; (3794 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    3786:	f00c ba13 	b.w	fbb0 <__aeabi_atexit>
    378a:	bf00      	nop
    378c:	20002f18 	.word	0x20002f18
    3790:	00002ba9 	.word	0x00002ba9
    3794:	2000440c 	.word	0x2000440c

00003798 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    3798:	4a02      	ldr	r2, [pc, #8]	; (37a4 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    379a:	4903      	ldr	r1, [pc, #12]	; (37a8 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    379c:	4803      	ldr	r0, [pc, #12]	; (37ac <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    379e:	f00c ba07 	b.w	fbb0 <__aeabi_atexit>
    37a2:	bf00      	nop
    37a4:	20002f18 	.word	0x20002f18
    37a8:	00002ba9 	.word	0x00002ba9
    37ac:	20004414 	.word	0x20004414

000037b0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    37b0:	4a02      	ldr	r2, [pc, #8]	; (37bc <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    37b2:	4903      	ldr	r1, [pc, #12]	; (37c0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    37b4:	4803      	ldr	r0, [pc, #12]	; (37c4 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    37b6:	f00c b9fb 	b.w	fbb0 <__aeabi_atexit>
    37ba:	bf00      	nop
    37bc:	20002f18 	.word	0x20002f18
    37c0:	00002ba9 	.word	0x00002ba9
    37c4:	2000439c 	.word	0x2000439c

000037c8 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    37c8:	4a02      	ldr	r2, [pc, #8]	; (37d4 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    37ca:	4903      	ldr	r1, [pc, #12]	; (37d8 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    37cc:	4803      	ldr	r0, [pc, #12]	; (37dc <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    37ce:	f00c b9ef 	b.w	fbb0 <__aeabi_atexit>
    37d2:	bf00      	nop
    37d4:	20002f18 	.word	0x20002f18
    37d8:	00002ba9 	.word	0x00002ba9
    37dc:	200043bc 	.word	0x200043bc

000037e0 <AudioPlaySdWav::begin()>:
{
    37e0:	b538      	push	{r3, r4, r5, lr}
    37e2:	4604      	mov	r4, r0
	state = STATE_STOP;
    37e4:	230e      	movs	r3, #14
	if (block_left) {
    37e6:	6e00      	ldr	r0, [r0, #96]	; 0x60
	data_length = 0;
    37e8:	2500      	movs	r5, #0
	state = STATE_STOP;
    37ea:	f884 326f 	strb.w	r3, [r4, #623]	; 0x26f
	state_play = STATE_STOP;
    37ee:	f884 3270 	strb.w	r3, [r4, #624]	; 0x270
	data_length = 0;
    37f2:	6565      	str	r5, [r4, #84]	; 0x54
	if (block_left) {
    37f4:	b110      	cbz	r0, 37fc <AudioPlaySdWav::begin()+0x1c>
		release(block_left);
    37f6:	f009 f9f3 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
		block_left = NULL;
    37fa:	6625      	str	r5, [r4, #96]	; 0x60
	if (block_right) {
    37fc:	6e60      	ldr	r0, [r4, #100]	; 0x64
    37fe:	b118      	cbz	r0, 3808 <AudioPlaySdWav::begin()+0x28>
		release(block_right);
    3800:	f009 f9ee 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
		block_right = NULL;
    3804:	2300      	movs	r3, #0
    3806:	6663      	str	r3, [r4, #100]	; 0x64
}
    3808:	bd38      	pop	{r3, r4, r5, pc}
    380a:	bf00      	nop

0000380c <AudioPlaySdWav::stop()>:
	if (NVIC_IS_ENABLED(IRQ_SOFTWARE)) {
    380c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3810:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    3814:	f013 0340 	ands.w	r3, r3, #64	; 0x40
{
    3818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    381c:	4604      	mov	r4, r0
	if (NVIC_IS_ENABLED(IRQ_SOFTWARE)) {
    381e:	d008      	beq.n	3832 <AudioPlaySdWav::stop()+0x26>
		NVIC_DISABLE_IRQ(IRQ_SOFTWARE);
    3820:	2340      	movs	r3, #64	; 0x40
    3822:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
	if (state != STATE_STOP) {
    3826:	f890 326f 	ldrb.w	r3, [r0, #623]	; 0x26f
    382a:	2b0e      	cmp	r3, #14
    382c:	d06e      	beq.n	390c <AudioPlaySdWav::stop()+0x100>
		irq = true;
    382e:	2501      	movs	r5, #1
    3830:	e004      	b.n	383c <AudioPlaySdWav::stop()+0x30>
	if (state != STATE_STOP) {
    3832:	f890 226f 	ldrb.w	r2, [r0, #623]	; 0x26f
    3836:	2a0e      	cmp	r2, #14
    3838:	d06d      	beq.n	3916 <AudioPlaySdWav::stop()+0x10a>
	bool irq = false;
    383a:	461d      	mov	r5, r3
		block_left = NULL;
    383c:	2300      	movs	r3, #0
		audio_block_t *b2 = block_right;
    383e:	e9d4 0618 	ldrd	r0, r6, [r4, #96]	; 0x60
		block_right = NULL;
    3842:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
		state = STATE_STOP;
    3846:	230e      	movs	r3, #14
    3848:	f884 326f 	strb.w	r3, [r4, #623]	; 0x26f
		if (b1) release(b1);
    384c:	b108      	cbz	r0, 3852 <AudioPlaySdWav::stop()+0x46>
    384e:	f009 f9c7 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
		if (b2) release(b2);
    3852:	b116      	cbz	r6, 385a <AudioPlaySdWav::stop()+0x4e>
    3854:	4630      	mov	r0, r6
    3856:	f009 f9c3 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
		if (f) {
    385a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    385c:	2e00      	cmp	r6, #0
    385e:	d049      	beq.n	38f4 <AudioPlaySdWav::stop()+0xe8>
			f->close();
    3860:	6833      	ldr	r3, [r6, #0]
    3862:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 3958 <AudioPlaySdWav::stop()+0x14c>
    3866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3868:	4543      	cmp	r3, r8
    386a:	d15a      	bne.n	3922 <AudioPlaySdWav::stop()+0x116>
		if (filename) {
    386c:	6db0      	ldr	r0, [r6, #88]	; 0x58
    386e:	b118      	cbz	r0, 3878 <AudioPlaySdWav::stop()+0x6c>
			free(filename);
    3870:	f00c fb70 	bl	ff54 <free>
			filename = nullptr;
    3874:	2300      	movs	r3, #0
    3876:	65b3      	str	r3, [r6, #88]	; 0x58
    3878:	6d33      	ldr	r3, [r6, #80]	; 0x50
    387a:	2b00      	cmp	r3, #0
    387c:	d04d      	beq.n	391a <AudioPlaySdWav::stop()+0x10e>
			sdfatfile.close();
    387e:	f106 0018 	add.w	r0, r6, #24
    3882:	f005 ff27 	bl	96d4 <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    3886:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    3888:	687e      	ldr	r6, [r7, #4]
    388a:	3e01      	subs	r6, #1
    388c:	607e      	str	r6, [r7, #4]
    388e:	2e00      	cmp	r6, #0
    3890:	d12e      	bne.n	38f0 <AudioPlaySdWav::stop()+0xe4>
			f->close();
    3892:	683b      	ldr	r3, [r7, #0]
    3894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3896:	4543      	cmp	r3, r8
    3898:	d14a      	bne.n	3930 <AudioPlaySdWav::stop()+0x124>
		if (filename) {
    389a:	6db8      	ldr	r0, [r7, #88]	; 0x58
    389c:	b110      	cbz	r0, 38a4 <AudioPlaySdWav::stop()+0x98>
			free(filename);
    389e:	f00c fb59 	bl	ff54 <free>
			filename = nullptr;
    38a2:	65be      	str	r6, [r7, #88]	; 0x58
    38a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    38a6:	2b00      	cmp	r3, #0
    38a8:	d03e      	beq.n	3928 <AudioPlaySdWav::stop()+0x11c>
			sdfatfile.close();
    38aa:	f107 0018 	add.w	r0, r7, #24
    38ae:	f005 ff11 	bl	96d4 <FsBaseFile::close()>
			delete f;
    38b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    38b4:	b1e6      	cbz	r6, 38f0 <AudioPlaySdWav::stop()+0xe4>
    38b6:	6833      	ldr	r3, [r6, #0]
    38b8:	4a22      	ldr	r2, [pc, #136]	; (3944 <AudioPlaySdWav::stop()+0x138>)
    38ba:	685b      	ldr	r3, [r3, #4]
    38bc:	4293      	cmp	r3, r2
    38be:	d13e      	bne.n	393e <AudioPlaySdWav::stop()+0x132>
	virtual ~SDFile(void) {
    38c0:	4b21      	ldr	r3, [pc, #132]	; (3948 <AudioPlaySdWav::stop()+0x13c>)
		if (filename) {
    38c2:	6db0      	ldr	r0, [r6, #88]	; 0x58
	virtual ~SDFile(void) {
    38c4:	6033      	str	r3, [r6, #0]
		if (filename) {
    38c6:	b118      	cbz	r0, 38d0 <AudioPlaySdWav::stop()+0xc4>
			free(filename);
    38c8:	f00c fb44 	bl	ff54 <free>
			filename = nullptr;
    38cc:	2300      	movs	r3, #0
    38ce:	65b3      	str	r3, [r6, #88]	; 0x58
    38d0:	6d33      	ldr	r3, [r6, #80]	; 0x50
			sdfatfile.close();
    38d2:	f106 0718 	add.w	r7, r6, #24
    38d6:	b373      	cbz	r3, 3936 <AudioPlaySdWav::stop()+0x12a>
    38d8:	4638      	mov	r0, r7
    38da:	f005 fefb 	bl	96d4 <FsBaseFile::close()>
    38de:	4b1b      	ldr	r3, [pc, #108]	; (394c <AudioPlaySdWav::stop()+0x140>)
  ~FsBaseFile() {close();}
    38e0:	4638      	mov	r0, r7
    38e2:	60b3      	str	r3, [r6, #8]
    38e4:	f005 fef6 	bl	96d4 <FsBaseFile::close()>
	}
    38e8:	215c      	movs	r1, #92	; 0x5c
    38ea:	4630      	mov	r0, r6
    38ec:	f00a fdae 	bl	e44c <operator delete(void*, unsigned int)>
		}
		f = nullptr;
    38f0:	2300      	movs	r3, #0
    38f2:	62a3      	str	r3, [r4, #40]	; 0x28
	SPI.usingInterrupt(IRQ_SOFTWARE);
	AudioUsingSPICount++;
}

static inline void AudioStopUsingSPI(void) {
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    38f4:	4a16      	ldr	r2, [pc, #88]	; (3950 <AudioPlaySdWav::stop()+0x144>)
    38f6:	8813      	ldrh	r3, [r2, #0]
    38f8:	b11b      	cbz	r3, 3902 <AudioPlaySdWav::stop()+0xf6>
    38fa:	3b01      	subs	r3, #1
    38fc:	b29b      	uxth	r3, r3
    38fe:	8013      	strh	r3, [r2, #0]
    3900:	b91b      	cbnz	r3, 390a <AudioPlaySdWav::stop()+0xfe>
		SPI.notUsingInterrupt(IRQ_SOFTWARE);
    3902:	2146      	movs	r1, #70	; 0x46
    3904:	4813      	ldr	r0, [pc, #76]	; (3954 <AudioPlaySdWav::stop()+0x148>)
    3906:	f000 febf 	bl	4688 <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>
	if (irq) NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    390a:	b125      	cbz	r5, 3916 <AudioPlaySdWav::stop()+0x10a>
    390c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3910:	2240      	movs	r2, #64	; 0x40
    3912:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
    3916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    391a:	6d73      	ldr	r3, [r6, #84]	; 0x54
    391c:	2b00      	cmp	r3, #0
    391e:	d1ae      	bne.n	387e <AudioPlaySdWav::stop()+0x72>
    3920:	e7b1      	b.n	3886 <AudioPlaySdWav::stop()+0x7a>
			f->close();
    3922:	4630      	mov	r0, r6
    3924:	4798      	blx	r3
    3926:	e7ae      	b.n	3886 <AudioPlaySdWav::stop()+0x7a>
    3928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    392a:	2b00      	cmp	r3, #0
    392c:	d1bd      	bne.n	38aa <AudioPlaySdWav::stop()+0x9e>
    392e:	e7c0      	b.n	38b2 <AudioPlaySdWav::stop()+0xa6>
			f->close();
    3930:	4638      	mov	r0, r7
    3932:	4798      	blx	r3
    3934:	e7bd      	b.n	38b2 <AudioPlaySdWav::stop()+0xa6>
    3936:	6d73      	ldr	r3, [r6, #84]	; 0x54
    3938:	2b00      	cmp	r3, #0
    393a:	d1cd      	bne.n	38d8 <AudioPlaySdWav::stop()+0xcc>
    393c:	e7cf      	b.n	38de <AudioPlaySdWav::stop()+0xd2>
			delete f;
    393e:	4630      	mov	r0, r6
    3940:	4798      	blx	r3
    3942:	e7d5      	b.n	38f0 <AudioPlaySdWav::stop()+0xe4>
    3944:	00000765 	.word	0x00000765
    3948:	200014b0 	.word	0x200014b0
    394c:	20001310 	.word	0x20001310
    3950:	20004d30 	.word	0x20004d30
    3954:	20002a2c 	.word	0x20002a2c
    3958:	00000085 	.word	0x00000085

0000395c <AudioPlaySdWav::play(char const*)>:
{
    395c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3960:	b096      	sub	sp, #88	; 0x58
    3962:	4606      	mov	r6, r0
    3964:	460c      	mov	r4, r1
	stop();
    3966:	f7ff ff51 	bl	380c <AudioPlaySdWav::stop()>
	if (NVIC_IS_ENABLED(IRQ_SOFTWARE)) {
    396a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    396e:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
    3972:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    3976:	d003      	beq.n	3980 <AudioPlaySdWav::play(char const*)+0x24>
		NVIC_DISABLE_IRQ(IRQ_SOFTWARE);
    3978:	2240      	movs	r2, #64	; 0x40
		irq = true;
    397a:	2501      	movs	r5, #1
		NVIC_DISABLE_IRQ(IRQ_SOFTWARE);
    397c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	AudioUsingSPICount++;
    3980:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 3b64 <AudioPlaySdWav::play(char const*)+0x208>
	SPI.usingInterrupt(IRQ_SOFTWARE);
    3984:	2146      	movs	r1, #70	; 0x46
    3986:	486f      	ldr	r0, [pc, #444]	; (3b44 <AudioPlaySdWav::play(char const*)+0x1e8>)
    3988:	f000 fe6a 	bl	4660 <SPIClass::usingInterrupt(IRQ_NUMBER_t)>
	AudioUsingSPICount++;
    398c:	f8b8 3000 	ldrh.w	r3, [r8]
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3990:	4622      	mov	r2, r4
    3992:	496d      	ldr	r1, [pc, #436]	; (3b48 <AudioPlaySdWav::play(char const*)+0x1ec>)
    3994:	3301      	adds	r3, #1
    3996:	a802      	add	r0, sp, #8
    3998:	f8a8 3000 	strh.w	r3, [r8]
    399c:	2300      	movs	r3, #0
    399e:	f005 ffb3 	bl	9908 <FsVolume::open(char const*, int)>
    39a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    39a4:	2b00      	cmp	r3, #0
    39a6:	f000 80a9 	beq.w	3afc <AudioPlaySdWav::play(char const*)+0x1a0>
		if (file) return File(new SDFile(file));
    39aa:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    39ac:	2700      	movs	r7, #0
    39ae:	f00a fd4b 	bl	e448 <operator new(unsigned int)>
class Print
    39b2:	9b03      	ldr	r3, [sp, #12]
    39b4:	4604      	mov	r4, r0
    39b6:	6047      	str	r7, [r0, #4]
    39b8:	60c3      	str	r3, [r0, #12]
    39ba:	a906      	add	r1, sp, #24
class Stream : public Print
    39bc:	9b04      	ldr	r3, [sp, #16]
    39be:	3018      	adds	r0, #24
    39c0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 3b68 <AudioPlaySdWav::play(char const*)+0x20c>
    39c4:	f840 3c08 	str.w	r3, [r0, #-8]
    39c8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    39cc:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    39d0:	4b5e      	ldr	r3, [pc, #376]	; (3b4c <AudioPlaySdWav::play(char const*)+0x1f0>)
    39d2:	f840 3c18 	str.w	r3, [r0, #-24]
    39d6:	4b5e      	ldr	r3, [pc, #376]	; (3b50 <AudioPlaySdWav::play(char const*)+0x1f4>)
    39d8:	f840 3c10 	str.w	r3, [r0, #-16]
    39dc:	f005 fe38 	bl	9650 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		if (f) f->refcount++;
    39e0:	6863      	ldr	r3, [r4, #4]
    39e2:	65a7      	str	r7, [r4, #88]	; 0x58
  ~FsBaseFile() {close();}
    39e4:	a806      	add	r0, sp, #24
    39e6:	3301      	adds	r3, #1
    39e8:	f8cd 9008 	str.w	r9, [sp, #8]
    39ec:	6063      	str	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    39ee:	4b59      	ldr	r3, [pc, #356]	; (3b54 <AudioPlaySdWav::play(char const*)+0x1f8>)
    39f0:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
    39f2:	f005 fe6f 	bl	96d4 <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    39f6:	6ab7      	ldr	r7, [r6, #40]	; 0x28
    39f8:	2f00      	cmp	r7, #0
    39fa:	d054      	beq.n	3aa6 <AudioPlaySdWav::play(char const*)+0x14a>
		if (--(f->refcount) == 0) {
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	3b01      	subs	r3, #1
    3a00:	607b      	str	r3, [r7, #4]
    3a02:	9301      	str	r3, [sp, #4]
    3a04:	2b00      	cmp	r3, #0
    3a06:	d132      	bne.n	3a6e <AudioPlaySdWav::play(char const*)+0x112>
			f->close();
    3a08:	683a      	ldr	r2, [r7, #0]
    3a0a:	4953      	ldr	r1, [pc, #332]	; (3b58 <AudioPlaySdWav::play(char const*)+0x1fc>)
    3a0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    3a0e:	428a      	cmp	r2, r1
    3a10:	f040 808d 	bne.w	3b2e <AudioPlaySdWav::play(char const*)+0x1d2>
		if (filename) {
    3a14:	6db8      	ldr	r0, [r7, #88]	; 0x58
    3a16:	b118      	cbz	r0, 3a20 <AudioPlaySdWav::play(char const*)+0xc4>
			free(filename);
    3a18:	f00c fa9c 	bl	ff54 <free>
			filename = nullptr;
    3a1c:	9b01      	ldr	r3, [sp, #4]
    3a1e:	65bb      	str	r3, [r7, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    3a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3a22:	2b00      	cmp	r3, #0
    3a24:	d07e      	beq.n	3b24 <AudioPlaySdWav::play(char const*)+0x1c8>
			sdfatfile.close();
    3a26:	f107 0018 	add.w	r0, r7, #24
    3a2a:	f005 fe53 	bl	96d4 <FsBaseFile::close()>
			delete f;
    3a2e:	6ab7      	ldr	r7, [r6, #40]	; 0x28
    3a30:	b1ef      	cbz	r7, 3a6e <AudioPlaySdWav::play(char const*)+0x112>
    3a32:	683b      	ldr	r3, [r7, #0]
    3a34:	4a49      	ldr	r2, [pc, #292]	; (3b5c <AudioPlaySdWav::play(char const*)+0x200>)
    3a36:	685b      	ldr	r3, [r3, #4]
    3a38:	4293      	cmp	r3, r2
    3a3a:	d17f      	bne.n	3b3c <AudioPlaySdWav::play(char const*)+0x1e0>
	virtual ~SDFile(void) {
    3a3c:	4b43      	ldr	r3, [pc, #268]	; (3b4c <AudioPlaySdWav::play(char const*)+0x1f0>)
		if (filename) {
    3a3e:	6db8      	ldr	r0, [r7, #88]	; 0x58
	virtual ~SDFile(void) {
    3a40:	603b      	str	r3, [r7, #0]
		if (filename) {
    3a42:	b118      	cbz	r0, 3a4c <AudioPlaySdWav::play(char const*)+0xf0>
			free(filename);
    3a44:	f00c fa86 	bl	ff54 <free>
			filename = nullptr;
    3a48:	2300      	movs	r3, #0
    3a4a:	65bb      	str	r3, [r7, #88]	; 0x58
    3a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
			sdfatfile.close();
    3a4e:	f107 0a18 	add.w	sl, r7, #24
    3a52:	2b00      	cmp	r3, #0
    3a54:	d06e      	beq.n	3b34 <AudioPlaySdWav::play(char const*)+0x1d8>
    3a56:	4650      	mov	r0, sl
    3a58:	f005 fe3c 	bl	96d4 <FsBaseFile::close()>
  ~FsBaseFile() {close();}
    3a5c:	4650      	mov	r0, sl
    3a5e:	f8c7 9008 	str.w	r9, [r7, #8]
    3a62:	f005 fe37 	bl	96d4 <FsBaseFile::close()>
	}
    3a66:	4638      	mov	r0, r7
    3a68:	215c      	movs	r1, #92	; 0x5c
    3a6a:	f00a fcef 	bl	e44c <operator delete(void*, unsigned int)>
		f = file.f;
    3a6e:	62b4      	str	r4, [r6, #40]	; 0x28
		return (f) ? f->isOpen() : false;
    3a70:	b31c      	cbz	r4, 3aba <AudioPlaySdWav::play(char const*)+0x15e>
    3a72:	6823      	ldr	r3, [r4, #0]
    3a74:	4a3a      	ldr	r2, [pc, #232]	; (3b60 <AudioPlaySdWav::play(char const*)+0x204>)
    3a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3a78:	4293      	cmp	r3, r2
    3a7a:	d11a      	bne.n	3ab2 <AudioPlaySdWav::play(char const*)+0x156>
  bool isOpen() const {return m_fFile || m_xFile;}
    3a7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d04c      	beq.n	3b1c <AudioPlaySdWav::play(char const*)+0x1c0>
	buffer_offset = 0;
    3a82:	2300      	movs	r3, #0
	data_length = 20;
    3a84:	2114      	movs	r1, #20
	buffer_length = 0;
    3a86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	buffer_offset = 0;
    3a8a:	f8a6 326a 	strh.w	r3, [r6, #618]	; 0x26a
	state_play = STATE_STOP;
    3a8e:	230e      	movs	r3, #14
	data_length = 20;
    3a90:	6571      	str	r1, [r6, #84]	; 0x54
	buffer_length = 0;
    3a92:	f8c6 226c 	str.w	r2, [r6, #620]	; 0x26c
	state_play = STATE_STOP;
    3a96:	f886 3270 	strb.w	r3, [r6, #624]	; 0x270
	if (irq) NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    3a9a:	bb35      	cbnz	r5, 3aea <AudioPlaySdWav::play(char const*)+0x18e>
	return true;
    3a9c:	2501      	movs	r5, #1
}
    3a9e:	4628      	mov	r0, r5
    3aa0:	b016      	add	sp, #88	; 0x58
    3aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3aa6:	6823      	ldr	r3, [r4, #0]
    3aa8:	4a2d      	ldr	r2, [pc, #180]	; (3b60 <AudioPlaySdWav::play(char const*)+0x204>)
    3aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		f = file.f;
    3aac:	62b4      	str	r4, [r6, #40]	; 0x28
		return (f) ? f->isOpen() : false;
    3aae:	4293      	cmp	r3, r2
    3ab0:	d0e4      	beq.n	3a7c <AudioPlaySdWav::play(char const*)+0x120>
    3ab2:	4620      	mov	r0, r4
    3ab4:	4798      	blx	r3
    3ab6:	2800      	cmp	r0, #0
    3ab8:	d1e3      	bne.n	3a82 <AudioPlaySdWav::play(char const*)+0x126>
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    3aba:	f8b8 3000 	ldrh.w	r3, [r8]
    3abe:	b123      	cbz	r3, 3aca <AudioPlaySdWav::play(char const*)+0x16e>
    3ac0:	3b01      	subs	r3, #1
    3ac2:	b29b      	uxth	r3, r3
    3ac4:	f8a8 3000 	strh.w	r3, [r8]
    3ac8:	b91b      	cbnz	r3, 3ad2 <AudioPlaySdWav::play(char const*)+0x176>
		SPI.notUsingInterrupt(IRQ_SOFTWARE);
    3aca:	2146      	movs	r1, #70	; 0x46
    3acc:	481d      	ldr	r0, [pc, #116]	; (3b44 <AudioPlaySdWav::play(char const*)+0x1e8>)
    3ace:	f000 fddb 	bl	4688 <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>
		if (irq) NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    3ad2:	2d00      	cmp	r5, #0
    3ad4:	d0e3      	beq.n	3a9e <AudioPlaySdWav::play(char const*)+0x142>
		return false;
    3ad6:	2500      	movs	r5, #0
		if (irq) NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    3ad8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3adc:	2240      	movs	r2, #64	; 0x40
}
    3ade:	4628      	mov	r0, r5
		if (irq) NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    3ae0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
    3ae4:	b016      	add	sp, #88	; 0x58
    3ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (irq) NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    3aea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3aee:	2240      	movs	r2, #64	; 0x40
}
    3af0:	4628      	mov	r0, r5
	if (irq) NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    3af2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
    3af6:	b016      	add	sp, #88	; 0x58
    3af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3afc:	9c15      	ldr	r4, [sp, #84]	; 0x54
    3afe:	2c00      	cmp	r4, #0
    3b00:	f47f af53 	bne.w	39aa <AudioPlaySdWav::play(char const*)+0x4e>
    3b04:	f8df 9060 	ldr.w	r9, [pc, #96]	; 3b68 <AudioPlaySdWav::play(char const*)+0x20c>
  ~FsBaseFile() {close();}
    3b08:	a806      	add	r0, sp, #24
    3b0a:	f8cd 9008 	str.w	r9, [sp, #8]
    3b0e:	f005 fde1 	bl	96d4 <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    3b12:	6ab7      	ldr	r7, [r6, #40]	; 0x28
    3b14:	2f00      	cmp	r7, #0
    3b16:	f47f af71 	bne.w	39fc <AudioPlaySdWav::play(char const*)+0xa0>
    3b1a:	e7ce      	b.n	3aba <AudioPlaySdWav::play(char const*)+0x15e>
  bool isOpen() const {return m_fFile || m_xFile;}
    3b1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3b1e:	2b00      	cmp	r3, #0
    3b20:	d1af      	bne.n	3a82 <AudioPlaySdWav::play(char const*)+0x126>
    3b22:	e7ca      	b.n	3aba <AudioPlaySdWav::play(char const*)+0x15e>
    3b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b26:	2b00      	cmp	r3, #0
    3b28:	f47f af7d 	bne.w	3a26 <AudioPlaySdWav::play(char const*)+0xca>
    3b2c:	e77f      	b.n	3a2e <AudioPlaySdWav::play(char const*)+0xd2>
			f->close();
    3b2e:	4638      	mov	r0, r7
    3b30:	4790      	blx	r2
    3b32:	e77c      	b.n	3a2e <AudioPlaySdWav::play(char const*)+0xd2>
    3b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b36:	2b00      	cmp	r3, #0
    3b38:	d18d      	bne.n	3a56 <AudioPlaySdWav::play(char const*)+0xfa>
    3b3a:	e78f      	b.n	3a5c <AudioPlaySdWav::play(char const*)+0x100>
			delete f;
    3b3c:	4638      	mov	r0, r7
    3b3e:	4798      	blx	r3
    3b40:	e795      	b.n	3a6e <AudioPlaySdWav::play(char const*)+0x112>
    3b42:	bf00      	nop
    3b44:	20002a2c 	.word	0x20002a2c
    3b48:	20003d30 	.word	0x20003d30
    3b4c:	200014b0 	.word	0x200014b0
    3b50:	2000150c 	.word	0x2000150c
    3b54:	2000148c 	.word	0x2000148c
    3b58:	00000085 	.word	0x00000085
    3b5c:	00000765 	.word	0x00000765
    3b60:	00000071 	.word	0x00000071
    3b64:	20004d30 	.word	0x20004d30
    3b68:	20001310 	.word	0x20001310

00003b6c <AudioPlaySdWav::parse_format()>:
	uint16_t format;
	uint16_t channels;
	uint32_t rate, b2m;
	uint16_t bits;

	format = header[0];
    3b6c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	//Serial.print("  format = ");
	//Serial.println(format);
	if (format != 1) return false;
    3b6e:	b291      	uxth	r1, r2
    3b70:	2901      	cmp	r1, #1
    3b72:	d112      	bne.n	3b9a <AudioPlaySdWav::parse_format()+0x2e>

	rate = header[1];
    3b74:	6b01      	ldr	r1, [r0, #48]	; 0x30
    3b76:	4603      	mov	r3, r0
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
    3b78:	f64a 4044 	movw	r0, #44100	; 0xac44
    3b7c:	4281      	cmp	r1, r0
{
    3b7e:	b410      	push	{r4}
	if (rate == 44100) {
    3b80:	d00d      	beq.n	3b9e <AudioPlaySdWav::parse_format()+0x32>
		b2m = B2M_44100;
	} else if (rate == 22050) {
    3b82:	f245 6022 	movw	r0, #22050	; 0x5622
    3b86:	4281      	cmp	r1, r0
    3b88:	d025      	beq.n	3bd6 <AudioPlaySdWav::parse_format()+0x6a>
		b2m = B2M_22050;
		num |= 4;
	} else if (rate == 11025) {
    3b8a:	f642 3011 	movw	r0, #11025	; 0x2b11
    3b8e:	4281      	cmp	r1, r0
    3b90:	d01e      	beq.n	3bd0 <AudioPlaySdWav::parse_format()+0x64>
	if (format != 1) return false;
    3b92:	2000      	movs	r0, #0
	// if they're not the expected values, all we could do is
	// return false.  Do any real wav files have unexpected
	// values in these other fields?
	state_play = num;
	return true;
}
    3b94:	f85d 4b04 	ldr.w	r4, [sp], #4
    3b98:	4770      	bx	lr
	if (format != 1) return false;
    3b9a:	2000      	movs	r0, #0
}
    3b9c:	4770      	bx	lr
		b2m = B2M_44100;
    3b9e:	4c0f      	ldr	r4, [pc, #60]	; (3bdc <AudioPlaySdWav::parse_format()+0x70>)
	uint8_t num = 0;
    3ba0:	2100      	movs	r1, #0
	channels = header[0] >> 16;
    3ba2:	0c12      	lsrs	r2, r2, #16
	if (channels == 1) {
    3ba4:	2a01      	cmp	r2, #1
    3ba6:	d004      	beq.n	3bb2 <AudioPlaySdWav::parse_format()+0x46>
	} else if (channels == 2) {
    3ba8:	2a02      	cmp	r2, #2
    3baa:	d1f2      	bne.n	3b92 <AudioPlaySdWav::parse_format()+0x26>
		b2m >>= 1;
    3bac:	0864      	lsrs	r4, r4, #1
		num |= 1;
    3bae:	f041 0101 	orr.w	r1, r1, #1
	bits = header[3] >> 16;
    3bb2:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
	if (bits == 8) {
    3bb4:	2a08      	cmp	r2, #8
    3bb6:	d004      	beq.n	3bc2 <AudioPlaySdWav::parse_format()+0x56>
	} else if (bits == 16) {
    3bb8:	2a10      	cmp	r2, #16
    3bba:	d1ea      	bne.n	3b92 <AudioPlaySdWav::parse_format()+0x26>
		b2m >>= 1;
    3bbc:	0864      	lsrs	r4, r4, #1
		num |= 2;
    3bbe:	f041 0102 	orr.w	r1, r1, #2
	state_play = num;
    3bc2:	f883 1270 	strb.w	r1, [r3, #624]	; 0x270
	return true;
    3bc6:	2001      	movs	r0, #1
	bytes2millis = b2m;
    3bc8:	65dc      	str	r4, [r3, #92]	; 0x5c
}
    3bca:	f85d 4b04 	ldr.w	r4, [sp], #4
    3bce:	4770      	bx	lr
		b2m = B2M_11025;
    3bd0:	4c03      	ldr	r4, [pc, #12]	; (3be0 <AudioPlaySdWav::parse_format()+0x74>)
		num |= 4;
    3bd2:	2104      	movs	r1, #4
    3bd4:	e7e5      	b.n	3ba2 <AudioPlaySdWav::parse_format()+0x36>
		b2m = B2M_22050;
    3bd6:	4c03      	ldr	r4, [pc, #12]	; (3be4 <AudioPlaySdWav::parse_format()+0x78>)
		num |= 4;
    3bd8:	2104      	movs	r1, #4
    3bda:	e7e2      	b.n	3ba2 <AudioPlaySdWav::parse_format()+0x36>
    3bdc:	05ce13bc 	.word	0x05ce13bc
    3be0:	17384ef2 	.word	0x17384ef2
    3be4:	0b9c2779 	.word	0x0b9c2779

00003be8 <AudioPlaySdWav::consume(unsigned long)>:
{
    3be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	p = buffer + buffer_offset;
    3bec:	f8b0 326a 	ldrh.w	r3, [r0, #618]	; 0x26a
    3bf0:	f100 066a 	add.w	r6, r0, #106	; 0x6a
{
    3bf4:	b083      	sub	sp, #12
	p = buffer + buffer_offset;
    3bf6:	eb06 0b03 	add.w	fp, r6, r3
	if (size == 0) return false;
    3bfa:	b309      	cbz	r1, 3c40 <AudioPlaySdWav::consume(unsigned long)+0x58>
    3bfc:	4604      	mov	r4, r0
    3bfe:	460d      	mov	r5, r1
		data_length = 8;
    3c00:	2708      	movs	r7, #8
		header_offset = 0;
    3c02:	f44f 6820 	mov.w	r8, #2560	; 0xa00
		if (header[0] == 0x61746164) {
    3c06:	f8df a364 	ldr.w	sl, [pc, #868]	; 3f6c <AudioPlaySdWav::consume(unsigned long)+0x384>
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
    3c0a:	f8df 9364 	ldr.w	r9, [pc, #868]	; 3f70 <AudioPlaySdWav::consume(unsigned long)+0x388>
	switch (state) {
    3c0e:	f894 326f 	ldrb.w	r3, [r4, #623]	; 0x26f
    3c12:	2b0e      	cmp	r3, #14
    3c14:	f200 812d 	bhi.w	3e72 <AudioPlaySdWav::consume(unsigned long)+0x28a>
    3c18:	e8df f013 	tbh	[pc, r3, lsl #1]
    3c1c:	00120012 	.word	0x00120012
    3c20:	00d800f1 	.word	0x00d800f1
    3c24:	00120012 	.word	0x00120012
    3c28:	00120012 	.word	0x00120012
    3c2c:	007300a0 	.word	0x007300a0
    3c30:	002b003c 	.word	0x002b003c
    3c34:	012b0016 	.word	0x012b0016
    3c38:	0012      	.short	0x0012
				if (data_length == 0) break;
    3c3a:	2b00      	cmp	r3, #0
    3c3c:	f000 80d8 	beq.w	3df0 <AudioPlaySdWav::consume(unsigned long)+0x208>
	switch (state) {
    3c40:	2000      	movs	r0, #0
}
    3c42:	b003      	add	sp, #12
    3c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = data_length;
    3c48:	6d62      	ldr	r2, [r4, #84]	; 0x54
		if (size < len) len = size;
    3c4a:	462b      	mov	r3, r5
		buffer_offset += len;
    3c4c:	f8b4 126a 	ldrh.w	r1, [r4, #618]	; 0x26a
    3c50:	4295      	cmp	r5, r2
    3c52:	bf28      	it	cs
    3c54:	4613      	movcs	r3, r2
    3c56:	4419      	add	r1, r3
		if (data_length > 0) return false;
    3c58:	1ad2      	subs	r2, r2, r3
		buffer_offset += len;
    3c5a:	f8a4 126a 	strh.w	r1, [r4, #618]	; 0x26a
		if (data_length > 0) return false;
    3c5e:	f040 8177 	bne.w	3f50 <AudioPlaySdWav::consume(unsigned long)+0x368>
		size -= len;
    3c62:	1aed      	subs	r5, r5, r3
		p += len;
    3c64:	449b      	add	fp, r3
		data_length = 8;
    3c66:	6567      	str	r7, [r4, #84]	; 0x54
		state = STATE_PARSE1;
    3c68:	f884 726f 	strb.w	r7, [r4, #623]	; 0x26f
	if (size == 0) return false;
    3c6c:	2d00      	cmp	r5, #0
    3c6e:	d1ce      	bne.n	3c0e <AudioPlaySdWav::consume(unsigned long)+0x26>
    3c70:	e7e6      	b.n	3c40 <AudioPlaySdWav::consume(unsigned long)+0x58>
		if (size < data_length) {
    3c72:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3c74:	42aa      	cmp	r2, r5
    3c76:	f200 816d 	bhi.w	3f54 <AudioPlaySdWav::consume(unsigned long)+0x36c>
		buffer_offset += data_length;
    3c7a:	f8b4 326a 	ldrh.w	r3, [r4, #618]	; 0x26a
		p += data_length;
    3c7e:	4493      	add	fp, r2
		size -= data_length;
    3c80:	1aad      	subs	r5, r5, r2
		data_length = 8;
    3c82:	6567      	str	r7, [r4, #84]	; 0x54
		buffer_offset += data_length;
    3c84:	441a      	add	r2, r3
		header_offset = 0;
    3c86:	f8a4 826e 	strh.w	r8, [r4, #622]	; 0x26e
		buffer_offset += data_length;
    3c8a:	f8a4 226a 	strh.w	r2, [r4, #618]	; 0x26a
	if (size == 0) return false;
    3c8e:	2d00      	cmp	r5, #0
    3c90:	d1bd      	bne.n	3c0e <AudioPlaySdWav::consume(unsigned long)+0x26>
    3c92:	e7d5      	b.n	3c40 <AudioPlaySdWav::consume(unsigned long)+0x58>
		if (size < len) len = size;
    3c94:	6d62      	ldr	r2, [r4, #84]	; 0x54
		memcpy((uint8_t *)header + header_offset, p, len);
    3c96:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    3c9a:	f894 326e 	ldrb.w	r3, [r4, #622]	; 0x26e
    3c9e:	4659      	mov	r1, fp
    3ca0:	42aa      	cmp	r2, r5
    3ca2:	4418      	add	r0, r3
    3ca4:	bf28      	it	cs
    3ca6:	462a      	movcs	r2, r5
    3ca8:	9201      	str	r2, [sp, #4]
    3caa:	f00a fb33 	bl	e314 <memcpy>
		header_offset += len;
    3cae:	9a01      	ldr	r2, [sp, #4]
    3cb0:	f894 326e 	ldrb.w	r3, [r4, #622]	; 0x26e
    3cb4:	4413      	add	r3, r2
    3cb6:	f884 326e 	strb.w	r3, [r4, #622]	; 0x26e
		buffer_offset += len;
    3cba:	f8b4 326a 	ldrh.w	r3, [r4, #618]	; 0x26a
    3cbe:	4413      	add	r3, r2
    3cc0:	f8a4 326a 	strh.w	r3, [r4, #618]	; 0x26a
		data_length -= len;
    3cc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3cc6:	1a9b      	subs	r3, r3, r2
    3cc8:	6563      	str	r3, [r4, #84]	; 0x54
		if (data_length > 0) return false;
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d1b8      	bne.n	3c40 <AudioPlaySdWav::consume(unsigned long)+0x58>
		if (header[0] == 0x61746164) {
    3cce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		p += len;
    3cd0:	4493      	add	fp, r2
		size -= len;
    3cd2:	1aad      	subs	r5, r5, r2
		data_length = header[1];
    3cd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
		if (header[0] == 0x61746164) {
    3cd6:	4551      	cmp	r1, sl
		data_length = header[1];
    3cd8:	6562      	str	r2, [r4, #84]	; 0x54
		if (header[0] == 0x61746164) {
    3cda:	f040 80d3 	bne.w	3e84 <AudioPlaySdWav::consume(unsigned long)+0x29c>
			leftover_bytes = 0;
    3cde:	f884 3271 	strb.w	r3, [r4, #625]	; 0x271
			state = state_play;
    3ce2:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
    3ce6:	f884 326f 	strb.w	r3, [r4, #623]	; 0x26f
			if (state & 1) {
    3cea:	07db      	lsls	r3, r3, #31
    3cec:	d505      	bpl.n	3cfa <AudioPlaySdWav::consume(unsigned long)+0x112>
				block_right = allocate();
    3cee:	f008 ff21 	bl	cb34 <AudioStream::allocate()>
    3cf2:	6660      	str	r0, [r4, #100]	; 0x64
				if (!block_right) return false;
    3cf4:	2800      	cmp	r0, #0
    3cf6:	d0a3      	beq.n	3c40 <AudioPlaySdWav::consume(unsigned long)+0x58>
			total_length = data_length;
    3cf8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3cfa:	65a2      	str	r2, [r4, #88]	; 0x58
	if (size == 0) return false;
    3cfc:	2d00      	cmp	r5, #0
    3cfe:	d186      	bne.n	3c0e <AudioPlaySdWav::consume(unsigned long)+0x26>
    3d00:	e79e      	b.n	3c40 <AudioPlaySdWav::consume(unsigned long)+0x58>
		if (size < len) len = size;
    3d02:	6d62      	ldr	r2, [r4, #84]	; 0x54
		memcpy((uint8_t *)header + header_offset, p, len);
    3d04:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    3d08:	f894 326e 	ldrb.w	r3, [r4, #622]	; 0x26e
    3d0c:	4659      	mov	r1, fp
    3d0e:	42aa      	cmp	r2, r5
    3d10:	4418      	add	r0, r3
    3d12:	bf28      	it	cs
    3d14:	462a      	movcs	r2, r5
    3d16:	9201      	str	r2, [sp, #4]
    3d18:	f00a fafc 	bl	e314 <memcpy>
		header_offset += len;
    3d1c:	9a01      	ldr	r2, [sp, #4]
    3d1e:	f894 326e 	ldrb.w	r3, [r4, #622]	; 0x26e
    3d22:	4413      	add	r3, r2
    3d24:	f884 326e 	strb.w	r3, [r4, #622]	; 0x26e
		buffer_offset += len;
    3d28:	f8b4 326a 	ldrh.w	r3, [r4, #618]	; 0x26a
    3d2c:	4413      	add	r3, r2
    3d2e:	f8a4 326a 	strh.w	r3, [r4, #618]	; 0x26a
		data_length -= len;
    3d32:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3d34:	1a9b      	subs	r3, r3, r2
    3d36:	6563      	str	r3, [r4, #84]	; 0x54
		if (data_length > 0) return false;
    3d38:	2b00      	cmp	r3, #0
    3d3a:	d181      	bne.n	3c40 <AudioPlaySdWav::consume(unsigned long)+0x58>
		if (parse_format()) {
    3d3c:	4620      	mov	r0, r4
    3d3e:	f7ff ff15 	bl	3b6c <AudioPlaySdWav::parse_format()>
    3d42:	2800      	cmp	r0, #0
    3d44:	f000 8095 	beq.w	3e72 <AudioPlaySdWav::consume(unsigned long)+0x28a>
			p += len;
    3d48:	9a01      	ldr	r2, [sp, #4]
			data_length = 8;
    3d4a:	6567      	str	r7, [r4, #84]	; 0x54
			size -= len;
    3d4c:	1aad      	subs	r5, r5, r2
			p += len;
    3d4e:	4493      	add	fp, r2
			header_offset = 0;
    3d50:	f8a4 826e 	strh.w	r8, [r4, #622]	; 0x26e
	if (size == 0) return false;
    3d54:	2d00      	cmp	r5, #0
    3d56:	f47f af5a 	bne.w	3c0e <AudioPlaySdWav::consume(unsigned long)+0x26>
    3d5a:	e771      	b.n	3c40 <AudioPlaySdWav::consume(unsigned long)+0x58>
		if (size < len) len = size;
    3d5c:	6d62      	ldr	r2, [r4, #84]	; 0x54
		memcpy((uint8_t *)header + header_offset, p, len);
    3d5e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    3d62:	f894 326e 	ldrb.w	r3, [r4, #622]	; 0x26e
    3d66:	4659      	mov	r1, fp
    3d68:	42aa      	cmp	r2, r5
    3d6a:	4418      	add	r0, r3
    3d6c:	bf28      	it	cs
    3d6e:	462a      	movcs	r2, r5
    3d70:	9201      	str	r2, [sp, #4]
    3d72:	f00a facf 	bl	e314 <memcpy>
		header_offset += len;
    3d76:	9a01      	ldr	r2, [sp, #4]
    3d78:	f894 326e 	ldrb.w	r3, [r4, #622]	; 0x26e
    3d7c:	4413      	add	r3, r2
    3d7e:	f884 326e 	strb.w	r3, [r4, #622]	; 0x26e
		buffer_offset += len;
    3d82:	f8b4 326a 	ldrh.w	r3, [r4, #618]	; 0x26a
    3d86:	4413      	add	r3, r2
    3d88:	f8a4 326a 	strh.w	r3, [r4, #618]	; 0x26a
		data_length -= len;
    3d8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3d8e:	1a9b      	subs	r3, r3, r2
    3d90:	6563      	str	r3, [r4, #84]	; 0x54
		if (data_length > 0) return false;
    3d92:	2b00      	cmp	r3, #0
    3d94:	f47f af54 	bne.w	3c40 <AudioPlaySdWav::consume(unsigned long)+0x58>
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
    3d98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3d9a:	454b      	cmp	r3, r9
    3d9c:	d169      	bne.n	3e72 <AudioPlaySdWav::consume(unsigned long)+0x28a>
    3d9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3da0:	4971      	ldr	r1, [pc, #452]	; (3f68 <AudioPlaySdWav::consume(unsigned long)+0x380>)
    3da2:	428b      	cmp	r3, r1
    3da4:	d165      	bne.n	3e72 <AudioPlaySdWav::consume(unsigned long)+0x28a>
			if (header[3] == 0x20746D66) {
    3da6:	f101 415b 	add.w	r1, r1, #3674210304	; 0xdb000000
    3daa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3dac:	f501 11f1 	add.w	r1, r1, #1974272	; 0x1e2000
    3db0:	f601 410f 	addw	r1, r1, #3087	; 0xc0f
    3db4:	428b      	cmp	r3, r1
    3db6:	d16c      	bne.n	3e92 <AudioPlaySdWav::consume(unsigned long)+0x2aa>
				if (header[4] < 16) {
    3db8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				if (header[4] > sizeof(header)) {
    3dba:	f1a3 0110 	sub.w	r1, r3, #16
    3dbe:	2918      	cmp	r1, #24
    3dc0:	d857      	bhi.n	3e72 <AudioPlaySdWav::consume(unsigned long)+0x28a>
				header_offset = 0;
    3dc2:	f44f 6110 	mov.w	r1, #2304	; 0x900
    3dc6:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    3dca:	e067      	b.n	3e9c <AudioPlaySdWav::consume(unsigned long)+0x2b4>
		if (size > data_length) size = data_length;
    3dcc:	6d62      	ldr	r2, [r4, #84]	; 0x54
		if (leftover_bytes) {
    3dce:	f894 1271 	ldrb.w	r1, [r4, #625]	; 0x271
    3dd2:	4295      	cmp	r5, r2
    3dd4:	bf28      	it	cs
    3dd6:	4615      	movcs	r5, r2
		data_length -= size;
    3dd8:	1b52      	subs	r2, r2, r5
    3dda:	6562      	str	r2, [r4, #84]	; 0x54
		if (leftover_bytes) {
    3ddc:	2900      	cmp	r1, #0
    3dde:	d164      	bne.n	3eaa <AudioPlaySdWav::consume(unsigned long)+0x2c2>
			if (size == 0) {
    3de0:	3d02      	subs	r5, #2
    3de2:	f8bb 7000 	ldrh.w	r7, [fp]
    3de6:	f040 8082 	bne.w	3eee <AudioPlaySdWav::consume(unsigned long)+0x306>
				if (data_length == 0) break;
    3dea:	2a00      	cmp	r2, #0
    3dec:	f040 80aa 	bne.w	3f44 <AudioPlaySdWav::consume(unsigned long)+0x35c>
		state = STATE_STOP;
    3df0:	230e      	movs	r3, #14
		return false;
    3df2:	2000      	movs	r0, #0
		state = STATE_STOP;
    3df4:	f884 326f 	strb.w	r3, [r4, #623]	; 0x26f
}
    3df8:	b003      	add	sp, #12
    3dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (size > data_length) size = data_length;
    3dfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
			block_left->data[block_offset++] = (msb << 8) | lsb;
    3e00:	6e21      	ldr	r1, [r4, #96]	; 0x60
    3e02:	429d      	cmp	r5, r3
			block_left->data[block_offset] = header[0];
    3e04:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
    3e08:	bf28      	it	cs
    3e0a:	461d      	movcs	r5, r3
		data_length -= size;
    3e0c:	1b5b      	subs	r3, r3, r5
    3e0e:	6563      	str	r3, [r4, #84]	; 0x54
    3e10:	e002      	b.n	3e18 <AudioPlaySdWav::consume(unsigned long)+0x230>
			if (size == 0) {
    3e12:	2d00      	cmp	r5, #0
    3e14:	f43f af11 	beq.w	3c3a <AudioPlaySdWav::consume(unsigned long)+0x52>
			block_left->data[block_offset++] = (msb << 8) | lsb;
    3e18:	f9bb 0000 	ldrsh.w	r0, [fp]
    3e1c:	1c57      	adds	r7, r2, #1
    3e1e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			size -= 2;
    3e22:	3d02      	subs	r5, #2
			block_left->data[block_offset++] = (msb << 8) | lsb;
    3e24:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
    3e28:	f10b 0b02 	add.w	fp, fp, #2
    3e2c:	8090      	strh	r0, [r2, #4]
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    3e2e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
    3e32:	2a7f      	cmp	r2, #127	; 0x7f
    3e34:	d9ed      	bls.n	3e12 <AudioPlaySdWav::consume(unsigned long)+0x22a>
				transmit(block_left, 0);
    3e36:	2200      	movs	r2, #0
    3e38:	4620      	mov	r0, r4
    3e3a:	f008 fef9 	bl	cc30 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				transmit(block_left, 1);
    3e3e:	2201      	movs	r2, #1
    3e40:	6e21      	ldr	r1, [r4, #96]	; 0x60
    3e42:	4620      	mov	r0, r4
    3e44:	f008 fef4 	bl	cc30 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_left);
    3e48:	6e20      	ldr	r0, [r4, #96]	; 0x60
    3e4a:	f008 fec9 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
				block_left = NULL;
    3e4e:	2200      	movs	r2, #0
				buffer_offset = p - buffer;
    3e50:	ebab 0306 	sub.w	r3, fp, r6
				if (block_right) release(block_right);
    3e54:	6e60      	ldr	r0, [r4, #100]	; 0x64
				block_left = NULL;
    3e56:	6622      	str	r2, [r4, #96]	; 0x60
				data_length += size;
    3e58:	6d62      	ldr	r2, [r4, #84]	; 0x54
				buffer_offset = p - buffer;
    3e5a:	f8a4 326a 	strh.w	r3, [r4, #618]	; 0x26a
				data_length += size;
    3e5e:	4415      	add	r5, r2
    3e60:	6565      	str	r5, [r4, #84]	; 0x54
				if (block_right) release(block_right);
    3e62:	b110      	cbz	r0, 3e6a <AudioPlaySdWav::consume(unsigned long)+0x282>
    3e64:	f008 febc 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
				if (data_length == 0) state = STATE_STOP;
    3e68:	6d65      	ldr	r5, [r4, #84]	; 0x54
    3e6a:	2d00      	cmp	r5, #0
    3e6c:	d063      	beq.n	3f36 <AudioPlaySdWav::consume(unsigned long)+0x34e>
				return true;
    3e6e:	2001      	movs	r0, #1
    3e70:	e6e7      	b.n	3c42 <AudioPlaySdWav::consume(unsigned long)+0x5a>
	state_play = STATE_STOP;
    3e72:	230e      	movs	r3, #14
	return false;
    3e74:	2000      	movs	r0, #0
	state_play = STATE_STOP;
    3e76:	f884 3270 	strb.w	r3, [r4, #624]	; 0x270
	state = STATE_STOP;
    3e7a:	f884 326f 	strb.w	r3, [r4, #623]	; 0x26f
}
    3e7e:	b003      	add	sp, #12
    3e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			state = STATE_PARSE4;
    3e84:	230b      	movs	r3, #11
    3e86:	f884 326f 	strb.w	r3, [r4, #623]	; 0x26f
	if (size == 0) return false;
    3e8a:	2d00      	cmp	r5, #0
    3e8c:	f47f aebf 	bne.w	3c0e <AudioPlaySdWav::consume(unsigned long)+0x26>
    3e90:	e6d6      	b.n	3c40 <AudioPlaySdWav::consume(unsigned long)+0x58>
				header_offset = 12;
    3e92:	f640 430c 	movw	r3, #3084	; 0xc0c
    3e96:	f8a4 326e 	strh.w	r3, [r4, #622]	; 0x26e
				if (header[4] < 16) {
    3e9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			size -= len;
    3e9c:	1aad      	subs	r5, r5, r2
			p += len;
    3e9e:	4493      	add	fp, r2
			data_length = header[4];
    3ea0:	6563      	str	r3, [r4, #84]	; 0x54
	if (size == 0) return false;
    3ea2:	2d00      	cmp	r5, #0
    3ea4:	f47f aeb3 	bne.w	3c0e <AudioPlaySdWav::consume(unsigned long)+0x26>
    3ea8:	e6ca      	b.n	3c40 <AudioPlaySdWav::consume(unsigned long)+0x58>
			block_left->data[block_offset] = header[0];
    3eaa:	6e21      	ldr	r1, [r4, #96]	; 0x60
    3eac:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
    3eb0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3eb2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3eb6:	8087      	strh	r7, [r0, #4]
			leftover_bytes = 0;
    3eb8:	2000      	movs	r0, #0
    3eba:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
			block_right->data[block_offset++] = (msb << 8) | lsb;
    3ebe:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
			msb = *p++;
    3ec2:	46d8      	mov	r8, fp
			block_right->data[block_offset++] = (msb << 8) | lsb;
    3ec4:	6e67      	ldr	r7, [r4, #100]	; 0x64
			size -= 2;
    3ec6:	3d02      	subs	r5, #2
			block_right->data[block_offset++] = (msb << 8) | lsb;
    3ec8:	f938 3b02 	ldrsh.w	r3, [r8], #2
    3ecc:	eb07 0740 	add.w	r7, r7, r0, lsl #1
    3ed0:	3001      	adds	r0, #1
    3ed2:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    3ed6:	80bb      	strh	r3, [r7, #4]
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    3ed8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    3edc:	2b7f      	cmp	r3, #127	; 0x7f
    3ede:	d80f      	bhi.n	3f00 <AudioPlaySdWav::consume(unsigned long)+0x318>
			if (size == 0) {
    3ee0:	bb75      	cbnz	r5, 3f40 <AudioPlaySdWav::consume(unsigned long)+0x358>
				if (data_length == 0) break;
    3ee2:	2a00      	cmp	r2, #0
    3ee4:	d084      	beq.n	3df0 <AudioPlaySdWav::consume(unsigned long)+0x208>
				return false;
    3ee6:	4628      	mov	r0, r5
				leftover_bytes = 0;
    3ee8:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
				return false;
    3eec:	e6a9      	b.n	3c42 <AudioPlaySdWav::consume(unsigned long)+0x5a>
			block_left->data[block_offset] = (msb << 8) | lsb;
    3eee:	6e21      	ldr	r1, [r4, #96]	; 0x60
			msb = *p++;
    3ef0:	f10b 0b02 	add.w	fp, fp, #2
			block_left->data[block_offset] = (msb << 8) | lsb;
    3ef4:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
    3ef8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3efc:	8087      	strh	r7, [r0, #4]
    3efe:	e7de      	b.n	3ebe <AudioPlaySdWav::consume(unsigned long)+0x2d6>
				transmit(block_left, 0);
    3f00:	2200      	movs	r2, #0
    3f02:	4620      	mov	r0, r4
				block_left = NULL;
    3f04:	2700      	movs	r7, #0
				transmit(block_left, 0);
    3f06:	f008 fe93 	bl	cc30 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_left);
    3f0a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    3f0c:	f008 fe68 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
				transmit(block_right, 1);
    3f10:	2201      	movs	r2, #1
    3f12:	6e61      	ldr	r1, [r4, #100]	; 0x64
    3f14:	4620      	mov	r0, r4
				block_left = NULL;
    3f16:	6627      	str	r7, [r4, #96]	; 0x60
				transmit(block_right, 1);
    3f18:	f008 fe8a 	bl	cc30 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_right);
    3f1c:	6e60      	ldr	r0, [r4, #100]	; 0x64
    3f1e:	f008 fe5f 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
				data_length += size;
    3f22:	6d62      	ldr	r2, [r4, #84]	; 0x54
				buffer_offset = p - buffer;
    3f24:	eba8 0306 	sub.w	r3, r8, r6
				block_right = NULL;
    3f28:	6667      	str	r7, [r4, #100]	; 0x64
				data_length += size;
    3f2a:	442a      	add	r2, r5
				buffer_offset = p - buffer;
    3f2c:	f8a4 326a 	strh.w	r3, [r4, #618]	; 0x26a
				data_length += size;
    3f30:	6562      	str	r2, [r4, #84]	; 0x54
				if (data_length == 0) state = STATE_STOP;
    3f32:	2a00      	cmp	r2, #0
    3f34:	d19b      	bne.n	3e6e <AudioPlaySdWav::consume(unsigned long)+0x286>
				if (data_length == 0) state = STATE_STOP;
    3f36:	230e      	movs	r3, #14
				return true;
    3f38:	2001      	movs	r0, #1
				if (data_length == 0) state = STATE_STOP;
    3f3a:	f884 326f 	strb.w	r3, [r4, #623]	; 0x26f
    3f3e:	e680      	b.n	3c42 <AudioPlaySdWav::consume(unsigned long)+0x5a>
			msb = *p++;
    3f40:	46c3      	mov	fp, r8
    3f42:	e74d      	b.n	3de0 <AudioPlaySdWav::consume(unsigned long)+0x1f8>
				leftover_bytes = 2;
    3f44:	2302      	movs	r3, #2
				return false;
    3f46:	4628      	mov	r0, r5
				header[0] = (msb << 8) | lsb;
    3f48:	62e7      	str	r7, [r4, #44]	; 0x2c
				leftover_bytes = 2;
    3f4a:	f884 3271 	strb.w	r3, [r4, #625]	; 0x271
				return false;
    3f4e:	e678      	b.n	3c42 <AudioPlaySdWav::consume(unsigned long)+0x5a>
		data_length -= len;
    3f50:	6562      	str	r2, [r4, #84]	; 0x54
    3f52:	e675      	b.n	3c40 <AudioPlaySdWav::consume(unsigned long)+0x58>
			buffer_offset += size;
    3f54:	f8b4 326a 	ldrh.w	r3, [r4, #618]	; 0x26a
			data_length -= size;
    3f58:	1b52      	subs	r2, r2, r5
			return false;
    3f5a:	2000      	movs	r0, #0
			buffer_offset += size;
    3f5c:	442b      	add	r3, r5
			data_length -= size;
    3f5e:	6562      	str	r2, [r4, #84]	; 0x54
			buffer_offset += size;
    3f60:	f8a4 326a 	strh.w	r3, [r4, #618]	; 0x26a
			return false;
    3f64:	e66d      	b.n	3c42 <AudioPlaySdWav::consume(unsigned long)+0x5a>
    3f66:	bf00      	nop
    3f68:	45564157 	.word	0x45564157
    3f6c:	61746164 	.word	0x61746164
    3f70:	46464952 	.word	0x46464952

00003f74 <AudioPlaySdWav::update()>:
	if (state == STATE_STOP || state == STATE_PAUSED) return;
    3f74:	f890 326f 	ldrb.w	r3, [r0, #623]	; 0x26f
    3f78:	3b0d      	subs	r3, #13
    3f7a:	2b01      	cmp	r3, #1
    3f7c:	f240 80bc 	bls.w	40f8 <AudioPlaySdWav::update()+0x184>
{
    3f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f84:	4604      	mov	r4, r0
	block_left = allocate();
    3f86:	f008 fdd5 	bl	cb34 <AudioStream::allocate()>
    3f8a:	6620      	str	r0, [r4, #96]	; 0x60
	if (block_left == NULL) return;
    3f8c:	2800      	cmp	r0, #0
    3f8e:	f000 80ac 	beq.w	40ea <AudioPlaySdWav::update()+0x176>
	if (state < 8 && (state & 1) == 1) {
    3f92:	f894 326f 	ldrb.w	r3, [r4, #623]	; 0x26f
    3f96:	2b07      	cmp	r3, #7
    3f98:	d802      	bhi.n	3fa0 <AudioPlaySdWav::update()+0x2c>
    3f9a:	07dd      	lsls	r5, r3, #31
    3f9c:	f100 80ad 	bmi.w	40fa <AudioPlaySdWav::update()+0x186>
		block_right = NULL;
    3fa0:	2300      	movs	r3, #0
    3fa2:	6663      	str	r3, [r4, #100]	; 0x64
	n = buffer_length - buffer_offset;
    3fa4:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
	block_offset = 0;
    3fa8:	2300      	movs	r3, #0
	n = buffer_length - buffer_offset;
    3faa:	f8b4 226a 	ldrh.w	r2, [r4, #618]	; 0x26a
	block_offset = 0;
    3fae:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	n = buffer_length - buffer_offset;
    3fb2:	1a89      	subs	r1, r1, r2
	if (n > 0) {
    3fb4:	4299      	cmp	r1, r3
    3fb6:	f300 8106 	bgt.w	41c6 <AudioPlaySdWav::update()+0x252>
	if (state != STATE_STOP && wavfile.available()) {
    3fba:	f894 326f 	ldrb.w	r3, [r4, #623]	; 0x26f
    3fbe:	2b0e      	cmp	r3, #14
    3fc0:	f000 80b3 	beq.w	412a <AudioPlaySdWav::update()+0x1b6>
		return (f) ? f->available() : 0;
    3fc4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    3fc6:	2d00      	cmp	r5, #0
    3fc8:	d044      	beq.n	4054 <AudioPlaySdWav::update()+0xe0>
    3fca:	682b      	ldr	r3, [r5, #0]
    3fcc:	49a2      	ldr	r1, [pc, #648]	; (4258 <AudioPlaySdWav::update()+0x2e4>)
    3fce:	691a      	ldr	r2, [r3, #16]
    3fd0:	428a      	cmp	r2, r1
    3fd2:	f040 8130 	bne.w	4236 <AudioPlaySdWav::update()+0x2c2>
    return m_fFile ? m_fFile->available() :
    3fd6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    3fd8:	2a00      	cmp	r2, #0
    3fda:	f000 8106 	beq.w	41ea <AudioPlaySdWav::update()+0x276>
    return isFile() ? fileSize() - curPosition() : 0;
    3fde:	7811      	ldrb	r1, [r2, #0]
    3fe0:	0708      	lsls	r0, r1, #28
    3fe2:	f140 80a6 	bpl.w	4132 <AudioPlaySdWav::update()+0x1be>
    3fe6:	69d1      	ldr	r1, [r2, #28]
    3fe8:	6952      	ldr	r2, [r2, #20]
    return n > INT_MAX ? INT_MAX : n;
    3fea:	1a89      	subs	r1, r1, r2
    3fec:	f140 8112 	bpl.w	4214 <AudioPlaySdWav::update()+0x2a0>
		buffer_length = wavfile.read(buffer, 512);
    3ff0:	f104 076a 	add.w	r7, r4, #106	; 0x6a
    3ff4:	4e99      	ldr	r6, [pc, #612]	; (425c <AudioPlaySdWav::update()+0x2e8>)
    3ff6:	f64f 78ff 	movw	r8, #65535	; 0xffff
		return (f) ? f->read(buf, nbyte) : 0;
    3ffa:	b34d      	cbz	r5, 4050 <AudioPlaySdWav::update()+0xdc>
    3ffc:	682b      	ldr	r3, [r5, #0]
    3ffe:	689b      	ldr	r3, [r3, #8]
    4000:	42b3      	cmp	r3, r6
    4002:	f040 80e7 	bne.w	41d4 <AudioPlaySdWav::update()+0x260>
    return m_fFile ? m_fFile->read(buf, count) :
    4006:	6d28      	ldr	r0, [r5, #80]	; 0x50
    4008:	2800      	cmp	r0, #0
    400a:	f000 8081 	beq.w	4110 <AudioPlaySdWav::update()+0x19c>
    400e:	f44f 7200 	mov.w	r2, #512	; 0x200
    4012:	4639      	mov	r1, r7
    4014:	f003 faa2 	bl	755c <FatFile::read(void*, unsigned int)>
    4018:	b283      	uxth	r3, r0
    401a:	f8a4 326c 	strh.w	r3, [r4, #620]	; 0x26c
		if (buffer_length == 0) goto end;
    401e:	2b00      	cmp	r3, #0
    4020:	f000 8083 	beq.w	412a <AudioPlaySdWav::update()+0x1b6>
		buffer_offset = 0;
    4024:	2300      	movs	r3, #0
		bool txok = consume(buffer_length);
    4026:	b281      	uxth	r1, r0
    4028:	4620      	mov	r0, r4
		bool parsing = (state >= 8);
    402a:	f894 526f 	ldrb.w	r5, [r4, #623]	; 0x26f
		buffer_offset = 0;
    402e:	f8a4 326a 	strh.w	r3, [r4, #618]	; 0x26a
		bool txok = consume(buffer_length);
    4032:	f7ff fdd9 	bl	3be8 <AudioPlaySdWav::consume(unsigned long)>
			if (state != STATE_STOP) return;
    4036:	f894 326f 	ldrb.w	r3, [r4, #623]	; 0x26f
		if (txok) {
    403a:	2800      	cmp	r0, #0
    403c:	d173      	bne.n	4126 <AudioPlaySdWav::update()+0x1b2>
			if (state != STATE_STOP) {
    403e:	2b0e      	cmp	r3, #14
    4040:	d073      	beq.n	412a <AudioPlaySdWav::update()+0x1b6>
				if (parsing && state < 8) goto readagain;
    4042:	2d07      	cmp	r5, #7
    4044:	d914      	bls.n	4070 <AudioPlaySdWav::update()+0xfc>
    4046:	2b07      	cmp	r3, #7
    4048:	d812      	bhi.n	4070 <AudioPlaySdWav::update()+0xfc>
		if (f) {
    404a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
		return (f) ? f->read(buf, nbyte) : 0;
    404c:	2d00      	cmp	r5, #0
    404e:	d1d5      	bne.n	3ffc <AudioPlaySdWav::update()+0x88>
		buffer_length = wavfile.read(buffer, 512);
    4050:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    4054:	4a82      	ldr	r2, [pc, #520]	; (4260 <AudioPlaySdWav::update()+0x2ec>)
    4056:	8813      	ldrh	r3, [r2, #0]
    4058:	2b00      	cmp	r3, #0
    405a:	d048      	beq.n	40ee <AudioPlaySdWav::update()+0x17a>
    405c:	3b01      	subs	r3, #1
    405e:	b29b      	uxth	r3, r3
    4060:	8013      	strh	r3, [r2, #0]
    4062:	2b00      	cmp	r3, #0
    4064:	d043      	beq.n	40ee <AudioPlaySdWav::update()+0x17a>
	state_play = STATE_STOP;
    4066:	230e      	movs	r3, #14
    4068:	f884 3270 	strb.w	r3, [r4, #624]	; 0x270
	state = STATE_STOP;
    406c:	f884 326f 	strb.w	r3, [r4, #623]	; 0x26f
	if (block_left) {
    4070:	6e25      	ldr	r5, [r4, #96]	; 0x60
    4072:	b1fd      	cbz	r5, 40b4 <AudioPlaySdWav::update()+0x140>
		if (block_offset > 0) {
    4074:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
    4078:	b1b8      	cbz	r0, 40aa <AudioPlaySdWav::update()+0x136>
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    407a:	287f      	cmp	r0, #127	; 0x7f
    407c:	d808      	bhi.n	4090 <AudioPlaySdWav::update()+0x11c>
				block_left->data[i] = 0;
    407e:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
    4082:	3002      	adds	r0, #2
    4084:	2100      	movs	r1, #0
    4086:	0052      	lsls	r2, r2, #1
    4088:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    408c:	f00d feae 	bl	11dec <memset>
			transmit(block_left, 0);
    4090:	2200      	movs	r2, #0
    4092:	4629      	mov	r1, r5
    4094:	4620      	mov	r0, r4
    4096:	f008 fdcb 	bl	cc30 <AudioStream::transmit(audio_block_struct*, unsigned char)>
			if (state < 8 && (state & 1) == 0) {
    409a:	f894 326f 	ldrb.w	r3, [r4, #623]	; 0x26f
    409e:	2b07      	cmp	r3, #7
    40a0:	d802      	bhi.n	40a8 <AudioPlaySdWav::update()+0x134>
    40a2:	07db      	lsls	r3, r3, #31
    40a4:	f140 80ba 	bpl.w	421c <AudioPlaySdWav::update()+0x2a8>
		release(block_left);
    40a8:	6e25      	ldr	r5, [r4, #96]	; 0x60
    40aa:	4628      	mov	r0, r5
    40ac:	f008 fd98 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
		block_left = NULL;
    40b0:	2300      	movs	r3, #0
    40b2:	6623      	str	r3, [r4, #96]	; 0x60
	if (block_right) {
    40b4:	6e65      	ldr	r5, [r4, #100]	; 0x64
    40b6:	b1c5      	cbz	r5, 40ea <AudioPlaySdWav::update()+0x176>
		if (block_offset > 0) {
    40b8:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
    40bc:	b180      	cbz	r0, 40e0 <AudioPlaySdWav::update()+0x16c>
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    40be:	287f      	cmp	r0, #127	; 0x7f
    40c0:	d808      	bhi.n	40d4 <AudioPlaySdWav::update()+0x160>
				block_right->data[i] = 0;
    40c2:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
    40c6:	3002      	adds	r0, #2
    40c8:	2100      	movs	r1, #0
    40ca:	0052      	lsls	r2, r2, #1
    40cc:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    40d0:	f00d fe8c 	bl	11dec <memset>
			transmit(block_right, 1);
    40d4:	4629      	mov	r1, r5
    40d6:	2201      	movs	r2, #1
    40d8:	4620      	mov	r0, r4
    40da:	f008 fda9 	bl	cc30 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(block_right);
    40de:	6e65      	ldr	r5, [r4, #100]	; 0x64
    40e0:	4628      	mov	r0, r5
    40e2:	f008 fd7d 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
		block_right = NULL;
    40e6:	2300      	movs	r3, #0
    40e8:	6663      	str	r3, [r4, #100]	; 0x64
}
    40ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		SPI.notUsingInterrupt(IRQ_SOFTWARE);
    40ee:	2146      	movs	r1, #70	; 0x46
    40f0:	485c      	ldr	r0, [pc, #368]	; (4264 <AudioPlaySdWav::update()+0x2f0>)
    40f2:	f000 fac9 	bl	4688 <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>
    40f6:	e7b6      	b.n	4066 <AudioPlaySdWav::update()+0xf2>
    40f8:	4770      	bx	lr
		block_right = allocate();
    40fa:	f008 fd1b 	bl	cb34 <AudioStream::allocate()>
    40fe:	6660      	str	r0, [r4, #100]	; 0x64
		if (block_right == NULL) {
    4100:	2800      	cmp	r0, #0
    4102:	f47f af4f 	bne.w	3fa4 <AudioPlaySdWav::update()+0x30>
			release(block_left);
    4106:	6e20      	ldr	r0, [r4, #96]	; 0x60
}
    4108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			release(block_left);
    410c:	f008 bd68 	b.w	cbe0 <AudioStream::release(audio_block_struct*)>
    4110:	6d68      	ldr	r0, [r5, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
    4112:	2800      	cmp	r0, #0
    4114:	f000 80b0 	beq.w	4278 <AudioPlaySdWav::update()+0x304>
    4118:	f44f 7200 	mov.w	r2, #512	; 0x200
    411c:	4639      	mov	r1, r7
    411e:	f000 ff43 	bl	4fa8 <ExFatFile::read(void*, unsigned int)>
		buffer_length = wavfile.read(buffer, 512);
    4122:	b283      	uxth	r3, r0
    4124:	e779      	b.n	401a <AudioPlaySdWav::update()+0xa6>
			if (state != STATE_STOP) return;
    4126:	2b0e      	cmp	r3, #14
    4128:	d1df      	bne.n	40ea <AudioPlaySdWav::update()+0x176>
		return (f) ? f->available() : 0;
    412a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
		if (f) {
    412c:	2d00      	cmp	r5, #0
    412e:	d091      	beq.n	4054 <AudioPlaySdWav::update()+0xe0>
			f->close();
    4130:	682b      	ldr	r3, [r5, #0]
    4132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4134:	4f4c      	ldr	r7, [pc, #304]	; (4268 <AudioPlaySdWav::update()+0x2f4>)
    4136:	42bb      	cmp	r3, r7
    4138:	d17a      	bne.n	4230 <AudioPlaySdWav::update()+0x2bc>
		if (filename) {
    413a:	6da8      	ldr	r0, [r5, #88]	; 0x58
    413c:	b118      	cbz	r0, 4146 <AudioPlaySdWav::update()+0x1d2>
			free(filename);
    413e:	f00b ff09 	bl	ff54 <free>
			filename = nullptr;
    4142:	2300      	movs	r3, #0
    4144:	65ab      	str	r3, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    4146:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    4148:	2b00      	cmp	r3, #0
    414a:	d04a      	beq.n	41e2 <AudioPlaySdWav::update()+0x26e>
			sdfatfile.close();
    414c:	f105 0018 	add.w	r0, r5, #24
    4150:	f005 fac0 	bl	96d4 <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    4154:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4156:	6875      	ldr	r5, [r6, #4]
    4158:	3d01      	subs	r5, #1
    415a:	6075      	str	r5, [r6, #4]
    415c:	2d00      	cmp	r5, #0
    415e:	d12f      	bne.n	41c0 <AudioPlaySdWav::update()+0x24c>
			f->close();
    4160:	6833      	ldr	r3, [r6, #0]
    4162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4164:	42bb      	cmp	r3, r7
    4166:	d171      	bne.n	424c <AudioPlaySdWav::update()+0x2d8>
		if (filename) {
    4168:	6db0      	ldr	r0, [r6, #88]	; 0x58
    416a:	b110      	cbz	r0, 4172 <AudioPlaySdWav::update()+0x1fe>
			free(filename);
    416c:	f00b fef2 	bl	ff54 <free>
			filename = nullptr;
    4170:	65b5      	str	r5, [r6, #88]	; 0x58
    4172:	6d33      	ldr	r3, [r6, #80]	; 0x50
    4174:	2b00      	cmp	r3, #0
    4176:	d065      	beq.n	4244 <AudioPlaySdWav::update()+0x2d0>
			sdfatfile.close();
    4178:	f106 0018 	add.w	r0, r6, #24
    417c:	f005 faaa 	bl	96d4 <FsBaseFile::close()>
			delete f;
    4180:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    4182:	b1ed      	cbz	r5, 41c0 <AudioPlaySdWav::update()+0x24c>
    4184:	682b      	ldr	r3, [r5, #0]
    4186:	4a39      	ldr	r2, [pc, #228]	; (426c <AudioPlaySdWav::update()+0x2f8>)
    4188:	685b      	ldr	r3, [r3, #4]
    418a:	4293      	cmp	r3, r2
    418c:	d161      	bne.n	4252 <AudioPlaySdWav::update()+0x2de>
	virtual ~SDFile(void) {
    418e:	4b38      	ldr	r3, [pc, #224]	; (4270 <AudioPlaySdWav::update()+0x2fc>)
		if (filename) {
    4190:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
    4192:	602b      	str	r3, [r5, #0]
		if (filename) {
    4194:	b118      	cbz	r0, 419e <AudioPlaySdWav::update()+0x22a>
			free(filename);
    4196:	f00b fedd 	bl	ff54 <free>
			filename = nullptr;
    419a:	2300      	movs	r3, #0
    419c:	65ab      	str	r3, [r5, #88]	; 0x58
    419e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
    41a0:	f105 0618 	add.w	r6, r5, #24
    41a4:	2b00      	cmp	r3, #0
    41a6:	d03f      	beq.n	4228 <AudioPlaySdWav::update()+0x2b4>
    41a8:	4630      	mov	r0, r6
    41aa:	f005 fa93 	bl	96d4 <FsBaseFile::close()>
    41ae:	4b31      	ldr	r3, [pc, #196]	; (4274 <AudioPlaySdWav::update()+0x300>)
  ~FsBaseFile() {close();}
    41b0:	4630      	mov	r0, r6
    41b2:	60ab      	str	r3, [r5, #8]
    41b4:	f005 fa8e 	bl	96d4 <FsBaseFile::close()>
	}
    41b8:	215c      	movs	r1, #92	; 0x5c
    41ba:	4628      	mov	r0, r5
    41bc:	f00a f946 	bl	e44c <operator delete(void*, unsigned int)>
		f = nullptr;
    41c0:	2300      	movs	r3, #0
    41c2:	62a3      	str	r3, [r4, #40]	; 0x28
	}
    41c4:	e746      	b.n	4054 <AudioPlaySdWav::update()+0xe0>
		if (consume(n)) return; // it was enough to transmit audio
    41c6:	4620      	mov	r0, r4
    41c8:	f7ff fd0e 	bl	3be8 <AudioPlaySdWav::consume(unsigned long)>
    41cc:	2800      	cmp	r0, #0
    41ce:	f43f aef4 	beq.w	3fba <AudioPlaySdWav::update()+0x46>
    41d2:	e78a      	b.n	40ea <AudioPlaySdWav::update()+0x176>
		return (f) ? f->read(buf, nbyte) : 0;
    41d4:	4628      	mov	r0, r5
    41d6:	f44f 7200 	mov.w	r2, #512	; 0x200
    41da:	4639      	mov	r1, r7
    41dc:	4798      	blx	r3
		buffer_length = wavfile.read(buffer, 512);
    41de:	b283      	uxth	r3, r0
    41e0:	e71b      	b.n	401a <AudioPlaySdWav::update()+0xa6>
  bool isOpen() const {return m_fFile || m_xFile;}
    41e2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    41e4:	2b00      	cmp	r3, #0
    41e6:	d1b1      	bne.n	414c <AudioPlaySdWav::update()+0x1d8>
    41e8:	e7b4      	b.n	4154 <AudioPlaySdWav::update()+0x1e0>
    41ea:	6d6a      	ldr	r2, [r5, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
    41ec:	2a00      	cmp	r2, #0
    41ee:	d0a0      	beq.n	4132 <AudioPlaySdWav::update()+0x1be>
    return isFile() ? fileSize() - curPosition() : 0;
    41f0:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    41f4:	0709      	lsls	r1, r1, #28
    41f6:	d59c      	bpl.n	4132 <AudioPlaySdWav::update()+0x1be>
    41f8:	6810      	ldr	r0, [r2, #0]
    41fa:	6911      	ldr	r1, [r2, #16]
    41fc:	1a09      	subs	r1, r1, r0
    41fe:	6950      	ldr	r0, [r2, #20]
    4200:	6852      	ldr	r2, [r2, #4]
    4202:	eb60 0202 	sbc.w	r2, r0, r2
    return n > INT_MAX ? INT_MAX : n;
    4206:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    420a:	f172 0200 	sbcs.w	r2, r2, #0
    420e:	d301      	bcc.n	4214 <AudioPlaySdWav::update()+0x2a0>
    4210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
	if (state != STATE_STOP && wavfile.available()) {
    4214:	2900      	cmp	r1, #0
    4216:	f47f aeeb 	bne.w	3ff0 <AudioPlaySdWav::update()+0x7c>
    421a:	e78a      	b.n	4132 <AudioPlaySdWav::update()+0x1be>
				transmit(block_left, 1);
    421c:	2201      	movs	r2, #1
    421e:	6e21      	ldr	r1, [r4, #96]	; 0x60
    4220:	4620      	mov	r0, r4
    4222:	f008 fd05 	bl	cc30 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    4226:	e73f      	b.n	40a8 <AudioPlaySdWav::update()+0x134>
  bool isOpen() const {return m_fFile || m_xFile;}
    4228:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    422a:	2b00      	cmp	r3, #0
    422c:	d1bc      	bne.n	41a8 <AudioPlaySdWav::update()+0x234>
    422e:	e7be      	b.n	41ae <AudioPlaySdWav::update()+0x23a>
			f->close();
    4230:	4628      	mov	r0, r5
    4232:	4798      	blx	r3
    4234:	e78e      	b.n	4154 <AudioPlaySdWav::update()+0x1e0>
		return (f) ? f->available() : 0;
    4236:	4628      	mov	r0, r5
    4238:	4790      	blx	r2
		if (f) {
    423a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	if (state != STATE_STOP && wavfile.available()) {
    423c:	2800      	cmp	r0, #0
    423e:	f47f aed7 	bne.w	3ff0 <AudioPlaySdWav::update()+0x7c>
    4242:	e773      	b.n	412c <AudioPlaySdWav::update()+0x1b8>
    4244:	6d73      	ldr	r3, [r6, #84]	; 0x54
    4246:	2b00      	cmp	r3, #0
    4248:	d196      	bne.n	4178 <AudioPlaySdWav::update()+0x204>
    424a:	e799      	b.n	4180 <AudioPlaySdWav::update()+0x20c>
			f->close();
    424c:	4630      	mov	r0, r6
    424e:	4798      	blx	r3
    4250:	e796      	b.n	4180 <AudioPlaySdWav::update()+0x20c>
			delete f;
    4252:	4628      	mov	r0, r5
    4254:	4798      	blx	r3
    4256:	e7b3      	b.n	41c0 <AudioPlaySdWav::update()+0x24c>
    4258:	00000631 	.word	0x00000631
    425c:	00000565 	.word	0x00000565
    4260:	20004d30 	.word	0x20004d30
    4264:	20002a2c 	.word	0x20002a2c
    4268:	00000085 	.word	0x00000085
    426c:	00000765 	.word	0x00000765
    4270:	200014b0 	.word	0x200014b0
    4274:	20001310 	.word	0x20001310
		buffer_length = wavfile.read(buffer, 512);
    4278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    427c:	f8a4 826c 	strh.w	r8, [r4, #620]	; 0x26c
		if (buffer_length == 0) goto end;
    4280:	e6d0      	b.n	4024 <AudioPlaySdWav::update()+0xb0>
    4282:	bf00      	nop

00004284 <AudioPlaySdWav::isPlaying()>:


bool AudioPlaySdWav::isPlaying(void)
{
	uint8_t s = *(volatile uint8_t *)&state;
    4284:	f890 026f 	ldrb.w	r0, [r0, #623]	; 0x26f
	return (s < 8);
}
    4288:	2807      	cmp	r0, #7
    428a:	bf8c      	ite	hi
    428c:	2000      	movhi	r0, #0
    428e:	2001      	movls	r0, #1
    4290:	4770      	bx	lr
    4292:	bf00      	nop

00004294 <AudioPlaySdWav::positionMillis()>:
}


uint32_t AudioPlaySdWav::positionMillis(void)
{
	uint8_t s = *(volatile uint8_t *)&state;
    4294:	f890 326f 	ldrb.w	r3, [r0, #623]	; 0x26f
	if (s >= 8 && s != STATE_PAUSED) return 0;
    4298:	2b07      	cmp	r3, #7
	uint8_t s = *(volatile uint8_t *)&state;
    429a:	b2da      	uxtb	r2, r3
	if (s >= 8 && s != STATE_PAUSED) return 0;
    429c:	d903      	bls.n	42a6 <AudioPlaySdWav::positionMillis()+0x12>
    429e:	2a0d      	cmp	r2, #13
    42a0:	d001      	beq.n	42a6 <AudioPlaySdWav::positionMillis()+0x12>
    42a2:	2000      	movs	r0, #0
	uint32_t tlength = *(volatile uint32_t *)&total_length;
	uint32_t dlength = *(volatile uint32_t *)&data_length;
	uint32_t offset = tlength - dlength;
	uint32_t b2m = *(volatile uint32_t *)&bytes2millis;
	return ((uint64_t)offset * b2m) >> 32;
}
    42a4:	4770      	bx	lr
	uint32_t tlength = *(volatile uint32_t *)&total_length;
    42a6:	6d83      	ldr	r3, [r0, #88]	; 0x58
	uint32_t dlength = *(volatile uint32_t *)&data_length;
    42a8:	6d42      	ldr	r2, [r0, #84]	; 0x54
	uint32_t b2m = *(volatile uint32_t *)&bytes2millis;
    42aa:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	uint32_t offset = tlength - dlength;
    42ac:	1a9b      	subs	r3, r3, r2
	return ((uint64_t)offset * b2m) >> 32;
    42ae:	fba3 3000 	umull	r3, r0, r3, r0
    42b2:	4770      	bx	lr

000042b4 <AudioPlaySdWav::lengthMillis()>:


uint32_t AudioPlaySdWav::lengthMillis(void)
{
	uint8_t s = *(volatile uint8_t *)&state;
    42b4:	f890 326f 	ldrb.w	r3, [r0, #623]	; 0x26f
	if (s >= 8 && s != STATE_PAUSED) return 0;
    42b8:	2b07      	cmp	r3, #7
	uint8_t s = *(volatile uint8_t *)&state;
    42ba:	b2da      	uxtb	r2, r3
	if (s >= 8 && s != STATE_PAUSED) return 0;
    42bc:	d903      	bls.n	42c6 <AudioPlaySdWav::lengthMillis()+0x12>
    42be:	2a0d      	cmp	r2, #13
    42c0:	d001      	beq.n	42c6 <AudioPlaySdWav::lengthMillis()+0x12>
    42c2:	2000      	movs	r0, #0
	uint32_t tlength = *(volatile uint32_t *)&total_length;
	uint32_t b2m = *(volatile uint32_t *)&bytes2millis;
	return ((uint64_t)tlength * b2m) >> 32;
}
    42c4:	4770      	bx	lr
	uint32_t tlength = *(volatile uint32_t *)&total_length;
    42c6:	6d83      	ldr	r3, [r0, #88]	; 0x58
	uint32_t b2m = *(volatile uint32_t *)&bytes2millis;
    42c8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	return ((uint64_t)tlength * b2m) >> 32;
    42ca:	fba3 3000 	umull	r3, r0, r3, r0
    42ce:	4770      	bx	lr

000042d0 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    42d0:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    42d4:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    42d6:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    42da:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    42dc:	d101      	bne.n	42e2 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    42de:	6883      	ldr	r3, [r0, #8]
    42e0:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    42e2:	f008 be53 	b.w	cf8c <EventResponder::triggerEventNotImmediate()>
    42e6:	bf00      	nop

000042e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    42e8:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    42ea:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    42ec:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    42f0:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    42f2:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    42f4:	b1a3      	cbz	r3, 4320 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    42f6:	b321      	cbz	r1, 4342 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    42f8:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    42fc:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    42fe:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4300:	6f25      	ldr	r5, [r4, #112]	; 0x70
    4302:	07af      	lsls	r7, r5, #30
    4304:	d407      	bmi.n	4316 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    4306:	4615      	mov	r5, r2
				count_read--;
    4308:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    430a:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    430c:	b11a      	cbz	r2, 4316 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    430e:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    4312:	462a      	mov	r2, r5
    4314:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    4316:	6965      	ldr	r5, [r4, #20]
    4318:	07ed      	lsls	r5, r5, #31
    431a:	d5f1      	bpl.n	4300 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    431c:	2b00      	cmp	r3, #0
    431e:	d1ea      	bne.n	42f6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    4320:	b16e      	cbz	r6, 433e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    4322:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4324:	6f19      	ldr	r1, [r3, #112]	; 0x70
    4326:	0789      	lsls	r1, r1, #30
    4328:	d4fa      	bmi.n	4320 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    432a:	4611      	mov	r1, r2
			count_read--;
    432c:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    432e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    4330:	2a00      	cmp	r2, #0
    4332:	d0f5      	beq.n	4320 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4334:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    4338:	460a      	mov	r2, r1
	while (count_read) {
    433a:	2e00      	cmp	r6, #0
    433c:	d1f1      	bne.n	4322 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    433e:	bcf0      	pop	{r4, r5, r6, r7}
    4340:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4342:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    4346:	e7d9      	b.n	42fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00004348 <_spi_dma_rxISR0()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    4348:	4b32      	ldr	r3, [pc, #200]	; (4414 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    434a:	4933      	ldr	r1, [pc, #204]	; (4418 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    434c:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    434e:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    4352:	7920      	ldrb	r0, [r4, #4]
    4354:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    4356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    4358:	f895 c004 	ldrb.w	ip, [r5, #4]
    435c:	f881 c01c 	strb.w	ip, [r1, #28]
    4360:	7708      	strb	r0, [r1, #28]
    4362:	b152      	cbz	r2, 437a <_spi_dma_rxISR0()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    4364:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    4368:	d323      	bcc.n	43b2 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    436a:	492c      	ldr	r1, [pc, #176]	; (441c <_spi_dma_rxISR0()+0xd4>)
    436c:	4411      	add	r1, r2
		DMA_SERQ = channel;
    436e:	4a2a      	ldr	r2, [pc, #168]	; (4418 <_spi_dma_rxISR0()+0xd0>)
    4370:	6419      	str	r1, [r3, #64]	; 0x40
    4372:	76d0      	strb	r0, [r2, #27]
    4374:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4378:	bd30      	pop	{r4, r5, pc}
    437a:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    437c:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    437e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    4380:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    4382:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    4386:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    4388:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    438a:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    438e:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    4390:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    4392:	6804      	ldr	r4, [r0, #0]
    4394:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    4396:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    439a:	4b21      	ldr	r3, [pc, #132]	; (4420 <_spi_dma_rxISR0()+0xd8>)
    439c:	429c      	cmp	r4, r3
    439e:	d126      	bne.n	43ee <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    43a0:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    43a2:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    43a4:	2b02      	cmp	r3, #2
		_data = data;
    43a6:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    43a8:	d126      	bne.n	43f8 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    43aa:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    43ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    43b0:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    43b2:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    43b4:	8be9      	ldrh	r1, [r5, #30]
    43b6:	0409      	lsls	r1, r1, #16
    43b8:	d422      	bmi.n	4400 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    43ba:	b292      	uxth	r2, r2
    43bc:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    43be:	6821      	ldr	r1, [r4, #0]
    43c0:	8bec      	ldrh	r4, [r5, #30]
    43c2:	b2a4      	uxth	r4, r4
    43c4:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    43c6:	8bcc      	ldrh	r4, [r1, #30]
    43c8:	0424      	lsls	r4, r4, #16
    43ca:	d505      	bpl.n	43d8 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    43cc:	8bcc      	ldrh	r4, [r1, #30]
    43ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
    43d2:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    43d6:	4322      	orrs	r2, r4
    43d8:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    43da:	8bca      	ldrh	r2, [r1, #30]
    43dc:	b292      	uxth	r2, r2
    43de:	82ca      	strh	r2, [r1, #22]
    43e0:	2100      	movs	r1, #0
    43e2:	4a0d      	ldr	r2, [pc, #52]	; (4418 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    43e4:	6419      	str	r1, [r3, #64]	; 0x40
    43e6:	76d0      	strb	r0, [r2, #27]
    43e8:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    43ec:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    43ee:	4623      	mov	r3, r4
    43f0:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    43f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    43f6:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    43f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    43fc:	f008 bdc6 	b.w	cf8c <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    4400:	8be9      	ldrh	r1, [r5, #30]
    4402:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    4406:	b292      	uxth	r2, r2
    4408:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    440c:	ea41 010e 	orr.w	r1, r1, lr
    4410:	83e9      	strh	r1, [r5, #30]
    4412:	e7d4      	b.n	43be <_spi_dma_rxISR0()+0x76>
    4414:	20002a2c 	.word	0x20002a2c
    4418:	400e8000 	.word	0x400e8000
    441c:	ffff8001 	.word	0xffff8001
    4420:	000042d1 	.word	0x000042d1

00004424 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4424:	6843      	ldr	r3, [r0, #4]
{
    4426:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    442a:	e9d3 4100 	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    442e:	4d81      	ldr	r5, [pc, #516]	; (4634 <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    4430:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    4434:	6822      	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    4436:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    443a:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    443e:	497e      	ldr	r1, [pc, #504]	; (4638 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    4440:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    4442:	69aa      	ldr	r2, [r5, #24]
    4444:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    4446:	4a7d      	ldr	r2, [pc, #500]	; (463c <SPIClass::begin()+0x218>)
    4448:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    444a:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    444c:	f890 e010 	ldrb.w	lr, [r0, #16]
    4450:	4a7b      	ldr	r2, [pc, #492]	; (4640 <SPIClass::begin()+0x21c>)
    4452:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    4456:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    445a:	7c31      	ldrb	r1, [r6, #16]
    445c:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    4460:	6889      	ldr	r1, [r1, #8]
    4462:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    4466:	f890 c011 	ldrb.w	ip, [r0, #17]
    446a:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    446e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    4472:	f895 1020 	ldrb.w	r1, [r5, #32]
    4476:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    447a:	6889      	ldr	r1, [r1, #8]
    447c:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    4480:	7c81      	ldrb	r1, [r0, #18]
    4482:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    4486:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    448a:	f899 b030 	ldrb.w	fp, [r9, #48]	; 0x30
    448e:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    4492:	f8db b008 	ldr.w	fp, [fp, #8]
    4496:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    449a:	f8d4 a000 	ldr.w	sl, [r4]
    449e:	685f      	ldr	r7, [r3, #4]
    44a0:	ea4a 0a07 	orr.w	sl, sl, r7
    44a4:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    44a8:	7c34      	ldrb	r4, [r6, #16]
    44aa:	f8de e014 	ldr.w	lr, [lr, #20]
    44ae:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    44b2:	6864      	ldr	r4, [r4, #4]
    44b4:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    44b8:	f895 4020 	ldrb.w	r4, [r5, #32]
    44bc:	f8dc c024 	ldr.w	ip, [ip, #36]	; 0x24
    44c0:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    44c4:	6864      	ldr	r4, [r4, #4]
    44c6:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    44ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
    44cc:	f899 4030 	ldrb.w	r4, [r9, #48]	; 0x30
    44d0:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    44d4:	6852      	ldr	r2, [r2, #4]
    44d6:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    44d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    44da:	f899 1038 	ldrb.w	r1, [r9, #56]	; 0x38
    44de:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    44e0:	69da      	ldr	r2, [r3, #28]
    44e2:	7e31      	ldrb	r1, [r6, #24]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    44e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    44e6:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    44e8:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    44ec:	601a      	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    44ee:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    44f0:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    44f2:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    44f6:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    44f8:	7cc2      	ldrb	r2, [r0, #19]
    44fa:	2a00      	cmp	r2, #0
    44fc:	d031      	beq.n	4562 <SPIClass::begin()+0x13e>
			__disable_irq();
    44fe:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    4500:	7cc3      	ldrb	r3, [r0, #19]
    4502:	07dc      	lsls	r4, r3, #31
    4504:	d508      	bpl.n	4518 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    4506:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    450a:	6944      	ldr	r4, [r0, #20]
    450c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    4510:	4022      	ands	r2, r4
    4512:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    4514:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    4518:	0799      	lsls	r1, r3, #30
    451a:	d508      	bpl.n	452e <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    451c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4520:	6984      	ldr	r4, [r0, #24]
    4522:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    4526:	4022      	ands	r2, r4
    4528:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    452a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    452e:	075a      	lsls	r2, r3, #29
    4530:	d508      	bpl.n	4544 <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    4532:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4536:	69c4      	ldr	r4, [r0, #28]
    4538:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    453c:	4022      	ands	r2, r4
    453e:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    4540:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    4544:	071f      	lsls	r7, r3, #28
    4546:	d508      	bpl.n	455a <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    4548:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    454c:	6a04      	ldr	r4, [r0, #32]
    454e:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    4552:	4022      	ands	r2, r4
    4554:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    4556:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    455a:	06de      	lsls	r6, r3, #27
    455c:	d455      	bmi.n	460a <SPIClass::begin()+0x1e6>
			__enable_irq();
    455e:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4560:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    4562:	4c38      	ldr	r4, [pc, #224]	; (4644 <SPIClass::begin()+0x220>)
    4564:	6882      	ldr	r2, [r0, #8]
    4566:	42a2      	cmp	r2, r4
    4568:	d059      	beq.n	461e <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    456a:	4a32      	ldr	r2, [pc, #200]	; (4634 <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    456c:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    456e:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    4570:	4935      	ldr	r1, [pc, #212]	; (4648 <SPIClass::begin()+0x224>)
    4572:	f3c2 1601 	ubfx	r6, r2, #4, #2
    4576:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    457a:	4d34      	ldr	r5, [pc, #208]	; (464c <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    457c:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    4580:	3201      	adds	r2, #1
    4582:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    4586:	42aa      	cmp	r2, r5
    4588:	d831      	bhi.n	45ee <SPIClass::begin()+0x1ca>
    458a:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    458c:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
    458e:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    4590:	2103      	movs	r1, #3
		port().CR = 0;
    4592:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    4594:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    4596:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    4598:	2101      	movs	r1, #1
		port().CCR = _ccr;
    459a:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    459c:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    459e:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    45a0:	7cc3      	ldrb	r3, [r0, #19]
    45a2:	b313      	cbz	r3, 45ea <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    45a4:	07dd      	lsls	r5, r3, #31
    45a6:	d504      	bpl.n	45b2 <SPIClass::begin()+0x18e>
    45a8:	6a81      	ldr	r1, [r0, #40]	; 0x28
    45aa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    45ae:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    45b2:	079c      	lsls	r4, r3, #30
    45b4:	d504      	bpl.n	45c0 <SPIClass::begin()+0x19c>
    45b6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    45b8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    45bc:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    45c0:	0759      	lsls	r1, r3, #29
    45c2:	d504      	bpl.n	45ce <SPIClass::begin()+0x1aa>
    45c4:	6b01      	ldr	r1, [r0, #48]	; 0x30
    45c6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    45ca:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    45ce:	071a      	lsls	r2, r3, #28
    45d0:	d504      	bpl.n	45dc <SPIClass::begin()+0x1b8>
    45d2:	6b41      	ldr	r1, [r0, #52]	; 0x34
    45d4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    45d8:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    45dc:	06db      	lsls	r3, r3, #27
    45de:	d504      	bpl.n	45ea <SPIClass::begin()+0x1c6>
    45e0:	6b82      	ldr	r2, [r0, #56]	; 0x38
    45e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    45e6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    45ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    45ee:	4918      	ldr	r1, [pc, #96]	; (4650 <SPIClass::begin()+0x22c>)
    45f0:	fba1 5102 	umull	r5, r1, r1, r2
    45f4:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    45f6:	fbb2 f2f1 	udiv	r2, r2, r1
    45fa:	42a2      	cmp	r2, r4
    45fc:	bf88      	it	hi
    45fe:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    4600:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    4604:	d30d      	bcc.n	4622 <SPIClass::begin()+0x1fe>
    4606:	4a13      	ldr	r2, [pc, #76]	; (4654 <SPIClass::begin()+0x230>)
				div = d-2;
    4608:	e7c0      	b.n	458c <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    460a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    460e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4610:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    4614:	400b      	ands	r3, r1
    4616:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    4618:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    461c:	e79f      	b.n	455e <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    461e:	68c2      	ldr	r2, [r0, #12]
    4620:	e7b5      	b.n	458e <SPIClass::begin()+0x16a>
			if (d > 2) {
    4622:	2902      	cmp	r1, #2
    4624:	d9b1      	bls.n	458a <SPIClass::begin()+0x166>
				div = d-2;
    4626:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    4628:	084c      	lsrs	r4, r1, #1
    462a:	0222      	lsls	r2, r4, #8
    462c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    4630:	430a      	orrs	r2, r1
    4632:	e7ab      	b.n	458c <SPIClass::begin()+0x168>
    4634:	400fc000 	.word	0x400fc000
    4638:	e3ffffcf 	.word	0xe3ffffcf
    463c:	08000010 	.word	0x08000010
    4640:	20001a68 	.word	0x20001a68
    4644:	003d0900 	.word	0x003d0900
    4648:	200015fc 	.word	0x200015fc
    464c:	003d08ff 	.word	0x003d08ff
    4650:	431bde83 	.word	0x431bde83
    4654:	007f7fff 	.word	0x007f7fff

00004658 <SPIClass::setMOSI(unsigned char)>:
}
    4658:	4770      	bx	lr
    465a:	bf00      	nop

0000465c <SPIClass::setSCK(unsigned char)>:
}
    465c:	4770      	bx	lr
    465e:	bf00      	nop

00004660 <SPIClass::usingInterrupt(IRQ_NUMBER_t)>:
	if (n >= NVIC_NUM_INTERRUPTS) return;
    4660:	299f      	cmp	r1, #159	; 0x9f
    4662:	d80f      	bhi.n	4684 <SPIClass::usingInterrupt(IRQ_NUMBER_t)+0x24>
	interruptMasksUsed |= (1 << (n >> 5));
    4664:	094b      	lsrs	r3, r1, #5
    4666:	2201      	movs	r2, #1
	interruptMask[n >> 5] |= (1 << (n & 0x1F));
    4668:	f001 011f 	and.w	r1, r1, #31
	interruptMasksUsed |= (1 << (n >> 5));
    466c:	fa02 fc03 	lsl.w	ip, r2, r3
    4670:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	interruptMask[n >> 5] |= (1 << (n & 0x1F));
    4674:	408a      	lsls	r2, r1
	interruptMasksUsed |= (1 << (n >> 5));
    4676:	7cc1      	ldrb	r1, [r0, #19]
    4678:	ea41 010c 	orr.w	r1, r1, ip
    467c:	74c1      	strb	r1, [r0, #19]
	interruptMask[n >> 5] |= (1 << (n & 0x1F));
    467e:	6959      	ldr	r1, [r3, #20]
    4680:	4311      	orrs	r1, r2
    4682:	6159      	str	r1, [r3, #20]
}
    4684:	4770      	bx	lr
    4686:	bf00      	nop

00004688 <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>:
	if (n >= NVIC_NUM_INTERRUPTS) return;
    4688:	299f      	cmp	r1, #159	; 0x9f
    468a:	d818      	bhi.n	46be <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)+0x36>
	interruptMask[n >> 5] &= ~(1 << (n & 0x1F));
    468c:	2201      	movs	r2, #1
{
    468e:	b500      	push	{lr}
	interruptMask[n >> 5] &= ~(1 << (n & 0x1F));
    4690:	ea4f 1e51 	mov.w	lr, r1, lsr #5
    4694:	f001 011f 	and.w	r1, r1, #31
    4698:	eb00 0c8e 	add.w	ip, r0, lr, lsl #2
    469c:	fa02 f101 	lsl.w	r1, r2, r1
    46a0:	f8dc 3014 	ldr.w	r3, [ip, #20]
    46a4:	ea23 0301 	bic.w	r3, r3, r1
    46a8:	f8cc 3014 	str.w	r3, [ip, #20]
	if (interruptMask[n >> 5] == 0) {
    46ac:	b92b      	cbnz	r3, 46ba <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)+0x32>
		interruptMasksUsed &= ~(1 << (n >> 5));
    46ae:	7cc3      	ldrb	r3, [r0, #19]
    46b0:	fa02 f20e 	lsl.w	r2, r2, lr
    46b4:	ea23 0302 	bic.w	r3, r3, r2
    46b8:	74c3      	strb	r3, [r0, #19]
}
    46ba:	f85d fb04 	ldr.w	pc, [sp], #4
    46be:	4770      	bx	lr

000046c0 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    46c0:	b10b      	cbz	r3, 46c6 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    46c2:	f7ff be11 	b.w	42e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    46c6:	4770      	bx	lr

000046c8 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    46c8:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    46ca:	e9d3 1200 	ldrd	r1, r2, [r3]
    46ce:	6809      	ldr	r1, [r1, #0]
    46d0:	4211      	tst	r1, r2
    46d2:	d100      	bne.n	46d6 <SPIClass::end()+0xe>
    46d4:	4770      	bx	lr
void SPIClass::end() {
    46d6:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    46d8:	6802      	ldr	r2, [r0, #0]
    46da:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    46dc:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    46de:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    46e0:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    46e2:	7c22      	ldrb	r2, [r4, #16]
    46e4:	4413      	add	r3, r2
    46e6:	7c18      	ldrb	r0, [r3, #16]
    46e8:	f009 fdd4 	bl	e294 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    46ec:	7c62      	ldrb	r2, [r4, #17]
    46ee:	6863      	ldr	r3, [r4, #4]
    46f0:	2105      	movs	r1, #5
    46f2:	4413      	add	r3, r2
    46f4:	f893 0020 	ldrb.w	r0, [r3, #32]
    46f8:	f009 fdcc 	bl	e294 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    46fc:	6863      	ldr	r3, [r4, #4]
    46fe:	7ca2      	ldrb	r2, [r4, #18]
    4700:	2105      	movs	r1, #5
    4702:	4413      	add	r3, r2
}
    4704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4708:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    470c:	f009 bdc2 	b.w	e294 <pinMode>

00004710 <SDClass::~SDClass()>:
class SDClass : public FS
    4710:	4770      	bx	lr
    4712:	bf00      	nop

00004714 <SDClass::dateTime(unsigned short*, unsigned short*)>:
// #define _SD_DAT3 62  // currently not doing on 3.5/6...
#endif

#ifdef __arm__
void SDClass::dateTime(uint16_t *date, uint16_t *time)
{
    4714:	b530      	push	{r4, r5, lr}
    4716:	b083      	sub	sp, #12
    4718:	4605      	mov	r5, r0
    471a:	460c      	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    471c:	f00a f842 	bl	e7a4 <rtc_get>
	uint32_t now = Teensy3Clock.get();
	if (now < 315532800) { // before 1980
    4720:	4b1c      	ldr	r3, [pc, #112]	; (4794 <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    4722:	4298      	cmp	r0, r3
    4724:	d804      	bhi.n	4730 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    4726:	2300      	movs	r3, #0
    4728:	802b      	strh	r3, [r5, #0]
		*time = 0;
    472a:	8023      	strh	r3, [r4, #0]
		DateTimeFields datetime;
		breakTime(now, datetime);
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
	}
}
    472c:	b003      	add	sp, #12
    472e:	bd30      	pop	{r4, r5, pc}
		breakTime(now, datetime);
    4730:	4669      	mov	r1, sp
    4732:	f009 fa8f 	bl	dc54 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    4736:	f89d 3005 	ldrb.w	r3, [sp, #5]
    473a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    473e:	3301      	adds	r3, #1
    4740:	f89d 1004 	ldrb.w	r1, [sp, #4]
  year -= 1980;
    4744:	3a50      	subs	r2, #80	; 0x50
    4746:	b2db      	uxtb	r3, r3
    4748:	b292      	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
    474a:	291f      	cmp	r1, #31
    474c:	bf98      	it	ls
    474e:	2b0c      	cmpls	r3, #12
    4750:	d801      	bhi.n	4756 <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    4752:	2a7f      	cmp	r2, #127	; 0x7f
    4754:	d918      	bls.n	4788 <SDClass::dateTime(unsigned short*, unsigned short*)+0x74>
         year << 9 | month << 5 | day;
    4756:	2100      	movs	r1, #0
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    4758:	f89d 2002 	ldrb.w	r2, [sp, #2]
    475c:	f89d 3001 	ldrb.w	r3, [sp, #1]
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    4760:	8029      	strh	r1, [r5, #0]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    4762:	2a17      	cmp	r2, #23
    4764:	bf98      	it	ls
    4766:	2b3b      	cmpls	r3, #59	; 0x3b
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    4768:	f89d 1000 	ldrb.w	r1, [sp]
    476c:	d801      	bhi.n	4772 <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    476e:	293b      	cmp	r1, #59	; 0x3b
    4770:	d903      	bls.n	477a <SDClass::dateTime(unsigned short*, unsigned short*)+0x66>
         hour << 11 | minute << 5 | second >> 1;
    4772:	2300      	movs	r3, #0
    4774:	8023      	strh	r3, [r4, #0]
}
    4776:	b003      	add	sp, #12
    4778:	bd30      	pop	{r4, r5, pc}
    477a:	015b      	lsls	r3, r3, #5
    477c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    4780:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    4784:	b29b      	uxth	r3, r3
    4786:	e7f5      	b.n	4774 <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
         year << 9 | month << 5 | day;
    4788:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    478c:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
    4790:	b289      	uxth	r1, r1
    4792:	e7e1      	b.n	4758 <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
    4794:	12cea5ff 	.word	0x12cea5ff

00004798 <SDClass::open(char const*, unsigned char)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    4798:	2b01      	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    479a:	b5f0      	push	{r4, r5, r6, r7, lr}
    479c:	4605      	mov	r5, r0
    479e:	b095      	sub	sp, #84	; 0x54
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    47a0:	d03d      	beq.n	481e <SDClass::open(char const*, unsigned char)+0x86>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    47a2:	2b02      	cmp	r3, #2
    47a4:	f240 2002 	movw	r0, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    47a8:	f101 0104 	add.w	r1, r1, #4
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    47ac:	bf0c      	ite	eq
    47ae:	4603      	moveq	r3, r0
    47b0:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    47b2:	4668      	mov	r0, sp
    47b4:	f005 f8a8 	bl	9908 <FsVolume::open(char const*, int)>
    47b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    47ba:	2b00      	cmp	r3, #0
    47bc:	d038      	beq.n	4830 <SDClass::open(char const*, unsigned char)+0x98>
		if (file) return File(new SDFile(file));
    47be:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    47c0:	2600      	movs	r6, #0
    47c2:	f009 fe41 	bl	e448 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    47c6:	4b21      	ldr	r3, [pc, #132]	; (484c <SDClass::open(char const*, unsigned char)+0xb4>)
    47c8:	af04      	add	r7, sp, #16
		if (file) return File(new SDFile(file));
    47ca:	4604      	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    47cc:	e9c0 3600 	strd	r3, r6, [r0]
    47d0:	9b01      	ldr	r3, [sp, #4]
    47d2:	4639      	mov	r1, r7
    47d4:	3018      	adds	r0, #24
    47d6:	f840 3c0c 	str.w	r3, [r0, #-12]
    47da:	4b1d      	ldr	r3, [pc, #116]	; (4850 <SDClass::open(char const*, unsigned char)+0xb8>)
    47dc:	f840 3c10 	str.w	r3, [r0, #-16]
    47e0:	9b02      	ldr	r3, [sp, #8]
    47e2:	f840 3c08 	str.w	r3, [r0, #-8]
    47e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    47ea:	f800 3c04 	strb.w	r3, [r0, #-4]
    47ee:	f004 ff2f 	bl	9650 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    47f2:	4b18      	ldr	r3, [pc, #96]	; (4854 <SDClass::open(char const*, unsigned char)+0xbc>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    47f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    47f8:	65a6      	str	r6, [r4, #88]	; 0x58
    47fa:	60a3      	str	r3, [r4, #8]
	File(FileImpl *file) {
    47fc:	4b16      	ldr	r3, [pc, #88]	; (4858 <SDClass::open(char const*, unsigned char)+0xc0>)
	constexpr Print() : write_error(0) {}
    47fe:	606e      	str	r6, [r5, #4]
    4800:	602b      	str	r3, [r5, #0]
		if (f) f->refcount++;
    4802:	6863      	ldr	r3, [r4, #4]
    4804:	732e      	strb	r6, [r5, #12]
    4806:	3301      	adds	r3, #1
    4808:	60aa      	str	r2, [r5, #8]
		f = file;
    480a:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    480c:	6063      	str	r3, [r4, #4]
    480e:	4b13      	ldr	r3, [pc, #76]	; (485c <SDClass::open(char const*, unsigned char)+0xc4>)
  ~FsBaseFile() {close();}
    4810:	4638      	mov	r0, r7
    4812:	9300      	str	r3, [sp, #0]
    4814:	f004 ff5e 	bl	96d4 <FsBaseFile::close()>
		return File();
	}
    4818:	4628      	mov	r0, r5
    481a:	b015      	add	sp, #84	; 0x54
    481c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    481e:	f244 2302 	movw	r3, #16898	; 0x4202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    4822:	3104      	adds	r1, #4
    4824:	4668      	mov	r0, sp
    4826:	f005 f86f 	bl	9908 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    482a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    482c:	2b00      	cmp	r3, #0
    482e:	d1c6      	bne.n	47be <SDClass::open(char const*, unsigned char)+0x26>
    4830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4832:	2b00      	cmp	r3, #0
    4834:	d1c3      	bne.n	47be <SDClass::open(char const*, unsigned char)+0x26>
    4836:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
    483a:	4a07      	ldr	r2, [pc, #28]	; (4858 <SDClass::open(char const*, unsigned char)+0xc0>)
    483c:	af04      	add	r7, sp, #16
    483e:	732b      	strb	r3, [r5, #12]
    4840:	602a      	str	r2, [r5, #0]
    4842:	612b      	str	r3, [r5, #16]
    4844:	e9c5 3101 	strd	r3, r1, [r5, #4]
    4848:	e7e1      	b.n	480e <SDClass::open(char const*, unsigned char)+0x76>
    484a:	bf00      	nop
    484c:	200014b0 	.word	0x200014b0
    4850:	2000150c 	.word	0x2000150c
    4854:	2000148c 	.word	0x2000148c
    4858:	20001460 	.word	0x20001460
    485c:	20001310 	.word	0x20001310

00004860 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    4860:	b510      	push	{r4, lr}
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    4862:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    4866:	b08e      	sub	sp, #56	; 0x38
    4868:	460a      	mov	r2, r1
    486a:	b144      	cbz	r4, 487e <SDClass::rmdir(char const*)+0x1e>
  FatFile() {}
    486c:	2300      	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    486e:	4621      	mov	r1, r4
    4870:	4668      	mov	r0, sp
    4872:	9300      	str	r3, [sp, #0]
    4874:	f002 fe1e 	bl	74b4 <FatFile::open(FatVolume*, char const*, int)>
    4878:	b980      	cbnz	r0, 489c <SDClass::rmdir(char const*)+0x3c>
		return sdfs.rmdir(filepath);
	}
    487a:	b00e      	add	sp, #56	; 0x38
    487c:	bd10      	pop	{r4, pc}
    487e:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rmdir(path) : false;
    4882:	b141      	cbz	r1, 4896 <SDClass::rmdir(char const*)+0x36>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    4884:	4623      	mov	r3, r4
    4886:	4668      	mov	r0, sp
  ExFatFile() {}
    4888:	940c      	str	r4, [sp, #48]	; 0x30
    488a:	f000 ff31 	bl	56f0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    488e:	b950      	cbnz	r0, 48a6 <SDClass::rmdir(char const*)+0x46>
    4890:	2000      	movs	r0, #0
    4892:	b00e      	add	sp, #56	; 0x38
    4894:	bd10      	pop	{r4, pc}
    4896:	4608      	mov	r0, r1
    4898:	b00e      	add	sp, #56	; 0x38
    489a:	bd10      	pop	{r4, pc}
    489c:	4668      	mov	r0, sp
    489e:	f003 f85d 	bl	795c <FatFile::rmdir()>
    48a2:	b00e      	add	sp, #56	; 0x38
    48a4:	bd10      	pop	{r4, pc}
    48a6:	4668      	mov	r0, sp
    48a8:	f000 ffe0 	bl	586c <ExFatFile::rmdir()>
    48ac:	2800      	cmp	r0, #0
    48ae:	d0ef      	beq.n	4890 <SDClass::rmdir(char const*)+0x30>
    48b0:	e7e3      	b.n	487a <SDClass::rmdir(char const*)+0x1a>
    48b2:	bf00      	nop

000048b4 <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    48b4:	b570      	push	{r4, r5, r6, lr}
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    48b6:	f8d0 5484 	ldr.w	r5, [r0, #1156]	; 0x484
    48ba:	b08e      	sub	sp, #56	; 0x38
    48bc:	4616      	mov	r6, r2
    48be:	b15d      	cbz	r5, 48d8 <SDClass::rename(char const*, char const*)+0x24>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    48c0:	f505 6589 	add.w	r5, r5, #1096	; 0x448
    48c4:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    48c6:	460a      	mov	r2, r1
    48c8:	4668      	mov	r0, sp
    48ca:	4629      	mov	r1, r5
    48cc:	9300      	str	r3, [sp, #0]
    48ce:	f002 fd6f 	bl	73b0 <FatFile::open(FatFile*, char const*, int)>
    48d2:	b990      	cbnz	r0, 48fa <SDClass::rename(char const*, char const*)+0x46>
	}
    48d4:	b00e      	add	sp, #56	; 0x38
    48d6:	bd70      	pop	{r4, r5, r6, pc}
    48d8:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    48dc:	2800      	cmp	r0, #0
    48de:	d0f9      	beq.n	48d4 <SDClass::rename(char const*, char const*)+0x20>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    48e0:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    48e4:	460a      	mov	r2, r1
    48e6:	462b      	mov	r3, r5
    48e8:	4668      	mov	r0, sp
    48ea:	4621      	mov	r1, r4
    48ec:	950c      	str	r5, [sp, #48]	; 0x30
    48ee:	f000 fe83 	bl	55f8 <ExFatFile::open(ExFatFile*, char const*, int)>
    48f2:	b948      	cbnz	r0, 4908 <SDClass::rename(char const*, char const*)+0x54>
    48f4:	2000      	movs	r0, #0
    48f6:	b00e      	add	sp, #56	; 0x38
    48f8:	bd70      	pop	{r4, r5, r6, pc}
    48fa:	4632      	mov	r2, r6
    48fc:	4629      	mov	r1, r5
    48fe:	4668      	mov	r0, sp
    4900:	f002 ff36 	bl	7770 <FatFile::rename(FatFile*, char const*)>
    4904:	b00e      	add	sp, #56	; 0x38
    4906:	bd70      	pop	{r4, r5, r6, pc}
    4908:	4632      	mov	r2, r6
    490a:	4621      	mov	r1, r4
    490c:	4668      	mov	r0, sp
    490e:	f001 f901 	bl	5b14 <ExFatFile::rename(ExFatFile*, char const*)>
    4912:	2800      	cmp	r0, #0
    4914:	d0ee      	beq.n	48f4 <SDClass::rename(char const*, char const*)+0x40>
    4916:	e7dd      	b.n	48d4 <SDClass::rename(char const*, char const*)+0x20>

00004918 <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    4918:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->remove(path) :
    491a:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    491e:	b08e      	sub	sp, #56	; 0x38
    4920:	460a      	mov	r2, r1
    4922:	b14c      	cbz	r4, 4938 <SDClass::remove(char const*)+0x20>
    4924:	2000      	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    4926:	2301      	movs	r3, #1
    4928:	4621      	mov	r1, r4
    492a:	9000      	str	r0, [sp, #0]
    492c:	4668      	mov	r0, sp
    492e:	f002 fdc1 	bl	74b4 <FatFile::open(FatVolume*, char const*, int)>
    4932:	b980      	cbnz	r0, 4956 <SDClass::remove(char const*)+0x3e>
	}
    4934:	b00e      	add	sp, #56	; 0x38
    4936:	bd10      	pop	{r4, pc}
    4938:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->remove(path) : false;
    493c:	b141      	cbz	r1, 4950 <SDClass::remove(char const*)+0x38>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    493e:	2301      	movs	r3, #1
    4940:	4668      	mov	r0, sp
    4942:	940c      	str	r4, [sp, #48]	; 0x30
    4944:	f000 fed4 	bl	56f0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4948:	b950      	cbnz	r0, 4960 <SDClass::remove(char const*)+0x48>
    494a:	2000      	movs	r0, #0
    494c:	b00e      	add	sp, #56	; 0x38
    494e:	bd10      	pop	{r4, pc}
    4950:	4608      	mov	r0, r1
    4952:	b00e      	add	sp, #56	; 0x38
    4954:	bd10      	pop	{r4, pc}
    4956:	4668      	mov	r0, sp
    4958:	f003 feb2 	bl	86c0 <FatFile::remove()>
    495c:	b00e      	add	sp, #56	; 0x38
    495e:	bd10      	pop	{r4, pc}
    4960:	4668      	mov	r0, sp
    4962:	f000 ff29 	bl	57b8 <ExFatFile::remove()>
    4966:	2800      	cmp	r0, #0
    4968:	d0ef      	beq.n	494a <SDClass::remove(char const*)+0x32>
    496a:	e7e3      	b.n	4934 <SDClass::remove(char const*)+0x1c>

0000496c <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    496c:	b530      	push	{r4, r5, lr}
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    496e:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    4972:	b08f      	sub	sp, #60	; 0x3c
    4974:	460a      	mov	r2, r1
    4976:	b14c      	cbz	r4, 498c <SDClass::mkdir(char const*)+0x20>
    4978:	2500      	movs	r5, #0
    return sub.mkdir(vwd(), path, pFlag);
    497a:	2301      	movs	r3, #1
    497c:	f504 6189 	add.w	r1, r4, #1096	; 0x448
    4980:	4668      	mov	r0, sp
    4982:	9500      	str	r5, [sp, #0]
    4984:	f002 fc9e 	bl	72c4 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    4988:	b00f      	add	sp, #60	; 0x3c
    498a:	bd30      	pop	{r4, r5, pc}
    498c:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    4990:	2800      	cmp	r0, #0
    4992:	d0f9      	beq.n	4988 <SDClass::mkdir(char const*)+0x1c>
    return sub.mkdir(vwd(), path, pFlag);
    4994:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    4998:	2301      	movs	r3, #1
    499a:	4668      	mov	r0, sp
    499c:	940c      	str	r4, [sp, #48]	; 0x30
    499e:	f001 f93b 	bl	5c18 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    49a2:	b00f      	add	sp, #60	; 0x3c
    49a4:	bd30      	pop	{r4, r5, pc}
    49a6:	bf00      	nop

000049a8 <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    49a8:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->exists(path) :
    49aa:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    49ae:	b08e      	sub	sp, #56	; 0x38
    49b0:	460a      	mov	r2, r1
    49b2:	b13c      	cbz	r4, 49c4 <SDClass::exists(char const*)+0x1c>
    49b4:	2300      	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    49b6:	4621      	mov	r1, r4
    49b8:	4668      	mov	r0, sp
    49ba:	9300      	str	r3, [sp, #0]
    49bc:	f002 fd7a 	bl	74b4 <FatFile::open(FatVolume*, char const*, int)>
	}
    49c0:	b00e      	add	sp, #56	; 0x38
    49c2:	bd10      	pop	{r4, pc}
    49c4:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    49c8:	b131      	cbz	r1, 49d8 <SDClass::exists(char const*)+0x30>
    return tmp.open(this, path, O_RDONLY);
    49ca:	4623      	mov	r3, r4
    49cc:	4668      	mov	r0, sp
    49ce:	940c      	str	r4, [sp, #48]	; 0x30
    49d0:	f000 fe8e 	bl	56f0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    49d4:	b00e      	add	sp, #56	; 0x38
    49d6:	bd10      	pop	{r4, pc}
    49d8:	4608      	mov	r0, r1
    49da:	b00e      	add	sp, #56	; 0x38
    49dc:	bd10      	pop	{r4, pc}
    49de:	bf00      	nop

000049e0 <SDClass::usedSize()>:
	uint64_t usedSize() {
    49e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49e2:	4605      	mov	r5, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    49e4:	f890 04d0 	ldrb.w	r0, [r0, #1232]	; 0x4d0
    49e8:	b908      	cbnz	r0, 49ee <SDClass::usedSize()+0xe>
    49ea:	4601      	mov	r1, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    49ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol ? m_fVol->clusterCount() :
    49ee:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    49f2:	2b00      	cmp	r3, #0
    49f4:	d04c      	beq.n	4a90 <SDClass::usedSize()+0xb0>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    49f6:	69dc      	ldr	r4, [r3, #28]
    49f8:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    49fc:	3c01      	subs	r4, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    49fe:	2800      	cmp	r0, #0
    4a00:	d054      	beq.n	4aac <SDClass::usedSize()+0xcc>
    4a02:	6803      	ldr	r3, [r0, #0]
    4a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a06:	4798      	blx	r3
    4a08:	b1e0      	cbz	r0, 4a44 <SDClass::usedSize()+0x64>
    4a0a:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    4a0e:	b378      	cbz	r0, 4a70 <SDClass::usedSize()+0x90>
    4a10:	6803      	ldr	r3, [r0, #0]
    4a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4a14:	4798      	blx	r3
    4a16:	b9a8      	cbnz	r0, 4a44 <SDClass::usedSize()+0x64>
    4a18:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    4a1c:	b340      	cbz	r0, 4a70 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    4a1e:	6803      	ldr	r3, [r0, #0]
    4a20:	2101      	movs	r1, #1
    4a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4a24:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    4a26:	4607      	mov	r7, r0
    4a28:	b310      	cbz	r0, 4a70 <SDClass::usedSize()+0x90>
    return m_fVol ? m_fVol->freeClusterCount() :
    4a2a:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    4a2e:	bb58      	cbnz	r0, 4a88 <SDClass::usedSize()+0xa8>
    4a30:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
    4a34:	4633      	mov	r3, r6
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4a36:	b96e      	cbnz	r6, 4a54 <SDClass::usedSize()+0x74>
    4a38:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    4a3c:	b990      	cbnz	r0, 4a64 <SDClass::usedSize()+0x84>
  uint32_t bytesPerCluster() const {
    4a3e:	2000      	movs	r0, #0
    4a40:	4601      	mov	r1, r0
    4a42:	e7d3      	b.n	49ec <SDClass::usedSize()+0xc>
    return m_fVol ? m_fVol->freeClusterCount() :
    4a44:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    4a48:	b9e8      	cbnz	r0, 4a86 <SDClass::usedSize()+0xa6>
    4a4a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4a4e:	2b00      	cmp	r3, #0
    4a50:	d0f5      	beq.n	4a3e <SDClass::usedSize()+0x5e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4a52:	4607      	mov	r7, r0
    4a54:	4618      	mov	r0, r3
    4a56:	f002 f9b3 	bl	6dc0 <ExFatPartition::freeClusterCount()>
    4a5a:	4606      	mov	r6, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    4a5c:	b13f      	cbz	r7, 4a6e <SDClass::usedSize()+0x8e>
    4a5e:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    4a62:	b128      	cbz	r0, 4a70 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    4a64:	6803      	ldr	r3, [r0, #0]
    4a66:	2100      	movs	r1, #0
    4a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4a6a:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    4a6c:	b100      	cbz	r0, 4a70 <SDClass::usedSize()+0x90>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    4a6e:	1ba4      	subs	r4, r4, r6
    return m_fVol ? m_fVol->bytesPerCluster() :
    4a70:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    4a74:	b1fb      	cbz	r3, 4ab6 <SDClass::usedSize()+0xd6>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    4a76:	799b      	ldrb	r3, [r3, #6]
    4a78:	f44f 7100 	mov.w	r1, #512	; 0x200
    4a7c:	4099      	lsls	r1, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    4a7e:	b289      	uxth	r1, r1
    4a80:	fba1 0104 	umull	r0, r1, r1, r4
	}
    4a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4a86:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    4a88:	f004 fc6c 	bl	9364 <FatPartition::freeClusterCount()>
    4a8c:	4606      	mov	r6, r0
    4a8e:	e7e5      	b.n	4a5c <SDClass::usedSize()+0x7c>
    4a90:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
  uint32_t clusterCount() const {
    4a94:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
           m_xVol ? m_xVol->clusterCount() : 0;
    4a98:	b1b3      	cbz	r3, 4ac8 <SDClass::usedSize()+0xe8>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    4a9a:	f8d3 4430 	ldr.w	r4, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4a9e:	2800      	cmp	r0, #0
    4aa0:	d1af      	bne.n	4a02 <SDClass::usedSize()+0x22>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4aa2:	4618      	mov	r0, r3
    4aa4:	f002 f98c 	bl	6dc0 <ExFatPartition::freeClusterCount()>
    4aa8:	4606      	mov	r6, r0
    4aaa:	e7e0      	b.n	4a6e <SDClass::usedSize()+0x8e>
    return m_fVol ? m_fVol->freeClusterCount() :
    4aac:	4618      	mov	r0, r3
    4aae:	f004 fc59 	bl	9364 <FatPartition::freeClusterCount()>
    4ab2:	4606      	mov	r6, r0
    4ab4:	e7db      	b.n	4a6e <SDClass::usedSize()+0x8e>
    4ab6:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    4aba:	2e00      	cmp	r6, #0
    4abc:	d0bf      	beq.n	4a3e <SDClass::usedSize()+0x5e>
		  * (uint64_t)sdfs.bytesPerCluster();
    4abe:	f8d6 143c 	ldr.w	r1, [r6, #1084]	; 0x43c
    4ac2:	fba1 0104 	umull	r0, r1, r1, r4
	}
    4ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ac8:	2800      	cmp	r0, #0
    4aca:	d0b8      	beq.n	4a3e <SDClass::usedSize()+0x5e>
           m_xVol ? m_xVol->clusterCount() : 0;
    4acc:	461c      	mov	r4, r3
    4ace:	e798      	b.n	4a02 <SDClass::usedSize()+0x22>

00004ad0 <SDClass::totalSize()>:
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    4ad0:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    4ad4:	b163      	cbz	r3, 4af0 <SDClass::totalSize()+0x20>
    return m_fVol ? m_fVol->clusterCount() :
    4ad6:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    4ada:	b163      	cbz	r3, 4af6 <SDClass::totalSize()+0x26>
    4adc:	799a      	ldrb	r2, [r3, #6]
    4ade:	f44f 7000 	mov.w	r0, #512	; 0x200
    return m_lastCluster - 1;
    4ae2:	69d9      	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    4ae4:	4090      	lsls	r0, r2
    return m_lastCluster - 1;
    4ae6:	3901      	subs	r1, #1
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    4ae8:	b280      	uxth	r0, r0
    4aea:	fba0 0101 	umull	r0, r1, r0, r1
    4aee:	4770      	bx	lr
		if (!cardPreviouslyPresent) return (uint64_t)0;
    4af0:	4618      	mov	r0, r3
    4af2:	4601      	mov	r1, r0
	}
    4af4:	4770      	bx	lr
    4af6:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->clusterCount() : 0;
    4afa:	2800      	cmp	r0, #0
    4afc:	d0f9      	beq.n	4af2 <SDClass::totalSize()+0x22>
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    4afe:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    4b02:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
    4b06:	fba1 0100 	umull	r0, r1, r1, r0
    4b0a:	4770      	bx	lr

00004b0c <SDClass::format(int, char, Print&)>:
#endif

bool SDClass::format(int type, char progressChar, Print& pr)
{
    4b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SdCard* card() {return m_card;}
    4b10:	f8d0 5490 	ldr.w	r5, [r0, #1168]	; 0x490
    4b14:	b08d      	sub	sp, #52	; 0x34
	SdCard *card = sdfs.card();
	if (!card) return false; // no SD card
    4b16:	b14d      	cbz	r5, 4b2c <SDClass::format(int, char, Print&)+0x20>
    4b18:	4698      	mov	r8, r3
	uint32_t sectors = card->sectorCount();
    4b1a:	682b      	ldr	r3, [r5, #0]
    4b1c:	4604      	mov	r4, r0
    4b1e:	4628      	mov	r0, r5
    4b20:	69db      	ldr	r3, [r3, #28]
    4b22:	4798      	blx	r3
	if (sectors <= 12288) return false; // card too small
    4b24:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    4b28:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    4b2a:	d804      	bhi.n	4b36 <SDClass::format(int, char, Print&)+0x2a>
	if (!card) return false; // no SD card
    4b2c:	2600      	movs	r6, #0
		// TODO: Is begin() really necessary?  Is a quicker way possible?
		card->syncDevice();
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
	}
	return ret;
}
    4b2e:	4630      	mov	r0, r6
    4b30:	b00d      	add	sp, #52	; 0x34
    4b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    4b36:	f44f 7000 	mov.w	r0, #512	; 0x200
    4b3a:	f00b fa03 	bl	ff44 <malloc>
	if (!buf) return false; // unable to allocate memory
    4b3e:	4607      	mov	r7, r0
    4b40:	2800      	cmp	r0, #0
    4b42:	d0f3      	beq.n	4b2c <SDClass::format(int, char, Print&)+0x20>
		ret = exFatFormatter.format(card, buf, &pr);
    4b44:	f10d 0904 	add.w	r9, sp, #4
	if (sectors > 67108864) {
    4b48:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    4b4c:	4602      	mov	r2, r0
    4b4e:	4643      	mov	r3, r8
    4b50:	4629      	mov	r1, r5
    4b52:	4648      	mov	r0, r9
	if (sectors > 67108864) {
    4b54:	d92e      	bls.n	4bb4 <SDClass::format(int, char, Print&)+0xa8>
		ret = exFatFormatter.format(card, buf, &pr);
    4b56:	f001 fbff 	bl	6358 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    4b5a:	4606      	mov	r6, r0
	free(buf);
    4b5c:	4638      	mov	r0, r7
    4b5e:	f00b f9f9 	bl	ff54 <free>
	if (ret) {
    4b62:	2e00      	cmp	r6, #0
    4b64:	d0e2      	beq.n	4b2c <SDClass::format(int, char, Print&)+0x20>
		card->syncDevice();
    4b66:	682b      	ldr	r3, [r5, #0]
    4b68:	4628      	mov	r0, r5
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    4b6a:	1d27      	adds	r7, r4, #4
		card->syncDevice();
    4b6c:	6a1b      	ldr	r3, [r3, #32]
    4b6e:	4798      	blx	r3
    if (spiConfigBackupPin == 255) {
    4b70:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
    4b74:	2bff      	cmp	r3, #255	; 0xff
    4b76:	d021      	beq.n	4bbc <SDClass::format(int, char, Print&)+0xb0>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    4b78:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    4b7c:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    4b80:	9302      	str	r3, [sp, #8]
    4b82:	4628      	mov	r0, r5
    4b84:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    4b88:	9303      	str	r3, [sp, #12]
    4b8a:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    4b8e:	f8ad 3004 	strh.w	r3, [sp, #4]
    4b92:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
    4b96:	f005 fd7d 	bl	a694 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    4b9a:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    4b9e:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d1c3      	bne.n	4b2e <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    4ba6:	2301      	movs	r3, #1
    4ba8:	4629      	mov	r1, r5
    4baa:	4638      	mov	r0, r7
    4bac:	461a      	mov	r2, r3
    4bae:	f004 fe39 	bl	9824 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    4bb2:	e7bc      	b.n	4b2e <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    4bb4:	f004 f89c 	bl	8cf0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    4bb8:	4606      	mov	r6, r0
    4bba:	e7cf      	b.n	4b5c <SDClass::format(int, char, Print&)+0x50>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    4bbc:	f204 4594 	addw	r5, r4, #1172	; 0x494
    4bc0:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    4bc4:	4628      	mov	r0, r5
    4bc6:	f006 fbad 	bl	b324 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    4bca:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    4bcc:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    4bd0:	f005 fe0a 	bl	a7e8 <SdioCard::errorCode() const>
    4bd4:	2800      	cmp	r0, #0
    4bd6:	d1aa      	bne.n	4b2e <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    4bd8:	2301      	movs	r3, #1
    4bda:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    4bde:	4638      	mov	r0, r7
    4be0:	461a      	mov	r2, r3
    4be2:	f004 fe1f 	bl	9824 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    4be6:	e7a2      	b.n	4b2e <SDClass::format(int, char, Print&)+0x22>

00004be8 <SDClass::mediaPresent()>:
	}
	return false;
}

bool SDClass::mediaPresent()
{
    4be8:	b5f0      	push	{r4, r5, r6, r7, lr}
  SdCard* card() {return m_card;}
    4bea:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
    4bee:	b085      	sub	sp, #20
    4bf0:	4604      	mov	r4, r0
	//Serial.print("mediaPresent: ");
	bool ret;
	SdCard *card = sdfs.card();
//	Serial.printf("mediaPresent: card:%x cs:%u cd:%u\n", (uint32_t)card, csPin_, cdPin_);
	if (card) {
    4bf2:	2e00      	cmp	r6, #0
    4bf4:	d042      	beq.n	4c7c <SDClass::mediaPresent()+0x94>
		if (cardPreviouslyPresent) {
    4bf6:	f890 54d0 	ldrb.w	r5, [r0, #1232]	; 0x4d0
			#ifdef BUILTIN_SDCARD
			uint32_t s;
			if (csPin_ == BUILTIN_SDCARD) {
    4bfa:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
		if (cardPreviouslyPresent) {
    4bfe:	b185      	cbz	r5, 4c22 <SDClass::mediaPresent()+0x3a>
			if (csPin_ == BUILTIN_SDCARD) {
    4c00:	2bfe      	cmp	r3, #254	; 0xfe
    4c02:	d063      	beq.n	4ccc <SDClass::mediaPresent()+0xe4>
			#else
			const uint32_t s = 0xFFFFFFFF;
			#endif
			if (s == 0xFFFFFFFF) {
				// see if we have digital pin to bypass...
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    4c04:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    4c08:	2827      	cmp	r0, #39	; 0x27
    4c0a:	d93d      	bls.n	4c88 <SDClass::mediaPresent()+0xa0>
				else {
					// SPI doesn't have 32 bit status, read CID register
					cid_t cid;
					ret = card->readCID(&cid);
    4c0c:	6833      	ldr	r3, [r6, #0]
    4c0e:	4669      	mov	r1, sp
    4c10:	4630      	mov	r0, r6
    4c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4c14:	4798      	blx	r3
    4c16:	4605      	mov	r5, r0
		ret = false;
	}
	//Serial.println();
	cardPreviouslyPresent = ret;
	return ret;
}
    4c18:	4628      	mov	r0, r5
	cardPreviouslyPresent = ret;
    4c1a:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    4c1e:	b005      	add	sp, #20
    4c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    4c22:	2bfe      	cmp	r3, #254	; 0xfe
    4c24:	d026      	beq.n	4c74 <SDClass::mediaPresent()+0x8c>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    4c26:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    4c2a:	2827      	cmp	r0, #39	; 0x27
    4c2c:	d949      	bls.n	4cc2 <SDClass::mediaPresent()+0xda>
    if (spiConfigBackupPin == 255) {
    4c2e:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
				ret = sdfs.restart();
    4c32:	1d27      	adds	r7, r4, #4
    4c34:	2bff      	cmp	r3, #255	; 0xff
    4c36:	d02d      	beq.n	4c94 <SDClass::mediaPresent()+0xac>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    4c38:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    m_spiCard.begin(config);
    4c3c:	f504 6694 	add.w	r6, r4, #1184	; 0x4a0
    4c40:	f8d4 24c8 	ldr.w	r2, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    4c44:	9301      	str	r3, [sp, #4]
    4c46:	4630      	mov	r0, r6
    4c48:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    4c4c:	9202      	str	r2, [sp, #8]
    4c4e:	f8ad 3000 	strh.w	r3, [sp]
    4c52:	466b      	mov	r3, sp
    4c54:	cb0e      	ldmia	r3, {r1, r2, r3}
    4c56:	f005 fd1d 	bl	a694 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    4c5a:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    4c5e:	f8c4 6490 	str.w	r6, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    4c62:	b963      	cbnz	r3, 4c7e <SDClass::mediaPresent()+0x96>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    4c64:	2301      	movs	r3, #1
    4c66:	4631      	mov	r1, r6
    4c68:	4638      	mov	r0, r7
    4c6a:	461a      	mov	r2, r3
    4c6c:	f004 fdda 	bl	9824 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    4c70:	4605      	mov	r5, r0
    4c72:	e004      	b.n	4c7e <SDClass::mediaPresent()+0x96>
			return (CORE_PIN38_PINREG & CORE_PIN38_BITMASK) ? 1 : 0;
    4c74:	4b1f      	ldr	r3, [pc, #124]	; (4cf4 <SDClass::mediaPresent()+0x10c>)
    4c76:	689b      	ldr	r3, [r3, #8]
			if (ret)
    4c78:	039b      	lsls	r3, r3, #14
    4c7a:	d4d8      	bmi.n	4c2e <SDClass::mediaPresent()+0x46>
		ret = false;
    4c7c:	2500      	movs	r5, #0
}
    4c7e:	4628      	mov	r0, r5
	cardPreviouslyPresent = ret;
    4c80:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    4c84:	b005      	add	sp, #20
    4c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    4c88:	f009 faf2 	bl	e270 <digitalRead>
    4c8c:	1e05      	subs	r5, r0, #0
    4c8e:	bf18      	it	ne
    4c90:	2501      	movne	r5, #1
    4c92:	e7f4      	b.n	4c7e <SDClass::mediaPresent()+0x96>
    m_sdioCard.begin(config);
    4c94:	f204 4694 	addw	r6, r4, #1172	; 0x494
    4c98:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    4c9c:	4630      	mov	r0, r6
    4c9e:	f006 fb41 	bl	b324 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    4ca2:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    4ca4:	f8c4 6490 	str.w	r6, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    4ca8:	f005 fd9e 	bl	a7e8 <SdioCard::errorCode() const>
    4cac:	2800      	cmp	r0, #0
    4cae:	d1e6      	bne.n	4c7e <SDClass::mediaPresent()+0x96>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    4cb0:	2301      	movs	r3, #1
    4cb2:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    4cb6:	4638      	mov	r0, r7
    4cb8:	461a      	mov	r2, r3
    4cba:	f004 fdb3 	bl	9824 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    4cbe:	4605      	mov	r5, r0
    4cc0:	e7dd      	b.n	4c7e <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    4cc2:	f009 fad5 	bl	e270 <digitalRead>
			if (ret)
    4cc6:	2800      	cmp	r0, #0
    4cc8:	d1b1      	bne.n	4c2e <SDClass::mediaPresent()+0x46>
    4cca:	e7d7      	b.n	4c7c <SDClass::mediaPresent()+0x94>
				s = card->status();
    4ccc:	6833      	ldr	r3, [r6, #0]
    4cce:	4630      	mov	r0, r6
    4cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    4cd2:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    4cd4:	1c42      	adds	r2, r0, #1
				s = card->status();
    4cd6:	4603      	mov	r3, r0
			if (s == 0xFFFFFFFF) {
    4cd8:	d094      	beq.n	4c04 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    4cda:	2800      	cmp	r0, #0
    4cdc:	d1cf      	bne.n	4c7e <SDClass::mediaPresent()+0x96>
				if (csPin_ == BUILTIN_SDCARD) 
    4cde:	f894 24d1 	ldrb.w	r2, [r4, #1233]	; 0x4d1
    4ce2:	2afe      	cmp	r2, #254	; 0xfe
    4ce4:	d1ca      	bne.n	4c7c <SDClass::mediaPresent()+0x94>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    4ce6:	2103      	movs	r1, #3
    4ce8:	2026      	movs	r0, #38	; 0x26
				ret = false;
    4cea:	461d      	mov	r5, r3
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    4cec:	f009 fad2 	bl	e294 <pinMode>
    4cf0:	e7c5      	b.n	4c7e <SDClass::mediaPresent()+0x96>
    4cf2:	bf00      	nop
    4cf4:	42008000 	.word	0x42008000

00004cf8 <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    4cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cfa:	460d      	mov	r5, r1
    4cfc:	4604      	mov	r4, r0
    4cfe:	b085      	sub	sp, #20
	FsDateTime::setCallback(dateTime);
    4d00:	4830      	ldr	r0, [pc, #192]	; (4dc4 <SDClass::begin(unsigned char)+0xcc>)
    4d02:	f006 ffc7 	bl	bc94 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	if (csPin == BUILTIN_SDCARD) {
    4d06:	2dfe      	cmp	r5, #254	; 0xfe
	csPin_ = csPin; // remember which one passed in. 
    4d08:	f884 54d1 	strb.w	r5, [r4, #1233]	; 0x4d1
	if (csPin == BUILTIN_SDCARD) {
    4d0c:	d026      	beq.n	4d5c <SDClass::begin(unsigned char)+0x64>
	if (csPin < NUM_DIGITAL_PINS) {
    4d0e:	2d27      	cmp	r5, #39	; 0x27
    4d10:	d902      	bls.n	4d18 <SDClass::begin(unsigned char)+0x20>
	return false;
    4d12:	2000      	movs	r0, #0
}
    4d14:	b005      	add	sp, #20
    4d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    spiConfigBackupOptions = spiConfig.options;
    4d18:	2600      	movs	r6, #0
    spiConfigBackupClock = spiConfig.maxSck;
    4d1a:	4b2b      	ldr	r3, [pc, #172]	; (4dc8 <SDClass::begin(unsigned char)+0xd0>)
    m_spiCard.begin(config);
    4d1c:	f504 6794 	add.w	r7, r4, #1184	; 0x4a0
    4d20:	f88d 5004 	strb.w	r5, [sp, #4]
    4d24:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    4d28:	f88d 6005 	strb.w	r6, [sp, #5]
    4d2c:	4638      	mov	r0, r7
    spiConfigBackupPin = spiConfig.csPin;
    4d2e:	f884 54c0 	strb.w	r5, [r4, #1216]	; 0x4c0
    spiConfigBackupOptions = spiConfig.options;
    4d32:	f884 64c1 	strb.w	r6, [r4, #1217]	; 0x4c1
    spiConfigBackupPort = spiConfig.spiPort;
    4d36:	f8c4 64c8 	str.w	r6, [r4, #1224]	; 0x4c8
    4d3a:	e9cd 3602 	strd	r3, r6, [sp, #8]
    4d3e:	ab04      	add	r3, sp, #16
    4d40:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    4d44:	f005 fca6 	bl	a694 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    4d48:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    4d4c:	f8c4 7490 	str.w	r7, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    4d50:	b383      	cbz	r3, 4db4 <SDClass::begin(unsigned char)+0xbc>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    4d52:	4630      	mov	r0, r6
		cardPreviouslyPresent = ret;
    4d54:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
}
    4d58:	b005      	add	sp, #20
    4d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_sdioCard.begin(config);
    4d5c:	f204 4594 	addw	r5, r4, #1172	; 0x494
    sdioConfigBackup = sdioConfig;
    4d60:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
    4d62:	22ff      	movs	r2, #255	; 0xff
    4d64:	4619      	mov	r1, r3
    4d66:	4628      	mov	r0, r5
    sdioConfigBackup = sdioConfig;
    4d68:	f884 34cc 	strb.w	r3, [r4, #1228]	; 0x4cc
    spiConfigBackupPin = 255;
    4d6c:	f884 24c0 	strb.w	r2, [r4, #1216]	; 0x4c0
    4d70:	f006 fad8 	bl	b324 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    4d74:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    4d76:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    4d7a:	f005 fd35 	bl	a7e8 <SdioCard::errorCode() const>
    4d7e:	b970      	cbnz	r0, 4d9e <SDClass::begin(unsigned char)+0xa6>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    4d80:	2301      	movs	r3, #1
    4d82:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    4d86:	1d20      	adds	r0, r4, #4
    4d88:	461a      	mov	r2, r3
    4d8a:	f004 fd4b 	bl	9824 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    4d8e:	b130      	cbz	r0, 4d9e <SDClass::begin(unsigned char)+0xa6>
		cardPreviouslyPresent = ret;
    4d90:	2201      	movs	r2, #1
		cdPin_ = _SD_DAT3;
    4d92:	2326      	movs	r3, #38	; 0x26
		cardPreviouslyPresent = ret;
    4d94:	f884 24d0 	strb.w	r2, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    4d98:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    4d9c:	e7ba      	b.n	4d14 <SDClass::begin(unsigned char)+0x1c>
		cdPin_ = _SD_DAT3;
    4d9e:	2026      	movs	r0, #38	; 0x26
		cardPreviouslyPresent = ret;
    4da0:	2500      	movs	r5, #0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    4da2:	2103      	movs	r1, #3
		cdPin_ = _SD_DAT3;
    4da4:	f884 04d2 	strb.w	r0, [r4, #1234]	; 0x4d2
		cardPreviouslyPresent = ret;
    4da8:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    4dac:	f009 fa72 	bl	e294 <pinMode>
    4db0:	4628      	mov	r0, r5
    4db2:	e7af      	b.n	4d14 <SDClass::begin(unsigned char)+0x1c>
    4db4:	2301      	movs	r3, #1
    4db6:	4639      	mov	r1, r7
    4db8:	1d20      	adds	r0, r4, #4
    4dba:	461a      	mov	r2, r3
    4dbc:	f004 fd32 	bl	9824 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    4dc0:	e7c8      	b.n	4d54 <SDClass::begin(unsigned char)+0x5c>
    4dc2:	bf00      	nop
    4dc4:	00004715 	.word	0x00004715
    4dc8:	017d7840 	.word	0x017d7840

00004dcc <_GLOBAL__sub_I_SD>:
	SDClass() { }
    4dcc:	4818      	ldr	r0, [pc, #96]	; (4e30 <_GLOBAL__sub_I_SD+0x64>)
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    4dce:	f04f 0c29 	mov.w	ip, #41	; 0x29
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    4dd2:	4a18      	ldr	r2, [pc, #96]	; (4e34 <_GLOBAL__sub_I_SD+0x68>)
  FsVolume() {}
    4dd4:	2300      	movs	r3, #0
	SPISettings() : _clock(4000000) {
    4dd6:	4918      	ldr	r1, [pc, #96]	; (4e38 <_GLOBAL__sub_I_SD+0x6c>)
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
    4dd8:	b410      	push	{r4}
    4dda:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    4dde:	2207      	movs	r2, #7
    4de0:	f880 c4b1 	strb.w	ip, [r0, #1201]	; 0x4b1
    4de4:	f04f 0cff 	mov.w	ip, #255	; 0xff
	SPISettings() : _clock(4000000) {
    4de8:	f8c0 14a8 	str.w	r1, [r0, #1192]	; 0x4a8
    4dec:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    4df0:	4c12      	ldr	r4, [pc, #72]	; (4e3c <_GLOBAL__sub_I_SD+0x70>)
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    4df2:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    4df6:	4a12      	ldr	r2, [pc, #72]	; (4e40 <_GLOBAL__sub_I_SD+0x74>)
    4df8:	f8a0 14d0 	strh.w	r1, [r0, #1232]	; 0x4d0
  SdioConfig() {}
    4dfc:	f8a0 349c 	strh.w	r3, [r0, #1180]	; 0x49c
  SharedSpiCard() {}
    4e00:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
    4e04:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    4e08:	f880 c4d2 	strb.w	ip, [r0, #1234]	; 0x4d2
    4e0c:	6004      	str	r4, [r0, #0]
  DedicatedSpiCard() {}
    4e0e:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
SDClass SD;
    4e12:	490c      	ldr	r1, [pc, #48]	; (4e44 <_GLOBAL__sub_I_SD+0x78>)
    4e14:	4a0c      	ldr	r2, [pc, #48]	; (4e48 <_GLOBAL__sub_I_SD+0x7c>)
}
    4e16:	f85d 4b04 	ldr.w	r4, [sp], #4
    4e1a:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    4e1e:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    4e22:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
    4e26:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
SDClass SD;
    4e2a:	f00a bec1 	b.w	fbb0 <__aeabi_atexit>
    4e2e:	bf00      	nop
    4e30:	20003d2c 	.word	0x20003d2c
    4e34:	20001584 	.word	0x20001584
    4e38:	003d0900 	.word	0x003d0900
    4e3c:	20001530 	.word	0x20001530
    4e40:	2000137c 	.word	0x2000137c
    4e44:	00004711 	.word	0x00004711
    4e48:	20002f18 	.word	0x20002f18

00004e4c <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    4e4c:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    4e4e:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    4e52:	b084      	sub	sp, #16
    4e54:	468c      	mov	ip, r1
    4e56:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    4e58:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    4e5a:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    4e5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    4e60:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    4e64:	ea4f 124c 	mov.w	r2, ip, lsl #5
    4e68:	4629      	mov	r1, r5
    4e6a:	6a20      	ldr	r0, [r4, #32]
    4e6c:	f001 fec4 	bl	6bf8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4e70:	2801      	cmp	r0, #1
    4e72:	d106      	bne.n	4e82 <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    4e74:	4632      	mov	r2, r6
    4e76:	4629      	mov	r1, r5
    4e78:	6a20      	ldr	r0, [r4, #32]
    4e7a:	f001 fea1 	bl	6bc0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    4e7e:	b004      	add	sp, #16
    4e80:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    4e82:	2000      	movs	r0, #0
}
    4e84:	b004      	add	sp, #16
    4e86:	bd70      	pop	{r4, r5, r6, pc}

00004e88 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    4e88:	b510      	push	{r4, lr}
    4e8a:	4604      	mov	r4, r0
  bool rtn = sync();
    4e8c:	f000 fdba 	bl	5a04 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    4e90:	2300      	movs	r3, #0
    4e92:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    4e96:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    4e9a:	bd10      	pop	{r4, pc}

00004e9c <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    4e9c:	b538      	push	{r3, r4, r5, lr}
    4e9e:	4614      	mov	r4, r2
    4ea0:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    4ea2:	2200      	movs	r2, #0
    4ea4:	f100 0124 	add.w	r1, r0, #36	; 0x24
    4ea8:	6a00      	ldr	r0, [r0, #32]
    4eaa:	f001 fe89 	bl	6bc0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4eae:	4603      	mov	r3, r0
    4eb0:	b120      	cbz	r0, 4ebc <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4eb2:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
  return true;
    4eb4:	2001      	movs	r0, #1
  *pdate = getLe16(df->createDate);
    4eb6:	802a      	strh	r2, [r5, #0]
    4eb8:	891b      	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    4eba:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    4ebc:	bd38      	pop	{r3, r4, r5, pc}
    4ebe:	bf00      	nop

00004ec0 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    4ec0:	b538      	push	{r3, r4, r5, lr}
    4ec2:	4614      	mov	r4, r2
    4ec4:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    4ec6:	2200      	movs	r2, #0
    4ec8:	f100 0124 	add.w	r1, r0, #36	; 0x24
    4ecc:	6a00      	ldr	r0, [r0, #32]
    4ece:	f001 fe77 	bl	6bc0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4ed2:	4603      	mov	r3, r0
    4ed4:	b120      	cbz	r0, 4ee0 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    4ed6:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
  return true;
    4ed8:	2001      	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    4eda:	802a      	strh	r2, [r5, #0]
    4edc:	899b      	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    4ede:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    4ee0:	bd38      	pop	{r3, r4, r5, pc}
    4ee2:	bf00      	nop

00004ee4 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    4ee4:	b538      	push	{r3, r4, r5, lr}
    4ee6:	460d      	mov	r5, r1
  if (isOpen()) {
    4ee8:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    4eec:	b109      	cbz	r1, 4ef2 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    4eee:	2000      	movs	r0, #0
}
    4ef0:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    4ef2:	2238      	movs	r2, #56	; 0x38
    4ef4:	4604      	mov	r4, r0
    4ef6:	f00c ff79 	bl	11dec <memset>
  m_flags = FILE_FLAG_READ;
    4efa:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    4efc:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    4efe:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    4f00:	4618      	mov	r0, r3
    4f02:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    4f06:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    4f0a:	bd38      	pop	{r3, r4, r5, pc}

00004f0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    4f0c:	b4f0      	push	{r4, r5, r6, r7}
    4f0e:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    4f10:	7809      	ldrb	r1, [r1, #0]
    4f12:	2920      	cmp	r1, #32
    4f14:	d103      	bne.n	4f1e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    4f16:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    4f1a:	2c20      	cmp	r4, #32
    4f1c:	d0fb      	beq.n	4f16 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    4f1e:	6015      	str	r5, [r2, #0]
  fname->end = path;
    4f20:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    4f22:	782c      	ldrb	r4, [r5, #0]
    4f24:	2c2f      	cmp	r4, #47	; 0x2f
    4f26:	d011      	beq.n	4f4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    4f28:	b184      	cbz	r4, 4f4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    4f2a:	1c6e      	adds	r6, r5, #1
    4f2c:	2c3c      	cmp	r4, #60	; 0x3c
    4f2e:	4f1d      	ldr	r7, [pc, #116]	; (4fa4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    4f30:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    4f32:	d82a      	bhi.n	4f8a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    4f34:	2c21      	cmp	r4, #33	; 0x21
    4f36:	d812      	bhi.n	4f5e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    4f38:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    4f3c:	f1bc 0f1e 	cmp.w	ip, #30
    4f40:	d816      	bhi.n	4f70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    4f42:	2000      	movs	r0, #0
    4f44:	bcf0      	pop	{r4, r5, r6, r7}
    4f46:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    4f48:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    4f4c:	2c20      	cmp	r4, #32
    4f4e:	d0fb      	beq.n	4f48 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    4f50:	2c2f      	cmp	r4, #47	; 0x2f
    4f52:	d0f9      	beq.n	4f48 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    4f54:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    4f56:	4611      	mov	r1, r2
}
    4f58:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    4f5a:	f001 bd1f 	b.w	699c <ExFatFile::hashName(ExName_t*)>
    4f5e:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    4f62:	fa5f fc8c 	uxtb.w	ip, ip
    4f66:	fa27 fc0c 	lsr.w	ip, r7, ip
    4f6a:	f01c 0f01 	tst.w	ip, #1
    4f6e:	d1e8      	bne.n	4f42 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    4f70:	2c2e      	cmp	r4, #46	; 0x2e
    4f72:	d001      	beq.n	4f78 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    4f74:	2c20      	cmp	r4, #32
    4f76:	d10d      	bne.n	4f94 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    4f78:	f816 4b01 	ldrb.w	r4, [r6], #1
    4f7c:	2c00      	cmp	r4, #0
    4f7e:	d0e5      	beq.n	4f4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    4f80:	2c2f      	cmp	r4, #47	; 0x2f
    4f82:	d0e3      	beq.n	4f4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    4f84:	2c3c      	cmp	r4, #60	; 0x3c
    4f86:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    4f88:	d9d4      	bls.n	4f34 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    4f8a:	2c5c      	cmp	r4, #92	; 0x5c
    4f8c:	d0d9      	beq.n	4f42 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    4f8e:	d903      	bls.n	4f98 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    4f90:	2c7c      	cmp	r4, #124	; 0x7c
    4f92:	d0d6      	beq.n	4f42 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    4f94:	6096      	str	r6, [r2, #8]
    4f96:	e7ef      	b.n	4f78 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    4f98:	3c3e      	subs	r4, #62	; 0x3e
    4f9a:	2c01      	cmp	r4, #1
    4f9c:	d8fa      	bhi.n	4f94 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    4f9e:	2000      	movs	r0, #0
    4fa0:	bcf0      	pop	{r4, r5, r6, r7}
    4fa2:	4770      	bx	lr
    4fa4:	05002101 	.word	0x05002101

00004fa8 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    4fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    4fac:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    4fb0:	b083      	sub	sp, #12
    4fb2:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    4fb4:	07dc      	lsls	r4, r3, #31
    4fb6:	d574      	bpl.n	50a2 <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    4fb8:	0658      	lsls	r0, r3, #25
    4fba:	460f      	mov	r7, r1
    4fbc:	4690      	mov	r8, r2
    4fbe:	f140 80b0 	bpl.w	5122 <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    4fc2:	e9d5 2300 	ldrd	r2, r3, [r5]
    4fc6:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    4fca:	eb18 0402 	adds.w	r4, r8, r2
    4fce:	f143 0300 	adc.w	r3, r3, #0
    4fd2:	42a1      	cmp	r1, r4
    4fd4:	eb70 0303 	sbcs.w	r3, r0, r3
    4fd8:	f0c0 80a9 	bcc.w	512e <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    4fdc:	f1b8 0f00 	cmp.w	r8, #0
    4fe0:	d05b      	beq.n	509a <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    4fe2:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4fe4:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    4fe8:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4fec:	f8d5 a020 	ldr.w	sl, [r5, #32]
    4ff0:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    4ff4:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4ff6:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    4ffa:	2c00      	cmp	r4, #0
    4ffc:	d170      	bne.n	50e0 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    4ffe:	4313      	orrs	r3, r2
    5000:	d170      	bne.n	50e4 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5002:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    5006:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5008:	bf4c      	ite	mi
    500a:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    500e:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    5010:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5012:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    5016:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    5018:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    501c:	0a63      	lsrs	r3, r4, #9
    501e:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    5020:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    5024:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5026:	f1bb 0f00 	cmp.w	fp, #0
    502a:	d145      	bne.n	50b8 <ExFatFile::read(void*, unsigned int)+0x110>
    502c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    5030:	d342      	bcc.n	50b8 <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    5032:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5036:	4291      	cmp	r1, r2
    5038:	d03e      	beq.n	50b8 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    503a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    503e:	d358      	bcc.n	50f2 <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5040:	f04f 0b01 	mov.w	fp, #1
    5044:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5048:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    504c:	0a73      	lsrs	r3, r6, #9
    504e:	459b      	cmp	fp, r3
    5050:	bf28      	it	cs
    5052:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    5054:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    5056:	ea4f 244b 	mov.w	r4, fp, lsl #9
    505a:	d80a      	bhi.n	5072 <ExFatFile::read(void*, unsigned int)+0xca>
    505c:	eb01 030b 	add.w	r3, r1, fp
    5060:	429a      	cmp	r2, r3
    5062:	d206      	bcs.n	5072 <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    5064:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    5068:	9101      	str	r1, [sp, #4]
    506a:	f006 fdb5 	bl	bbd8 <FsCache::sync()>
    506e:	9901      	ldr	r1, [sp, #4]
    5070:	b1b8      	cbz	r0, 50a2 <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    5072:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    5076:	465b      	mov	r3, fp
    5078:	6802      	ldr	r2, [r0, #0]
    507a:	f8d2 a014 	ldr.w	sl, [r2, #20]
    507e:	463a      	mov	r2, r7
    5080:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5082:	b170      	cbz	r0, 50a2 <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5084:	4623      	mov	r3, r4
    dst += n;
    5086:	4427      	add	r7, r4
    m_curPosition += n;
    5088:	e9d5 1200 	ldrd	r1, r2, [r5]
    508c:	185b      	adds	r3, r3, r1
    508e:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    5092:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    5094:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    5098:	d1a8      	bne.n	4fec <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    509a:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    509c:	b003      	add	sp, #12
    509e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    50a2:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    50a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
    50aa:	f043 0302 	orr.w	r3, r3, #2
    50ae:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    50b2:	b003      	add	sp, #12
    50b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    50b8:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    50bc:	2200      	movs	r2, #0
    50be:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    50c2:	42b4      	cmp	r4, r6
    50c4:	bf28      	it	cs
    50c6:	4634      	movcs	r4, r6
    50c8:	f006 fdb2 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    50cc:	2800      	cmp	r0, #0
    50ce:	d0e8      	beq.n	50a2 <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    50d0:	eb00 010b 	add.w	r1, r0, fp
    50d4:	4622      	mov	r2, r4
    50d6:	4638      	mov	r0, r7
    50d8:	f009 f91c 	bl	e314 <memcpy>
    m_curPosition += n;
    50dc:	4623      	mov	r3, r4
    50de:	e7d2      	b.n	5086 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    50e0:	69aa      	ldr	r2, [r5, #24]
    50e2:	e796      	b.n	5012 <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    50e4:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    50e8:	065b      	lsls	r3, r3, #25
    50ea:	d50e      	bpl.n	510a <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    50ec:	69aa      	ldr	r2, [r5, #24]
    50ee:	3201      	adds	r2, #1
    50f0:	e78e      	b.n	5010 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    50f2:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    50f6:	463a      	mov	r2, r7
    50f8:	6803      	ldr	r3, [r0, #0]
    50fa:	691b      	ldr	r3, [r3, #16]
    50fc:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    50fe:	2800      	cmp	r0, #0
    5100:	d0cf      	beq.n	50a2 <ExFatFile::read(void*, unsigned int)+0xfa>
    5102:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    5106:	461c      	mov	r4, r3
    5108:	e7bd      	b.n	5086 <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    510a:	464a      	mov	r2, r9
    510c:	4650      	mov	r0, sl
    510e:	69a9      	ldr	r1, [r5, #24]
    5110:	f001 fdb4 	bl	6c7c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    5114:	2800      	cmp	r0, #0
    5116:	dbc4      	blt.n	50a2 <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    5118:	d00c      	beq.n	5134 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    511a:	f8d5 a020 	ldr.w	sl, [r5, #32]
    511e:	69aa      	ldr	r2, [r5, #24]
    5120:	e777      	b.n	5012 <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    5122:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    5126:	0719      	lsls	r1, r3, #28
    5128:	f57f af58 	bpl.w	4fdc <ExFatFile::read(void*, unsigned int)+0x34>
    512c:	e749      	b.n	4fc2 <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    512e:	eba1 0802 	sub.w	r8, r1, r2
    5132:	e753      	b.n	4fdc <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    5134:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    5138:	f013 0f50 	tst.w	r3, #80	; 0x50
    513c:	d0b1      	beq.n	50a2 <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    513e:	eba8 0806 	sub.w	r8, r8, r6
    5142:	4640      	mov	r0, r8
    5144:	e7aa      	b.n	509c <ExFatFile::read(void*, unsigned int)+0xf4>
    5146:	bf00      	nop

00005148 <ExFatFile::peek()>:
int ExFatFile::peek() {
    5148:	b5f0      	push	{r4, r5, r6, r7, lr}
    514a:	b083      	sub	sp, #12
    return read(&b, 1) == 1 ? b : -1;
    514c:	2201      	movs	r2, #1
    514e:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    5150:	6985      	ldr	r5, [r0, #24]
    5152:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    5156:	e9d0 6700 	ldrd	r6, r7, [r0]
    515a:	f7ff ff25 	bl	4fa8 <ExFatFile::read(void*, unsigned int)>
    515e:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    5160:	61a5      	str	r5, [r4, #24]
    5162:	bf0c      	ite	eq
    5164:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    5168:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    516c:	e9c4 6700 	strd	r6, r7, [r4]
}
    5170:	b003      	add	sp, #12
    5172:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005174 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    5174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5178:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    517a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    517e:	b083      	sub	sp, #12
    5180:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5182:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    5186:	2b00      	cmp	r3, #0
    5188:	d051      	beq.n	522e <ExFatFile::seekSet(unsigned long long)+0xba>
    518a:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    518c:	e9d0 1c00 	ldrd	r1, ip, [r0]
    5190:	45bc      	cmp	ip, r7
    5192:	bf08      	it	eq
    5194:	4291      	cmpeq	r1, r2
    5196:	d05c      	beq.n	5252 <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    5198:	ea56 0207 	orrs.w	r2, r6, r7
    519c:	d04d      	beq.n	523a <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    519e:	071d      	lsls	r5, r3, #28
    51a0:	d504      	bpl.n	51ac <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    51a2:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    51a6:	42b0      	cmp	r0, r6
    51a8:	41ba      	sbcs	r2, r7
    51aa:	d340      	bcc.n	522e <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    51ac:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    51b0:	1e75      	subs	r5, r6, #1
    51b2:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    51b6:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    51b8:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    51bc:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    51c0:	3209      	adds	r2, #9
    51c2:	b2d2      	uxtb	r2, r2
    51c4:	f1c2 0e20 	rsb	lr, r2, #32
    51c8:	40d5      	lsrs	r5, r2
    51ca:	f1a2 0920 	sub.w	r9, r2, #32
    51ce:	fa00 fb0e 	lsl.w	fp, r0, lr
    51d2:	fa20 f009 	lsr.w	r0, r0, r9
    51d6:	ea45 050b 	orr.w	r5, r5, fp
    51da:	4305      	orrs	r5, r0
  if (isContiguous()) {
    51dc:	9801      	ldr	r0, [sp, #4]
    51de:	0640      	lsls	r0, r0, #25
    51e0:	d433      	bmi.n	524a <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    51e2:	1e48      	subs	r0, r1, #1
    51e4:	fa20 f202 	lsr.w	r2, r0, r2
    51e8:	f14c 30ff 	adc.w	r0, ip, #4294967295	; 0xffffffff
  if (nNew < nCur || m_curPosition == 0) {
    51ec:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    51f0:	fa00 fe0e 	lsl.w	lr, r0, lr
    51f4:	fa20 f009 	lsr.w	r0, r0, r9
    51f8:	ea42 020e 	orr.w	r2, r2, lr
    51fc:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    5200:	d001      	beq.n	5206 <ExFatFile::seekSet(unsigned long long)+0x92>
    5202:	4295      	cmp	r5, r2
    5204:	d229      	bcs.n	525a <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5206:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5208:	bf4c      	ite	mi
    520a:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    520e:	69e3      	ldrpl	r3, [r4, #28]
    5210:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5212:	f104 0918 	add.w	r9, r4, #24
    5216:	e006      	b.n	5226 <ExFatFile::seekSet(unsigned long long)+0xb2>
    5218:	69a1      	ldr	r1, [r4, #24]
    521a:	3d01      	subs	r5, #1
    521c:	6a20      	ldr	r0, [r4, #32]
    521e:	f001 fd2d 	bl	6c7c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5222:	2800      	cmp	r0, #0
    5224:	dd03      	ble.n	522e <ExFatFile::seekSet(unsigned long long)+0xba>
    5226:	464a      	mov	r2, r9
  while (nNew--) {
    5228:	2d00      	cmp	r5, #0
    522a:	d1f5      	bne.n	5218 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    522c:	e007      	b.n	523e <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    522e:	2000      	movs	r0, #0
  m_curCluster = tmp;
    5230:	f8c4 8018 	str.w	r8, [r4, #24]
}
    5234:	b003      	add	sp, #12
    5236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    523a:	2300      	movs	r3, #0
    523c:	6183      	str	r3, [r0, #24]
  return true;
    523e:	2001      	movs	r0, #1
  m_curPosition = pos;
    5240:	e9c4 6700 	strd	r6, r7, [r4]
}
    5244:	b003      	add	sp, #12
    5246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    524a:	69e3      	ldr	r3, [r4, #28]
    524c:	442b      	add	r3, r5
    524e:	61a3      	str	r3, [r4, #24]
    goto done;
    5250:	e7f5      	b.n	523e <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    5252:	2001      	movs	r0, #1
}
    5254:	b003      	add	sp, #12
    5256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    525a:	1aad      	subs	r5, r5, r2
    525c:	e7d9      	b.n	5212 <ExFatFile::seekSet(unsigned long long)+0x9e>
    525e:	bf00      	nop

00005260 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    5260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5264:	4617      	mov	r7, r2
    5266:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    526a:	b08f      	sub	sp, #60	; 0x3c
    526c:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    526e:	2a00      	cmp	r2, #0
    5270:	f040 80d7 	bne.w	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    5274:	468b      	mov	fp, r1
    5276:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    527a:	f011 0f50 	tst.w	r1, #80	; 0x50
    527e:	f000 80d0 	beq.w	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    5282:	f003 0103 	and.w	r1, r3, #3
    5286:	469a      	mov	sl, r3
    5288:	2903      	cmp	r1, #3
    528a:	f000 80ca 	beq.w	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    528e:	3101      	adds	r1, #1
    5290:	f003 0008 	and.w	r0, r3, #8
    5294:	ea41 0300 	orr.w	r3, r1, r0
    5298:	9302      	str	r3, [sp, #8]
  if (fname) {
    529a:	2f00      	cmp	r7, #0
    529c:	f000 80cb 	beq.w	5436 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    52a0:	6939      	ldr	r1, [r7, #16]
    52a2:	f101 080e 	add.w	r8, r1, #14
    52a6:	49b6      	ldr	r1, [pc, #728]	; (5580 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    52a8:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    52ac:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    52b0:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    52b4:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    52b6:	f108 0802 	add.w	r8, r8, #2
    52ba:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    52be:	d005      	beq.n	52cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    52c0:	2000      	movs	r0, #0
    52c2:	2100      	movs	r1, #0
    m_curCluster = 0;
    52c4:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    52c8:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    52cc:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    52ce:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    52d0:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    52d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    52d6:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    52d8:	2220      	movs	r2, #32
    52da:	a906      	add	r1, sp, #24
    52dc:	4658      	mov	r0, fp
    52de:	f7ff fe63 	bl	4fa8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    52e2:	b300      	cbz	r0, 5326 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    52e4:	2820      	cmp	r0, #32
    52e6:	f040 809c 	bne.w	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    52ea:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    52ee:	f89d 3018 	ldrb.w	r3, [sp, #24]
    52f2:	2a00      	cmp	r2, #0
    52f4:	f2c0 80a2 	blt.w	543c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    52f8:	b934      	cbnz	r4, 5308 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    52fa:	f8db 2000 	ldr.w	r2, [fp]
    52fe:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5302:	f8db 2018 	ldr.w	r2, [fp, #24]
    5306:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    5308:	4544      	cmp	r4, r8
    530a:	d201      	bcs.n	5310 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    530c:	3401      	adds	r4, #1
    530e:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    5310:	2b00      	cmp	r3, #0
    5312:	f000 8113 	beq.w	553c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    5316:	2220      	movs	r2, #32
    5318:	a906      	add	r1, sp, #24
    531a:	4658      	mov	r0, fp
      inSet = false;
    531c:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    531e:	f7ff fe43 	bl	4fa8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5322:	2800      	cmp	r0, #0
    5324:	d1de      	bne.n	52e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    5326:	f41a 7f00 	tst.w	sl, #512	; 0x200
    532a:	d07a      	beq.n	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    532c:	9b02      	ldr	r3, [sp, #8]
    532e:	079b      	lsls	r3, r3, #30
    5330:	d577      	bpl.n	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    5332:	2f00      	cmp	r7, #0
    5334:	d075      	beq.n	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    5336:	4544      	cmp	r4, r8
    5338:	d217      	bcs.n	536a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    533a:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    533e:	2220      	movs	r2, #32
    5340:	a906      	add	r1, sp, #24
    5342:	4658      	mov	r0, fp
    5344:	f7ff fe30 	bl	4fa8 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    5348:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    534a:	2800      	cmp	r0, #0
    534c:	d061      	beq.n	5412 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    534e:	2820      	cmp	r0, #32
    5350:	d167      	bne.n	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    5352:	b92c      	cbnz	r4, 5360 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5354:	f8db 2000 	ldr.w	r2, [fp]
    5358:	f8db a018 	ldr.w	sl, [fp, #24]
    535c:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    5360:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    5362:	45a0      	cmp	r8, r4
    5364:	d8eb      	bhi.n	533e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    5366:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    536a:	2238      	movs	r2, #56	; 0x38
    536c:	2100      	movs	r1, #0
    536e:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5370:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    5374:	f00c fd3a 	bl	11dec <memset>
  ExFatVolume* volume() const {return m_vol;}
    5378:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    537c:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    5380:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    5382:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    5384:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    5386:	2600      	movs	r6, #0
  m_dirPos = freePos;
    5388:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    538c:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    5390:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    5392:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    5396:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    5398:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    539a:	f1b8 0f00 	cmp.w	r8, #0
    539e:	d033      	beq.n	5408 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    53a0:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
    53a4:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    53a6:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 5584 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    53aa:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    53ae:	2201      	movs	r2, #1
    53b0:	4659      	mov	r1, fp
    53b2:	4628      	mov	r0, r5
    53b4:	f7ff fd4a 	bl	4e4c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    53b8:	4604      	mov	r4, r0
    53ba:	b390      	cbz	r0, 5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    53bc:	f990 2000 	ldrsb.w	r2, [r0]
    53c0:	2a00      	cmp	r2, #0
    53c2:	db2e      	blt.n	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    53c4:	2220      	movs	r2, #32
    53c6:	2100      	movs	r1, #0
    53c8:	f00c fd10 	bl	11dec <memset>
    if (i == 0) {
    53cc:	2e00      	cmp	r6, #0
    53ce:	f000 80bc 	beq.w	554a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    53d2:	f1bb 0f01 	cmp.w	fp, #1
    53d6:	f000 80d7 	beq.w	5588 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    53da:	23c1      	movs	r3, #193	; 0xc1
    53dc:	46a3      	mov	fp, r4
    53de:	341e      	adds	r4, #30
    53e0:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    53e4:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    53e6:	4638      	mov	r0, r7
    53e8:	b91b      	cbnz	r3, 53f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    53ea:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    53ee:	429a      	cmp	r2, r3
    53f0:	d005      	beq.n	53fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    53f2:	f006 fc5b 	bl	bcac <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    53f6:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    53fa:	45a3      	cmp	fp, r4
    53fc:	d1f2      	bne.n	53e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    53fe:	3601      	adds	r6, #1
    5400:	fa5f fb86 	uxtb.w	fp, r6
    5404:	45d8      	cmp	r8, fp
    5406:	d8d2      	bhi.n	53ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    5408:	4628      	mov	r0, r5
    540a:	f000 fafb 	bl	5a04 <ExFatFile::sync()>
    540e:	4606      	mov	r6, r0
    5410:	e00d      	b.n	542e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    5412:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    5414:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    5418:	f000 fb24 	bl	5a64 <ExFatFile::addDirCluster()>
    541c:	2800      	cmp	r0, #0
    541e:	f040 8091 	bne.w	5544 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    5422:	2300      	movs	r3, #0
  return false;
    5424:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    5426:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    542a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    542e:	4630      	mov	r0, r6
    5430:	b00f      	add	sp, #60	; 0x3c
    5432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    5436:	f04f 0803 	mov.w	r8, #3
    543a:	e747      	b.n	52cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    543c:	bb56      	cbnz	r6, 5494 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    543e:	4544      	cmp	r4, r8
    5440:	bf38      	it	cc
    5442:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    5444:	2b85      	cmp	r3, #133	; 0x85
    5446:	f47f af47 	bne.w	52d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    544a:	4631      	mov	r1, r6
    544c:	2238      	movs	r2, #56	; 0x38
    544e:	4628      	mov	r0, r5
      inSet = true;
    5450:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    5452:	f00c fccb 	bl	11dec <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5456:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    545a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    545e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5462:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5466:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    5468:	bf58      	it	pl
    546a:	f043 0308 	orrpl.w	r3, r3, #8
    546e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    5472:	f8db 3000 	ldr.w	r3, [fp]
    5476:	f8db 2020 	ldr.w	r2, [fp, #32]
    547a:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    547c:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    547e:	f8db 2018 	ldr.w	r2, [fp, #24]
    5482:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5486:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    548a:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    548e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    5492:	e721      	b.n	52d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    5494:	2bc0      	cmp	r3, #192	; 0xc0
    5496:	d028      	beq.n	54ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    5498:	2bc1      	cmp	r3, #193	; 0xc1
    549a:	f47f af3c 	bne.w	5316 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    549e:	463a      	mov	r2, r7
    54a0:	a906      	add	r1, sp, #24
    54a2:	4628      	mov	r0, r5
    54a4:	f001 f9ee 	bl	6884 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    54a8:	b1e8      	cbz	r0, 54e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    54aa:	89bb      	ldrh	r3, [r7, #12]
    54ac:	b9db      	cbnz	r3, 54e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    54ae:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    54b2:	429a      	cmp	r2, r3
    54b4:	d117      	bne.n	54e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    54b6:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    54ba:	d1b2      	bne.n	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    54bc:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    54c0:	d170      	bne.n	55a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    54c2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    54c6:	0798      	lsls	r0, r3, #30
    54c8:	d46c      	bmi.n	55a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    54ca:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    54ce:	d1a8      	bne.n	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    54d0:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    54d4:	d0ab      	beq.n	542e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    54d6:	4628      	mov	r0, r5
    54d8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    54dc:	f7ff fe4a 	bl	5174 <ExFatFile::seekSet(unsigned long long)>
    54e0:	2800      	cmp	r0, #0
    54e2:	d1a4      	bne.n	542e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    54e4:	e79d      	b.n	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    54e6:	4606      	mov	r6, r0
    54e8:	e6f6      	b.n	52d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    54ea:	9b02      	ldr	r3, [sp, #8]
    54ec:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    54f0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    54f4:	079b      	lsls	r3, r3, #30
    54f6:	d502      	bpl.n	54fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    54f8:	9b03      	ldr	r3, [sp, #12]
    54fa:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    54fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5500:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    5502:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    5506:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    550a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    550e:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    5512:	2f00      	cmp	r7, #0
    5514:	d0cf      	beq.n	54b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    5516:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    551a:	693a      	ldr	r2, [r7, #16]
    551c:	81bb      	strh	r3, [r7, #12]
    next = begin;
    551e:	683b      	ldr	r3, [r7, #0]
    5520:	607b      	str	r3, [r7, #4]
    5522:	f89d 301b 	ldrb.w	r3, [sp, #27]
    5526:	429a      	cmp	r2, r3
    5528:	f47f aef5 	bne.w	5316 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    552c:	8abe      	ldrh	r6, [r7, #20]
    552e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    5532:	1af6      	subs	r6, r6, r3
    5534:	fab6 f686 	clz	r6, r6
    5538:	0976      	lsrs	r6, r6, #5
    553a:	e6cd      	b.n	52d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    553c:	2f00      	cmp	r7, #0
    553e:	f47f aef2 	bne.w	5326 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    5542:	e76e      	b.n	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    5544:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    5548:	e70b      	b.n	5362 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    554a:	2385      	movs	r3, #133	; 0x85
    554c:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    554e:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5552:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    5556:	f8da 3000 	ldr.w	r3, [sl]
    555a:	2b00      	cmp	r3, #0
    555c:	d046      	beq.n	55ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    555e:	f10d 0213 	add.w	r2, sp, #19
    5562:	f10d 0116 	add.w	r1, sp, #22
    5566:	a805      	add	r0, sp, #20
    5568:	4798      	blx	r3
    556a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    556e:	8163      	strh	r3, [r4, #10]
    5570:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5574:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    5576:	f89d 3013 	ldrb.w	r3, [sp, #19]
    557a:	7523      	strb	r3, [r4, #20]
    557c:	e73f      	b.n	53fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    557e:	bf00      	nop
    5580:	88888889 	.word	0x88888889
    5584:	200042b4 	.word	0x200042b4
      dirStream->type = EXFAT_TYPE_STREAM;
    5588:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    558a:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    558e:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5590:	9b02      	ldr	r3, [sp, #8]
    5592:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5596:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    559a:	693b      	ldr	r3, [r7, #16]
    559c:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    559e:	8abb      	ldrh	r3, [r7, #20]
    55a0:	80a3      	strh	r3, [r4, #4]
}
    55a2:	e72c      	b.n	53fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    55a4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    55a8:	06d9      	lsls	r1, r3, #27
    55aa:	f53f af3a 	bmi.w	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    55ae:	f013 0101 	ands.w	r1, r3, #1
    55b2:	f47f af36 	bne.w	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    55b6:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    55ba:	d089      	beq.n	54d0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    55bc:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    55c0:	0792      	lsls	r2, r2, #30
    55c2:	f57f af2e 	bpl.w	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    55c6:	2b00      	cmp	r3, #0
    55c8:	f43f af2b 	beq.w	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    55cc:	e9d5 3200 	ldrd	r3, r2, [r5]
    55d0:	4313      	orrs	r3, r2
    55d2:	d004      	beq.n	55de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    55d4:	2200      	movs	r2, #0
    55d6:	2300      	movs	r3, #0
    m_curCluster = 0;
    55d8:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    55da:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    55de:	4628      	mov	r0, r5
    55e0:	f000 fc42 	bl	5e68 <ExFatFile::truncate()>
    55e4:	2800      	cmp	r0, #0
    55e6:	f43f af1c 	beq.w	5422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    55ea:	e720      	b.n	542e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    55ec:	f645 2321 	movw	r3, #23073	; 0x5a21
    55f0:	8163      	strh	r3, [r4, #10]
    55f2:	81e3      	strh	r3, [r4, #14]
    55f4:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    55f6:	e702      	b.n	53fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

000055f8 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    55f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    55fc:	2500      	movs	r5, #0
    55fe:	b097      	sub	sp, #92	; 0x5c
    5600:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    5602:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    5606:	9201      	str	r2, [sp, #4]
    5608:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    560a:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    560e:	2b00      	cmp	r3, #0
    5610:	d13e      	bne.n	5690 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    5612:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5616:	460f      	mov	r7, r1
    5618:	f013 0f50 	tst.w	r3, #80	; 0x50
    561c:	d038      	beq.n	5690 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    561e:	7813      	ldrb	r3, [r2, #0]
    5620:	4604      	mov	r4, r0
    5622:	4616      	mov	r6, r2
    5624:	2b2f      	cmp	r3, #47	; 0x2f
    5626:	d037      	beq.n	5698 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5628:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    562c:	ab01      	add	r3, sp, #4
    562e:	aa02      	add	r2, sp, #8
    5630:	4631      	mov	r1, r6
    5632:	4620      	mov	r0, r4
    5634:	f7ff fc6a 	bl	4f0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5638:	b350      	cbz	r0, 5690 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    563a:	9e01      	ldr	r6, [sp, #4]
    563c:	7833      	ldrb	r3, [r6, #0]
    563e:	2b00      	cmp	r3, #0
    5640:	d03e      	beq.n	56c0 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5642:	2300      	movs	r3, #0
    5644:	aa02      	add	r2, sp, #8
    5646:	4639      	mov	r1, r7
    5648:	4620      	mov	r0, r4
    564a:	f7ff fe09 	bl	5260 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    564e:	b1f8      	cbz	r0, 5690 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    5650:	46a4      	mov	ip, r4
    5652:	ad08      	add	r5, sp, #32
    5654:	f104 0730 	add.w	r7, r4, #48	; 0x30
    5658:	f8dc 0000 	ldr.w	r0, [ip]
    565c:	f10c 0c10 	add.w	ip, ip, #16
    5660:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    5664:	46ae      	mov	lr, r5
    5666:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    566a:	3510      	adds	r5, #16
    566c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    5670:	45bc      	cmp	ip, r7
    5672:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    5676:	d1ef      	bne.n	5658 <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    5678:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    567c:	af08      	add	r7, sp, #32
    tmpDir = *this;
    567e:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    5680:	4620      	mov	r0, r4
    5682:	f000 f9bf 	bl	5a04 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    5686:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    568a:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    568e:	e7cd      	b.n	562c <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    5690:	2000      	movs	r0, #0
}
    5692:	b017      	add	sp, #92	; 0x5c
    5694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    5698:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    569c:	292f      	cmp	r1, #47	; 0x2f
    569e:	d0fb      	beq.n	5698 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    56a0:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    56a2:	b9b1      	cbnz	r1, 56d2 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    56a4:	2238      	movs	r2, #56	; 0x38
    56a6:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    56a8:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    56aa:	f00c fb9f 	bl	11dec <memset>
  m_flags = FILE_FLAG_READ;
    56ae:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    56b0:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    56b2:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    56b4:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    56b6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    56ba:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    56be:	e7e8      	b.n	5692 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    56c0:	464b      	mov	r3, r9
    56c2:	aa02      	add	r2, sp, #8
    56c4:	4639      	mov	r1, r7
    56c6:	4620      	mov	r0, r4
    56c8:	f7ff fdca 	bl	5260 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    56cc:	b017      	add	sp, #92	; 0x5c
    56ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    56d2:	2238      	movs	r2, #56	; 0x38
    56d4:	2100      	movs	r1, #0
    56d6:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    56d8:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    56da:	f00c fb87 	bl	11dec <memset>
  m_flags = FILE_FLAG_READ;
    56de:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    56e0:	af08      	add	r7, sp, #32
  m_vol = vol;
    56e2:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    56e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    56e8:	2340      	movs	r3, #64	; 0x40
    56ea:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    56ee:	e79b      	b.n	5628 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

000056f0 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    56f0:	b119      	cbz	r1, 56fa <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    56f2:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    56f6:	f7ff bf7f 	b.w	55f8 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    56fa:	4608      	mov	r0, r1
    56fc:	4770      	bx	lr
    56fe:	bf00      	nop

00005700 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    5700:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5704:	b963      	cbnz	r3, 5720 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    5706:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    570a:	f013 0f50 	tst.w	r3, #80	; 0x50
    570e:	d007      	beq.n	5720 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    5710:	680b      	ldr	r3, [r1, #0]
    5712:	f013 0c1f 	ands.w	ip, r3, #31
    5716:	d103      	bne.n	5720 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    5718:	4613      	mov	r3, r2
    571a:	4662      	mov	r2, ip
    571c:	f7ff bda0 	b.w	5260 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    5720:	2000      	movs	r0, #0
    5722:	4770      	bx	lr

00005724 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    5724:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    5726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5728:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    572a:	6a00      	ldr	r0, [r0, #32]
    572c:	b101      	cbz	r1, 5730 <ExFatFile::addCluster()+0xc>
    572e:	3101      	adds	r1, #1
    5730:	2201      	movs	r2, #1
    5732:	f001 f969 	bl	6a08 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    5736:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    5738:	4605      	mov	r5, r0
  if (find < 2) {
    573a:	d932      	bls.n	57a2 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    573c:	2301      	movs	r3, #1
    573e:	4601      	mov	r1, r0
    5740:	6a20      	ldr	r0, [r4, #32]
    5742:	461a      	mov	r2, r3
    5744:	f001 f9c0 	bl	6ac8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5748:	4606      	mov	r6, r0
    574a:	b350      	cbz	r0, 57a2 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    574c:	69a3      	ldr	r3, [r4, #24]
    574e:	b35b      	cbz	r3, 57a8 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5750:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    5754:	0651      	lsls	r1, r2, #25
    5756:	d512      	bpl.n	577e <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    5758:	1c59      	adds	r1, r3, #1
    575a:	42a9      	cmp	r1, r5
    575c:	d018      	beq.n	5790 <ExFatFile::addCluster()+0x6c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    575e:	f022 0240 	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5762:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5764:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5768:	e005      	b.n	5776 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    576a:	6a20      	ldr	r0, [r4, #32]
    576c:	f001 faa8 	bl	6cc0 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5770:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    5772:	b1b0      	cbz	r0, 57a2 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5774:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    5776:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5778:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    577a:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    577c:	d3f5      	bcc.n	576a <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    577e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5782:	4629      	mov	r1, r5
    5784:	6a20      	ldr	r0, [r4, #32]
    5786:	f001 fa9b 	bl	6cc0 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    578a:	b150      	cbz	r0, 57a2 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    578c:	69a1      	ldr	r1, [r4, #24]
    578e:	b911      	cbnz	r1, 5796 <ExFatFile::addCluster()+0x72>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    5790:	4630      	mov	r0, r6
  m_curCluster = find;
    5792:	61a5      	str	r5, [r4, #24]
}
    5794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    5796:	462a      	mov	r2, r5
    5798:	6a20      	ldr	r0, [r4, #32]
    579a:	f001 fa91 	bl	6cc0 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    579e:	2800      	cmp	r0, #0
    57a0:	d1f6      	bne.n	5790 <ExFatFile::addCluster()+0x6c>
  return false;
    57a2:	2600      	movs	r6, #0
}
    57a4:	4630      	mov	r0, r6
    57a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    57a8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    57ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    57b0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    57b4:	e7ec      	b.n	5790 <ExFatFile::addCluster()+0x6c>
    57b6:	bf00      	nop

000057b8 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    57b8:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    57bc:	079a      	lsls	r2, r3, #30
    57be:	d536      	bpl.n	582e <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    57c0:	69c1      	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    57c2:	b570      	push	{r4, r5, r6, lr}
    57c4:	4605      	mov	r5, r0
  if (m_firstCluster) {
    57c6:	b9a1      	cbnz	r1, 57f2 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    57c8:	2400      	movs	r4, #0
    57ca:	4621      	mov	r1, r4
    57cc:	e007      	b.n	57de <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    57ce:	7803      	ldrb	r3, [r0, #0]
    57d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    57d4:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    57d6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    57da:	428b      	cmp	r3, r1
    57dc:	d329      	bcc.n	5832 <ExFatFile::remove()+0x7a>
    57de:	3401      	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    57e0:	2201      	movs	r2, #1
    57e2:	4628      	mov	r0, r5
    57e4:	f7ff fb32 	bl	4e4c <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    57e8:	b2e1      	uxtb	r1, r4
    if (!cache) {
    57ea:	2800      	cmp	r0, #0
    57ec:	d1ef      	bne.n	57ce <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    57ee:	2000      	movs	r0, #0
    57f0:	bd70      	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    57f2:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    57f4:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
    57f6:	d534      	bpl.n	5862 <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    57f8:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    57fc:	e9d5 2402 	ldrd	r2, r4, [r5, #8]
    5800:	3309      	adds	r3, #9
    5802:	3a01      	subs	r2, #1
    5804:	b2db      	uxtb	r3, r3
    5806:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
    580a:	f1c3 0c20 	rsb	ip, r3, #32
    580e:	40da      	lsrs	r2, r3
    5810:	3b20      	subs	r3, #32
    5812:	fa04 fc0c 	lsl.w	ip, r4, ip
    5816:	fa24 f303 	lsr.w	r3, r4, r3
    581a:	ea42 020c 	orr.w	r2, r2, ip
    581e:	431a      	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    5820:	2300      	movs	r3, #0
    5822:	3201      	adds	r2, #1
    5824:	f001 f950 	bl	6ac8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5828:	2800      	cmp	r0, #0
    582a:	d1cd      	bne.n	57c8 <ExFatFile::remove()+0x10>
    582c:	e7df      	b.n	57ee <ExFatFile::remove()+0x36>
}
    582e:	2000      	movs	r0, #0
    5830:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    5832:	2300      	movs	r3, #0
  return m_vol->cacheSync();
    5834:	6a2c      	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    5836:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    583a:	4620      	mov	r0, r4
  m_flags = 0;
    583c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    5840:	f006 f9ca 	bl	bbd8 <FsCache::sync()>
    5844:	2800      	cmp	r0, #0
    5846:	d0d2      	beq.n	57ee <ExFatFile::remove()+0x36>
    5848:	f504 7004 	add.w	r0, r4, #528	; 0x210
    584c:	f006 f9c4 	bl	bbd8 <FsCache::sync()>
    5850:	2800      	cmp	r0, #0
    5852:	d0cc      	beq.n	57ee <ExFatFile::remove()+0x36>
    5854:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5858:	6803      	ldr	r3, [r0, #0]
}
    585a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    585e:	6a1b      	ldr	r3, [r3, #32]
    5860:	4718      	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    5862:	f001 fa4d 	bl	6d00 <ExFatPartition::freeChain(unsigned long)>
    5866:	2800      	cmp	r0, #0
    5868:	d1ae      	bne.n	57c8 <ExFatFile::remove()+0x10>
    586a:	e7c0      	b.n	57ee <ExFatFile::remove()+0x36>

0000586c <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    586c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5870:	06db      	lsls	r3, r3, #27
    5872:	d401      	bmi.n	5878 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    5874:	2000      	movs	r0, #0
}
    5876:	4770      	bx	lr
bool ExFatFile::rmdir() {
    5878:	b510      	push	{r4, lr}
    seekSet(0);
    587a:	2200      	movs	r2, #0
    587c:	b088      	sub	sp, #32
    587e:	2300      	movs	r3, #0
    5880:	4604      	mov	r4, r0
    5882:	f7ff fc77 	bl	5174 <ExFatFile::seekSet(unsigned long long)>
  }
    5886:	e008      	b.n	589a <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    5888:	2820      	cmp	r0, #32
    588a:	d11b      	bne.n	58c4 <ExFatFile::rmdir()+0x58>
    588c:	f99d 3000 	ldrsb.w	r3, [sp]
    5890:	f89d 2000 	ldrb.w	r2, [sp]
    5894:	2b00      	cmp	r3, #0
    5896:	db15      	blt.n	58c4 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    5898:	b132      	cbz	r2, 58a8 <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    589a:	2220      	movs	r2, #32
    589c:	4669      	mov	r1, sp
    589e:	4620      	mov	r0, r4
    58a0:	f7ff fb82 	bl	4fa8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    58a4:	2800      	cmp	r0, #0
    58a6:	d1ef      	bne.n	5888 <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    58a8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    58ac:	2208      	movs	r2, #8
  return remove();
    58ae:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    58b0:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    58b4:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    58b8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    58bc:	f7ff ff7c 	bl	57b8 <ExFatFile::remove()>
}
    58c0:	b008      	add	sp, #32
    58c2:	bd10      	pop	{r4, pc}
  return false;
    58c4:	2000      	movs	r0, #0
}
    58c6:	b008      	add	sp, #32
    58c8:	bd10      	pop	{r4, pc}
    58ca:	bf00      	nop

000058cc <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    58cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58d0:	f04f 0800 	mov.w	r8, #0
    58d4:	b082      	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    58d6:	4f4a      	ldr	r7, [pc, #296]	; (5a00 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    58d8:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    58da:	4644      	mov	r4, r8
    58dc:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    58de:	2200      	movs	r2, #0
    58e0:	4630      	mov	r0, r6
    58e2:	f7ff fab3 	bl	4e4c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    58e6:	4605      	mov	r5, r0
    58e8:	b130      	cbz	r0, 58f8 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    58ea:	7801      	ldrb	r1, [r0, #0]
    58ec:	29c0      	cmp	r1, #192	; 0xc0
    58ee:	d069      	beq.n	59c4 <ExFatFile::syncDir()+0xf8>
    58f0:	29c1      	cmp	r1, #193	; 0xc1
    58f2:	d02b      	beq.n	594c <ExFatFile::syncDir()+0x80>
    58f4:	2985      	cmp	r1, #133	; 0x85
    58f6:	d009      	beq.n	590c <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    58f8:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    58fc:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    58fe:	f043 0301 	orr.w	r3, r3, #1
    5902:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    5906:	b002      	add	sp, #8
    5908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    590c:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    5910:	f003 0337 	and.w	r3, r3, #55	; 0x37
    5914:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    5916:	683b      	ldr	r3, [r7, #0]
    5918:	b183      	cbz	r3, 593c <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    591a:	f10d 0203 	add.w	r2, sp, #3
    591e:	f10d 0106 	add.w	r1, sp, #6
    5922:	a801      	add	r0, sp, #4
    5924:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    5926:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    592a:	81ab      	strh	r3, [r5, #12]
    592c:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    592e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5932:	81eb      	strh	r3, [r5, #14]
    5934:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    5936:	f89d 3003 	ldrb.w	r3, [sp, #3]
    593a:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    593c:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    593e:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    5942:	f043 0301 	orr.w	r3, r3, #1
    5946:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    594a:	7829      	ldrb	r1, [r5, #0]
    594c:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5950:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5952:	fab0 f080 	clz	r0, r0
    5956:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5958:	e001      	b.n	595e <ExFatFile::syncDir()+0x92>
    595a:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    595c:	5ca9      	ldrb	r1, [r5, r2]
    595e:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5960:	2a01      	cmp	r2, #1
    5962:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5966:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    596a:	fa11 f383 	uxtah	r3, r1, r3
    596e:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5970:	d101      	bne.n	5976 <ExFatFile::syncDir()+0xaa>
    5972:	2800      	cmp	r0, #0
    5974:	d1f1      	bne.n	595a <ExFatFile::syncDir()+0x8e>
    5976:	2a1f      	cmp	r2, #31
    5978:	d9f0      	bls.n	595c <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    597a:	f108 0801 	add.w	r8, r8, #1
    597e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    5982:	fa5f f188 	uxtb.w	r1, r8
    5986:	428b      	cmp	r3, r1
    5988:	d2a9      	bcs.n	58de <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    598a:	2201      	movs	r2, #1
    598c:	f106 0124 	add.w	r1, r6, #36	; 0x24
    5990:	6a30      	ldr	r0, [r6, #32]
    5992:	f001 f915 	bl	6bc0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5996:	2800      	cmp	r0, #0
    5998:	d0ae      	beq.n	58f8 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    599a:	6a35      	ldr	r5, [r6, #32]
    599c:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    599e:	4628      	mov	r0, r5
    59a0:	f006 f91a 	bl	bbd8 <FsCache::sync()>
    59a4:	2800      	cmp	r0, #0
    59a6:	d0a7      	beq.n	58f8 <ExFatFile::syncDir()+0x2c>
    59a8:	f505 7004 	add.w	r0, r5, #528	; 0x210
    59ac:	f006 f914 	bl	bbd8 <FsCache::sync()>
    59b0:	2800      	cmp	r0, #0
    59b2:	d0a1      	beq.n	58f8 <ExFatFile::syncDir()+0x2c>
    59b4:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    59b8:	6803      	ldr	r3, [r0, #0]
    59ba:	6a1b      	ldr	r3, [r3, #32]
    59bc:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    59be:	2800      	cmp	r0, #0
    59c0:	d1a1      	bne.n	5906 <ExFatFile::syncDir()+0x3a>
    59c2:	e799      	b.n	58f8 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    59c4:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    59c8:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    59cc:	7843      	ldrb	r3, [r0, #1]
    59ce:	bf14      	ite	ne
    59d0:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    59d4:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    59d8:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    59da:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    59de:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    59e2:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    59e6:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    59ea:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    59ec:	e9c5 0106 	strd	r0, r1, [r5, #24]
    59f0:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    59f4:	f043 0301 	orr.w	r3, r3, #1
    59f8:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    59fc:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    59fe:	e7a5      	b.n	594c <ExFatFile::syncDir()+0x80>
    5a00:	200042b4 	.word	0x200042b4

00005a04 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    5a04:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    5a06:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5a0a:	b343      	cbz	r3, 5a5e <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5a0c:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    5a10:	4604      	mov	r4, r0
    5a12:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    5a16:	2a00      	cmp	r2, #0
    5a18:	db0c      	blt.n	5a34 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    5a1a:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5a1c:	4628      	mov	r0, r5
    5a1e:	f006 f8db 	bl	bbd8 <FsCache::sync()>
    5a22:	b978      	cbnz	r0, 5a44 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    5a24:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    5a28:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    5a2a:	f043 0301 	orr.w	r3, r3, #1
    5a2e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    5a32:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5a38:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    5a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    5a40:	f7ff bf44 	b.w	58cc <ExFatFile::syncDir()>
    5a44:	f505 7004 	add.w	r0, r5, #528	; 0x210
    5a48:	f006 f8c6 	bl	bbd8 <FsCache::sync()>
    5a4c:	2800      	cmp	r0, #0
    5a4e:	d0e9      	beq.n	5a24 <ExFatFile::sync()+0x20>
    5a50:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    5a54:	6803      	ldr	r3, [r0, #0]
    5a56:	6a1b      	ldr	r3, [r3, #32]
    5a58:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5a5a:	2800      	cmp	r0, #0
    5a5c:	d0e2      	beq.n	5a24 <ExFatFile::sync()+0x20>
    return true;
    5a5e:	2001      	movs	r0, #1
}
    5a60:	bd38      	pop	{r3, r4, r5, pc}
    5a62:	bf00      	nop

00005a64 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    5a64:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5a66:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    5a6a:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5a6c:	065a      	lsls	r2, r3, #25
    5a6e:	d44c      	bmi.n	5b0a <ExFatFile::addDirCluster()+0xa6>
    5a70:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    5a72:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    5a74:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    5a78:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    5a7a:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    5a7e:	d301      	bcc.n	5a84 <ExFatFile::addDirCluster()+0x20>
}
    5a80:	2000      	movs	r0, #0
    5a82:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    5a84:	4628      	mov	r0, r5
    5a86:	f7ff fe4d 	bl	5724 <ExFatFile::addCluster()>
    5a8a:	2800      	cmp	r0, #0
    5a8c:	d0f8      	beq.n	5a80 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    5a8e:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    5a90:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    5a92:	69ae      	ldr	r6, [r5, #24]
    5a94:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    5a98:	3e02      	subs	r6, #2
    5a9a:	409e      	lsls	r6, r3
    5a9c:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    5aa0:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    5aa2:	1931      	adds	r1, r6, r4
    5aa4:	2205      	movs	r2, #5
    5aa6:	f500 7004 	add.w	r0, r0, #528	; 0x210
    5aaa:	3401      	adds	r4, #1
    5aac:	f006 f8c0 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    5ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
    5ab4:	2100      	movs	r1, #0
    if (!cache) {
    5ab6:	2800      	cmp	r0, #0
    5ab8:	d0e2      	beq.n	5a80 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    5aba:	f00c f997 	bl	11dec <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    5abe:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5ac0:	2301      	movs	r3, #1
    5ac2:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    5ac6:	4093      	lsls	r3, r2
    5ac8:	429c      	cmp	r4, r3
    5aca:	d3ea      	bcc.n	5aa2 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    5acc:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    5ad0:	065b      	lsls	r3, r3, #25
    5ad2:	d415      	bmi.n	5b00 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5ad4:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    5ad8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    5adc:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5ae0:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    5ae4:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    5ae8:	189b      	adds	r3, r3, r2
    5aea:	f141 0000 	adc.w	r0, r1, #0
    5aee:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    5af0:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    5af4:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    5af6:	189b      	adds	r3, r3, r2
    5af8:	f141 0100 	adc.w	r1, r1, #0
    5afc:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    5b00:	4628      	mov	r0, r5
}
    5b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    5b06:	f7ff bf7d 	b.w	5a04 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5b0a:	6a00      	ldr	r0, [r0, #32]
    5b0c:	f001 f9fe 	bl	6f0c <ExFatPartition::rootLength()>
    5b10:	e7af      	b.n	5a72 <ExFatFile::addDirCluster()+0xe>
    5b12:	bf00      	nop

00005b14 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    5b14:	b570      	push	{r4, r5, r6, lr}
    5b16:	4604      	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    5b18:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    5b1c:	b09c      	sub	sp, #112	; 0x70
  ExFatFile() {}
    5b1e:	2300      	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    5b20:	f010 0f18 	tst.w	r0, #24
    5b24:	930c      	str	r3, [sp, #48]	; 0x30
    5b26:	931a      	str	r3, [sp, #104]	; 0x68
    5b28:	d003      	beq.n	5b32 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    5b2a:	6a20      	ldr	r0, [r4, #32]
    5b2c:	6a0b      	ldr	r3, [r1, #32]
    5b2e:	4298      	cmp	r0, r3
    5b30:	d002      	beq.n	5b38 <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    5b32:	2000      	movs	r0, #0
}
    5b34:	b01c      	add	sp, #112	; 0x70
    5b36:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5b38:	f640 2301 	movw	r3, #2561	; 0xa01
    5b3c:	4668      	mov	r0, sp
    5b3e:	f7ff fd5b 	bl	55f8 <ExFatFile::open(ExFatFile*, char const*, int)>
    5b42:	2800      	cmp	r0, #0
    5b44:	d0f5      	beq.n	5b32 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    5b46:	46a4      	mov	ip, r4
    5b48:	f104 0630 	add.w	r6, r4, #48	; 0x30
    5b4c:	ad0e      	add	r5, sp, #56	; 0x38
    5b4e:	f8dc 0000 	ldr.w	r0, [ip]
    5b52:	f10c 0c10 	add.w	ip, ip, #16
    5b56:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    5b5a:	46ae      	mov	lr, r5
    5b5c:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    5b60:	3510      	adds	r5, #16
    5b62:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    5b66:	45b4      	cmp	ip, r6
    5b68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    5b6c:	d1ef      	bne.n	5b4e <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    5b6e:	f8dc 0000 	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    5b72:	aa09      	add	r2, sp, #36	; 0x24
    5b74:	f104 0324 	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    5b78:	6028      	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    5b7a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    5b7e:	ca07      	ldmia	r2, {r0, r1, r2}
    5b80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b84:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    5b88:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
    5b8a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5b92:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    5b96:	f7ff ff35 	bl	5a04 <ExFatFile::sync()>
    5b9a:	2800      	cmp	r0, #0
    5b9c:	d0c9      	beq.n	5b32 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    5b9e:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    5ba0:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    5ba2:	2308      	movs	r3, #8
  return oldFile.remove();
    5ba4:	a80e      	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    5ba6:	9115      	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    5ba8:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    5bac:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    5bb0:	f7ff fe02 	bl	57b8 <ExFatFile::remove()>
    5bb4:	e7be      	b.n	5b34 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    5bb6:	bf00      	nop

00005bb8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    5bb8:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    5bba:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5bbe:	f013 0f50 	tst.w	r3, #80	; 0x50
    5bc2:	d102      	bne.n	5bca <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    5bc4:	2500      	movs	r5, #0
}
    5bc6:	4628      	mov	r0, r5
    5bc8:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5bca:	f640 2302 	movw	r3, #2562	; 0xa02
    5bce:	4604      	mov	r4, r0
    5bd0:	f7ff fb46 	bl	5260 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5bd4:	2800      	cmp	r0, #0
    5bd6:	d0f5      	beq.n	5bc4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    5bd8:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    5bda:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    5bdc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    5be0:	f7ff ff40 	bl	5a64 <ExFatFile::addDirCluster()>
    5be4:	4605      	mov	r5, r0
    5be6:	2800      	cmp	r0, #0
    5be8:	d0ec      	beq.n	5bc4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    5bea:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    5bec:	2200      	movs	r2, #0
    5bee:	2300      	movs	r3, #0
    5bf0:	4620      	mov	r0, r4
    5bf2:	61e1      	str	r1, [r4, #28]
    5bf4:	f7ff fabe 	bl	5174 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5bf8:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    5bfa:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5bfe:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    5c02:	2b00      	cmp	r3, #0
    5c04:	d0df      	beq.n	5bc6 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5c06:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    5c08:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5c0a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    5c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    5c12:	f7ff be5b 	b.w	58cc <ExFatFile::syncDir()>
    5c16:	bf00      	nop

00005c18 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    5c18:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c1a:	2500      	movs	r5, #0
    5c1c:	b097      	sub	sp, #92	; 0x5c
    5c1e:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    5c20:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    5c24:	9201      	str	r2, [sp, #4]
    5c26:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    5c2a:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    5c2c:	2b00      	cmp	r3, #0
    5c2e:	d146      	bne.n	5cbe <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    5c30:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5c34:	460e      	mov	r6, r1
    5c36:	f013 0f50 	tst.w	r3, #80	; 0x50
    5c3a:	d040      	beq.n	5cbe <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    5c3c:	7813      	ldrb	r3, [r2, #0]
    5c3e:	4604      	mov	r4, r0
    5c40:	4611      	mov	r1, r2
    5c42:	2b2f      	cmp	r3, #47	; 0x2f
    5c44:	d03e      	beq.n	5cc4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    5c46:	ab01      	add	r3, sp, #4
    5c48:	aa02      	add	r2, sp, #8
    5c4a:	4620      	mov	r0, r4
    5c4c:	f7ff f95e 	bl	4f0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5c50:	2800      	cmp	r0, #0
    5c52:	d034      	beq.n	5cbe <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    5c54:	9b01      	ldr	r3, [sp, #4]
    5c56:	781b      	ldrb	r3, [r3, #0]
    5c58:	2b00      	cmp	r3, #0
    5c5a:	d041      	beq.n	5ce0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    5c5c:	2300      	movs	r3, #0
    5c5e:	aa02      	add	r2, sp, #8
    5c60:	4631      	mov	r1, r6
    5c62:	4620      	mov	r0, r4
    5c64:	f7ff fafc 	bl	5260 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5c68:	b930      	cbnz	r0, 5c78 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    5c6a:	b347      	cbz	r7, 5cbe <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    5c6c:	aa02      	add	r2, sp, #8
    5c6e:	4631      	mov	r1, r6
    5c70:	4620      	mov	r0, r4
    5c72:	f7ff ffa1 	bl	5bb8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    5c76:	b310      	cbz	r0, 5cbe <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    5c78:	46a4      	mov	ip, r4
    5c7a:	ad08      	add	r5, sp, #32
    5c7c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    5c80:	f8dc 0000 	ldr.w	r0, [ip]
    5c84:	f10c 0c10 	add.w	ip, ip, #16
    5c88:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    5c8c:	46ae      	mov	lr, r5
    5c8e:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    5c92:	3510      	adds	r5, #16
    5c94:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    5c98:	45b4      	cmp	ip, r6
    5c9a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    5c9e:	d1ef      	bne.n	5c80 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    5ca0:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    5ca4:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    5ca6:	6028      	str	r0, [r5, #0]
    close();
    5ca8:	4620      	mov	r0, r4
    5caa:	f7ff f8ed 	bl	4e88 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    5cae:	9901      	ldr	r1, [sp, #4]
    5cb0:	ab01      	add	r3, sp, #4
    5cb2:	aa02      	add	r2, sp, #8
    5cb4:	4620      	mov	r0, r4
    5cb6:	f7ff f929 	bl	4f0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5cba:	2800      	cmp	r0, #0
    5cbc:	d1ca      	bne.n	5c54 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    5cbe:	2000      	movs	r0, #0
}
    5cc0:	b017      	add	sp, #92	; 0x5c
    5cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    5cc4:	3101      	adds	r1, #1
    5cc6:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    5cc8:	780b      	ldrb	r3, [r1, #0]
    5cca:	2b2f      	cmp	r3, #47	; 0x2f
    5ccc:	d0fa      	beq.n	5cc4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    5cce:	6a31      	ldr	r1, [r6, #32]
    5cd0:	a808      	add	r0, sp, #32
    5cd2:	f7ff f907 	bl	4ee4 <ExFatFile::openRoot(ExFatVolume*)>
    5cd6:	2800      	cmp	r0, #0
    5cd8:	d0f1      	beq.n	5cbe <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    5cda:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    5cdc:	ae08      	add	r6, sp, #32
    5cde:	e7b2      	b.n	5c46 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    5ce0:	aa02      	add	r2, sp, #8
    5ce2:	4631      	mov	r1, r6
    5ce4:	4620      	mov	r0, r4
    5ce6:	f7ff ff67 	bl	5bb8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    5cea:	b017      	add	sp, #92	; 0x5c
    5cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cee:	bf00      	nop

00005cf0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    5cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cf4:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    5cf6:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    5cfa:	b083      	sub	sp, #12
      || second > 59) {
    5cfc:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    5cfe:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    5d02:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    5d06:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    5d0a:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
      || second > 59) {
    5d0e:	f140 8085 	bpl.w	5e1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || year > 2107
    5d12:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    5d16:	b294      	uxth	r4, r2
    5d18:	2c7f      	cmp	r4, #127	; 0x7f
    5d1a:	d87f      	bhi.n	5e1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || month > 12
    5d1c:	1e5a      	subs	r2, r3, #1
    5d1e:	2a0b      	cmp	r2, #11
    5d20:	d87c      	bhi.n	5e1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || day > 31
    5d22:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    5d26:	2a1e      	cmp	r2, #30
    5d28:	d878      	bhi.n	5e1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || minute > 59
    5d2a:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    5d2e:	bf98      	it	ls
    5d30:	f1b9 0f17 	cmpls.w	r9, #23
    5d34:	bf8c      	ite	hi
    5d36:	f04f 0a01 	movhi.w	sl, #1
    5d3a:	f04f 0a00 	movls.w	sl, #0
    5d3e:	2f3b      	cmp	r7, #59	; 0x3b
    5d40:	bf88      	it	hi
    5d42:	f04a 0a01 	orrhi.w	sl, sl, #1
      || second > 59) {
    5d46:	f1ba 0f00 	cmp.w	sl, #0
    5d4a:	d167      	bne.n	5e1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    5d4c:	4605      	mov	r5, r0
    5d4e:	9301      	str	r3, [sp, #4]
    5d50:	f7ff fe58 	bl	5a04 <ExFatFile::sync()>
    5d54:	2800      	cmp	r0, #0
    5d56:	d061      	beq.n	5e1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    5d58:	9b01      	ldr	r3, [sp, #4]
    5d5a:	4651      	mov	r1, sl
    5d5c:	ea4b 1b43 	orr.w	fp, fp, r3, lsl #5
         hour << 11 | minute << 5 | second >> 1;
    5d60:	087b      	lsrs	r3, r7, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    5d62:	f017 0701 	ands.w	r7, r7, #1
         year << 9 | month << 5 | day;
    5d66:	ea4b 2444 	orr.w	r4, fp, r4, lsl #9
  uint16_t checksum = 0;
    5d6a:	46d3      	mov	fp, sl
         hour << 11 | minute << 5 | second >> 1;
    5d6c:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
  ms10 = second & 1 ? 100 : 0;
    5d70:	bf18      	it	ne
    5d72:	2764      	movne	r7, #100	; 0x64
         year << 9 | month << 5 | day;
    5d74:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    5d76:	ea48 28c9 	orr.w	r8, r8, r9, lsl #11
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    5d7a:	f006 0901 	and.w	r9, r6, #1
    5d7e:	fa1f f888 	uxth.w	r8, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    5d82:	2200      	movs	r2, #0
    5d84:	4628      	mov	r0, r5
    5d86:	f7ff f861 	bl	4e4c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    5d8a:	2800      	cmp	r0, #0
    5d8c:	d046      	beq.n	5e1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    switch (cache[0]) {
    5d8e:	f890 c000 	ldrb.w	ip, [r0]
    5d92:	f1bc 0f85 	cmp.w	ip, #133	; 0x85
    5d96:	d045      	beq.n	5e24 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    5d98:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    5d9c:	b2db      	uxtb	r3, r3
    5d9e:	2b01      	cmp	r3, #1
    5da0:	d83c      	bhi.n	5e1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5da2:	f1ac 0185 	sub.w	r1, ip, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5da6:	2300      	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5da8:	fab1 f181 	clz	r1, r1
    5dac:	0949      	lsrs	r1, r1, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5dae:	e002      	b.n	5db6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc6>
    5db0:	2304      	movs	r3, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5db2:	f810 c003 	ldrb.w	ip, [r0, r3]
    5db6:	ea4f 32cb 	mov.w	r2, fp, lsl #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5dba:	2b01      	cmp	r3, #1
    5dbc:	f103 0301 	add.w	r3, r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5dc0:	ea42 025b 	orr.w	r2, r2, fp, lsr #1
    5dc4:	fa1c f282 	uxtah	r2, ip, r2
    5dc8:	fa1f fb82 	uxth.w	fp, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5dcc:	d101      	bne.n	5dd2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe2>
    5dce:	2900      	cmp	r1, #0
    5dd0:	d1ee      	bne.n	5db0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
    5dd2:	2b1f      	cmp	r3, #31
    5dd4:	d9ed      	bls.n	5db2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    5dd6:	f10a 0a01 	add.w	sl, sl, #1
    5dda:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    5dde:	fa5f f18a 	uxtb.w	r1, sl
    5de2:	428b      	cmp	r3, r1
    5de4:	d2cd      	bcs.n	5d82 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x92>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    5de6:	2201      	movs	r2, #1
    5de8:	f105 0124 	add.w	r1, r5, #36	; 0x24
    5dec:	6a28      	ldr	r0, [r5, #32]
    5dee:	f000 fee7 	bl	6bc0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5df2:	b198      	cbz	r0, 5e1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    5df4:	6a2c      	ldr	r4, [r5, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5df6:	f8a0 b002 	strh.w	fp, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5dfa:	4620      	mov	r0, r4
    5dfc:	f005 feec 	bl	bbd8 <FsCache::sync()>
    5e00:	b160      	cbz	r0, 5e1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    5e02:	f504 7004 	add.w	r0, r4, #528	; 0x210
    5e06:	f005 fee7 	bl	bbd8 <FsCache::sync()>
    5e0a:	b138      	cbz	r0, 5e1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    5e0c:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    return m_blockDev->syncDevice();
    5e10:	6803      	ldr	r3, [r0, #0]
    5e12:	6a1b      	ldr	r3, [r3, #32]
  }
  return true;

 fail:
  return false;
}
    5e14:	b003      	add	sp, #12
    5e16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e1a:	4718      	bx	r3
    5e1c:	2000      	movs	r0, #0
    5e1e:	b003      	add	sp, #12
    5e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    5e24:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        m_vol->dataCacheDirty();
    5e28:	6a2a      	ldr	r2, [r5, #32]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    5e2a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    5e2e:	8083      	strh	r3, [r0, #4]
    5e30:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    5e34:	f043 0301 	orr.w	r3, r3, #1
    5e38:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    5e3c:	f1b9 0f00 	cmp.w	r9, #0
    5e40:	d002      	beq.n	5e48 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>
    5e42:	f8a0 8010 	strh.w	r8, [r0, #16]
    5e46:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    5e48:	07b2      	lsls	r2, r6, #30
    5e4a:	d503      	bpl.n	5e54 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
          df->createTimeMs = ms10;
    5e4c:	7507      	strb	r7, [r0, #20]
    5e4e:	f8a0 8008 	strh.w	r8, [r0, #8]
    5e52:	8144      	strh	r4, [r0, #10]
        if (flags & T_WRITE) {
    5e54:	0773      	lsls	r3, r6, #29
    5e56:	d503      	bpl.n	5e60 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
          df->modifyTimeMs = ms10;
    5e58:	7547      	strb	r7, [r0, #21]
    5e5a:	f8a0 800c 	strh.w	r8, [r0, #12]
    5e5e:	81c4      	strh	r4, [r0, #14]
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5e60:	f890 c000 	ldrb.w	ip, [r0]
}
    5e64:	e79d      	b.n	5da2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb2>
    5e66:	bf00      	nop

00005e68 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    5e68:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5e6c:	079a      	lsls	r2, r3, #30
    5e6e:	d562      	bpl.n	5f36 <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    5e70:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5e72:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    5e74:	b082      	sub	sp, #8
    5e76:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    5e78:	b3a5      	cbz	r5, 5ee4 <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    5e7a:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    5e7e:	d034      	beq.n	5eea <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5e80:	6a00      	ldr	r0, [r0, #32]
    5e82:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5e84:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    5e88:	3a01      	subs	r2, #1
    5e8a:	68e1      	ldr	r1, [r4, #12]
    5e8c:	f10c 0c09 	add.w	ip, ip, #9
    5e90:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    5e94:	fa5f fc8c 	uxtb.w	ip, ip
    5e98:	f1cc 0e20 	rsb	lr, ip, #32
    5e9c:	fa22 f20c 	lsr.w	r2, r2, ip
    5ea0:	f1ac 0c20 	sub.w	ip, ip, #32
    5ea4:	fa01 fe0e 	lsl.w	lr, r1, lr
    5ea8:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    5eac:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5eae:	ea42 020e 	orr.w	r2, r2, lr
    5eb2:	ea42 020c 	orr.w	r2, r2, ip
    5eb6:	3201      	adds	r2, #1
    if (m_curCluster) {
    5eb8:	b319      	cbz	r1, 5f02 <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    5eba:	3d01      	subs	r5, #1
    5ebc:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    5ebe:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    5ec0:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    5ec2:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5ec4:	bb72      	cbnz	r2, 5f24 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5ec6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    5eca:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    5ecc:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5ed0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    5ed4:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    5ed8:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    5edc:	f7ff fd92 	bl	5a04 <ExFatFile::sync()>

 fail:
  return false;
}
    5ee0:	b002      	add	sp, #8
    5ee2:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    5ee4:	2001      	movs	r0, #1
}
    5ee6:	b002      	add	sp, #8
    5ee8:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    5eea:	6981      	ldr	r1, [r0, #24]
    5eec:	b961      	cbnz	r1, 5f08 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    5eee:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    5ef0:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    5ef2:	4629      	mov	r1, r5
    5ef4:	6a20      	ldr	r0, [r4, #32]
    5ef6:	f000 ff03 	bl	6d00 <ExFatPartition::freeChain(unsigned long)>
    5efa:	b1c8      	cbz	r0, 5f30 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5efc:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    5f00:	e7e1      	b.n	5ec6 <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    5f02:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    5f04:	61e1      	str	r1, [r4, #28]
    5f06:	e7dd      	b.n	5ec4 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5f08:	aa01      	add	r2, sp, #4
    5f0a:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    5f0c:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5f0e:	f000 feb5 	bl	6c7c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    5f12:	2800      	cmp	r0, #0
    5f14:	db0c      	blt.n	5f30 <ExFatFile::truncate()+0xc8>
      if (fg) {
    5f16:	d110      	bne.n	5f3a <ExFatFile::truncate()+0xd2>
    if (toFree) {
    5f18:	9d01      	ldr	r5, [sp, #4]
    5f1a:	2d00      	cmp	r5, #0
    5f1c:	d1e9      	bne.n	5ef2 <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5f1e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    5f22:	e7d0      	b.n	5ec6 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5f24:	2300      	movs	r3, #0
    5f26:	9901      	ldr	r1, [sp, #4]
    5f28:	f000 fdce 	bl	6ac8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5f2c:	2800      	cmp	r0, #0
    5f2e:	d1e5      	bne.n	5efc <ExFatFile::truncate()+0x94>
  return false;
    5f30:	2000      	movs	r0, #0
}
    5f32:	b002      	add	sp, #8
    5f34:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    5f36:	2000      	movs	r0, #0
}
    5f38:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    5f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5f3e:	69a1      	ldr	r1, [r4, #24]
    5f40:	6a20      	ldr	r0, [r4, #32]
    5f42:	f000 febd 	bl	6cc0 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5f46:	2800      	cmp	r0, #0
    5f48:	d1e6      	bne.n	5f18 <ExFatFile::truncate()+0xb0>
    5f4a:	e7f1      	b.n	5f30 <ExFatFile::truncate()+0xc8>

00005f4c <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5f50:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    5f54:	b083      	sub	sp, #12
    5f56:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5f58:	079d      	lsls	r5, r3, #30
    5f5a:	f140 80a1 	bpl.w	60a0 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5f5e:	4691      	mov	r9, r2
    5f60:	071a      	lsls	r2, r3, #28
    5f62:	460e      	mov	r6, r1
    5f64:	f100 8095 	bmi.w	6092 <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5f68:	f1b9 0f00 	cmp.w	r9, #0
    5f6c:	f000 8128 	beq.w	61c0 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    5f70:	6823      	ldr	r3, [r4, #0]
    5f72:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5f74:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    5f76:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5f78:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    5f7c:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5f80:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    5f84:	f1b8 0f00 	cmp.w	r8, #0
    5f88:	f040 8094 	bne.w	60b4 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    5f8c:	2900      	cmp	r1, #0
    5f8e:	f000 80d4 	beq.w	613a <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    5f92:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    5f96:	065b      	lsls	r3, r3, #25
    5f98:	f140 80ec 	bpl.w	6174 <ExFatFile::write(void const*, unsigned int)+0x228>
    5f9c:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    5fa0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5fa4:	f10c 0c09 	add.w	ip, ip, #9
    5fa8:	3b01      	subs	r3, #1
    5faa:	fa5f fc8c 	uxtb.w	ip, ip
    5fae:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    5fb2:	f1cc 0e20 	rsb	lr, ip, #32
    5fb6:	fa23 f30c 	lsr.w	r3, r3, ip
    5fba:	f1ac 0c20 	sub.w	ip, ip, #32
    5fbe:	fa02 fe0e 	lsl.w	lr, r2, lr
    5fc2:	fa22 fc0c 	lsr.w	ip, r2, ip
    5fc6:	69e2      	ldr	r2, [r4, #28]
    5fc8:	ea43 030e 	orr.w	r3, r3, lr
    5fcc:	ea43 030c 	orr.w	r3, r3, ip
    5fd0:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    5fd2:	4299      	cmp	r1, r3
    5fd4:	f080 80d5 	bcs.w	6182 <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    5fd8:	3101      	adds	r1, #1
    5fda:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    5fdc:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    5fe0:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    5fe2:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    5fe6:	4091      	lsls	r1, r2
    5fe8:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    5fea:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    5fee:	f0c0 808a 	bcc.w	6106 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    5ff2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    5ff6:	f0c0 80a6 	bcc.w	6146 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5ffa:	2301      	movs	r3, #1
    5ffc:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    5ffe:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    6000:	eba3 0308 	sub.w	r3, r3, r8
    6004:	4293      	cmp	r3, r2
    6006:	bf28      	it	cs
    6008:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    600a:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    600e:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    6010:	ea4f 2843 	mov.w	r8, r3, lsl #9
    6014:	d309      	bcc.n	602a <ExFatFile::write(void const*, unsigned int)+0xde>
    6016:	185f      	adds	r7, r3, r1
    6018:	42ba      	cmp	r2, r7
    601a:	d206      	bcs.n	602a <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    601c:	2200      	movs	r2, #0
    601e:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6026:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    602a:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    602e:	4632      	mov	r2, r6
    6030:	6807      	ldr	r7, [r0, #0]
    6032:	6abf      	ldr	r7, [r7, #40]	; 0x28
    6034:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    6036:	b398      	cbz	r0, 60a0 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    6038:	4643      	mov	r3, r8
    src += n;
    603a:	4446      	add	r6, r8
    toWrite -= n;
    603c:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    6040:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    6044:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    6048:	19db      	adds	r3, r3, r7
    604a:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    604e:	4298      	cmp	r0, r3
    6050:	4191      	sbcs	r1, r2
    m_curPosition += n;
    6052:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    6056:	d207      	bcs.n	6068 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6058:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    605c:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    6060:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6064:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    6068:	2d00      	cmp	r5, #0
    606a:	d183      	bne.n	5f74 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    606c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    6070:	4298      	cmp	r0, r3
    6072:	4191      	sbcs	r1, r2
    6074:	f0c0 8096 	bcc.w	61a4 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    6078:	4b53      	ldr	r3, [pc, #332]	; (61c8 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    607a:	681b      	ldr	r3, [r3, #0]
    607c:	2b00      	cmp	r3, #0
    607e:	f000 809d 	beq.w	61bc <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6082:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6086:	4648      	mov	r0, r9
    6088:	f063 037f 	orn	r3, r3, #127	; 0x7f
    608c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    6090:	e00d      	b.n	60ae <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    6092:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    6096:	f7ff f86d 	bl	5174 <ExFatFile::seekSet(unsigned long long)>
    609a:	2800      	cmp	r0, #0
    609c:	f47f af64 	bne.w	5f68 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    60a0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    60a4:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    60a6:	f043 0301 	orr.w	r3, r3, #1
    60aa:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    60ae:	b003      	add	sp, #12
    60b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    60b4:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    60b8:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    60ba:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    60be:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    60c2:	4091      	lsls	r1, r2
    60c4:	4441      	add	r1, r8
    60c6:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    60c8:	2f00      	cmp	r7, #0
    60ca:	d08e      	beq.n	5fea <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    60cc:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    60d0:	2201      	movs	r2, #1
    60d2:	f500 7004 	add.w	r0, r0, #528	; 0x210
    60d6:	45a8      	cmp	r8, r5
    60d8:	bf28      	it	cs
    60da:	46a8      	movcs	r8, r5
    60dc:	f005 fda8 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    60e0:	2800      	cmp	r0, #0
    60e2:	d0dd      	beq.n	60a0 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    60e4:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    60e6:	4447      	add	r7, r8
      memcpy(dst, src, n);
    60e8:	4642      	mov	r2, r8
    60ea:	4631      	mov	r1, r6
    60ec:	f008 f912 	bl	e314 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    60f0:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    60f4:	6a20      	ldr	r0, [r4, #32]
    60f6:	d19f      	bne.n	6038 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    60f8:	f500 7004 	add.w	r0, r0, #528	; 0x210
    60fc:	f005 fd6c 	bl	bbd8 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    6100:	2800      	cmp	r0, #0
    6102:	d199      	bne.n	6038 <ExFatFile::write(void const*, unsigned int)+0xec>
    6104:	e7cc      	b.n	60a0 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    6106:	6862      	ldr	r2, [r4, #4]
    6108:	6963      	ldr	r3, [r4, #20]
    610a:	9200      	str	r2, [sp, #0]
    610c:	9301      	str	r3, [sp, #4]
    610e:	6922      	ldr	r2, [r4, #16]
    6110:	6823      	ldr	r3, [r4, #0]
    6112:	4293      	cmp	r3, r2
    6114:	e9dd 2300 	ldrd	r2, r3, [sp]
    6118:	419a      	sbcs	r2, r3
    611a:	d212      	bcs.n	6142 <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    611c:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    611e:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6122:	f005 fd85 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6126:	2800      	cmp	r0, #0
    6128:	d0ba      	beq.n	60a0 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    612a:	462a      	mov	r2, r5
    612c:	4631      	mov	r1, r6
    612e:	4438      	add	r0, r7
    m_curPosition += n;
    6130:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    6132:	f008 f8ef 	bl	e314 <memcpy>
    m_curPosition += n;
    6136:	462b      	mov	r3, r5
    6138:	e77f      	b.n	603a <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    613a:	69e1      	ldr	r1, [r4, #28]
    613c:	b349      	cbz	r1, 6192 <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    613e:	61a1      	str	r1, [r4, #24]
    6140:	e74c      	b.n	5fdc <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6142:	2205      	movs	r2, #5
    6144:	e7eb      	b.n	611e <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    6146:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    614a:	428b      	cmp	r3, r1
    614c:	d106      	bne.n	615c <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    614e:	2300      	movs	r3, #0
    6150:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6158:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    615c:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    6160:	4632      	mov	r2, r6
    6162:	6803      	ldr	r3, [r0, #0]
    6164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6166:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6168:	2800      	cmp	r0, #0
    616a:	d099      	beq.n	60a0 <ExFatFile::write(void const*, unsigned int)+0x154>
    616c:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    6170:	4698      	mov	r8, r3
    6172:	e762      	b.n	603a <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6174:	f104 0218 	add.w	r2, r4, #24
    6178:	f000 fd80 	bl	6c7c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    617c:	2800      	cmp	r0, #0
    617e:	db8f      	blt.n	60a0 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    6180:	d104      	bne.n	618c <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    6182:	4620      	mov	r0, r4
    6184:	f7ff face 	bl	5724 <ExFatFile::addCluster()>
    6188:	2800      	cmp	r0, #0
    618a:	d089      	beq.n	60a0 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    618c:	69a1      	ldr	r1, [r4, #24]
    618e:	6a20      	ldr	r0, [r4, #32]
    6190:	e724      	b.n	5fdc <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    6192:	4620      	mov	r0, r4
    6194:	f7ff fac6 	bl	5724 <ExFatFile::addCluster()>
    6198:	2800      	cmp	r0, #0
    619a:	d081      	beq.n	60a0 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    619c:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    619e:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    61a0:	61e1      	str	r1, [r4, #28]
    61a2:	e71b      	b.n	5fdc <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    61a4:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    61a8:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    61aa:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    61ae:	f061 037f 	orn	r3, r1, #127	; 0x7f
    61b2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    61b6:	b003      	add	sp, #12
    61b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    61bc:	4648      	mov	r0, r9
    61be:	e776      	b.n	60ae <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    61c0:	e9d4 3200 	ldrd	r3, r2, [r4]
    61c4:	e752      	b.n	606c <ExFatFile::write(void const*, unsigned int)+0x120>
    61c6:	bf00      	nop
    61c8:	200042b4 	.word	0x200042b4

000061cc <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    61cc:	b169      	cbz	r1, 61ea <Print::write(char const*) [clone .isra.0]+0x1e>
    61ce:	b570      	push	{r4, r5, r6, lr}
    61d0:	4605      	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
    61d2:	4608      	mov	r0, r1
    61d4:	460c      	mov	r4, r1
    61d6:	f00c f9b3 	bl	12540 <strlen>
    61da:	682b      	ldr	r3, [r5, #0]
    61dc:	4602      	mov	r2, r0
    61de:	4621      	mov	r1, r4
    61e0:	4628      	mov	r0, r5
    61e2:	685b      	ldr	r3, [r3, #4]
    61e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    61e8:	4718      	bx	r3
    61ea:	4770      	bx	lr

000061ec <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    61ec:	6883      	ldr	r3, [r0, #8]
    61ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    61f2:	b183      	cbz	r3, 6216 <ExFatFormatter::syncUpcase()+0x2a>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    61f4:	2100      	movs	r1, #0
bool ExFatFormatter::syncUpcase() {
    61f6:	b410      	push	{r4}
    m_secBuf[i] = 0;
    61f8:	6902      	ldr	r2, [r0, #16]
    61fa:	54d1      	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    61fc:	3301      	adds	r3, #1
    61fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6202:	d1f9      	bne.n	61f8 <ExFatFormatter::syncUpcase()+0xc>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    6204:	6801      	ldr	r1, [r0, #0]
    6206:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    620a:	681c      	ldr	r4, [r3, #0]
    620c:	4618      	mov	r0, r3
    620e:	6a63      	ldr	r3, [r4, #36]	; 0x24
}
    6210:	f85d 4b04 	ldr.w	r4, [sp], #4
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    6214:	4718      	bx	r3
}
    6216:	2001      	movs	r0, #1
    6218:	4770      	bx	lr
    621a:	bf00      	nop

0000621c <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    621c:	6882      	ldr	r2, [r0, #8]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    621e:	4603      	mov	r3, r0
  m_secBuf[index] = b;
    6220:	6900      	ldr	r0, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    6222:	f240 1cff 	movw	ip, #511	; 0x1ff
    6226:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    622a:	5481      	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    622c:	4562      	cmp	r2, ip
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    622e:	6858      	ldr	r0, [r3, #4]
    6230:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseSize++;
    6234:	6898      	ldr	r0, [r3, #8]
    6236:	f100 0001 	add.w	r0, r0, #1
    623a:	e9c3 1001 	strd	r1, r0, [r3, #4]
  if (index == SECTOR_MASK) {
    623e:	d001      	beq.n	6244 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x28>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
    6240:	2001      	movs	r0, #1
    6242:	4770      	bx	lr
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    6244:	68d8      	ldr	r0, [r3, #12]
    6246:	6819      	ldr	r1, [r3, #0]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    6248:	b410      	push	{r4}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    624a:	6804      	ldr	r4, [r0, #0]
    624c:	1c4a      	adds	r2, r1, #1
    624e:	6a64      	ldr	r4, [r4, #36]	; 0x24
    6250:	601a      	str	r2, [r3, #0]
    6252:	691a      	ldr	r2, [r3, #16]
    6254:	4623      	mov	r3, r4
}
    6256:	f85d 4b04 	ldr.w	r4, [sp], #4
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    625a:	4718      	bx	r3

0000625c <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    625c:	b538      	push	{r3, r4, r5, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    625e:	6883      	ldr	r3, [r0, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6260:	b2ca      	uxtb	r2, r1
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    6262:	460d      	mov	r5, r1
  m_secBuf[index] = b;
    6264:	6901      	ldr	r1, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    6266:	f3c3 0308 	ubfx	r3, r3, #0, #9
    626a:	f240 1cff 	movw	ip, #511	; 0x1ff
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    626e:	4604      	mov	r4, r0
  m_secBuf[index] = b;
    6270:	54ca      	strb	r2, [r1, r3]
  if (index == SECTOR_MASK) {
    6272:	4563      	cmp	r3, ip
    6274:	6841      	ldr	r1, [r0, #4]
    6276:	eb02 0271 	add.w	r2, r2, r1, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    627a:	6042      	str	r2, [r0, #4]
  m_upcaseSize++;
    627c:	6882      	ldr	r2, [r0, #8]
    627e:	f102 0201 	add.w	r2, r2, #1
    6282:	6082      	str	r2, [r0, #8]
  if (index == SECTOR_MASK) {
    6284:	d005      	beq.n	6292 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x36>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6286:	0a29      	lsrs	r1, r5, #8
    6288:	4620      	mov	r0, r4
}
    628a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    628e:	f7ff bfc5 	b.w	621c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    6292:	6801      	ldr	r1, [r0, #0]
    6294:	68c0      	ldr	r0, [r0, #12]
    6296:	1c4a      	adds	r2, r1, #1
    6298:	6803      	ldr	r3, [r0, #0]
    629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    629c:	6022      	str	r2, [r4, #0]
    629e:	6922      	ldr	r2, [r4, #16]
    62a0:	4798      	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    62a2:	2800      	cmp	r0, #0
    62a4:	d1ef      	bne.n	6286 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x2a>
}
    62a6:	bd38      	pop	{r3, r4, r5, pc}

000062a8 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    62a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    62aa:	2300      	movs	r3, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    62ac:	4606      	mov	r6, r0
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    62ae:	6001      	str	r1, [r0, #0]
  uint32_t ch = 0;
    62b0:	461d      	mov	r5, r3
  m_upcaseChecksum = 0;
    62b2:	e9c0 3301 	strd	r3, r3, [r0, #4]

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    62b6:	b2a8      	uxth	r0, r5
    62b8:	f005 fe0c 	bl	bed4 <toUpcase(unsigned short)>
    if (uc != ch) {
    62bc:	42a8      	cmp	r0, r5
    uc = toUpcase(ch);
    62be:	4604      	mov	r4, r0
    if (uc != ch) {
    62c0:	d007      	beq.n	62d2 <ExFatFormatter::writeUpcase(unsigned long)+0x2a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    62c2:	b2c1      	uxtb	r1, r0
    62c4:	4630      	mov	r0, r6
    62c6:	f7ff ffa9 	bl	621c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    62ca:	2800      	cmp	r0, #0
    62cc:	d13b      	bne.n	6346 <ExFatFormatter::writeUpcase(unsigned long)+0x9e>
  }
  return true;

 fail:
  return false;
}
    62ce:	2000      	movs	r0, #0
    62d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    62d2:	1c6c      	adds	r4, r5, #1
    62d4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    62d8:	d104      	bne.n	62e4 <ExFatFormatter::writeUpcase(unsigned long)+0x3c>
    62da:	e02a      	b.n	6332 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
    62dc:	3401      	adds	r4, #1
    62de:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    62e2:	d004      	beq.n	62ee <ExFatFormatter::writeUpcase(unsigned long)+0x46>
    62e4:	b2a0      	uxth	r0, r4
    62e6:	f005 fdf5 	bl	bed4 <toUpcase(unsigned short)>
    62ea:	42a0      	cmp	r0, r4
    62ec:	d0f6      	beq.n	62dc <ExFatFormatter::writeUpcase(unsigned long)+0x34>
      ns = n - ch;
    62ee:	1b67      	subs	r7, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    62f0:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    62f4:	d31d      	bcc.n	6332 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    62f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    62fa:	4630      	mov	r0, r6
    62fc:	f7ff ffae 	bl	625c <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6300:	2800      	cmp	r0, #0
    6302:	d0e4      	beq.n	62ce <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    6304:	b2b9      	uxth	r1, r7
    6306:	4630      	mov	r0, r6
    6308:	f7ff ffa8 	bl	625c <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    630c:	2800      	cmp	r0, #0
    630e:	d0de      	beq.n	62ce <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    6310:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    6312:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    6316:	d1ce      	bne.n	62b6 <ExFatFormatter::writeUpcase(unsigned long)+0xe>
  if (!syncUpcase()) {
    6318:	4630      	mov	r0, r6
}
    631a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!syncUpcase()) {
    631e:	f7ff bf65 	b.w	61ec <ExFatFormatter::syncUpcase()>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6322:	f3c5 2107 	ubfx	r1, r5, #8, #8
    6326:	4630      	mov	r0, r6
    6328:	3501      	adds	r5, #1
    632a:	f7ff ff77 	bl	621c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    632e:	2800      	cmp	r0, #0
    6330:	d0cd      	beq.n	62ce <ExFatFormatter::writeUpcase(unsigned long)+0x26>
        while (ch < n) {
    6332:	42a5      	cmp	r5, r4
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6334:	b2e9      	uxtb	r1, r5
    6336:	4630      	mov	r0, r6
        while (ch < n) {
    6338:	d2eb      	bcs.n	6312 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    633a:	f7ff ff6f 	bl	621c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    633e:	2800      	cmp	r0, #0
    6340:	d1ef      	bne.n	6322 <ExFatFormatter::writeUpcase(unsigned long)+0x7a>
}
    6342:	2000      	movs	r0, #0
    6344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6346:	f3c4 2107 	ubfx	r1, r4, #8, #8
    634a:	4630      	mov	r0, r6
    634c:	f7ff ff66 	bl	621c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    6350:	2800      	cmp	r0, #0
    6352:	d0bc      	beq.n	62ce <ExFatFormatter::writeUpcase(unsigned long)+0x26>
      ch++;
    6354:	3501      	adds	r5, #1
    6356:	e7dc      	b.n	6312 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>

00006358 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    6358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    635c:	461f      	mov	r7, r3
    635e:	b089      	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    6360:	680b      	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    6362:	460d      	mov	r5, r1
    6364:	9004      	str	r0, [sp, #16]
    6366:	4614      	mov	r4, r2
  m_dev = dev;
    6368:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    636a:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    636c:	4608      	mov	r0, r1
    636e:	69db      	ldr	r3, [r3, #28]
    6370:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    6372:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    6376:	9000      	str	r0, [sp, #0]
  if (sectorCount < 0X100000) {
    6378:	f0c0 80d8 	bcc.w	652c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d4>
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    637c:	2300      	movs	r3, #0
    637e:	2201      	movs	r2, #1
    6380:	9e00      	ldr	r6, [sp, #0]
    6382:	3301      	adds	r3, #1
    6384:	0052      	lsls	r2, r2, #1
    6386:	b2db      	uxtb	r3, r3
    6388:	d001      	beq.n	638e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36>
    638a:	4296      	cmp	r6, r2
    638c:	d8f9      	bhi.n	6382 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    638e:	2b1c      	cmp	r3, #28
    6390:	9600      	str	r6, [sp, #0]
    6392:	f240 80b7 	bls.w	6504 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ac>
    6396:	f1a3 080b 	sub.w	r8, r3, #11
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    639a:	2201      	movs	r2, #1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    639c:	fa48 f102 	asr.w	r1, r8, r2
    63a0:	f3c8 0847 	ubfx	r8, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    63a4:	408a      	lsls	r2, r1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    63a6:	9102      	str	r1, [sp, #8]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    63a8:	9207      	str	r2, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    63aa:	3301      	adds	r3, #1
    63ac:	2201      	movs	r2, #1
    63ae:	105b      	asrs	r3, r3, #1
    63b0:	409a      	lsls	r2, r3
    63b2:	9206      	str	r2, [sp, #24]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    63b4:	2204      	movs	r2, #4
    63b6:	409a      	lsls	r2, r3
    63b8:	9203      	str	r2, [sp, #12]
  partitionOffset = 2*fatLength;
    63ba:	2202      	movs	r2, #2
    63bc:	fa02 f303 	lsl.w	r3, r2, r3
    63c0:	9301      	str	r3, [sp, #4]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    63c2:	9a00      	ldr	r2, [sp, #0]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    63c4:	2100      	movs	r1, #0
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    63c6:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    63c8:	4620      	mov	r0, r4
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    63ca:	9e02      	ldr	r6, [sp, #8]
  mbr->part->beginCHS[0] = 1;
    63cc:	f04f 0a01 	mov.w	sl, #1
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    63d0:	1ad3      	subs	r3, r2, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    63d2:	f44f 7200 	mov.w	r2, #512	; 0x200
  *reinterpret_cast<uint16_t*>(dst) = src;
    63d6:	f64a 2b55 	movw	fp, #43605	; 0xaa55
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    63da:	40f3      	lsrs	r3, r6
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    63dc:	fa03 f906 	lsl.w	r9, r3, r6
    63e0:	9305      	str	r3, [sp, #20]
    63e2:	9e01      	ldr	r6, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    63e4:	f00b fd02 	bl	11dec <memset>
  mbr->part->endCHS[1] = 0XFF;
    63e8:	23ff      	movs	r3, #255	; 0xff
  mbr->part->beginCHS[0] = 1;
    63ea:	f884 a1bf 	strb.w	sl, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    63ee:	f884 a1c0 	strb.w	sl, [r4, #448]	; 0x1c0
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    63f2:	44b1      	add	r9, r6
  mbr->part->endCHS[1] = 0XFF;
    63f4:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  if (!dev->writeSector(0, secBuf)) {
    63f8:	4622      	mov	r2, r4
  mbr->part->endCHS[2] = 0XFF;
    63fa:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  mbr->part->type = 7;
    63fe:	2307      	movs	r3, #7
  if (!dev->writeSector(0, secBuf)) {
    6400:	2100      	movs	r1, #0
    6402:	4628      	mov	r0, r5
  mbr->part->type = 7;
    6404:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    6408:	23fe      	movs	r3, #254	; 0xfe
  *reinterpret_cast<uint32_t*>(dst) = src;
    640a:	f8c4 61c6 	str.w	r6, [r4, #454]	; 0x1c6
    640e:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  if (!dev->writeSector(0, secBuf)) {
    6412:	682b      	ldr	r3, [r5, #0]
    6414:	f8c4 91ca 	str.w	r9, [r4, #458]	; 0x1ca
    6418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  *reinterpret_cast<uint16_t*>(dst) = src;
    641a:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    641e:	4798      	blx	r3
    6420:	2800      	cmp	r0, #0
    6422:	d063      	beq.n	64ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6424:	f44f 7200 	mov.w	r2, #512	; 0x200
    6428:	2100      	movs	r1, #0
    642a:	4620      	mov	r0, r4
    642c:	f00b fcde 	bl	11dec <memset>
  *reinterpret_cast<uint32_t*>(dst) = src;
    6430:	9b00      	ldr	r3, [sp, #0]
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    6432:	f884 806d 	strb.w	r8, [r4, #109]	; 0x6d
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6436:	f04f 0800 	mov.w	r8, #0
    643a:	6663      	str	r3, [r4, #100]	; 0x64
    pbs->bootCode[i] = 0XF4;
    643c:	21f4      	movs	r1, #244	; 0xf4
    643e:	9b05      	ldr	r3, [sp, #20]
    6440:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6444:	9a06      	ldr	r2, [sp, #24]
    6446:	65e3      	str	r3, [r4, #92]	; 0x5c
  pbs->oemName[5] = ' ';
    6448:	2320      	movs	r3, #32
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    644a:	6426      	str	r6, [r4, #64]	; 0x40
  pbs->oemName[5] = ' ';
    644c:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    644e:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    6450:	72a3      	strb	r3, [r4, #10]
  pbs->jmpInstruction[0] = 0XEB;
    6452:	23eb      	movs	r3, #235	; 0xeb
    6454:	65a6      	str	r6, [r4, #88]	; 0x58
  uint32_t checksum = 0;
    6456:	4646      	mov	r6, r8
  pbs->jmpInstruction[0] = 0XEB;
    6458:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    645a:	2376      	movs	r3, #118	; 0x76
  setLe64(pbs->bpb.volumeLength, volumeLength);
    645c:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  pbs->jmpInstruction[1] = 0X76;
    6460:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    6462:	2390      	movs	r3, #144	; 0x90
  pbs->bpb.numberOfFats = 1;
    6464:	f884 a06e 	strb.w	sl, [r4, #110]	; 0x6e
  pbs->jmpInstruction[2] = 0X90;
    6468:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    646a:	2345      	movs	r3, #69	; 0x45
    646c:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    646e:	2358      	movs	r3, #88	; 0x58
    6470:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    6472:	2346      	movs	r3, #70	; 0x46
    6474:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    6476:	2341      	movs	r3, #65	; 0x41
    6478:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    647a:	2354      	movs	r3, #84	; 0x54
    647c:	71e3      	strb	r3, [r4, #7]
    647e:	2304      	movs	r3, #4
    6480:	6623      	str	r3, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    6482:	f44f 7380 	mov.w	r3, #256	; 0x100
    6486:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    648a:	2309      	movs	r3, #9
    648c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.driveSelect = 0X80;
    6490:	2380      	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    6492:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
    6496:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    649a:	f44f 72c3 	mov.w	r2, #390	; 0x186
    649e:	f00b fca5 	bl	11dec <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    64a2:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    64a6:	f1a8 036a 	sub.w	r3, r8, #106	; 0x6a
    64aa:	2b01      	cmp	r3, #1
    64ac:	d906      	bls.n	64bc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
    64ae:	f1b8 0f70 	cmp.w	r8, #112	; 0x70
    64b2:	d003      	beq.n	64bc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
  return (sum << 31) + (sum >> 1) + data;
    64b4:	f814 3008 	ldrb.w	r3, [r4, r8]
    64b8:	eb03 0676 	add.w	r6, r3, r6, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    64bc:	f108 0801 	add.w	r8, r8, #1
    64c0:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    64c4:	d1ef      	bne.n	64a6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x14e>
  if (!dev->writeSector(sector, secBuf)  ||
    64c6:	682b      	ldr	r3, [r5, #0]
    64c8:	4622      	mov	r2, r4
    64ca:	f8dd 9004 	ldr.w	r9, [sp, #4]
    64ce:	4628      	mov	r0, r5
    64d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    64d2:	4649      	mov	r1, r9
    64d4:	4798      	blx	r3
    64d6:	b148      	cbz	r0, 64ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    64d8:	682b      	ldr	r3, [r5, #0]
    64da:	4649      	mov	r1, r9
    64dc:	4622      	mov	r2, r4
    64de:	4628      	mov	r0, r5
    64e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    64e2:	310c      	adds	r1, #12
    64e4:	f8cd 9004 	str.w	r9, [sp, #4]
    64e8:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    64ea:	bb40      	cbnz	r0, 653e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
  writeMsg(pr, "Format failed\r\n");
    64ec:	b12f      	cbz	r7, 64fa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    64ee:	683b      	ldr	r3, [r7, #0]
    64f0:	220f      	movs	r2, #15
    64f2:	49b8      	ldr	r1, [pc, #736]	; (67d4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x47c>)
    64f4:	4638      	mov	r0, r7
    64f6:	685b      	ldr	r3, [r3, #4]
    64f8:	4798      	blx	r3
  return false;
    64fa:	2600      	movs	r6, #0
}
    64fc:	4630      	mov	r0, r6
    64fe:	b009      	add	sp, #36	; 0x24
    6500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6504:	2b1a      	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    6506:	f04f 0808 	mov.w	r8, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    650a:	f200 81a6 	bhi.w	685a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
    650e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6512:	f8cd 8008 	str.w	r8, [sp, #8]
    6516:	9301      	str	r3, [sp, #4]
    6518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    651c:	9303      	str	r3, [sp, #12]
    651e:	f44f 7380 	mov.w	r3, #256	; 0x100
    6522:	9307      	str	r3, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    6528:	9306      	str	r3, [sp, #24]
    652a:	e74a      	b.n	63c2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
    writeMsg(pr, "Device is too small\r\n");
    652c:	2f00      	cmp	r7, #0
    652e:	d0e4      	beq.n	64fa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    6530:	683b      	ldr	r3, [r7, #0]
    6532:	2215      	movs	r2, #21
    6534:	49a8      	ldr	r1, [pc, #672]	; (67d8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x480>)
    6536:	4638      	mov	r0, r7
    6538:	685b      	ldr	r3, [r3, #4]
    653a:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    653c:	e7d7      	b.n	64ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    653e:	4642      	mov	r2, r8
    6540:	2100      	movs	r1, #0
    6542:	4620      	mov	r0, r4
  sector++;
    6544:	f109 0a01 	add.w	sl, r9, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6548:	f00b fc50 	bl	11dec <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    654c:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6550:	f109 0209 	add.w	r2, r9, #9
    6554:	f204 19ff 	addw	r9, r4, #511	; 0x1ff
    6558:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
    655c:	2300      	movs	r3, #0
    655e:	4693      	mov	fp, r2
  uint32_t checksum = 0;
    6560:	46a0      	mov	r8, r4
    6562:	e001      	b.n	6568 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x210>
      checksum = exFatChecksum(checksum, secBuf[i]);
    6564:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6568:	45c1      	cmp	r9, r8
  return (sum << 31) + (sum >> 1) + data;
    656a:	eb03 0676 	add.w	r6, r3, r6, ror #1
    656e:	d1f9      	bne.n	6564 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x20c>
    if (!dev->writeSector(sector, secBuf)  ||
    6570:	682b      	ldr	r3, [r5, #0]
    6572:	4622      	mov	r2, r4
    6574:	4651      	mov	r1, sl
    6576:	4628      	mov	r0, r5
    6578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    657a:	4798      	blx	r3
    657c:	2800      	cmp	r0, #0
    657e:	d0b5      	beq.n	64ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6580:	682b      	ldr	r3, [r5, #0]
    6582:	4622      	mov	r2, r4
    6584:	f10a 010c 	add.w	r1, sl, #12
    6588:	4628      	mov	r0, r5
    658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    658c:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    658e:	2800      	cmp	r0, #0
    6590:	d0ac      	beq.n	64ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    6592:	f10a 0301 	add.w	r3, sl, #1
  for (int j = 0; j < 8; j++) {
    6596:	459b      	cmp	fp, r3
    6598:	d002      	beq.n	65a0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x248>
      checksum = exFatChecksum(checksum, secBuf[i]);
    659a:	469a      	mov	sl, r3
    659c:	7823      	ldrb	r3, [r4, #0]
    659e:	e7df      	b.n	6560 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x208>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    65a0:	f44f 7200 	mov.w	r2, #512	; 0x200
    65a4:	2100      	movs	r1, #0
    65a6:	4620      	mov	r0, r4
    65a8:	469b      	mov	fp, r3
    65aa:	f00b fc1f 	bl	11dec <memset>
    65ae:	2200      	movs	r2, #0
    65b0:	f10a 0a03 	add.w	sl, sl, #3
    65b4:	4611      	mov	r1, r2
  *reinterpret_cast<uint16_t*>(dst) = src;
    65b6:	4623      	mov	r3, r4
    65b8:	e001      	b.n	65be <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x266>
      checksum = exFatChecksum(checksum, secBuf[i]);
    65ba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    65be:	4598      	cmp	r8, r3
  return (sum << 31) + (sum >> 1) + data;
    65c0:	eb01 0676 	add.w	r6, r1, r6, ror #1
    65c4:	d1f9      	bne.n	65ba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x262>
    if (!dev->writeSector(sector, secBuf)  ||
    65c6:	682b      	ldr	r3, [r5, #0]
    65c8:	4622      	mov	r2, r4
    65ca:	4659      	mov	r1, fp
    65cc:	4628      	mov	r0, r5
    65ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    65d0:	4798      	blx	r3
    65d2:	2800      	cmp	r0, #0
    65d4:	d08a      	beq.n	64ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    65d6:	682b      	ldr	r3, [r5, #0]
    65d8:	4622      	mov	r2, r4
    65da:	f10b 010c 	add.w	r1, fp, #12
    65de:	4628      	mov	r0, r5
    65e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    65e2:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    65e4:	2800      	cmp	r0, #0
    65e6:	d081      	beq.n	64ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    65e8:	f10b 0101 	add.w	r1, fp, #1
  for (int j = 0; j < 2; j++) {
    65ec:	458a      	cmp	sl, r1
    65ee:	d16a      	bne.n	66c6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    65f0:	1f23      	subs	r3, r4, #4
    65f2:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    65f6:	f843 6f04 	str.w	r6, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    65fa:	429a      	cmp	r2, r3
    65fc:	d1fb      	bne.n	65f6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x29e>
  if (!dev->writeSector(sector, secBuf)  ||
    65fe:	682b      	ldr	r3, [r5, #0]
    6600:	4622      	mov	r2, r4
    6602:	4628      	mov	r0, r5
    6604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6606:	4798      	blx	r3
    6608:	2800      	cmp	r0, #0
    660a:	f43f af6f 	beq.w	64ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    660e:	682b      	ldr	r3, [r5, #0]
    6610:	f10b 010d 	add.w	r1, fp, #13
    6614:	4622      	mov	r2, r4
    6616:	4628      	mov	r0, r5
    6618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    661a:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    661c:	2800      	cmp	r0, #0
    661e:	f43f af65 	beq.w	64ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  writeMsg(pr, "Writing FAT ");
    6622:	b12f      	cbz	r7, 6630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d8>
    6624:	683b      	ldr	r3, [r7, #0]
    6626:	220c      	movs	r2, #12
    6628:	496c      	ldr	r1, [pc, #432]	; (67dc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x484>)
    662a:	4638      	mov	r0, r7
    662c:	685b      	ldr	r3, [r3, #4]
    662e:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    6630:	9a06      	ldr	r2, [sp, #24]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6632:	2100      	movs	r1, #0
  sector = partitionOffset + fatOffset;
    6634:	9b01      	ldr	r3, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6636:	4620      	mov	r0, r4
  for (uint32_t i = 0; i < ns; i++) {
    6638:	2600      	movs	r6, #0
  sector = partitionOffset + fatOffset;
    663a:	4413      	add	r3, r2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    663c:	f44f 7200 	mov.w	r2, #512	; 0x200
  sector = partitionOffset + fatOffset;
    6640:	4699      	mov	r9, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6642:	9b05      	ldr	r3, [sp, #20]
    6644:	ea4f 0883 	mov.w	r8, r3, lsl #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6648:	f00b fbd0 	bl	11dec <memset>
  secBuf[0] = 0XF8;
    664c:	4623      	mov	r3, r4
    secBuf[i] = 0XFF;
    664e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6652:	f208 2807 	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    6656:	21f8      	movs	r1, #248	; 0xf8
      writeMsg(pr, ".");
    6658:	f1b7 0b00 	subs.w	fp, r7, #0
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    665c:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  secBuf[0] = 0XF8;
    6660:	f803 1b01 	strb.w	r1, [r3], #1
    if (i%(ns/32) == 0) {
    6664:	ea4f 3898 	mov.w	r8, r8, lsr #14
    secBuf[i] = 0XFF;
    6668:	f8c4 2001 	str.w	r2, [r4, #1]
      writeMsg(pr, ".");
    666c:	bf18      	it	ne
    666e:	f04f 0b01 	movne.w	fp, #1
    secBuf[i] = 0XFF;
    6672:	60da      	str	r2, [r3, #12]
    6674:	605a      	str	r2, [r3, #4]
    6676:	609a      	str	r2, [r3, #8]
    6678:	f8c3 200f 	str.w	r2, [r3, #15]
    667c:	e002      	b.n	6684 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32c>
  for (uint32_t i = 0; i < ns; i++) {
    667e:	3601      	adds	r6, #1
    6680:	45b2      	cmp	sl, r6
    6682:	d023      	beq.n	66cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (i%(ns/32) == 0) {
    6684:	fbb6 f3f8 	udiv	r3, r6, r8
    6688:	fb08 6313 	mls	r3, r8, r3, r6
      writeMsg(pr, ".");
    668c:	b943      	cbnz	r3, 66a0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    668e:	f1bb 0f00 	cmp.w	fp, #0
    6692:	d005      	beq.n	66a0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    6694:	683b      	ldr	r3, [r7, #0]
    6696:	2201      	movs	r2, #1
    6698:	4951      	ldr	r1, [pc, #324]	; (67e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x488>)
    669a:	4638      	mov	r0, r7
    669c:	685b      	ldr	r3, [r3, #4]
    669e:	4798      	blx	r3
    if (!dev->writeSector(sector + i, secBuf)) {
    66a0:	682b      	ldr	r3, [r5, #0]
    66a2:	eb09 0106 	add.w	r1, r9, r6
    66a6:	4622      	mov	r2, r4
    66a8:	4628      	mov	r0, r5
    66aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66ac:	4798      	blx	r3
    66ae:	2800      	cmp	r0, #0
    66b0:	f43f af1c 	beq.w	64ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    66b4:	2e00      	cmp	r6, #0
    66b6:	d1e2      	bne.n	667e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    66b8:	4631      	mov	r1, r6
    66ba:	f44f 7200 	mov.w	r2, #512	; 0x200
    66be:	4620      	mov	r0, r4
    66c0:	f00b fb94 	bl	11dec <memset>
    66c4:	e7db      	b.n	667e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      checksum = exFatChecksum(checksum, secBuf[i]);
    66c6:	468b      	mov	fp, r1
    66c8:	7821      	ldrb	r1, [r4, #0]
    66ca:	e774      	b.n	65b6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x25e>
  writeMsg(pr, "\r\n");
    66cc:	2f00      	cmp	r7, #0
    66ce:	d034      	beq.n	673a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e2>
    66d0:	683b      	ldr	r3, [r7, #0]
    66d2:	2202      	movs	r2, #2
    66d4:	4943      	ldr	r1, [pc, #268]	; (67e4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48c>)
    66d6:	4638      	mov	r0, r7
    66d8:	685b      	ldr	r3, [r3, #4]
    66da:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    66dc:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    66de:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    66e0:	3607      	adds	r6, #7
    66e2:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    66e4:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    66e8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    66ec:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    66f0:	f4ff aefd 	bcc.w	64ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    66f4:	f44f 7200 	mov.w	r2, #512	; 0x200
    66f8:	2100      	movs	r1, #0
    66fa:	4620      	mov	r0, r4
    66fc:	f00b fb76 	bl	11dec <memset>
  secBuf[0] = 0X7;
    6700:	2307      	movs	r3, #7
    6702:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    6704:	f1b9 0f00 	cmp.w	r9, #0
    6708:	f000 808a 	beq.w	6820 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c8>
    670c:	f04f 0800 	mov.w	r8, #0
    6710:	e008      	b.n	6724 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    if (i == 0) {
    6712:	f1b8 0f00 	cmp.w	r8, #0
    6716:	d101      	bne.n	671c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c4>
      secBuf[0] = 0;
    6718:	f884 8000 	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    671c:	f108 0801 	add.w	r8, r8, #1
    6720:	45c1      	cmp	r9, r8
    6722:	d97b      	bls.n	681c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c4>
    if (!dev->writeSector(sector + i, secBuf)) {
    6724:	9a03      	ldr	r2, [sp, #12]
    6726:	4628      	mov	r0, r5
    6728:	682b      	ldr	r3, [r5, #0]
    672a:	eb02 0108 	add.w	r1, r2, r8
    672e:	4622      	mov	r2, r4
    6730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6732:	4798      	blx	r3
    6734:	2800      	cmp	r0, #0
    6736:	d1ec      	bne.n	6712 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ba>
    6738:	e6d8      	b.n	64ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  bitmapSize = (clusterCount + 7)/8;
    673a:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    673c:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    673e:	3607      	adds	r6, #7
    6740:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6742:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    6746:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    674a:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    674e:	f4ff aed4 	bcc.w	64fa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6752:	f44f 7200 	mov.w	r2, #512	; 0x200
    6756:	4639      	mov	r1, r7
    6758:	4620      	mov	r0, r4
    675a:	f00b fb47 	bl	11dec <memset>
  secBuf[0] = 0X7;
    675e:	2307      	movs	r3, #7
    6760:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    6762:	f1b9 0f00 	cmp.w	r9, #0
    6766:	d1d1      	bne.n	670c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    6768:	9b03      	ldr	r3, [sp, #12]
    676a:	9a07      	ldr	r2, [sp, #28]
    676c:	9804      	ldr	r0, [sp, #16]
    676e:	1899      	adds	r1, r3, r2
    6770:	f7ff fd9a 	bl	62a8 <ExFatFormatter::writeUpcase(unsigned long)>
    6774:	2800      	cmp	r0, #0
    6776:	f43f aec0 	beq.w	64fa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    677a:	9a02      	ldr	r2, [sp, #8]
    677c:	f44f 7300 	mov.w	r3, #512	; 0x200
    6780:	4093      	lsls	r3, r2
    6782:	9a04      	ldr	r2, [sp, #16]
    6784:	6892      	ldr	r2, [r2, #8]
    6786:	429a      	cmp	r2, r3
    6788:	f63f aeb7 	bhi.w	64fa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    678c:	f04f 0802 	mov.w	r8, #2
    6790:	9b02      	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6792:	f44f 7200 	mov.w	r2, #512	; 0x200
    6796:	2100      	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    6798:	fa08 f903 	lsl.w	r9, r8, r3
    679c:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    679e:	4620      	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    67a0:	4499      	add	r9, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    67a2:	f00b fb23 	bl	11dec <memset>
  dbm->type = EXFAT_TYPE_BITMAP;
    67a6:	2281      	movs	r2, #129	; 0x81
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    67a8:	2303      	movs	r3, #3
  setLe32(dup->checksum, m_upcaseChecksum);
    67aa:	9904      	ldr	r1, [sp, #16]
    67ac:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  dbm->type = EXFAT_TYPE_BITMAP;
    67b0:	f884 2020 	strb.w	r2, [r4, #32]
  dup->type = EXFAT_TYPE_UPCASE;
    67b4:	2282      	movs	r2, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    67b6:	7023      	strb	r3, [r4, #0]
  dup->type = EXFAT_TYPE_UPCASE;
    67b8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  setLe64(dbm->size, bitmapSize);
    67bc:	e9c4 860d 	strd	r8, r6, [r4, #52]	; 0x34
  setLe32(dup->checksum, m_upcaseChecksum);
    67c0:	684a      	ldr	r2, [r1, #4]
  *reinterpret_cast<uint64_t*>(dst) = src;
    67c2:	f04f 0801 	mov.w	r8, #1
  *reinterpret_cast<uint32_t*>(dst) = src;
    67c6:	6563      	str	r3, [r4, #84]	; 0x54
    67c8:	6462      	str	r2, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    67ca:	688b      	ldr	r3, [r1, #8]
    67cc:	65a3      	str	r3, [r4, #88]	; 0x58
  setLe64(dbm->size, bitmapSize);
    67ce:	2300      	movs	r3, #0
  setLe64(dup->size, m_upcaseSize);
    67d0:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    67d2:	e00e      	b.n	67f2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49a>
    67d4:	20001284 	.word	0x20001284
    67d8:	20001224 	.word	0x20001224
    67dc:	2000123c 	.word	0x2000123c
    67e0:	20000fc8 	.word	0x20000fc8
    67e4:	20001260 	.word	0x20001260
    67e8:	9b07      	ldr	r3, [sp, #28]
    67ea:	4598      	cmp	r8, r3
    67ec:	d23b      	bcs.n	6866 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    67ee:	f108 0801 	add.w	r8, r8, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    67f2:	682b      	ldr	r3, [r5, #0]
    67f4:	eb09 0108 	add.w	r1, r9, r8
    67f8:	4622      	mov	r2, r4
    67fa:	4628      	mov	r0, r5
    67fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    67fe:	4798      	blx	r3
    6800:	4606      	mov	r6, r0
    6802:	2800      	cmp	r0, #0
    6804:	f43f ae72 	beq.w	64ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    6808:	f1b8 0f01 	cmp.w	r8, #1
    680c:	d1ec      	bne.n	67e8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x490>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    680e:	f44f 7200 	mov.w	r2, #512	; 0x200
    6812:	2100      	movs	r1, #0
    6814:	4620      	mov	r0, r4
    6816:	f00b fae9 	bl	11dec <memset>
  for (uint32_t i = 0; i < ns; i++) {
    681a:	e7e8      	b.n	67ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x496>
  writeMsg(pr, "Writing upcase table\r\n");
    681c:	2f00      	cmp	r7, #0
    681e:	d0a3      	beq.n	6768 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x410>
    6820:	683b      	ldr	r3, [r7, #0]
    6822:	2216      	movs	r2, #22
    6824:	4914      	ldr	r1, [pc, #80]	; (6878 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x520>)
    6826:	4638      	mov	r0, r7
    6828:	685b      	ldr	r3, [r3, #4]
    682a:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    682c:	9b03      	ldr	r3, [sp, #12]
    682e:	9a07      	ldr	r2, [sp, #28]
    6830:	9804      	ldr	r0, [sp, #16]
    6832:	1899      	adds	r1, r3, r2
    6834:	f7ff fd38 	bl	62a8 <ExFatFormatter::writeUpcase(unsigned long)>
    6838:	2800      	cmp	r0, #0
    683a:	f43f ae58 	beq.w	64ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    683e:	9a02      	ldr	r2, [sp, #8]
    6840:	f44f 7300 	mov.w	r3, #512	; 0x200
    6844:	4093      	lsls	r3, r2
    6846:	9a04      	ldr	r2, [sp, #16]
    6848:	6892      	ldr	r2, [r2, #8]
    684a:	429a      	cmp	r2, r3
    684c:	f63f ae4f 	bhi.w	64ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  writeMsg(pr, "Writing root\r\n");
    6850:	490a      	ldr	r1, [pc, #40]	; (687c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x524>)
    6852:	4638      	mov	r0, r7
    6854:	f7ff fcba 	bl	61cc <Print::write(char const*) [clone .isra.0]>
    6858:	e798      	b.n	678c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x434>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    685a:	f44f 7280 	mov.w	r2, #256	; 0x100
    685e:	f8cd 8008 	str.w	r8, [sp, #8]
    6862:	9207      	str	r2, [sp, #28]
    6864:	e5a1      	b.n	63aa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  writeMsg(pr, "Format done\r\n");
    6866:	2f00      	cmp	r7, #0
    6868:	f43f ae48 	beq.w	64fc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    686c:	4904      	ldr	r1, [pc, #16]	; (6880 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x528>)
    686e:	4638      	mov	r0, r7
    6870:	f7ff fcac 	bl	61cc <Print::write(char const*) [clone .isra.0]>
    6874:	e642      	b.n	64fc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    6876:	bf00      	nop
    6878:	2000124c 	.word	0x2000124c
    687c:	20001264 	.word	0x20001264
    6880:	20001274 	.word	0x20001274

00006884 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    6884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6888:	460c      	mov	r4, r1
    688a:	4615      	mov	r5, r2
    688c:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    6890:	89ab      	ldrh	r3, [r5, #12]
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    6892:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    6894:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    6898:	b91b      	cbnz	r3, 68a2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    689a:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    689e:	429a      	cmp	r2, r3
    68a0:	d00e      	beq.n	68c0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    68a2:	f005 fa03 	bl	bcac <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    68a6:	f005 fb15 	bl	bed4 <toUpcase(unsigned short)>
    68aa:	4606      	mov	r6, r0
    68ac:	4638      	mov	r0, r7
    68ae:	f005 fb11 	bl	bed4 <toUpcase(unsigned short)>
    68b2:	4286      	cmp	r6, r0
    68b4:	d109      	bne.n	68ca <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    68b6:	4544      	cmp	r4, r8
    68b8:	d1ea      	bne.n	6890 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    68ba:	2001      	movs	r0, #1
}
    68bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    68c0:	fab7 f087 	clz	r0, r7
    68c4:	0940      	lsrs	r0, r0, #5
}
    68c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    68ca:	2000      	movs	r0, #0
}
    68cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000068d0 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    68d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    68d4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    68d8:	b083      	sub	sp, #12
    68da:	4688      	mov	r8, r1
  if (!isOpen()) {
    68dc:	2b00      	cmp	r3, #0
    68de:	d04f      	beq.n	6980 <ExFatFile::getName8(char*, unsigned int)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    68e0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    68e4:	4607      	mov	r7, r0
    68e6:	2b01      	cmp	r3, #1
    68e8:	d953      	bls.n	6992 <ExFatFile::getName8(char*, unsigned int)+0xc2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    68ea:	3a01      	subs	r2, #1
  char* str = name;
    68ec:	460b      	mov	r3, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    68ee:	f04f 0a02 	mov.w	sl, #2
  uint16_t hs = 0;
    68f2:	2400      	movs	r4, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    68f4:	188e      	adds	r6, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    68f6:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 6998 <ExFatFile::getName8(char*, unsigned int)+0xc8>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    68fa:	2200      	movs	r2, #0
    68fc:	4651      	mov	r1, sl
    68fe:	4638      	mov	r0, r7
    6900:	9301      	str	r3, [sp, #4]
    6902:	f7fe faa3 	bl	4e4c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    6906:	2800      	cmp	r0, #0
    6908:	d03a      	beq.n	6980 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    690a:	7802      	ldrb	r2, [r0, #0]
    690c:	2ac1      	cmp	r2, #193	; 0xc1
    690e:	d137      	bne.n	6980 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    6910:	4605      	mov	r5, r0
    6912:	f100 091e 	add.w	r9, r0, #30
    6916:	9b01      	ldr	r3, [sp, #4]
    6918:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    691c:	b324      	cbz	r4, 6968 <ExFatFile::getName8(char*, unsigned int)+0x98>
    return 0XDC00 <= c && c <= 0XDFFF;
    691e:	f500 5210 	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6922:	b292      	uxth	r2, r2
    6924:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    6928:	d22a      	bcs.n	6980 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    692a:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    692e:	f3c0 0009 	ubfx	r0, r0, #0, #10
    6932:	4320      	orrs	r0, r4
    6934:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6938:	4619      	mov	r1, r3
    693a:	4632      	mov	r2, r6
    693c:	f005 fa2c 	bl	bd98 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    6940:	4603      	mov	r3, r0
    6942:	b1e8      	cbz	r0, 6980 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    6944:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    6946:	454d      	cmp	r5, r9
    6948:	d1e6      	bne.n	6918 <ExFatFile::getName8(char*, unsigned int)+0x48>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    694a:	f10a 0a01 	add.w	sl, sl, #1
    694e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    6952:	fa5f fa8a 	uxtb.w	sl, sl
    6956:	4552      	cmp	r2, sl
    6958:	d2cf      	bcs.n	68fa <ExFatFile::getName8(char*, unsigned int)+0x2a>
      str = ptr;
    }
  }
 done:
  *str = '\0';
  return str - name;
    695a:	eba3 0008 	sub.w	r0, r3, r8
    695e:	4698      	mov	r8, r3
  *str = '\0';
    6960:	2300      	movs	r3, #0
    6962:	f888 3000 	strb.w	r3, [r8]
  return str - name;
    6966:	e00f      	b.n	6988 <ExFatFile::getName8(char*, unsigned int)+0xb8>
    return 0XD800 <= c && c <= 0XDFFF;
    6968:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
    696c:	b292      	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    696e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    6972:	d302      	bcc.n	697a <ExFatFile::getName8(char*, unsigned int)+0xaa>
        if (c == 0) {
    6974:	2800      	cmp	r0, #0
    6976:	d1df      	bne.n	6938 <ExFatFile::getName8(char*, unsigned int)+0x68>
    6978:	e7ef      	b.n	695a <ExFatFile::getName8(char*, unsigned int)+0x8a>
      } else if (FsUtf::isHighSurrogate(c)) {
    697a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    697e:	d306      	bcc.n	698e <ExFatFile::getName8(char*, unsigned int)+0xbe>

 fail:
  *name = 0;
    6980:	2300      	movs	r3, #0
  return 0;
    6982:	4618      	mov	r0, r3
  *name = 0;
    6984:	f888 3000 	strb.w	r3, [r8]
}
    6988:	b003      	add	sp, #12
    698a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    698e:	4604      	mov	r4, r0
    6990:	e7d9      	b.n	6946 <ExFatFile::getName8(char*, unsigned int)+0x76>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6992:	2000      	movs	r0, #0
    6994:	e7e4      	b.n	6960 <ExFatFile::getName8(char*, unsigned int)+0x90>
    6996:	bf00      	nop
    6998:	000ffc00 	.word	0x000ffc00

0000699c <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    699c:	b570      	push	{r4, r5, r6, lr}
    699e:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    69a0:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    69a2:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    69a6:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    69a8:	4619      	mov	r1, r3
  uint16_t hash = 0;
    69aa:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    69ac:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    69ae:	6123      	str	r3, [r4, #16]
    next = begin;
    69b0:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    69b2:	e017      	b.n	69e4 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    69b4:	f005 f97a 	bl	bcac <FsName::get16()>
    if (u == 0XFFFF) {
    69b8:	42a8      	cmp	r0, r5
    69ba:	d022      	beq.n	6a02 <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    69bc:	f005 fa8a 	bl	bed4 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    69c0:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    69c2:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    69c4:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    69c6:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    69c8:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    69cc:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    69ce:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    69d0:	fa52 f080 	uxtab	r0, r2, r0
    69d4:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    69d6:	f3c0 004e 	ubfx	r0, r0, #1, #15
    69da:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    69de:	fa16 f080 	uxtah	r0, r6, r0
    69e2:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    69e4:	4620      	mov	r0, r4
    69e6:	2900      	cmp	r1, #0
    69e8:	d1e4      	bne.n	69b4 <ExFatFile::hashName(ExName_t*)+0x18>
    69ea:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    69ee:	429a      	cmp	r2, r3
    69f0:	d1e0      	bne.n	69b4 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    69f2:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    69f4:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    69f6:	3801      	subs	r0, #1
    69f8:	28fe      	cmp	r0, #254	; 0xfe
    69fa:	bf8c      	ite	hi
    69fc:	2000      	movhi	r0, #0
    69fe:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    6a00:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    6a02:	2000      	movs	r0, #0
}
    6a04:	bd70      	pop	{r4, r5, r6, pc}
    6a06:	bf00      	nop

00006a08 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    6a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a0c:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6a0e:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    6a10:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6a12:	2900      	cmp	r1, #0
    6a14:	d042      	beq.n	6a9c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    6a16:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    6a1a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    6a1e:	4543      	cmp	r3, r8
    6a20:	d942      	bls.n	6aa8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    6a22:	f008 0307 	and.w	r3, r8, #7
    6a26:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    6a28:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    6a2c:	409d      	lsls	r5, r3
    6a2e:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    6a30:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    6a32:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    6a34:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    6a38:	2200      	movs	r2, #0
    6a3a:	4638      	mov	r0, r7
    6a3c:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    6a40:	f005 f8f6 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6a44:	b1e8      	cbz	r0, 6a82 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    6a46:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    6a4a:	4483      	add	fp, r0
    6a4c:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    6a50:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    6a54:	e00a      	b.n	6a6c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    6a56:	454a      	cmp	r2, r9
    6a58:	d02b      	beq.n	6ab2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    6a5a:	45a0      	cmp	r8, r4
    6a5c:	d010      	beq.n	6a80 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    6a5e:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    6a62:	42a5      	cmp	r5, r4
    6a64:	d914      	bls.n	6a90 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    6a66:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    6a6a:	d00c      	beq.n	6a86 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    6a6c:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    6a6e:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    6a70:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    6a74:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    6a78:	d0ed      	beq.n	6a56 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    6a7a:	45a0      	cmp	r8, r4
        endAlloc++;
    6a7c:	4626      	mov	r6, r4
        if (endAlloc == start) {
    6a7e:	d1ee      	bne.n	6a5e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    6a80:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    6a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    6a86:	4558      	cmp	r0, fp
      mask = 1;
    6a88:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    6a8c:	d1e0      	bne.n	6a50 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    6a8e:	e001      	b.n	6a94 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    6a90:	2600      	movs	r6, #0
    6a92:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    6a94:	2501      	movs	r5, #1
    i = 0;
    6a96:	f04f 0b00 	mov.w	fp, #0
    6a9a:	e7cb      	b.n	6a34 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6a9c:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    6aa0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    6aa4:	4543      	cmp	r3, r8
    6aa6:	d8bc      	bhi.n	6a22 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    6aa8:	f04f 0800 	mov.w	r8, #0
    6aac:	2501      	movs	r5, #1
    start = 0;
    6aae:	46c3      	mov	fp, r8
    6ab0:	e7be      	b.n	6a30 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    6ab2:	f1ba 0f00 	cmp.w	sl, #0
    6ab6:	d104      	bne.n	6ac2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    6ab8:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    6abc:	bf08      	it	eq
    6abe:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    6ac2:	1cb0      	adds	r0, r6, #2
}
    6ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006ac8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    6ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6acc:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    6ace:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    6ad0:	4615      	mov	r5, r2
    6ad2:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    6ad4:	1883      	adds	r3, r0, r2
    6ad6:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    6ada:	4293      	cmp	r3, r2
    6adc:	d837      	bhi.n	6b4e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    6ade:	bbce      	cbnz	r6, 6b54 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    6ae0:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    6ae4:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    6ae6:	bf88      	it	hi
    6ae8:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    6aec:	f000 0307 	and.w	r3, r0, #7
    6af0:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    6af2:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    6af6:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    6afa:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    6afc:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    6b00:	b2e4      	uxtb	r4, r4
    6b02:	2201      	movs	r2, #1
    6b04:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    6b06:	188f      	adds	r7, r1, r2
    6b08:	f005 f892 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6b0c:	b1f8      	cbz	r0, 6b4e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    6b0e:	f109 3eff 	add.w	lr, r9, #4294967295	; 0xffffffff
    6b12:	4486      	add	lr, r0
    6b14:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    6b18:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    6b1c:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    6b20:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    6b24:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    6b28:	bf14      	ite	ne
    6b2a:	2201      	movne	r2, #1
    6b2c:	2200      	moveq	r2, #0
    6b2e:	42b2      	cmp	r2, r6
    6b30:	d00d      	beq.n	6b4e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    6b32:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    6b34:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    6b38:	d018      	beq.n	6b6c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    6b3a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    6b3e:	d1ed      	bne.n	6b1c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    6b40:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    6b42:	46a1      	mov	r9, r4
    6b44:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    6b48:	d1e6      	bne.n	6b18 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    6b4a:	4639      	mov	r1, r7
    6b4c:	e7d9      	b.n	6b02 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    6b4e:	2000      	movs	r0, #0
}
    6b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6b54:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    6b58:	428b      	cmp	r3, r1
    6b5a:	d9c7      	bls.n	6aec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    6b5c:	4281      	cmp	r1, r0
    6b5e:	d3c5      	bcc.n	6aec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    6b60:	4293      	cmp	r3, r2
    6b62:	bf28      	it	cs
    6b64:	2300      	movcs	r3, #0
    6b66:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    6b6a:	e7bf      	b.n	6aec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    6b6c:	2001      	movs	r0, #1
}
    6b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6b72:	bf00      	nop

00006b74 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    6b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6b76:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    6b7a:	3301      	adds	r3, #1
    6b7c:	428b      	cmp	r3, r1
    6b7e:	d201      	bcs.n	6b84 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    6b80:	2000      	movs	r0, #0
}
    6b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b84:	4607      	mov	r7, r0
    6b86:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    6b88:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    6b8c:	2500      	movs	r5, #0
    6b8e:	e005      	b.n	6b9c <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    6b90:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    6b94:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    6b96:	3301      	adds	r3, #1
    6b98:	42a3      	cmp	r3, r4
    6b9a:	d3f1      	bcc.n	6b80 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6b9c:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    6ba0:	2200      	movs	r2, #0
    6ba2:	4630      	mov	r0, r6
    6ba4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    6ba8:	f005 f842 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6bac:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    6bae:	2800      	cmp	r0, #0
    6bb0:	d0e6      	beq.n	6b80 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6bb2:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    6bb6:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    6bb8:	1c63      	adds	r3, r4, #1
    6bba:	d1e9      	bne.n	6b90 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    6bbc:	1c68      	adds	r0, r5, #1
}
    6bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006bc0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    6bc0:	b538      	push	{r3, r4, r5, lr}
    6bc2:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    6bc4:	680b      	ldr	r3, [r1, #0]
    6bc6:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    6bca:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    6bce:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    6bd2:	3b02      	subs	r3, #2
    6bd4:	6865      	ldr	r5, [r4, #4]
    6bd6:	fa03 f30c 	lsl.w	r3, r3, ip
    6bda:	4029      	ands	r1, r5
    6bdc:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    6be0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    6be4:	4419      	add	r1, r3
    6be6:	f005 f823 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    6bea:	b118      	cbz	r0, 6bf4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    6bec:	6863      	ldr	r3, [r4, #4]
    6bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
    6bf2:	4418      	add	r0, r3
}
    6bf4:	bd38      	pop	{r3, r4, r5, pc}
    6bf6:	bf00      	nop

00006bf8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6bfc:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6bfe:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    6c02:	6849      	ldr	r1, [r1, #4]
    6c04:	400b      	ands	r3, r1
  pos->position += offset;
    6c06:	4411      	add	r1, r2
    6c08:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6c0a:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6c0c:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    6c10:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    6c14:	b2d2      	uxtb	r2, r2
    6c16:	40d3      	lsrs	r3, r2
  while (tmp--) {
    6c18:	b32b      	cbz	r3, 6c66 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    6c1a:	4680      	mov	r8, r0
    6c1c:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    6c1e:	f500 7904 	add.w	r9, r0, #528	; 0x210
    6c22:	e005      	b.n	6c30 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    6c24:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    6c26:	3d01      	subs	r5, #1
      pos->cluster++;
    6c28:	f103 0301 	add.w	r3, r3, #1
    6c2c:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    6c2e:	d31a      	bcc.n	6c66 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    6c30:	7a26      	ldrb	r6, [r4, #8]
    6c32:	2e00      	cmp	r6, #0
    6c34:	d1f6      	bne.n	6c24 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    6c36:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    6c3a:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    6c3c:	6827      	ldr	r7, [r4, #0]
    6c3e:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    6c40:	3301      	adds	r3, #1
    6c42:	429f      	cmp	r7, r3
    6c44:	d812      	bhi.n	6c6c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6c46:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    6c4a:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    6c4e:	f004 ffef 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6c52:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    6c54:	b150      	cbz	r0, 6c6c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6c56:	f3c7 0708 	ubfx	r7, r7, #0, #9
    6c5a:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    6c5c:	1c5a      	adds	r2, r3, #1
    6c5e:	d009      	beq.n	6c74 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    6c60:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    6c62:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    6c64:	d2e4      	bcs.n	6c30 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    6c66:	2001      	movs	r0, #1
}
    6c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    6c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    6c74:	4630      	mov	r0, r6
}
    6c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6c7a:	bf00      	nop

00006c7c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6c7c:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    6c7e:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    6c82:	3301      	adds	r3, #1
    6c84:	428b      	cmp	r3, r1
    6c86:	d202      	bcs.n	6c8e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    6c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return 1;
}
    6c8c:	bd38      	pop	{r3, r4, r5, pc}
    6c8e:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6c90:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    6c94:	4615      	mov	r5, r2
    6c96:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6c9a:	2200      	movs	r2, #0
    6c9c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    6ca0:	f004 ffc6 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6ca4:	2800      	cmp	r0, #0
    6ca6:	d0ef      	beq.n	6c88 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6ca8:	00a4      	lsls	r4, r4, #2
    6caa:	f3c4 0408 	ubfx	r4, r4, #0, #9
    6cae:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    6cb0:	1c5a      	adds	r2, r3, #1
    6cb2:	d002      	beq.n	6cba <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    6cb4:	2001      	movs	r0, #1
  *value = next;
    6cb6:	602b      	str	r3, [r5, #0]
}
    6cb8:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    6cba:	2000      	movs	r0, #0
}
    6cbc:	bd38      	pop	{r3, r4, r5, pc}
    6cbe:	bf00      	nop

00006cc0 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6cc0:	2901      	cmp	r1, #1
    6cc2:	d91b      	bls.n	6cfc <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6cc4:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6cc6:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    6cca:	460c      	mov	r4, r1
    6ccc:	3301      	adds	r3, #1
    6cce:	428b      	cmp	r3, r1
    6cd0:	d201      	bcs.n	6cd6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    6cd2:	2000      	movs	r0, #0
}
    6cd4:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6cd6:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    6cda:	4615      	mov	r5, r2
    6cdc:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6ce0:	2201      	movs	r2, #1
    6ce2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    6ce6:	f004 ffa3 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6cea:	4603      	mov	r3, r0
    6cec:	2800      	cmp	r0, #0
    6cee:	d0f0      	beq.n	6cd2 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    6cf0:	00a4      	lsls	r4, r4, #2
  return true;
    6cf2:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    6cf4:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    6cf8:	511d      	str	r5, [r3, r4]
}
    6cfa:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    6cfc:	2000      	movs	r0, #0
}
    6cfe:	4770      	bx	lr

00006d00 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    6d00:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    6d04:	3301      	adds	r3, #1
    6d06:	4299      	cmp	r1, r3
    6d08:	d901      	bls.n	6d0e <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    6d0a:	2000      	movs	r0, #0
    6d0c:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    6d0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d12:	4605      	mov	r5, r0
    6d14:	b083      	sub	sp, #12
    6d16:	460c      	mov	r4, r1
    6d18:	f500 7904 	add.w	r9, r0, #528	; 0x210
    6d1c:	460f      	mov	r7, r1
    6d1e:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6d22:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    6d26:	2200      	movs	r2, #0
    6d28:	4648      	mov	r0, r9
    6d2a:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    6d2e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    6d32:	f004 ff7d 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6d36:	b190      	cbz	r0, 6d5e <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6d38:	00a3      	lsls	r3, r4, #2
    6d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    6d3e:	58c2      	ldr	r2, [r0, r3]
    6d40:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    6d42:	1c53      	adds	r3, r2, #1
    6d44:	bf16      	itet	ne
    6d46:	4616      	movne	r6, r2
    6d48:	f04f 0a00 	moveq.w	sl, #0
    6d4c:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6d50:	2c01      	cmp	r4, #1
    6d52:	d904      	bls.n	6d5e <ExFatPartition::freeChain(unsigned long)+0x5e>
    6d54:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    6d58:	3201      	adds	r2, #1
    6d5a:	4294      	cmp	r4, r2
    6d5c:	d903      	bls.n	6d66 <ExFatPartition::freeChain(unsigned long)+0x66>
}
    6d5e:	2000      	movs	r0, #0
    6d60:	b003      	add	sp, #12
    6d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6d66:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    6d6a:	2201      	movs	r2, #1
    6d6c:	4648      	mov	r0, r9
    6d6e:	4459      	add	r1, fp
    6d70:	f004 ff5e 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6d74:	2800      	cmp	r0, #0
    6d76:	d0f2      	beq.n	6d5e <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    6d78:	9b01      	ldr	r3, [sp, #4]
    6d7a:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    6d7e:	f1ba 0f00 	cmp.w	sl, #0
    6d82:	d012      	beq.n	6daa <ExFatPartition::freeChain(unsigned long)+0xaa>
    6d84:	3401      	adds	r4, #1
    6d86:	42b4      	cmp	r4, r6
    6d88:	d008      	beq.n	6d9c <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6d8a:	2300      	movs	r3, #0
    6d8c:	1be2      	subs	r2, r4, r7
    6d8e:	4639      	mov	r1, r7
    6d90:	4628      	mov	r0, r5
    6d92:	f7ff fe99 	bl	6ac8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6d96:	2800      	cmp	r0, #0
    6d98:	d0e1      	beq.n	6d5e <ExFatPartition::freeChain(unsigned long)+0x5e>
    6d9a:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    6d9c:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    6da0:	3301      	adds	r3, #1
    6da2:	42b3      	cmp	r3, r6
    6da4:	d3db      	bcc.n	6d5e <ExFatPartition::freeChain(unsigned long)+0x5e>
    6da6:	4634      	mov	r4, r6
    6da8:	e7bb      	b.n	6d22 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6daa:	1c62      	adds	r2, r4, #1
    6dac:	4653      	mov	r3, sl
    6dae:	4639      	mov	r1, r7
    6db0:	4628      	mov	r0, r5
    6db2:	1bd2      	subs	r2, r2, r7
}
    6db4:	b003      	add	sp, #12
    6db6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6dba:	f7ff be85 	b.w	6ac8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6dbe:	bf00      	nop

00006dc0 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    6dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    6dc4:	2500      	movs	r5, #0
uint32_t ExFatPartition::freeClusterCount() {
    6dc6:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    6dc8:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    6dcc:	f500 7804 	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    6dd0:	462c      	mov	r4, r5
    6dd2:	2200      	movs	r2, #0
    6dd4:	4640      	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    6dd6:	1c4f      	adds	r7, r1, #1
    6dd8:	f004 ff2a 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6ddc:	b1a8      	cbz	r0, 6e0a <ExFatPartition::freeClusterCount()+0x4a>
    6dde:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
    6de2:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    6de6:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    6dea:	e005      	b.n	6df8 <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    6dec:	b979      	cbnz	r1, 6e0e <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    6dee:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    6df0:	4284      	cmp	r4, r0
    6df2:	d209      	bcs.n	6e08 <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    6df4:	454c      	cmp	r4, r9
    6df6:	d016      	beq.n	6e26 <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    6df8:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    6dfc:	29ff      	cmp	r1, #255	; 0xff
    6dfe:	d1f5      	bne.n	6dec <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    6e00:	3408      	adds	r4, #8
        usedCount+= 8;
    6e02:	3508      	adds	r5, #8
      if (nc >= m_clusterCount) {
    6e04:	4284      	cmp	r4, r0
    6e06:	d3f5      	bcc.n	6df4 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    6e08:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    6e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6e0e:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6e10:	2301      	movs	r3, #1
          if ((mask & cache[i])) {
    6e12:	4219      	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6e14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            usedCount++;
    6e18:	bf18      	it	ne
    6e1a:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6e1c:	3a01      	subs	r2, #1
    6e1e:	fa5f f38c 	uxtb.w	r3, ip
    6e22:	d1f6      	bne.n	6e12 <ExFatPartition::freeClusterCount()+0x52>
    6e24:	e7e3      	b.n	6dee <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    6e26:	4639      	mov	r1, r7
    6e28:	e7d3      	b.n	6dd2 <ExFatPartition::freeClusterCount()+0x12>
    6e2a:	bf00      	nop

00006e2c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    6e2e:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    6e30:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    6e34:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6e38:	4615      	mov	r5, r2
  m_blockDev = dev;
    6e3a:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6e3e:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    6e40:	6041      	str	r1, [r0, #4]
    6e42:	461a      	mov	r2, r3
    6e44:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    6e48:	4619      	mov	r1, r3
  m_fatType = 0;
    6e4a:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    6e4e:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    6e50:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    6e52:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6e56:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    6e5a:	4638      	mov	r0, r7
    6e5c:	f004 fee8 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    6e60:	2d04      	cmp	r5, #4
    6e62:	d80d      	bhi.n	6e80 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    6e64:	4606      	mov	r6, r0
    6e66:	b158      	cbz	r0, 6e80 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    6e68:	b1bd      	cbz	r5, 6e9a <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    6e6a:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    6e6c:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    6e70:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    6e74:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    6e78:	d102      	bne.n	6e80 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    6e7a:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    6e7e:	b90b      	cbnz	r3, 6e84 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    6e80:	2000      	movs	r0, #0
}
    6e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    6e84:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    6e88:	4638      	mov	r0, r7
    6e8a:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    6e8e:	4629      	mov	r1, r5
    6e90:	f004 fece 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6e94:	4606      	mov	r6, r0
    6e96:	2800      	cmp	r0, #0
    6e98:	d0f2      	beq.n	6e80 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    6e9a:	2205      	movs	r2, #5
    6e9c:	491a      	ldr	r1, [pc, #104]	; (6f08 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    6e9e:	1cf0      	adds	r0, r6, #3
    6ea0:	f00a fff6 	bl	11e90 <strncmp>
    6ea4:	2800      	cmp	r0, #0
    6ea6:	d1eb      	bne.n	6e80 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    6ea8:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    6eac:	2b09      	cmp	r3, #9
    6eae:	d1e7      	bne.n	6e80 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    6eb0:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    6eb2:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    6eb4:	442b      	add	r3, r5
    6eb6:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    6eba:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    6ebc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    6ec0:	6db3      	ldr	r3, [r6, #88]	; 0x58
    6ec2:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6ec4:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    6ec6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    6eca:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    6ecc:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    6ed0:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    6ed2:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    6ed6:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    6eda:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    6ede:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6ee0:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    6ee4:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6ee8:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    6eec:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6eee:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    6ef2:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    6ef6:	462a      	mov	r2, r5
    6ef8:	f7ff fd86 	bl	6a08 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    6efc:	2340      	movs	r3, #64	; 0x40
  return true;
    6efe:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    6f00:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    6f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f06:	bf00      	nop
    6f08:	20001294 	.word	0x20001294

00006f0c <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    6f0c:	b510      	push	{r4, lr}
    6f0e:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    6f10:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    6f14:	f7ff fe2e 	bl	6b74 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6f18:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    6f1c:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    6f1e:	b2db      	uxtb	r3, r3
}
    6f20:	4098      	lsls	r0, r3
    6f22:	bd10      	pop	{r4, pc}

00006f24 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    6f24:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    6f26:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    6f2a:	b082      	sub	sp, #8
    6f2c:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    6f2e:	2b00      	cmp	r3, #0
    6f30:	db0d      	blt.n	6f4e <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    6f32:	68a5      	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6f34:	f105 0028 	add.w	r0, r5, #40	; 0x28
    6f38:	f004 fe4e 	bl	bbd8 <FsCache::sync()>
    6f3c:	2800      	cmp	r0, #0
    6f3e:	d13b      	bne.n	6fb8 <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    6f40:	7863      	ldrb	r3, [r4, #1]
  return false;
    6f42:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    6f44:	f043 0301 	orr.w	r3, r3, #1
    6f48:	7063      	strb	r3, [r4, #1]
}
    6f4a:	b002      	add	sp, #8
    6f4c:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    6f4e:	6880      	ldr	r0, [r0, #8]
    6f50:	2201      	movs	r2, #1
    6f52:	69a1      	ldr	r1, [r4, #24]
    6f54:	3028      	adds	r0, #40	; 0x28
    6f56:	f004 fe6b 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6f5a:	2800      	cmp	r0, #0
    6f5c:	d0f0      	beq.n	6f40 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    6f5e:	88a5      	ldrh	r5, [r4, #4]
    6f60:	f005 050f 	and.w	r5, r5, #15
    6f64:	016b      	lsls	r3, r5, #5
    6f66:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    6f6a:	5cc3      	ldrb	r3, [r0, r3]
    6f6c:	2be5      	cmp	r3, #229	; 0xe5
    6f6e:	d0e7      	beq.n	6f40 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    6f70:	7823      	ldrb	r3, [r4, #0]
    6f72:	071b      	lsls	r3, r3, #28
    6f74:	d501      	bpl.n	6f7a <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    6f76:	69e3      	ldr	r3, [r4, #28]
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6f78:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    6f7a:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    6f7c:	4915      	ldr	r1, [pc, #84]	; (6fd4 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    6f7e:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    6f80:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    6f82:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    6f84:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    6f86:	b166      	cbz	r6, 6fa2 <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    6f88:	f10d 0203 	add.w	r2, sp, #3
    6f8c:	f10d 0106 	add.w	r1, sp, #6
    6f90:	a801      	add	r0, sp, #4
    6f92:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    6f94:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    6f98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f9c:	832b      	strh	r3, [r5, #24]
    6f9e:	826b      	strh	r3, [r5, #18]
    6fa0:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6fa2:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    6fa4:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6faa:	f105 0028 	add.w	r0, r5, #40	; 0x28
    6fae:	70a3      	strb	r3, [r4, #2]
    6fb0:	f004 fe12 	bl	bbd8 <FsCache::sync()>
    6fb4:	2800      	cmp	r0, #0
    6fb6:	d0c3      	beq.n	6f40 <FatFile::sync() [clone .part.0]+0x1c>
    6fb8:	f505 700e 	add.w	r0, r5, #568	; 0x238
    6fbc:	f004 fe0c 	bl	bbd8 <FsCache::sync()>
    6fc0:	2800      	cmp	r0, #0
    6fc2:	d0bd      	beq.n	6f40 <FatFile::sync() [clone .part.0]+0x1c>
    6fc4:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    6fc6:	6803      	ldr	r3, [r0, #0]
    6fc8:	6a1b      	ldr	r3, [r3, #32]
    6fca:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6fcc:	2800      	cmp	r0, #0
    6fce:	d0b7      	beq.n	6f40 <FatFile::sync() [clone .part.0]+0x1c>
    6fd0:	e7bb      	b.n	6f4a <FatFile::sync() [clone .part.0]+0x26>
    6fd2:	bf00      	nop
    6fd4:	200042b4 	.word	0x200042b4

00006fd8 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    6fd8:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    6fda:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    6fdc:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    6fe0:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    6fe2:	6880      	ldr	r0, [r0, #8]
    6fe4:	4629      	mov	r1, r5
    6fe6:	f002 f921 	bl	922c <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    6fea:	b150      	cbz	r0, 7002 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    6fec:	b155      	cbz	r5, 7004 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    6fee:	6923      	ldr	r3, [r4, #16]
    6ff0:	3501      	adds	r5, #1
    6ff2:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6ff4:	78a3      	ldrb	r3, [r4, #2]
    6ff6:	bf18      	it	ne
    6ff8:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7000:	70a3      	strb	r3, [r4, #2]
}
    7002:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7004:	78a3      	ldrb	r3, [r4, #2]
    7006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    700a:	e7f7      	b.n	6ffc <FatFile::addCluster()+0x24>

0000700c <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    700e:	7804      	ldrb	r4, [r0, #0]
    7010:	f014 0420 	ands.w	r4, r4, #32
    7014:	d104      	bne.n	7020 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    7016:	4b1a      	ldr	r3, [pc, #104]	; (7080 <FatFile::addDirCluster()+0x74>)
    7018:	4605      	mov	r5, r0
    701a:	6942      	ldr	r2, [r0, #20]
    701c:	429a      	cmp	r2, r3
    701e:	d302      	bcc.n	7026 <FatFile::addDirCluster()+0x1a>
  return false;
    7020:	2700      	movs	r7, #0
}
    7022:	4638      	mov	r0, r7
    7024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    7026:	f7ff ffd7 	bl	6fd8 <FatFile::addCluster()>
    702a:	4607      	mov	r7, r0
    702c:	2800      	cmp	r0, #0
    702e:	d0f7      	beq.n	7020 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    7030:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7032:	692e      	ldr	r6, [r5, #16]
    7034:	7982      	ldrb	r2, [r0, #6]
    7036:	3e02      	subs	r6, #2
    7038:	6941      	ldr	r1, [r0, #20]
    703a:	4096      	lsls	r6, r2
    703c:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    703e:	7901      	ldrb	r1, [r0, #4]
    7040:	b1a9      	cbz	r1, 706e <FatFile::addDirCluster()+0x62>
    7042:	4621      	mov	r1, r4
    7044:	e006      	b.n	7054 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    7046:	f00a fed1 	bl	11dec <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    704a:	68a8      	ldr	r0, [r5, #8]
    704c:	b2e1      	uxtb	r1, r4
    704e:	7902      	ldrb	r2, [r0, #4]
    7050:	428a      	cmp	r2, r1
    7052:	d90b      	bls.n	706c <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    7054:	4431      	add	r1, r6
    7056:	2205      	movs	r2, #5
    7058:	3028      	adds	r0, #40	; 0x28
    705a:	3401      	adds	r4, #1
    705c:	f004 fde8 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    7060:	f44f 7200 	mov.w	r2, #512	; 0x200
    7064:	2100      	movs	r1, #0
    if (!pc) {
    7066:	2800      	cmp	r0, #0
    7068:	d1ed      	bne.n	7046 <FatFile::addDirCluster()+0x3a>
    706a:	e7d9      	b.n	7020 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    706c:	7982      	ldrb	r2, [r0, #6]
    706e:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    7072:	6969      	ldr	r1, [r5, #20]
}
    7074:	4638      	mov	r0, r7
    7076:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    7078:	fa11 f383 	uxtah	r3, r1, r3
    707c:	616b      	str	r3, [r5, #20]
}
    707e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7080:	001ffe00 	.word	0x001ffe00

00007084 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    7084:	b510      	push	{r4, lr}
    7086:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
    7088:	6880      	ldr	r0, [r0, #8]
    708a:	460a      	mov	r2, r1
    708c:	3028      	adds	r0, #40	; 0x28
    708e:	69a1      	ldr	r1, [r4, #24]
    7090:	f004 fdce 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7094:	b120      	cbz	r0, 70a0 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    7096:	88a3      	ldrh	r3, [r4, #4]
    7098:	f003 030f 	and.w	r3, r3, #15
    709c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
    70a0:	bd10      	pop	{r4, pc}
    70a2:	bf00      	nop

000070a4 <FatFile::close()>:
bool FatFile::close() {
    70a4:	b510      	push	{r4, lr}
  if (!isOpen()) {
    70a6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    70a8:	4604      	mov	r4, r0
  if (!isOpen()) {
    70aa:	b12b      	cbz	r3, 70b8 <FatFile::close()+0x14>
    70ac:	f7ff ff3a 	bl	6f24 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    70b0:	2300      	movs	r3, #0
    70b2:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    70b4:	70a3      	strb	r3, [r4, #2]
}
    70b6:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    70b8:	2300      	movs	r3, #0
    return true;
    70ba:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    70bc:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    70be:	70a3      	strb	r3, [r4, #2]
}
    70c0:	bd10      	pop	{r4, pc}
    70c2:	bf00      	nop

000070c4 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    70c4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    70c6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    70c8:	4605      	mov	r5, r0
    70ca:	460c      	mov	r4, r1
  if (!isOpen()) {
    70cc:	b113      	cbz	r3, 70d4 <FatFile::dirEntry(DirFat_t*)+0x10>
    70ce:	f7ff ff29 	bl	6f24 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    70d2:	b1f0      	cbz	r0, 7112 <FatFile::dirEntry(DirFat_t*)+0x4e>
    70d4:	68a8      	ldr	r0, [r5, #8]
    70d6:	2200      	movs	r2, #0
    70d8:	69a9      	ldr	r1, [r5, #24]
    70da:	3028      	adds	r0, #40	; 0x28
    70dc:	f004 fda8 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    70e0:	b1b8      	cbz	r0, 7112 <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    70e2:	88aa      	ldrh	r2, [r5, #4]
    70e4:	f002 020f 	and.w	r2, r2, #15
    70e8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    70ec:	0152      	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    70ee:	685d      	ldr	r5, [r3, #4]
    70f0:	5880      	ldr	r0, [r0, r2]
    70f2:	6899      	ldr	r1, [r3, #8]
    70f4:	68da      	ldr	r2, [r3, #12]
    70f6:	6020      	str	r0, [r4, #0]
    70f8:	6065      	str	r5, [r4, #4]
    70fa:	60a1      	str	r1, [r4, #8]
    70fc:	60e2      	str	r2, [r4, #12]
    70fe:	6918      	ldr	r0, [r3, #16]
    7100:	695d      	ldr	r5, [r3, #20]
    7102:	6999      	ldr	r1, [r3, #24]
    7104:	69da      	ldr	r2, [r3, #28]
    7106:	6120      	str	r0, [r4, #16]
  return true;
    7108:	2001      	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    710a:	6165      	str	r5, [r4, #20]
    710c:	61a1      	str	r1, [r4, #24]
    710e:	61e2      	str	r2, [r4, #28]
}
    7110:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    7112:	2000      	movs	r0, #0
}
    7114:	bd38      	pop	{r3, r4, r5, pc}
    7116:	bf00      	nop

00007118 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    7118:	b530      	push	{r4, r5, lr}
    711a:	b089      	sub	sp, #36	; 0x24
    711c:	460d      	mov	r5, r1
    711e:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    7120:	4669      	mov	r1, sp
    7122:	f7ff ffcf 	bl	70c4 <FatFile::dirEntry(DirFat_t*)>
    7126:	b128      	cbz	r0, 7134 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    7128:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    712c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    7130:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    7132:	8023      	strh	r3, [r4, #0]
}
    7134:	b009      	add	sp, #36	; 0x24
    7136:	bd30      	pop	{r4, r5, pc}

00007138 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    7138:	b530      	push	{r4, r5, lr}
    713a:	b089      	sub	sp, #36	; 0x24
    713c:	460d      	mov	r5, r1
    713e:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    7140:	4669      	mov	r1, sp
    7142:	f7ff ffbf 	bl	70c4 <FatFile::dirEntry(DirFat_t*)>
    7146:	b128      	cbz	r0, 7154 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    7148:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    714c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    7150:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    7152:	8023      	strh	r3, [r4, #0]
}
    7154:	b009      	add	sp, #36	; 0x24
    7156:	bd30      	pop	{r4, r5, pc}

00007158 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    7158:	780b      	ldrb	r3, [r1, #0]
    715a:	f013 0f70 	tst.w	r3, #112	; 0x70
    715e:	d101      	bne.n	7164 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    7160:	2000      	movs	r0, #0
    7162:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7164:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7166:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    716a:	b089      	sub	sp, #36	; 0x24
    716c:	460d      	mov	r5, r1
    716e:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7170:	f001 f8f0 	bl	8354 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7174:	b138      	cbz	r0, 7186 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    7176:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    7178:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    717a:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    717c:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    717e:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    7180:	f7ff ff44 	bl	700c <FatFile::addDirCluster()>
    7184:	b910      	cbnz	r0, 718c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    7186:	2000      	movs	r0, #0
    7188:	b009      	add	sp, #36	; 0x24
    718a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    718c:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    718e:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    7190:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    7192:	b16b      	cbz	r3, 71b0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    7194:	6963      	ldr	r3, [r4, #20]
    7196:	b133      	cbz	r3, 71a6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7198:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    719a:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    719c:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    71a0:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    71a4:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    71a6:	4620      	mov	r0, r4
    71a8:	f7ff febc 	bl	6f24 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    71ac:	2800      	cmp	r0, #0
    71ae:	d0ea      	beq.n	7186 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    71b0:	68a0      	ldr	r0, [r4, #8]
    71b2:	2201      	movs	r2, #1
    71b4:	69a1      	ldr	r1, [r4, #24]
    71b6:	3028      	adds	r0, #40	; 0x28
    71b8:	f004 fd3a 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    71bc:	2800      	cmp	r0, #0
    71be:	d0e2      	beq.n	7186 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    71c0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    71c4:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    71c6:	f00c 0c0f 	and.w	ip, ip, #15
    71ca:	ea4f 134c 	mov.w	r3, ip, lsl #5
    71ce:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    71d2:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    71d6:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    71d8:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    71da:	6a23      	ldr	r3, [r4, #32]
    71dc:	f897 e006 	ldrb.w	lr, [r7, #6]
    71e0:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    71e2:	f8dc 1004 	ldr.w	r1, [ip, #4]
    71e6:	f8dc 2008 	ldr.w	r2, [ip, #8]
    71ea:	f8dc 300c 	ldr.w	r3, [ip, #12]
    71ee:	fa06 f60e 	lsl.w	r6, r6, lr
    71f2:	46ee      	mov	lr, sp
    71f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    71f8:	f8dc 0010 	ldr.w	r0, [ip, #16]
    71fc:	f8dc 1014 	ldr.w	r1, [ip, #20]
    7200:	f8dc 2018 	ldr.w	r2, [ip, #24]
    7204:	f8dc 301c 	ldr.w	r3, [ip, #28]
    7208:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    720c:	697b      	ldr	r3, [r7, #20]
    720e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    7212:	2201      	movs	r2, #1
    7214:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    7216:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    721a:	f8cd 3001 	str.w	r3, [sp, #1]
    721e:	f8cd 3005 	str.w	r3, [sp, #5]
    7222:	f8ad 3009 	strh.w	r3, [sp, #9]
    7226:	f004 fd03 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    722a:	4684      	mov	ip, r0
    722c:	2800      	cmp	r0, #0
    722e:	d0aa      	beq.n	7186 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    7230:	272e      	movs	r7, #46	; 0x2e
    7232:	46ee      	mov	lr, sp
    7234:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    7238:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    723a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    723e:	f8cc 0000 	str.w	r0, [ip]
    7242:	f8cc 1004 	str.w	r1, [ip, #4]
    7246:	f8cc 2008 	str.w	r2, [ip, #8]
    724a:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    724e:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    7252:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7256:	f8cc 0010 	str.w	r0, [ip, #16]
    725a:	f8cc 1014 	str.w	r1, [ip, #20]
    725e:	f8cc 2018 	str.w	r2, [ip, #24]
    7262:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7266:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7268:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    726a:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    726e:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    7272:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    7274:	f8cc 0020 	str.w	r0, [ip, #32]
    7278:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    727c:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    7280:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    7284:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    7286:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    728a:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    728e:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    7292:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    7296:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7298:	f104 0028 	add.w	r0, r4, #40	; 0x28
    729c:	f004 fc9c 	bl	bbd8 <FsCache::sync()>
    72a0:	2800      	cmp	r0, #0
    72a2:	f43f af70 	beq.w	7186 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    72a6:	f504 700e 	add.w	r0, r4, #568	; 0x238
    72aa:	f004 fc95 	bl	bbd8 <FsCache::sync()>
    72ae:	2800      	cmp	r0, #0
    72b0:	f43f af69 	beq.w	7186 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    72b4:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    72b6:	6803      	ldr	r3, [r0, #0]
    72b8:	6a1b      	ldr	r3, [r3, #32]
}
    72ba:	b009      	add	sp, #36	; 0x24
    72bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    72c0:	4718      	bx	r3
    72c2:	bf00      	nop

000072c4 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    72c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    72c8:	2600      	movs	r6, #0
    72ca:	b094      	sub	sp, #80	; 0x50
    72cc:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    72ce:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    72d0:	9201      	str	r2, [sp, #4]
    72d2:	f8ad 6014 	strh.w	r6, [sp, #20]
    72d6:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    72d8:	2b00      	cmp	r3, #0
    72da:	d141      	bne.n	7360 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    72dc:	780b      	ldrb	r3, [r1, #0]
    72de:	460d      	mov	r5, r1
    72e0:	f013 0f70 	tst.w	r3, #112	; 0x70
    72e4:	d03c      	beq.n	7360 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    72e6:	7813      	ldrb	r3, [r2, #0]
    72e8:	4604      	mov	r4, r0
    72ea:	4616      	mov	r6, r2
    72ec:	2b2f      	cmp	r3, #47	; 0x2f
    72ee:	d03b      	beq.n	7368 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    72f0:	2700      	movs	r7, #0
    72f2:	e028      	b.n	7346 <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    72f4:	9e01      	ldr	r6, [sp, #4]
    72f6:	7836      	ldrb	r6, [r6, #0]
    72f8:	2e00      	cmp	r6, #0
    72fa:	d050      	beq.n	739e <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    72fc:	f001 f82a 	bl	8354 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7300:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    7302:	aa02      	add	r2, sp, #8
    7304:	4629      	mov	r1, r5
    7306:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    7308:	b92b      	cbnz	r3, 7316 <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    730a:	f1b8 0f00 	cmp.w	r8, #0
    730e:	d027      	beq.n	7360 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    7310:	f7ff ff22 	bl	7158 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7314:	b320      	cbz	r0, 7360 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    7316:	46a6      	mov	lr, r4
    7318:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    731c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7320:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7324:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7328:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    732c:	f8de 5000 	ldr.w	r5, [lr]
    7330:	4620      	mov	r0, r4
  if (!isOpen()) {
    7332:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    7334:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    7338:	b10b      	cbz	r3, 733e <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    733a:	f7ff fdf3 	bl	6f24 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    733e:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    7340:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    7342:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    7344:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    7346:	4631      	mov	r1, r6
    7348:	ab01      	add	r3, sp, #4
    734a:	aa02      	add	r2, sp, #8
    734c:	4620      	mov	r0, r4
    734e:	f001 f94d 	bl	85ec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7352:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    7354:	aa02      	add	r2, sp, #8
    7356:	4629      	mov	r1, r5
    7358:	2300      	movs	r3, #0
    735a:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    735c:	2e00      	cmp	r6, #0
    735e:	d1c9      	bne.n	72f4 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    7360:	2000      	movs	r0, #0
}
    7362:	b014      	add	sp, #80	; 0x50
    7364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    7368:	3601      	adds	r6, #1
    736a:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    736c:	7833      	ldrb	r3, [r6, #0]
    736e:	2b2f      	cmp	r3, #47	; 0x2f
    7370:	d0fa      	beq.n	7368 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7372:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    7374:	2224      	movs	r2, #36	; 0x24
    7376:	2100      	movs	r1, #0
    7378:	a80b      	add	r0, sp, #44	; 0x2c
    737a:	f00a fd37 	bl	11dec <memset>
  m_vol = vol;
    737e:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    7380:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    7382:	2b10      	cmp	r3, #16
    7384:	d003      	beq.n	738e <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    7386:	2b20      	cmp	r3, #32
    7388:	d00f      	beq.n	73aa <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    738a:	2b0c      	cmp	r3, #12
    738c:	d1e8      	bne.n	7360 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    738e:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7390:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    7394:	2301      	movs	r3, #1
    parent = &tmpDir;
    7396:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    7398:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    739c:	e7a8      	b.n	72f0 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    739e:	aa02      	add	r2, sp, #8
    73a0:	f7ff feda 	bl	7158 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    73a4:	b014      	add	sp, #80	; 0x50
    73a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    73aa:	2340      	movs	r3, #64	; 0x40
    73ac:	e7f0      	b.n	7390 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    73ae:	bf00      	nop

000073b0 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    73b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73b4:	2500      	movs	r5, #0
    73b6:	b094      	sub	sp, #80	; 0x50
    73b8:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    73ba:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    73bc:	9201      	str	r2, [sp, #4]
    73be:	9502      	str	r5, [sp, #8]
    73c0:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    73c4:	2b00      	cmp	r3, #0
    73c6:	d137      	bne.n	7438 <FatFile::open(FatFile*, char const*, int)+0x88>
    73c8:	780b      	ldrb	r3, [r1, #0]
    73ca:	460e      	mov	r6, r1
    73cc:	f013 0f70 	tst.w	r3, #112	; 0x70
    73d0:	d032      	beq.n	7438 <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    73d2:	7813      	ldrb	r3, [r2, #0]
    73d4:	4604      	mov	r4, r0
    73d6:	4615      	mov	r5, r2
    73d8:	2b2f      	cmp	r3, #47	; 0x2f
    73da:	d031      	beq.n	7440 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    73dc:	2700      	movs	r7, #0
    73de:	e01e      	b.n	741e <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    73e0:	9d01      	ldr	r5, [sp, #4]
    73e2:	782d      	ldrb	r5, [r5, #0]
    73e4:	2d00      	cmp	r5, #0
    73e6:	d040      	beq.n	746a <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    73e8:	f000 ffb4 	bl	8354 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    73ec:	46a6      	mov	lr, r4
    73ee:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    73f2:	b308      	cbz	r0, 7438 <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    73f4:	4666      	mov	r6, ip
  if (!isOpen()) {
    73f6:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    73f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    73fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7400:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7404:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7408:	f8de 3000 	ldr.w	r3, [lr]
    740c:	4620      	mov	r0, r4
    740e:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    7412:	b10d      	cbz	r5, 7418 <FatFile::open(FatFile*, char const*, int)+0x68>
    7414:	f7ff fd86 	bl	6f24 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    7418:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    741a:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    741c:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    741e:	4629      	mov	r1, r5
    7420:	ab01      	add	r3, sp, #4
    7422:	aa0b      	add	r2, sp, #44	; 0x2c
    7424:	4620      	mov	r0, r4
    7426:	f001 f8e1 	bl	85ec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    742a:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    742c:	aa0b      	add	r2, sp, #44	; 0x2c
    742e:	4631      	mov	r1, r6
    7430:	2300      	movs	r3, #0
    7432:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    7434:	2d00      	cmp	r5, #0
    7436:	d1d3      	bne.n	73e0 <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    7438:	2000      	movs	r0, #0
}
    743a:	b014      	add	sp, #80	; 0x50
    743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    7440:	3501      	adds	r5, #1
    7442:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    7444:	7829      	ldrb	r1, [r5, #0]
    7446:	292f      	cmp	r1, #47	; 0x2f
    7448:	d0fa      	beq.n	7440 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    744a:	b9a9      	cbnz	r1, 7478 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    744c:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    744e:	2224      	movs	r2, #36	; 0x24
    7450:	4620      	mov	r0, r4
    7452:	f00a fccb 	bl	11dec <memset>
  m_vol = vol;
    7456:	60a5      	str	r5, [r4, #8]
    7458:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    745a:	2b10      	cmp	r3, #16
    745c:	d003      	beq.n	7466 <FatFile::open(FatFile*, char const*, int)+0xb6>
    745e:	2b20      	cmp	r3, #32
    7460:	d022      	beq.n	74a8 <FatFile::open(FatFile*, char const*, int)+0xf8>
    7462:	2b0c      	cmp	r3, #12
    7464:	d1e8      	bne.n	7438 <FatFile::open(FatFile*, char const*, int)+0x88>
    7466:	2220      	movs	r2, #32
    7468:	e01f      	b.n	74aa <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    746a:	4643      	mov	r3, r8
    746c:	aa0b      	add	r2, sp, #44	; 0x2c
    746e:	f000 ff71 	bl	8354 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    7472:	b014      	add	sp, #80	; 0x50
    7474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7478:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    747a:	2224      	movs	r2, #36	; 0x24
    747c:	2100      	movs	r1, #0
    747e:	a802      	add	r0, sp, #8
    7480:	f00a fcb4 	bl	11dec <memset>
  m_vol = vol;
    7484:	9604      	str	r6, [sp, #16]
    7486:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    7488:	2b10      	cmp	r3, #16
    748a:	d003      	beq.n	7494 <FatFile::open(FatFile*, char const*, int)+0xe4>
    748c:	2b20      	cmp	r3, #32
    748e:	d003      	beq.n	7498 <FatFile::open(FatFile*, char const*, int)+0xe8>
    7490:	2b0c      	cmp	r3, #12
    7492:	d1d1      	bne.n	7438 <FatFile::open(FatFile*, char const*, int)+0x88>
    7494:	2320      	movs	r3, #32
    7496:	e000      	b.n	749a <FatFile::open(FatFile*, char const*, int)+0xea>
    7498:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    749a:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    749e:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    74a0:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    74a2:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    74a6:	e799      	b.n	73dc <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    74a8:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    74aa:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    74ac:	7022      	strb	r2, [r4, #0]
  return true;
    74ae:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    74b0:	70a3      	strb	r3, [r4, #2]
  return true;
    74b2:	e7c2      	b.n	743a <FatFile::open(FatFile*, char const*, int)+0x8a>

000074b4 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    74b4:	b119      	cbz	r1, 74be <FatFile::open(FatVolume*, char const*, int)+0xa>
    74b6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    74ba:	f7ff bf79 	b.w	73b0 <FatFile::open(FatFile*, char const*, int)>
}
    74be:	4608      	mov	r0, r1
    74c0:	4770      	bx	lr
    74c2:	bf00      	nop

000074c4 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    74c4:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    74c6:	b570      	push	{r4, r5, r6, lr}
    74c8:	460d      	mov	r5, r1
    74ca:	4604      	mov	r4, r0
  if (file->m_dirCluster == 0) {
    74cc:	b993      	cbnz	r3, 74f4 <FatFile::openCluster(FatFile*)+0x30>
  if (isOpen()) {
    74ce:	7806      	ldrb	r6, [r0, #0]
    74d0:	b10e      	cbz	r6, 74d6 <FatFile::openCluster(FatFile*)+0x12>
  return false;
    74d2:	4618      	mov	r0, r3
}
    74d4:	bd70      	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    74d6:	688d      	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    74d8:	2224      	movs	r2, #36	; 0x24
    74da:	4631      	mov	r1, r6
    74dc:	f00a fc86 	bl	11dec <memset>
  m_vol = vol;
    74e0:	60a5      	str	r5, [r4, #8]
    74e2:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    74e4:	2b10      	cmp	r3, #16
    74e6:	d018      	beq.n	751a <FatFile::openCluster(FatFile*)+0x56>
    74e8:	2b20      	cmp	r3, #32
    74ea:	d010      	beq.n	750e <FatFile::openCluster(FatFile*)+0x4a>
    74ec:	2b0c      	cmp	r3, #12
    74ee:	d014      	beq.n	751a <FatFile::openCluster(FatFile*)+0x56>
    74f0:	4630      	mov	r0, r6
}
    74f2:	bd70      	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    74f4:	2224      	movs	r2, #36	; 0x24
    74f6:	2100      	movs	r1, #0
    74f8:	f00a fc78 	bl	11dec <memset>
  m_flags = FILE_FLAG_READ;
    74fc:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    74fe:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    7500:	70a0      	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7502:	7023      	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    7504:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    7508:	60a2      	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    750a:	6223      	str	r3, [r4, #32]
}
    750c:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    750e:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    7510:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7512:	7022      	strb	r2, [r4, #0]
  return true;
    7514:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    7516:	70a3      	strb	r3, [r4, #2]
}
    7518:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    751a:	2220      	movs	r2, #32
    751c:	e7f8      	b.n	7510 <FatFile::openCluster(FatFile*)+0x4c>
    751e:	bf00      	nop

00007520 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    7520:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    7522:	7805      	ldrb	r5, [r0, #0]
    7524:	b10d      	cbz	r5, 752a <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    7526:	2000      	movs	r0, #0
}
    7528:	bd70      	pop	{r4, r5, r6, pc}
    752a:	460e      	mov	r6, r1
    752c:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    752e:	2224      	movs	r2, #36	; 0x24
    7530:	4629      	mov	r1, r5
    7532:	f00a fc5b 	bl	11dec <memset>
  m_vol = vol;
    7536:	60a6      	str	r6, [r4, #8]
    7538:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    753a:	2b10      	cmp	r3, #16
    753c:	d00b      	beq.n	7556 <FatFile::openRoot(FatVolume*)+0x36>
    753e:	2b20      	cmp	r3, #32
    7540:	d003      	beq.n	754a <FatFile::openRoot(FatVolume*)+0x2a>
    7542:	2b0c      	cmp	r3, #12
    7544:	d007      	beq.n	7556 <FatFile::openRoot(FatVolume*)+0x36>
    7546:	4628      	mov	r0, r5
}
    7548:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    754a:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    754c:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    754e:	7022      	strb	r2, [r4, #0]
  return true;
    7550:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    7552:	70a3      	strb	r3, [r4, #2]
}
    7554:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    7556:	2220      	movs	r2, #32
    7558:	e7f8      	b.n	754c <FatFile::openRoot(FatVolume*)+0x2c>
    755a:	bf00      	nop

0000755c <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7560:	ed2d 8b02 	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    7564:	7883      	ldrb	r3, [r0, #2]
    7566:	b083      	sub	sp, #12
    7568:	4605      	mov	r5, r0
  if (!isReadable()) {
    756a:	07df      	lsls	r7, r3, #31
    756c:	f140 808c 	bpl.w	7688 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    7570:	4688      	mov	r8, r1
    7572:	7801      	ldrb	r1, [r0, #0]
    7574:	4692      	mov	sl, r2
  if (isFile()) {
    7576:	070e      	lsls	r6, r1, #28
    7578:	f100 8091 	bmi.w	769e <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    757c:	068c      	lsls	r4, r1, #26
    757e:	d508      	bpl.n	7592 <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    7580:	6883      	ldr	r3, [r0, #8]
    7582:	895a      	ldrh	r2, [r3, #10]
    7584:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    7586:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    758a:	b29b      	uxth	r3, r3
    758c:	459a      	cmp	sl, r3
    758e:	bf28      	it	cs
    7590:	469a      	movcs	sl, r3
  while (toRead) {
    7592:	f1ba 0f00 	cmp.w	sl, #0
    7596:	f000 80af 	beq.w	76f8 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    759a:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    759c:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    75a0:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    75a2:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    75a4:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    75a8:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    75ac:	68af      	ldr	r7, [r5, #8]
    75ae:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    75b2:	d53d      	bpl.n	7630 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    75b4:	6a39      	ldr	r1, [r7, #32]
    75b6:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    75ba:	f1bb 0f00 	cmp.w	fp, #0
    75be:	d151      	bne.n	7664 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    75c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    75c4:	d34e      	bcc.n	7664 <FatFile::read(void*, unsigned int)+0x108>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    75c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    75c8:	4291      	cmp	r1, r2
    75ca:	d04b      	beq.n	7664 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    75cc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    75d0:	f0c0 8082 	bcc.w	76d8 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    75d4:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    75d6:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    75d8:	0680      	lsls	r0, r0, #26
    75da:	d405      	bmi.n	75e8 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    75dc:	7938      	ldrb	r0, [r7, #4]
    75de:	eba0 0009 	sub.w	r0, r0, r9
    75e2:	4283      	cmp	r3, r0
    75e4:	bf28      	it	cs
    75e6:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    75e8:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    75ea:	ea4f 2443 	mov.w	r4, r3, lsl #9
    75ee:	d80c      	bhi.n	760a <FatFile::read(void*, unsigned int)+0xae>
    75f0:	18c8      	adds	r0, r1, r3
    75f2:	4282      	cmp	r2, r0
    75f4:	d209      	bcs.n	760a <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    75f6:	f107 0028 	add.w	r0, r7, #40	; 0x28
    75fa:	e9cd 1300 	strd	r1, r3, [sp]
    75fe:	f004 faeb 	bl	bbd8 <FsCache::sync()>
    7602:	e9dd 1300 	ldrd	r1, r3, [sp]
    7606:	2800      	cmp	r0, #0
    7608:	d03e      	beq.n	7688 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    760a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    760c:	6802      	ldr	r2, [r0, #0]
    760e:	6957      	ldr	r7, [r2, #20]
    7610:	4642      	mov	r2, r8
    7612:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    7614:	2800      	cmp	r0, #0
    7616:	d037      	beq.n	7688 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    7618:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    761a:	1b36      	subs	r6, r6, r4
    dst += n;
    761c:	44a0      	add	r8, r4
    m_curPosition += n;
    761e:	4422      	add	r2, r4
    7620:	616a      	str	r2, [r5, #20]
  while (toRead) {
    7622:	d069      	beq.n	76f8 <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    7624:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7626:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    762a:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    762c:	0688      	lsls	r0, r1, #26
    762e:	d4c1      	bmi.n	75b4 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    7630:	f897 9005 	ldrb.w	r9, [r7, #5]
    7634:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    7638:	f1bb 0f00 	cmp.w	fp, #0
    763c:	d136      	bne.n	76ac <FatFile::read(void*, unsigned int)+0x150>
    763e:	f1b9 0f00 	cmp.w	r9, #0
    7642:	d133      	bne.n	76ac <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    7644:	2a00      	cmp	r2, #0
    7646:	d133      	bne.n	76b0 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7648:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    764a:	bf4c      	ite	mi
    764c:	6a3a      	ldrmi	r2, [r7, #32]
    764e:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    7650:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7652:	3a02      	subs	r2, #2
    7654:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7656:	6979      	ldr	r1, [r7, #20]
    7658:	4082      	lsls	r2, r0
    765a:	4449      	add	r1, r9
    765c:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    765e:	f1bb 0f00 	cmp.w	fp, #0
    7662:	d0ad      	beq.n	75c0 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    7664:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    7668:	2200      	movs	r2, #0
    766a:	f107 0028 	add.w	r0, r7, #40	; 0x28
    766e:	42b4      	cmp	r4, r6
    7670:	bf28      	it	cs
    7672:	4634      	movcs	r4, r6
    7674:	f004 fadc 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7678:	b130      	cbz	r0, 7688 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    767a:	eb00 010b 	add.w	r1, r0, fp
    767e:	4622      	mov	r2, r4
    7680:	4640      	mov	r0, r8
    7682:	f006 fe47 	bl	e314 <memcpy>
    7686:	e7c7      	b.n	7618 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    7688:	786b      	ldrb	r3, [r5, #1]
  return -1;
    768a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
    768e:	f043 0302 	orr.w	r3, r3, #2
    7692:	706b      	strb	r3, [r5, #1]
}
    7694:	b003      	add	sp, #12
    7696:	ecbd 8b02 	vpop	{d8}
    769a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    769e:	69c3      	ldr	r3, [r0, #28]
    76a0:	6942      	ldr	r2, [r0, #20]
    76a2:	1a9b      	subs	r3, r3, r2
    76a4:	459a      	cmp	sl, r3
    76a6:	bf28      	it	cs
    76a8:	469a      	movcs	sl, r3
    76aa:	e772      	b.n	7592 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    76ac:	692a      	ldr	r2, [r5, #16]
    76ae:	e7d0      	b.n	7652 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    76b0:	070b      	lsls	r3, r1, #28
    76b2:	d505      	bpl.n	76c0 <FatFile::read(void*, unsigned int)+0x164>
    76b4:	78aa      	ldrb	r2, [r5, #2]
    76b6:	0654      	lsls	r4, r2, #25
    76b8:	d502      	bpl.n	76c0 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    76ba:	692a      	ldr	r2, [r5, #16]
    76bc:	3201      	adds	r2, #1
    76be:	e7c7      	b.n	7650 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    76c0:	ee18 2a10 	vmov	r2, s16
    76c4:	4638      	mov	r0, r7
    76c6:	6929      	ldr	r1, [r5, #16]
    76c8:	f001 fdfe 	bl	92c8 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    76cc:	2800      	cmp	r0, #0
    76ce:	dbdb      	blt.n	7688 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    76d0:	d00c      	beq.n	76ec <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    76d2:	68af      	ldr	r7, [r5, #8]
    76d4:	692a      	ldr	r2, [r5, #16]
    76d6:	e7bc      	b.n	7652 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    76d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    76da:	4642      	mov	r2, r8
    76dc:	6803      	ldr	r3, [r0, #0]
    76de:	691b      	ldr	r3, [r3, #16]
    76e0:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    76e2:	2800      	cmp	r0, #0
    76e4:	d0d0      	beq.n	7688 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    76e6:	f44f 7400 	mov.w	r4, #512	; 0x200
    76ea:	e795      	b.n	7618 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    76ec:	782b      	ldrb	r3, [r5, #0]
    76ee:	f013 0f70 	tst.w	r3, #112	; 0x70
    76f2:	d0c9      	beq.n	7688 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    76f4:	ebaa 0a06 	sub.w	sl, sl, r6
    76f8:	4650      	mov	r0, sl
}
    76fa:	b003      	add	sp, #12
    76fc:	ecbd 8b02 	vpop	{d8}
    7700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007704 <FatFile::peek()>:
int FatFile::peek() {
    7704:	b570      	push	{r4, r5, r6, lr}
    7706:	b082      	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    7708:	2201      	movs	r2, #1
    770a:	4604      	mov	r4, r0
    770c:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    7710:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    7714:	f7ff ff22 	bl	755c <FatFile::read(void*, unsigned int)>
    7718:	2801      	cmp	r0, #1
    771a:	bf0c      	ite	eq
    771c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    7720:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curCluster = curCluster;
    7724:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    7728:	b002      	add	sp, #8
    772a:	bd70      	pop	{r4, r5, r6, pc}

0000772c <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    772c:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    772e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    7732:	b530      	push	{r4, r5, lr}
    7734:	4604      	mov	r4, r0
    7736:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7738:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    773c:	d009      	beq.n	7752 <FatFile::readDirCache(bool)+0x26>
    773e:	2901      	cmp	r1, #1
    7740:	d107      	bne.n	7752 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    7742:	3320      	adds	r3, #32
    7744:	6143      	str	r3, [r0, #20]
    return m_buffer;
    7746:	68a0      	ldr	r0, [r4, #8]
    7748:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    774a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    774e:	b003      	add	sp, #12
    7750:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    7752:	2201      	movs	r2, #1
    7754:	f10d 0107 	add.w	r1, sp, #7
    7758:	4620      	mov	r0, r4
    775a:	f7ff feff 	bl	755c <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    775e:	b240      	sxtb	r0, r0
    7760:	2801      	cmp	r0, #1
    7762:	d103      	bne.n	776c <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    7764:	6963      	ldr	r3, [r4, #20]
    7766:	331f      	adds	r3, #31
    7768:	6163      	str	r3, [r4, #20]
    776a:	e7ec      	b.n	7746 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    776c:	2000      	movs	r0, #0
    776e:	e7ee      	b.n	774e <FatFile::readDirCache(bool)+0x22>

00007770 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    7774:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7776:	b09a      	sub	sp, #104	; 0x68
  FatFile() {}
    7778:	2600      	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    777a:	f013 0f18 	tst.w	r3, #24
    777e:	9608      	str	r6, [sp, #32]
    7780:	9611      	str	r6, [sp, #68]	; 0x44
    7782:	d006      	beq.n	7792 <FatFile::rename(FatFile*, char const*)+0x22>
    7784:	4617      	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    7786:	6883      	ldr	r3, [r0, #8]
    7788:	688a      	ldr	r2, [r1, #8]
    778a:	4604      	mov	r4, r0
    778c:	460d      	mov	r5, r1
    778e:	429a      	cmp	r2, r3
    7790:	d003      	beq.n	779a <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    7792:	2000      	movs	r0, #0
}
    7794:	b01a      	add	sp, #104	; 0x68
    7796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    779a:	f7ff fbc3 	bl	6f24 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    779e:	46a6      	mov	lr, r4
    77a0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
    77a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    77a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    77ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    77b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    77b4:	f8de 3000 	ldr.w	r3, [lr]
    77b8:	4632      	mov	r2, r6
    77ba:	69a1      	ldr	r1, [r4, #24]
    77bc:	f8cc 3000 	str.w	r3, [ip]
    77c0:	68a3      	ldr	r3, [r4, #8]
    77c2:	f103 0028 	add.w	r0, r3, #40	; 0x28
    77c6:	f004 fa33 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    77ca:	2800      	cmp	r0, #0
    77cc:	d0e1      	beq.n	7792 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    77ce:	88a2      	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    77d0:	46ec      	mov	ip, sp
  if (isFile()) {
    77d2:	f894 8000 	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    77d6:	f002 020f 	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    77da:	eb00 1e42 	add.w	lr, r0, r2, lsl #5
    77de:	0152      	lsls	r2, r2, #5
    77e0:	f8de 1004 	ldr.w	r1, [lr, #4]
    77e4:	5880      	ldr	r0, [r0, r2]
    77e6:	f8de 300c 	ldr.w	r3, [lr, #12]
    77ea:	f8de 2008 	ldr.w	r2, [lr, #8]
    77ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    77f2:	f8de 1014 	ldr.w	r1, [lr, #20]
    77f6:	f8de 2018 	ldr.w	r2, [lr, #24]
    77fa:	f8de 301c 	ldr.w	r3, [lr, #28]
    77fe:	f8de 0010 	ldr.w	r0, [lr, #16]
    7802:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    7806:	f018 0308 	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    780a:	463a      	mov	r2, r7
    780c:	4629      	mov	r1, r5
  if (isFile()) {
    780e:	f040 809b 	bne.w	7948 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    7812:	a808      	add	r0, sp, #32
    7814:	f7ff fd56 	bl	72c4 <FatFile::mkdir(FatFile*, char const*, bool)>
    7818:	2800      	cmp	r0, #0
    781a:	d0ba      	beq.n	7792 <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    781c:	9e10      	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    781e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    7822:	2500      	movs	r5, #0
  m_dirSector = file.m_dirSector;
    7824:	990e      	ldr	r1, [sp, #56]	; 0x38
    7826:	2201      	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    7828:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    782a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    782e:	68a0      	ldr	r0, [r4, #8]
    7830:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    7832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7834:	3028      	adds	r0, #40	; 0x28
  m_dirSector = file.m_dirSector;
    7836:	61a1      	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    7838:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    783a:	f88d 5020 	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    783e:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    7842:	f004 f9f5 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7846:	2800      	cmp	r0, #0
    7848:	d0a3      	beq.n	7792 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    784a:	88a3      	ldrh	r3, [r4, #4]
    784c:	f003 030f 	and.w	r3, r3, #15
    7850:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    7854:	f8dd 300d 	ldr.w	r3, [sp, #13]
    7858:	f8c0 300d 	str.w	r3, [r0, #13]
    785c:	f8dd 3011 	ldr.w	r3, [sp, #17]
    7860:	f8c0 3011 	str.w	r3, [r0, #17]
    7864:	f8dd 3015 	ldr.w	r3, [sp, #21]
    7868:	f8c0 3015 	str.w	r3, [r0, #21]
    786c:	f8dd 3019 	ldr.w	r3, [sp, #25]
    7870:	f8c0 3019 	str.w	r3, [r0, #25]
    7874:	f8bd 301d 	ldrh.w	r3, [sp, #29]
    7878:	f8a0 301d 	strh.w	r3, [r0, #29]
    787c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    7880:	77c3      	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    7882:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7886:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
    7888:	2e00      	cmp	r6, #0
    788a:	d03b      	beq.n	7904 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    788c:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    788e:	1eb3      	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    7890:	462a      	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7892:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    7894:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7896:	408b      	lsls	r3, r1
    7898:	f850 1c14 	ldr.w	r1, [r0, #-20]
    return m_cache.prepare(sector, options);
    789c:	4419      	add	r1, r3
    789e:	f004 f9c7 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    78a2:	4605      	mov	r5, r0
    78a4:	2800      	cmp	r0, #0
    78a6:	f43f af74 	beq.w	7792 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    78aa:	6a00      	ldr	r0, [r0, #32]
    78ac:	466f      	mov	r7, sp
    78ae:	6a69      	ldr	r1, [r5, #36]	; 0x24
    78b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    78b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    78b4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    78b6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    78b8:	6b69      	ldr	r1, [r5, #52]	; 0x34
    78ba:	6baa      	ldr	r2, [r5, #56]	; 0x38
    78bc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    78be:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    78c0:	4631      	mov	r1, r6
    78c2:	68a0      	ldr	r0, [r4, #8]
    78c4:	f001 fd22 	bl	930c <FatPartition::freeChain(unsigned long)>
    78c8:	2800      	cmp	r0, #0
    78ca:	f43f af62 	beq.w	7792 <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    78ce:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    78d0:	6a23      	ldr	r3, [r4, #32]
    78d2:	7982      	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    78d4:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    78d6:	3b02      	subs	r3, #2
    78d8:	f850 1c14 	ldr.w	r1, [r0, #-20]
    78dc:	4093      	lsls	r3, r2
    return m_cache.prepare(sector, options);
    78de:	2201      	movs	r2, #1
    78e0:	4419      	add	r1, r3
    78e2:	f004 f9a5 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    78e6:	4606      	mov	r6, r0
    78e8:	2800      	cmp	r0, #0
    78ea:	f43f af52 	beq.w	7792 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    78ee:	466d      	mov	r5, sp
    78f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    78f2:	6230      	str	r0, [r6, #32]
    78f4:	6271      	str	r1, [r6, #36]	; 0x24
    78f6:	62b2      	str	r2, [r6, #40]	; 0x28
    78f8:	62f3      	str	r3, [r6, #44]	; 0x2c
    78fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    78fc:	6330      	str	r0, [r6, #48]	; 0x30
    78fe:	6371      	str	r1, [r6, #52]	; 0x34
    7900:	63b2      	str	r2, [r6, #56]	; 0x38
    7902:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    7904:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    7906:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    7908:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
    790a:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    790c:	9119      	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    790e:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    7912:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    7916:	f000 fed3 	bl	86c0 <FatFile::remove()>
    791a:	2800      	cmp	r0, #0
    791c:	f43f af39 	beq.w	7792 <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    7920:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7922:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7926:	f004 f957 	bl	bbd8 <FsCache::sync()>
    792a:	2800      	cmp	r0, #0
    792c:	f43f af31 	beq.w	7792 <FatFile::rename(FatFile*, char const*)+0x22>
    7930:	f504 700e 	add.w	r0, r4, #568	; 0x238
    7934:	f004 f950 	bl	bbd8 <FsCache::sync()>
    7938:	2800      	cmp	r0, #0
    793a:	f43f af2a 	beq.w	7792 <FatFile::rename(FatFile*, char const*)+0x22>
    793e:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    7940:	6803      	ldr	r3, [r0, #0]
    7942:	6a1b      	ldr	r3, [r3, #32]
    7944:	4798      	blx	r3
    7946:	e725      	b.n	7794 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    7948:	f640 2301 	movw	r3, #2561	; 0xa01
    794c:	4660      	mov	r0, ip
    794e:	f7ff fd2f 	bl	73b0 <FatFile::open(FatFile*, char const*, int)>
    7952:	2800      	cmp	r0, #0
    7954:	f47f af63 	bne.w	781e <FatFile::rename(FatFile*, char const*)+0xae>
    7958:	e71b      	b.n	7792 <FatFile::rename(FatFile*, char const*)+0x22>
    795a:	bf00      	nop

0000795c <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    795c:	7803      	ldrb	r3, [r0, #0]
    795e:	06da      	lsls	r2, r3, #27
    7960:	d401      	bmi.n	7966 <FatFile::rmdir()+0xa>
}
    7962:	2000      	movs	r0, #0
    7964:	4770      	bx	lr
  if (pos == m_curPosition) {
    7966:	6943      	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    7968:	b530      	push	{r4, r5, lr}
    796a:	4604      	mov	r4, r0
    796c:	b083      	sub	sp, #12
  if (pos == m_curPosition) {
    796e:	b133      	cbz	r3, 797e <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7970:	7883      	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    7972:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7974:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    7978:	e9c0 2204 	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    797c:	7083      	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    797e:	2300      	movs	r3, #0
    7980:	e00f      	b.n	79a2 <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    7982:	6163      	str	r3, [r4, #20]
    7984:	68a3      	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7986:	016a      	lsls	r2, r5, #5
    7988:	3338      	adds	r3, #56	; 0x38
    if (dir->name[0] == FAT_NAME_FREE) {
    798a:	5c9a      	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    798c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    7990:	b1ea      	cbz	r2, 79ce <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7992:	2ae5      	cmp	r2, #229	; 0xe5
    7994:	d004      	beq.n	79a0 <FatFile::rmdir()+0x44>
    7996:	2a2e      	cmp	r2, #46	; 0x2e
    7998:	d002      	beq.n	79a0 <FatFile::rmdir()+0x44>
    if (isFileOrSubdir(dir)) {
    799a:	7adb      	ldrb	r3, [r3, #11]
    799c:	071b      	lsls	r3, r3, #28
    799e:	d522      	bpl.n	79e6 <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    79a0:	6963      	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    79a2:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    79a6:	f3c3 1543 	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    79aa:	f103 0320 	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    79ae:	d1e8      	bne.n	7982 <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    79b0:	2201      	movs	r2, #1
    79b2:	f10d 0107 	add.w	r1, sp, #7
    79b6:	4620      	mov	r0, r4
    79b8:	f7ff fdd0 	bl	755c <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    79bc:	b240      	sxtb	r0, r0
    79be:	2801      	cmp	r0, #1
    79c0:	d103      	bne.n	79ca <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    79c2:	6963      	ldr	r3, [r4, #20]
    79c4:	331f      	adds	r3, #31
    79c6:	6163      	str	r3, [r4, #20]
    79c8:	e7dc      	b.n	7984 <FatFile::rmdir()+0x28>
      if (!getError()) {
    79ca:	7863      	ldrb	r3, [r4, #1]
    79cc:	b95b      	cbnz	r3, 79e6 <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    79ce:	78a3      	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    79d0:	2208      	movs	r2, #8
  return remove();
    79d2:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    79d4:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    79d8:	7022      	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    79da:	70a3      	strb	r3, [r4, #2]
}
    79dc:	b003      	add	sp, #12
    79de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    79e2:	f000 be6d 	b.w	86c0 <FatFile::remove()>
}
    79e6:	2000      	movs	r0, #0
    79e8:	b003      	add	sp, #12
    79ea:	bd30      	pop	{r4, r5, pc}

000079ec <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    79ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    79f0:	7803      	ldrb	r3, [r0, #0]
    79f2:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    79f4:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    79f6:	2b00      	cmp	r3, #0
    79f8:	d039      	beq.n	7a6e <FatFile::seekSet(unsigned long)+0x82>
    79fa:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    79fc:	6941      	ldr	r1, [r0, #20]
    79fe:	42a9      	cmp	r1, r5
    7a00:	d042      	beq.n	7a88 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    7a02:	2d00      	cmp	r5, #0
    7a04:	d037      	beq.n	7a76 <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    7a06:	0718      	lsls	r0, r3, #28
    7a08:	d52a      	bpl.n	7a60 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    7a0a:	69e2      	ldr	r2, [r4, #28]
    7a0c:	42aa      	cmp	r2, r5
    7a0e:	d32e      	bcc.n	7a6e <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7a10:	f8d4 c008 	ldr.w	ip, [r4, #8]
    7a14:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    7a16:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    7a18:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    7a1c:	f012 0f40 	tst.w	r2, #64	; 0x40
    7a20:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7a24:	b2c0      	uxtb	r0, r0
    7a26:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    7a2a:	d130      	bne.n	7a8e <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    7a2c:	1e4a      	subs	r2, r1, #1
    7a2e:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    7a30:	b109      	cbz	r1, 7a36 <FatFile::seekSet(unsigned long)+0x4a>
    7a32:	4296      	cmp	r6, r2
    7a34:	d22f      	bcs.n	7a96 <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7a36:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    7a38:	bf4c      	ite	mi
    7a3a:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    7a3e:	6a23      	ldrpl	r3, [r4, #32]
    7a40:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7a42:	f104 0810 	add.w	r8, r4, #16
    7a46:	e006      	b.n	7a56 <FatFile::seekSet(unsigned long)+0x6a>
    7a48:	6921      	ldr	r1, [r4, #16]
    7a4a:	3e01      	subs	r6, #1
    7a4c:	68a0      	ldr	r0, [r4, #8]
    7a4e:	f001 fc3b 	bl	92c8 <FatPartition::fatGet(unsigned long, unsigned long*)>
    7a52:	2800      	cmp	r0, #0
    7a54:	dd0b      	ble.n	7a6e <FatFile::seekSet(unsigned long)+0x82>
    7a56:	4642      	mov	r2, r8
  while (nNew--) {
    7a58:	2e00      	cmp	r6, #0
    7a5a:	d1f5      	bne.n	7a48 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7a5c:	78a2      	ldrb	r2, [r4, #2]
    7a5e:	e00c      	b.n	7a7a <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    7a60:	069a      	lsls	r2, r3, #26
    7a62:	d5d5      	bpl.n	7a10 <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    7a64:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    7a66:	895b      	ldrh	r3, [r3, #10]
    7a68:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    7a6c:	d9f6      	bls.n	7a5c <FatFile::seekSet(unsigned long)+0x70>
  return false;
    7a6e:	2000      	movs	r0, #0
  m_curCluster = tmp;
    7a70:	6127      	str	r7, [r4, #16]
}
    7a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a76:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    7a78:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7a7a:	f022 0220 	bic.w	r2, r2, #32
  return true;
    7a7e:	2001      	movs	r0, #1
  m_curPosition = pos;
    7a80:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7a82:	70a2      	strb	r2, [r4, #2]
}
    7a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    7a88:	2001      	movs	r0, #1
}
    7a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    7a8e:	6a23      	ldr	r3, [r4, #32]
    7a90:	4433      	add	r3, r6
    7a92:	6123      	str	r3, [r4, #16]
    goto done;
    7a94:	e7f1      	b.n	7a7a <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    7a96:	1ab6      	subs	r6, r6, r2
    7a98:	e7d3      	b.n	7a42 <FatFile::seekSet(unsigned long)+0x56>
    7a9a:	bf00      	nop

00007a9c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    7a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7aa0:	460e      	mov	r6, r1
    7aa2:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    7aa4:	2100      	movs	r1, #0
    7aa6:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    7aa8:	4604      	mov	r4, r0
    7aaa:	4698      	mov	r8, r3
    7aac:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    7ab0:	f00a f99c 	bl	11dec <memset>
  m_vol = dirFile->m_vol;
    7ab4:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    7ab6:	6a33      	ldr	r3, [r6, #32]
    7ab8:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    7abc:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    7abe:	f005 050f 	and.w	r5, r5, #15
    7ac2:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    7ac6:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7aca:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    7acc:	070b      	lsls	r3, r1, #28
    7ace:	d411      	bmi.n	7af4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    7ad0:	f001 0117 	and.w	r1, r1, #23
    7ad4:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    7ad6:	7ad3      	ldrb	r3, [r2, #11]
    7ad8:	f013 0f18 	tst.w	r3, #24
    7adc:	d102      	bne.n	7ae4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    7ade:	f041 0108 	orr.w	r1, r1, #8
    7ae2:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    7ae4:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    7ae8:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    7aea:	2b01      	cmp	r3, #1
    7aec:	d038      	beq.n	7b60 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    7aee:	2b02      	cmp	r3, #2
    7af0:	d006      	beq.n	7b00 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    7af2:	b1f3      	cbz	r3, 7b32 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    7af4:	2300      	movs	r3, #0
  return false;
    7af6:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    7af8:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    7afa:	70a3      	strb	r3, [r4, #2]
}
    7afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    7b00:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    7b02:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    7b04:	06cd      	lsls	r5, r1, #27
    7b06:	d4f5      	bmi.n	7af4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    7b08:	07ce      	lsls	r6, r1, #31
    7b0a:	d4f3      	bmi.n	7af4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7b0c:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    7b10:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7b14:	ea43 0301 	orr.w	r3, r3, r1
    7b18:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    7b1a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7b1c:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    7b1e:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    7b20:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7b22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    7b26:	d012      	beq.n	7b4e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7b28:	bb19      	cbnz	r1, 7b72 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7b2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7b2e:	70a3      	strb	r3, [r4, #2]
    7b30:	e010      	b.n	7b54 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    7b32:	f418 6f80 	tst.w	r8, #1024	; 0x400
    7b36:	d1dd      	bne.n	7af4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7b38:	f008 0308 	and.w	r3, r8, #8
    7b3c:	f043 0301 	orr.w	r3, r3, #1
    7b40:	70a3      	strb	r3, [r4, #2]
    7b42:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7b44:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    7b46:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    7b48:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7b4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    7b4e:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    7b50:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    7b52:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7b54:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    7b58:	d104      	bne.n	7b64 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    7b5a:	2001      	movs	r0, #1
}
    7b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    7b60:	2302      	movs	r3, #2
    7b62:	e7ce      	b.n	7b02 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7b64:	69e1      	ldr	r1, [r4, #28]
    7b66:	4620      	mov	r0, r4
    7b68:	f7ff ff40 	bl	79ec <FatFile::seekSet(unsigned long)>
    7b6c:	2800      	cmp	r0, #0
    7b6e:	d1f4      	bne.n	7b5a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    7b70:	e7c0      	b.n	7af4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7b72:	f001 fbcb 	bl	930c <FatPartition::freeChain(unsigned long)>
    7b76:	2800      	cmp	r0, #0
    7b78:	d0bc      	beq.n	7af4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7b7a:	78a3      	ldrb	r3, [r4, #2]
    7b7c:	e7d5      	b.n	7b2a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    7b7e:	bf00      	nop

00007b80 <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const {return m_attributes;}
    7b80:	7803      	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7b82:	2b00      	cmp	r3, #0
    7b84:	d145      	bne.n	7c12 <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7b8a:	780b      	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7b8c:	b084      	sub	sp, #16
    7b8e:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7b90:	f013 0f70 	tst.w	r3, #112	; 0x70
    7b94:	d030      	beq.n	7bf8 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const {return m_curPosition;}
    7b96:	694b      	ldr	r3, [r1, #20]
    7b98:	f013 051f 	ands.w	r5, r3, #31
    7b9c:	d12c      	bne.n	7bf8 <FatFile::openNext(FatFile*, int)+0x78>
    7b9e:	4606      	mov	r6, r0
    7ba0:	4690      	mov	r8, r2
    7ba2:	46a9      	mov	r9, r5
    int8_t n = read(&n, 1);
    7ba4:	2201      	movs	r2, #1
    7ba6:	f10d 010f 	add.w	r1, sp, #15
    7baa:	4620      	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7bac:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition()/FS_DIR_SIZE;
    7bb0:	095f      	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    7bb2:	f7ff fcd3 	bl	755c <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    7bb6:	b240      	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7bb8:	ea4f 124a 	mov.w	r2, sl, lsl #5
    if  (n != 1) {
    7bbc:	2801      	cmp	r0, #1
    7bbe:	d11b      	bne.n	7bf8 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    7bc0:	6963      	ldr	r3, [r4, #20]
    return m_buffer;
    7bc2:	68a1      	ldr	r1, [r4, #8]
    7bc4:	331f      	adds	r3, #31
    7bc6:	f101 0c38 	add.w	ip, r1, #56	; 0x38
    7bca:	6163      	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    7bcc:	f81c 2002 	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7bd0:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    7bd4:	b182      	cbz	r2, 7bf8 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    7bd6:	2a2e      	cmp	r2, #46	; 0x2e
    7bd8:	d012      	beq.n	7c00 <FatFile::openNext(FatFile*, int)+0x80>
    7bda:	f1a2 00e5 	sub.w	r0, r2, #229	; 0xe5
    7bde:	fab0 f080 	clz	r0, r0
    7be2:	0940      	lsrs	r0, r0, #5
    7be4:	b960      	cbnz	r0, 7c00 <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7be6:	f89c 100b 	ldrb.w	r1, [ip, #11]
    } else if (isFileOrSubdir(dir)) {
    7bea:	f011 0e08 	ands.w	lr, r1, #8
    7bee:	d012      	beq.n	7c16 <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isLongName(dir)) {
    7bf0:	290f      	cmp	r1, #15
    7bf2:	d007      	beq.n	7c04 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    7bf4:	4605      	mov	r5, r0
    7bf6:	e7d5      	b.n	7ba4 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    7bf8:	2000      	movs	r0, #0
}
    7bfa:	b004      	add	sp, #16
    7bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    7c00:	2500      	movs	r5, #0
    7c02:	e7cf      	b.n	7ba4 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    7c04:	0651      	lsls	r1, r2, #25
    7c06:	d5cd      	bpl.n	7ba4 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    7c08:	f002 051f 	and.w	r5, r2, #31
        checksum = ldir->checksum;
    7c0c:	f89c 900d 	ldrb.w	r9, [ip, #13]
    7c10:	e7c8      	b.n	7ba4 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    7c12:	2000      	movs	r0, #0
}
    7c14:	4770      	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    7c16:	b185      	cbz	r5, 7c3a <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    7c18:	f10c 010a 	add.w	r1, ip, #10
    7c1c:	e001      	b.n	7c22 <FatFile::openNext(FatFile*, int)+0xa2>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7c1e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    7c22:	ea4f 13ce 	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    7c26:	4561      	cmp	r1, ip
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7c28:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
    7c2c:	fa52 f383 	uxtab	r3, r2, r3
    7c30:	fa5f fe83 	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    7c34:	d1f3      	bne.n	7c1e <FatFile::openNext(FatFile*, int)+0x9e>
    7c36:	45ce      	cmp	lr, r9
    7c38:	d1de      	bne.n	7bf8 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    7c3a:	4643      	mov	r3, r8
    7c3c:	b2ba      	uxth	r2, r7
    7c3e:	4621      	mov	r1, r4
    7c40:	4630      	mov	r0, r6
    7c42:	9500      	str	r5, [sp, #0]
    7c44:	f7ff ff2a 	bl	7a9c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7c48:	e7d7      	b.n	7bfa <FatFile::openNext(FatFile*, int)+0x7a>
    7c4a:	bf00      	nop

00007c4c <FatFile::sync()>:
  if (!isOpen()) {
    7c4c:	7803      	ldrb	r3, [r0, #0]
    7c4e:	b10b      	cbz	r3, 7c54 <FatFile::sync()+0x8>
    7c50:	f7ff b968 	b.w	6f24 <FatFile::sync() [clone .part.0]>
}
    7c54:	2001      	movs	r0, #1
    7c56:	4770      	bx	lr

00007c58 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    7c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c5c:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    7c5e:	7801      	ldrb	r1, [r0, #0]
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    7c60:	b082      	sub	sp, #8
      || second > 59) {
    7c62:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    7c64:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    7c68:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    7c6c:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
    7c70:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
      || second > 59) {
    7c74:	d518      	bpl.n	7ca8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || year > 2107
    7c76:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    7c7a:	b294      	uxth	r4, r2
    7c7c:	2c7f      	cmp	r4, #127	; 0x7f
    7c7e:	d813      	bhi.n	7ca8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || month > 12
    7c80:	1e5a      	subs	r2, r3, #1
    7c82:	9301      	str	r3, [sp, #4]
    7c84:	2a0b      	cmp	r2, #11
    7c86:	d80f      	bhi.n	7ca8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || day > 31
    7c88:	1e7a      	subs	r2, r7, #1
    7c8a:	2a1e      	cmp	r2, #30
    7c8c:	d80c      	bhi.n	7ca8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || second > 59) {
    7c8e:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
    7c92:	bf98      	it	ls
    7c94:	f1b9 0f17 	cmpls.w	r9, #23
    7c98:	d806      	bhi.n	7ca8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    7c9a:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    7c9e:	d803      	bhi.n	7ca8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    7ca0:	4605      	mov	r5, r0
  if (!isOpen()) {
    7ca2:	f7ff f93f 	bl	6f24 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    7ca6:	b918      	cbnz	r0, 7cb0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  }
  return m_vol->cacheSync();

 fail:
  return false;
}
    7ca8:	2000      	movs	r0, #0
    7caa:	b002      	add	sp, #8
    7cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_cache.prepare(sector, options);
    7cb0:	68a8      	ldr	r0, [r5, #8]
    7cb2:	2201      	movs	r2, #1
    7cb4:	69a9      	ldr	r1, [r5, #24]
    7cb6:	3028      	adds	r0, #40	; 0x28
    7cb8:	f003 ffba 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7cbc:	2800      	cmp	r0, #0
    7cbe:	d0f3      	beq.n	7ca8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    7cc0:	9b01      	ldr	r3, [sp, #4]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    7cc2:	ea4f 0258 	mov.w	r2, r8, lsr #1
  return dir + (m_dirIndex & 0XF);
    7cc6:	88a9      	ldrh	r1, [r5, #4]
         year << 9 | month << 5 | day;
    7cc8:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
  if (flags & T_ACCESS) {
    7ccc:	07f7      	lsls	r7, r6, #31
  return dir + (m_dirIndex & 0XF);
    7cce:	f001 010f 	and.w	r1, r1, #15
         hour << 11 | minute << 5 | second >> 1;
    7cd2:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
         year << 9 | month << 5 | day;
    7cd6:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
    7cda:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    7cde:	b29b      	uxth	r3, r3
         hour << 11 | minute << 5 | second >> 1;
    7ce0:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
  *reinterpret_cast<uint16_t*>(dst) = src;
    7ce4:	bf48      	it	mi
    7ce6:	8243      	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
    7ce8:	07b4      	lsls	r4, r6, #30
    7cea:	b292      	uxth	r2, r2
    7cec:	d508      	bpl.n	7d00 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
    dir->createTimeMs = second & 1 ? 100 : 0;
    7cee:	f018 0801 	ands.w	r8, r8, #1
    7cf2:	8203      	strh	r3, [r0, #16]
    7cf4:	81c2      	strh	r2, [r0, #14]
    7cf6:	bf18      	it	ne
    7cf8:	f04f 0864 	movne.w	r8, #100	; 0x64
    7cfc:	f880 800d 	strb.w	r8, [r0, #13]
  if (flags & T_WRITE) {
    7d00:	0771      	lsls	r1, r6, #29
    7d02:	d501      	bpl.n	7d08 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb0>
    7d04:	8303      	strh	r3, [r0, #24]
    7d06:	82c2      	strh	r2, [r0, #22]
  return m_vol->cacheSync();
    7d08:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7d0a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7d0e:	f003 ff63 	bl	bbd8 <FsCache::sync()>
    7d12:	2800      	cmp	r0, #0
    7d14:	d0c8      	beq.n	7ca8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    7d16:	f504 700e 	add.w	r0, r4, #568	; 0x238
    7d1a:	f003 ff5d 	bl	bbd8 <FsCache::sync()>
    7d1e:	2800      	cmp	r0, #0
    7d20:	d0c2      	beq.n	7ca8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    7d22:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    7d24:	6803      	ldr	r3, [r0, #0]
    7d26:	6a1b      	ldr	r3, [r3, #32]
}
    7d28:	b002      	add	sp, #8
    7d2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d2e:	4718      	bx	r3

00007d30 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    7d30:	7883      	ldrb	r3, [r0, #2]
    7d32:	079b      	lsls	r3, r3, #30
    7d34:	d527      	bpl.n	7d86 <FatFile::truncate()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    7d36:	6a03      	ldr	r3, [r0, #32]
bool FatFile::truncate() {
    7d38:	b510      	push	{r4, lr}
    7d3a:	4604      	mov	r4, r0
    7d3c:	b082      	sub	sp, #8
  if (m_firstCluster == 0) {
    7d3e:	b1ab      	cbz	r3, 7d6c <FatFile::truncate()+0x3c>
      return true;
  }
  if (m_curCluster) {
    7d40:	6901      	ldr	r1, [r0, #16]
    7d42:	bb11      	cbnz	r1, 7d8a <FatFile::truncate()+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    7d44:	9301      	str	r3, [sp, #4]
    m_firstCluster = 0;
    7d46:	6201      	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    7d48:	4619      	mov	r1, r3
    7d4a:	68a0      	ldr	r0, [r4, #8]
    7d4c:	f001 fade 	bl	930c <FatPartition::freeChain(unsigned long)>
    7d50:	b1b0      	cbz	r0, 7d80 <FatFile::truncate()+0x50>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7d52:	78a3      	ldrb	r3, [r4, #2]
  m_fileSize = m_curPosition;
    7d54:	6961      	ldr	r1, [r4, #20]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7d56:	f063 037f 	orn	r3, r3, #127	; 0x7f
  if (!isOpen()) {
    7d5a:	7822      	ldrb	r2, [r4, #0]
  m_fileSize = m_curPosition;
    7d5c:	61e1      	str	r1, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7d5e:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    7d60:	b122      	cbz	r2, 7d6c <FatFile::truncate()+0x3c>
    7d62:	4620      	mov	r0, r4
    7d64:	f7ff f8de 	bl	6f24 <FatFile::sync() [clone .part.0]>
  return sync();

 fail:
  return false;
}
    7d68:	b002      	add	sp, #8
    7d6a:	bd10      	pop	{r4, pc}
      return true;
    7d6c:	2001      	movs	r0, #1
}
    7d6e:	b002      	add	sp, #8
    7d70:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    7d72:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    7d76:	6921      	ldr	r1, [r4, #16]
    7d78:	68a0      	ldr	r0, [r4, #8]
    7d7a:	f001 fab7 	bl	92ec <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    7d7e:	b968      	cbnz	r0, 7d9c <FatFile::truncate()+0x6c>
  return false;
    7d80:	2000      	movs	r0, #0
}
    7d82:	b002      	add	sp, #8
    7d84:	bd10      	pop	{r4, pc}
  return false;
    7d86:	2000      	movs	r0, #0
}
    7d88:	4770      	bx	lr
    toFree = 0;
    7d8a:	2300      	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    7d8c:	aa01      	add	r2, sp, #4
    7d8e:	6880      	ldr	r0, [r0, #8]
    toFree = 0;
    7d90:	9301      	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    7d92:	f001 fa99 	bl	92c8 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    7d96:	2800      	cmp	r0, #0
    7d98:	dbf2      	blt.n	7d80 <FatFile::truncate()+0x50>
    if (fg) {
    7d9a:	d1ea      	bne.n	7d72 <FatFile::truncate()+0x42>
  if (toFree) {
    7d9c:	9b01      	ldr	r3, [sp, #4]
    7d9e:	2b00      	cmp	r3, #0
    7da0:	d0d7      	beq.n	7d52 <FatFile::truncate()+0x22>
    7da2:	e7d1      	b.n	7d48 <FatFile::truncate()+0x18>

00007da4 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    7da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7da8:	7883      	ldrb	r3, [r0, #2]
    7daa:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    7dac:	079c      	lsls	r4, r3, #30
    7dae:	d577      	bpl.n	7ea0 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    7db0:	4688      	mov	r8, r1
    7db2:	0719      	lsls	r1, r3, #28
    7db4:	4691      	mov	r9, r2
    7db6:	f100 80b5 	bmi.w	7f24 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    7dba:	696b      	ldr	r3, [r5, #20]
    7dbc:	eb13 0209 	adds.w	r2, r3, r9
    7dc0:	d26e      	bcs.n	7ea0 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    7dc2:	f1b9 0f00 	cmp.w	r9, #0
    7dc6:	d040      	beq.n	7e4a <FatFile::write(void const*, unsigned int)+0xa6>
    7dc8:	464f      	mov	r7, r9
    m_status = 0;
    7dca:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    7dce:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    7dd0:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    7dd4:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    7dd6:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    7dd8:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    7ddc:	d13f      	bne.n	7e5e <FatFile::write(void const*, unsigned int)+0xba>
    7dde:	2e00      	cmp	r6, #0
    7de0:	d13d      	bne.n	7e5e <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    7de2:	2900      	cmp	r1, #0
    7de4:	d06e      	beq.n	7ec4 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    7de6:	78aa      	ldrb	r2, [r5, #2]
    7de8:	0652      	lsls	r2, r2, #25
    7dea:	d576      	bpl.n	7eda <FatFile::write(void const*, unsigned int)+0x136>
    7dec:	69ea      	ldr	r2, [r5, #28]
    7dee:	429a      	cmp	r2, r3
    7df0:	d973      	bls.n	7eda <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    7df2:	3101      	adds	r1, #1
    7df4:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7df6:	3902      	subs	r1, #2
    7df8:	7982      	ldrb	r2, [r0, #6]
    7dfa:	6943      	ldr	r3, [r0, #20]
    7dfc:	4091      	lsls	r1, r2
    7dfe:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    7e00:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    7e04:	d353      	bcc.n	7eae <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    7e06:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    7e0a:	d370      	bcc.n	7eee <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    7e0c:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    7e0e:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    7e10:	1b1b      	subs	r3, r3, r4
    7e12:	4293      	cmp	r3, r2
    7e14:	bf28      	it	cs
    7e16:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    7e18:	6b42      	ldr	r2, [r0, #52]	; 0x34
    7e1a:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    7e1c:	ea4f 2443 	mov.w	r4, r3, lsl #9
    7e20:	d307      	bcc.n	7e32 <FatFile::write(void const*, unsigned int)+0x8e>
    7e22:	185e      	adds	r6, r3, r1
    7e24:	42b2      	cmp	r2, r6
    7e26:	d204      	bcs.n	7e32 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    7e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
    7e2c:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7e30:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    7e32:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    7e34:	4642      	mov	r2, r8
    7e36:	6806      	ldr	r6, [r0, #0]
    7e38:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    7e3a:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    7e3c:	b380      	cbz	r0, 7ea0 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    7e3e:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    7e40:	1b3f      	subs	r7, r7, r4
    src += n;
    7e42:	44a0      	add	r8, r4
    m_curPosition += n;
    7e44:	4423      	add	r3, r4
    7e46:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    7e48:	d1c1      	bne.n	7dce <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    7e4a:	69ea      	ldr	r2, [r5, #28]
    7e4c:	429a      	cmp	r2, r3
    7e4e:	d276      	bcs.n	7f3e <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7e50:	78aa      	ldrb	r2, [r5, #2]
    7e52:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    7e54:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7e56:	f062 037f 	orn	r3, r2, #127	; 0x7f
    7e5a:	70ab      	strb	r3, [r5, #2]
    7e5c:	e025      	b.n	7eaa <FatFile::write(void const*, unsigned int)+0x106>
    7e5e:	7982      	ldrb	r2, [r0, #6]
    7e60:	3902      	subs	r1, #2
    7e62:	6943      	ldr	r3, [r0, #20]
    7e64:	4091      	lsls	r1, r2
    7e66:	4419      	add	r1, r3
                      + sectorOfCluster;
    7e68:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    7e6a:	2e00      	cmp	r6, #0
    7e6c:	d0c8      	beq.n	7e00 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    7e6e:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7e72:	2201      	movs	r2, #1
    7e74:	42bc      	cmp	r4, r7
    7e76:	bf28      	it	cs
    7e78:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    7e7a:	3028      	adds	r0, #40	; 0x28
    7e7c:	f003 fed8 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7e80:	b170      	cbz	r0, 7ea0 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    7e82:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7e84:	4426      	add	r6, r4
      memcpy(dst, src, n);
    7e86:	4622      	mov	r2, r4
    7e88:	4641      	mov	r1, r8
    7e8a:	f006 fa43 	bl	e314 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7e8e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    7e92:	68a8      	ldr	r0, [r5, #8]
    7e94:	d1d3      	bne.n	7e3e <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    7e96:	3028      	adds	r0, #40	; 0x28
    7e98:	f003 fe9e 	bl	bbd8 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    7e9c:	2800      	cmp	r0, #0
    7e9e:	d1ce      	bne.n	7e3e <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    7ea0:	786b      	ldrb	r3, [r5, #1]
  return 0;
    7ea2:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    7ea4:	f043 0301 	orr.w	r3, r3, #1
    7ea8:	706b      	strb	r3, [r5, #1]
}
    7eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    7eae:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    7eb2:	696a      	ldr	r2, [r5, #20]
    7eb4:	69eb      	ldr	r3, [r5, #28]
    7eb6:	42bc      	cmp	r4, r7
    7eb8:	bf28      	it	cs
    7eba:	463c      	movcs	r4, r7
    7ebc:	429a      	cmp	r2, r3
    7ebe:	d305      	bcc.n	7ecc <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7ec0:	2205      	movs	r2, #5
    7ec2:	e7da      	b.n	7e7a <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    7ec4:	6a29      	ldr	r1, [r5, #32]
    7ec6:	b321      	cbz	r1, 7f12 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    7ec8:	6129      	str	r1, [r5, #16]
    7eca:	e794      	b.n	7df6 <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    7ecc:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7ece:	f013 0f20 	tst.w	r3, #32
    7ed2:	bf14      	ite	ne
    7ed4:	2205      	movne	r2, #5
    7ed6:	2201      	moveq	r2, #1
    7ed8:	e7cf      	b.n	7e7a <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7eda:	f105 0210 	add.w	r2, r5, #16
    7ede:	f001 f9f3 	bl	92c8 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7ee2:	2800      	cmp	r0, #0
    7ee4:	dbdc      	blt.n	7ea0 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    7ee6:	d024      	beq.n	7f32 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    7ee8:	68a8      	ldr	r0, [r5, #8]
    7eea:	6929      	ldr	r1, [r5, #16]
    7eec:	e783      	b.n	7df6 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    7eee:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7ef0:	428b      	cmp	r3, r1
    7ef2:	d104      	bne.n	7efe <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    7ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
    7ef8:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7efc:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    7efe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    7f00:	4642      	mov	r2, r8
    7f02:	6803      	ldr	r3, [r0, #0]
    7f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f06:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    7f08:	2800      	cmp	r0, #0
    7f0a:	d0c9      	beq.n	7ea0 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    7f0c:	f44f 7400 	mov.w	r4, #512	; 0x200
    7f10:	e795      	b.n	7e3e <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    7f12:	4628      	mov	r0, r5
    7f14:	f7ff f860 	bl	6fd8 <FatFile::addCluster()>
    7f18:	2800      	cmp	r0, #0
    7f1a:	d0c1      	beq.n	7ea0 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    7f1c:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    7f1e:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    7f20:	6229      	str	r1, [r5, #32]
    7f22:	e768      	b.n	7df6 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    7f24:	69c1      	ldr	r1, [r0, #28]
    7f26:	f7ff fd61 	bl	79ec <FatFile::seekSet(unsigned long)>
    7f2a:	2800      	cmp	r0, #0
    7f2c:	f47f af45 	bne.w	7dba <FatFile::write(void const*, unsigned int)+0x16>
    7f30:	e7b6      	b.n	7ea0 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    7f32:	4628      	mov	r0, r5
    7f34:	f7ff f850 	bl	6fd8 <FatFile::addCluster()>
    7f38:	2800      	cmp	r0, #0
    7f3a:	d1d5      	bne.n	7ee8 <FatFile::write(void const*, unsigned int)+0x144>
    7f3c:	e7b0      	b.n	7ea0 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    7f3e:	4b05      	ldr	r3, [pc, #20]	; (7f54 <FatFile::write(void const*, unsigned int)+0x1b0>)
    7f40:	681b      	ldr	r3, [r3, #0]
    7f42:	b12b      	cbz	r3, 7f50 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7f44:	78ab      	ldrb	r3, [r5, #2]
    7f46:	4648      	mov	r0, r9
    7f48:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7f4c:	70ab      	strb	r3, [r5, #2]
    7f4e:	e7ac      	b.n	7eaa <FatFile::write(void const*, unsigned int)+0x106>
    7f50:	4648      	mov	r0, r9
    7f52:	e7aa      	b.n	7eaa <FatFile::write(void const*, unsigned int)+0x106>
    7f54:	200042b4 	.word	0x200042b4

00007f58 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    7f5c:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7f5e:	b08d      	sub	sp, #52	; 0x34
    7f60:	4614      	mov	r4, r2
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    7f62:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7f64:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7f66:	4606      	mov	r6, r0
    7f68:	4689      	mov	r9, r1
  FatFile dir = *this;
    7f6a:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7f6c:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    7f6e:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    7f72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    7f76:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    7f78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    7f7c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    7f7e:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    7f82:	6065      	str	r5, [r4, #4]
    7f84:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7f86:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    7f88:	f8a4 e00c 	strh.w	lr, [r4, #12]
    7f8c:	2b00      	cmp	r3, #0
    7f8e:	d03f      	beq.n	8010 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    7f90:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    7f94:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    7f98:	a803      	add	r0, sp, #12
    7f9a:	b289      	uxth	r1, r1
    7f9c:	0149      	lsls	r1, r1, #5
    7f9e:	f7ff fd25 	bl	79ec <FatFile::seekSet(unsigned long)>
    7fa2:	b350      	cbz	r0, 7ffa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    7fa4:	2100      	movs	r1, #0
    7fa6:	a803      	add	r0, sp, #12
    7fa8:	f7ff fbc0 	bl	772c <FatFile::readDirCache(bool)>
    if (!ldir) {
    7fac:	4607      	mov	r7, r0
    7fae:	b320      	cbz	r0, 7ffa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    7fb0:	2500      	movs	r5, #0
    7fb2:	e00d      	b.n	7fd0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    7fb4:	f003 fe7a 	bl	bcac <FsName::get16()>
    7fb8:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    7fba:	4658      	mov	r0, fp
    7fbc:	f003 ff8a 	bl	bed4 <toUpcase(unsigned short)>
    7fc0:	4683      	mov	fp, r0
    7fc2:	4640      	mov	r0, r8
    7fc4:	f003 ff86 	bl	bed4 <toUpcase(unsigned short)>
    7fc8:	4583      	cmp	fp, r0
    7fca:	d116      	bne.n	7ffa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    7fcc:	2d0d      	cmp	r5, #13
    7fce:	d018      	beq.n	8002 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    7fd0:	b2ea      	uxtb	r2, r5
    7fd2:	4639      	mov	r1, r7
    7fd4:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    7fd6:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    7fd8:	f000 fee4 	bl	8da4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    7fdc:	89a3      	ldrh	r3, [r4, #12]
    7fde:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    7fe0:	4620      	mov	r0, r4
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d1e6      	bne.n	7fb4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    7fe6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    7fea:	4293      	cmp	r3, r2
    7fec:	d1e2      	bne.n	7fb4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    7fee:	fabb f08b 	clz	r0, fp
    7ff2:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    7ff4:	b00d      	add	sp, #52	; 0x34
    7ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    7ffa:	2000      	movs	r0, #0
}
    7ffc:	b00d      	add	sp, #52	; 0x34
    7ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8002:	f10a 0a01 	add.w	sl, sl, #1
    8006:	9b01      	ldr	r3, [sp, #4]
    8008:	fa5f fa8a 	uxtb.w	sl, sl
    800c:	4553      	cmp	r3, sl
    800e:	d2c1      	bcs.n	7f94 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    8010:	2001      	movs	r0, #1
    8012:	e7ef      	b.n	7ff4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00008014 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    8018:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    801a:	b08d      	sub	sp, #52	; 0x34
    801c:	4616      	mov	r6, r2
    801e:	469a      	mov	sl, r3
  FatFile dir = *this;
    8020:	f10d 0c0c 	add.w	ip, sp, #12
    8024:	f102 0415 	add.w	r4, r2, #21
    8028:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    802c:	9101      	str	r1, [sp, #4]
    uint8_t sum = 0;
    802e:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    8032:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    8034:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8038:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    803a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    803e:	683b      	ldr	r3, [r7, #0]
    8040:	f8cc 3000 	str.w	r3, [ip]
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8044:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    8048:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    804c:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    8050:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8052:	fa52 f383 	uxtab	r3, r2, r3
    8056:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    805a:	d1f3      	bne.n	8044 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    805c:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    805e:	f04f 0800 	mov.w	r8, #0
    next = begin;
    8062:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    8064:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8068:	f1ba 0f00 	cmp.w	sl, #0
    806c:	d04e      	beq.n	810c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    806e:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8070:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8072:	a803      	add	r0, sp, #12
    8074:	1bd9      	subs	r1, r3, r7
    8076:	b289      	uxth	r1, r1
    8078:	0149      	lsls	r1, r1, #5
    807a:	f7ff fcb7 	bl	79ec <FatFile::seekSet(unsigned long)>
    807e:	2800      	cmp	r0, #0
    8080:	d055      	beq.n	812e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    8082:	2100      	movs	r1, #0
    8084:	a803      	add	r0, sp, #12
    8086:	f7ff fb51 	bl	772c <FatFile::readDirCache(bool)>
    if (!ldir) {
    808a:	2800      	cmp	r0, #0
    808c:	d04f      	beq.n	812e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    808e:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8090:	4557      	cmp	r7, sl
    8092:	f100 0b01 	add.w	fp, r0, #1
    8096:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    809a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    809e:	f04f 0500 	mov.w	r5, #0
    80a2:	f043 0301 	orr.w	r3, r3, #1
    80a6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    80aa:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    80ae:	bf0c      	ite	eq
    80b0:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    80b4:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    80b6:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    80b8:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    80bc:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    80be:	7303      	strb	r3, [r0, #12]
    80c0:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    80c4:	f880 900d 	strb.w	r9, [r0, #13]
    80c8:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    80ca:	e006      	b.n	80da <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    80cc:	f8ab 0000 	strh.w	r0, [fp]
    80d0:	3401      	adds	r4, #1
    80d2:	3501      	adds	r5, #1
    80d4:	f10b 0b02 	add.w	fp, fp, #2
    80d8:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    80da:	89b0      	ldrh	r0, [r6, #12]
    80dc:	b918      	cbnz	r0, 80e6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    80de:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    80e2:	429a      	cmp	r2, r3
    80e4:	d016      	beq.n	8114 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    80e6:	4630      	mov	r0, r6
    80e8:	f003 fde0 	bl	bcac <FsName::get16()>
  if (i < 5) {
    80ec:	2d04      	cmp	r5, #4
    80ee:	b2eb      	uxtb	r3, r5
    80f0:	d9ec      	bls.n	80cc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    80f2:	2b0a      	cmp	r3, #10
    80f4:	d802      	bhi.n	80fc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    80f6:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    80fa:	e7e9      	b.n	80d0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    80fc:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    80fe:	f8ab 0005 	strh.w	r0, [fp, #5]
    8102:	d1e5      	bne.n	80d0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8104:	3701      	adds	r7, #1
    8106:	b2ff      	uxtb	r7, r7
    8108:	45ba      	cmp	sl, r7
    810a:	d2b1      	bcs.n	8070 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    810c:	2001      	movs	r0, #1

 fail:
  return false;
}
    810e:	b00d      	add	sp, #52	; 0x34
    8110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    8114:	f1b8 0f00 	cmp.w	r8, #0
    8118:	d006      	beq.n	8128 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    811a:	f108 0801 	add.w	r8, r8, #1
    811e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    8122:	fa5f f888 	uxtb.w	r8, r8
    8126:	e7e1      	b.n	80ec <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    8128:	f04f 0801 	mov.w	r8, #1
    812c:	e7de      	b.n	80ec <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    812e:	2000      	movs	r0, #0
}
    8130:	b00d      	add	sp, #52	; 0x34
    8132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8136:	bf00      	nop

00008138 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    8138:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    813a:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    813e:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    8142:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    8146:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    814a:	4686      	mov	lr, r0
  const char* end = fname->end;
    814c:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    814e:	6051      	str	r1, [r2, #4]
    8150:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    8154:	781a      	ldrb	r2, [r3, #0]
    8156:	2a2e      	cmp	r2, #46	; 0x2e
    8158:	bf14      	ite	ne
    815a:	2001      	movne	r0, #1
    815c:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    815e:	d103      	bne.n	8168 <FatFile::makeSFN(FatLfn_t*)+0x30>
    8160:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8164:	2a2e      	cmp	r2, #46	; 0x2e
    8166:	d0fb      	beq.n	8160 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    8168:	1e61      	subs	r1, r4, #1
    816a:	4299      	cmp	r1, r3
    816c:	d90b      	bls.n	8186 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    816e:	460a      	mov	r2, r1
    8170:	e002      	b.n	8178 <FatFile::makeSFN(FatLfn_t*)+0x40>
    8172:	4293      	cmp	r3, r2
    8174:	4611      	mov	r1, r2
    8176:	d006      	beq.n	8186 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    8178:	4611      	mov	r1, r2
    817a:	3a01      	subs	r2, #1
    817c:	f891 c000 	ldrb.w	ip, [r1]
    8180:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    8184:	d1f5      	bne.n	8172 <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    8186:	429c      	cmp	r4, r3
    8188:	f04f 0500 	mov.w	r5, #0
    818c:	f240 8086 	bls.w	829c <FatFile::makeSFN(FatLfn_t*)+0x164>
    8190:	2607      	movs	r6, #7
    8192:	2708      	movs	r7, #8
    8194:	46a9      	mov	r9, r5
    8196:	46a8      	mov	r8, r5
    8198:	e006      	b.n	81a8 <FatFile::makeSFN(FatLfn_t*)+0x70>
    819a:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    819c:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    819e:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    81a2:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    81a4:	429c      	cmp	r4, r3
    81a6:	d95b      	bls.n	8260 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    81a8:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    81aa:	2a2e      	cmp	r2, #46	; 0x2e
    81ac:	bf08      	it	eq
    81ae:	4299      	cmpeq	r1, r3
    81b0:	d0f3      	beq.n	819a <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    81b2:	2a22      	cmp	r2, #34	; 0x22
    81b4:	d00d      	beq.n	81d2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    81b6:	2a7c      	cmp	r2, #124	; 0x7c
    81b8:	d00b      	beq.n	81d2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    81ba:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    81be:	f1bc 0f02 	cmp.w	ip, #2
    81c2:	d906      	bls.n	81d2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    81c4:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    81c8:	f1bc 0f05 	cmp.w	ip, #5
    81cc:	d821      	bhi.n	8212 <FatFile::makeSFN(FatLfn_t*)+0xda>
    81ce:	2a2d      	cmp	r2, #45	; 0x2d
    81d0:	d01f      	beq.n	8212 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    81d2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    81d6:	2a80      	cmp	r2, #128	; 0x80
    81d8:	d05d      	beq.n	8296 <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    81da:	454e      	cmp	r6, r9
    81dc:	d22f      	bcs.n	823e <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    81de:	4299      	cmp	r1, r3
    81e0:	bf2c      	ite	cs
    81e2:	2000      	movcs	r0, #0
    81e4:	2001      	movcc	r0, #1
    81e6:	2e0a      	cmp	r6, #10
    81e8:	bf08      	it	eq
    81ea:	f040 0001 	orreq.w	r0, r0, #1
    81ee:	2800      	cmp	r0, #0
    81f0:	d047      	beq.n	8282 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    81f2:	f89e 3016 	ldrb.w	r3, [lr, #22]
    81f6:	2b20      	cmp	r3, #32
    81f8:	d040      	beq.n	827c <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    81fa:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    81fe:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    8200:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    8202:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    8204:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8206:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    820a:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    820c:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    820e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8212:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    8216:	f1bc 0f05 	cmp.w	ip, #5
    821a:	d9da      	bls.n	81d2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    821c:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    8220:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    8224:	d8d5      	bhi.n	81d2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    8226:	454e      	cmp	r6, r9
    8228:	d3d9      	bcc.n	81de <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    822a:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    822e:	f1bc 0f19 	cmp.w	ip, #25
    8232:	d828      	bhi.n	8286 <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    8234:	3a20      	subs	r2, #32
        lc |= bit;
    8236:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    8238:	b2d2      	uxtb	r2, r2
        lc |= bit;
    823a:	b2ed      	uxtb	r5, r5
    823c:	e001      	b.n	8242 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    823e:	2000      	movs	r0, #0
        c = '_';
    8240:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    8242:	f109 0c01 	add.w	ip, r9, #1
    8246:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    8248:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    824a:	f889 2016 	strb.w	r2, [r9, #22]
    824e:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    8252:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    8254:	4691      	mov	r9, r2
    8256:	bf98      	it	ls
    8258:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    825c:	429c      	cmp	r4, r3
    825e:	d8a3      	bhi.n	81a8 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    8260:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8264:	2b20      	cmp	r3, #32
    8266:	d009      	beq.n	827c <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    8268:	2800      	cmp	r0, #0
    826a:	d0c6      	beq.n	81fa <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    826c:	ea18 0f05 	tst.w	r8, r5
    8270:	bf18      	it	ne
    8272:	2502      	movne	r5, #2
    8274:	f88e 5015 	strb.w	r5, [lr, #21]
}
    8278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    827c:	2000      	movs	r0, #0
}
    827e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8282:	460b      	mov	r3, r1
    8284:	e78e      	b.n	81a4 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    8286:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    828a:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    828e:	bf98      	it	ls
    8290:	ea47 0808 	orrls.w	r8, r7, r8
    8294:	e7d5      	b.n	8242 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    8296:	3301      	adds	r3, #1
        is83 = false;
    8298:	2000      	movs	r0, #0
    829a:	e783      	b.n	81a4 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    829c:	46a8      	mov	r8, r5
    829e:	e7df      	b.n	8260 <FatFile::makeSFN(FatLfn_t*)+0x128>

000082a0 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    82a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    82a4:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    82a8:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    82aa:	460f      	mov	r7, r1
    82ac:	4604      	mov	r4, r0
    82ae:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8350 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    82b2:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    82b6:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    82ba:	f101 0616 	add.w	r6, r1, #22
	return systick_millis_count;
    82be:	f1b8 0f03 	cmp.w	r8, #3
    82c2:	f8db 3000 	ldr.w	r3, [fp]
    82c6:	bf28      	it	cs
    82c8:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    82cc:	442b      	add	r3, r5
    82ce:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    82d0:	f108 0304 	add.w	r3, r8, #4
    82d4:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    82d6:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    82da:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    82dc:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    82de:	2a09      	cmp	r2, #9
    82e0:	f102 0137 	add.w	r1, r2, #55	; 0x37
    82e4:	bf98      	it	ls
    82e6:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    82ea:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    82ec:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    82ee:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    82f0:	4598      	cmp	r8, r3
    82f2:	d1f0      	bne.n	82d6 <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    82f4:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    82f8:	2100      	movs	r1, #0
    82fa:	4620      	mov	r0, r4
    82fc:	f883 a016 	strb.w	sl, [r3, #22]
    8300:	f7ff fb74 	bl	79ec <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    8304:	2101      	movs	r1, #1
    8306:	4620      	mov	r0, r4
    8308:	f7ff fa10 	bl	772c <FatFile::readDirCache(bool)>
    830c:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    830e:	220b      	movs	r2, #11
    8310:	4630      	mov	r0, r6
      if (!dir) {
    8312:	b19b      	cbz	r3, 833c <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    8314:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8318:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    831a:	f1bc 0f00 	cmp.w	ip, #0
    831e:	d013      	beq.n	8348 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8320:	7adb      	ldrb	r3, [r3, #11]
    8322:	071b      	lsls	r3, r3, #28
    8324:	d4ee      	bmi.n	8304 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    8326:	f009 fcb5 	bl	11c94 <memcmp>
    832a:	2800      	cmp	r0, #0
    832c:	d1ea      	bne.n	8304 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    832e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    8332:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    8336:	d1c2      	bne.n	82be <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8338:	4648      	mov	r0, r9
 fail:
    833a:	e003      	b.n	8344 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    833c:	7860      	ldrb	r0, [r4, #1]
    833e:	fab0 f080 	clz	r0, r0
    8342:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    8344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    8348:	2001      	movs	r0, #1
}
    834a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    834e:	bf00      	nop
    8350:	20004a9c 	.word	0x20004a9c

00008354 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8358:	ed2d 8b02 	vpush	{d8}
    835c:	b08b      	sub	sp, #44	; 0x2c
    835e:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    8362:	688b      	ldr	r3, [r1, #8]
    8364:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    8366:	780b      	ldrb	r3, [r1, #0]
    8368:	f013 0f70 	tst.w	r3, #112	; 0x70
    836c:	d053      	beq.n	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    836e:	9b02      	ldr	r3, [sp, #8]
    8370:	781b      	ldrb	r3, [r3, #0]
    8372:	2b00      	cmp	r3, #0
    8374:	d14f      	bne.n	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    8376:	6913      	ldr	r3, [r2, #16]
    8378:	4690      	mov	r8, r2
    837a:	4a9a      	ldr	r2, [pc, #616]	; (85e4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    837c:	460e      	mov	r6, r1
    837e:	330c      	adds	r3, #12
    8380:	fba2 2303 	umull	r2, r3, r2, r3
    8384:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8388:	f898 3015 	ldrb.w	r3, [r8, #21]
    838c:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    838e:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8390:	f000 80a7 	beq.w	84e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    8394:	1c57      	adds	r7, r2, #1
    8396:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    8398:	2300      	movs	r3, #0
    seekSet(0);
    839a:	4630      	mov	r0, r6
    839c:	4619      	mov	r1, r3
    839e:	461c      	mov	r4, r3
    83a0:	9306      	str	r3, [sp, #24]
    83a2:	f7ff fb23 	bl	79ec <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    83a6:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    83aa:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    83ac:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    83ae:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    83b0:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    83b4:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    83b6:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    83b8:	2100      	movs	r1, #0
    83ba:	4630      	mov	r0, r6
    83bc:	f7ff f9b6 	bl	772c <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    83c0:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    83c4:	4603      	mov	r3, r0
    83c6:	b320      	cbz	r0, 8412 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    83c8:	7802      	ldrb	r2, [r0, #0]
    83ca:	2ae5      	cmp	r2, #229	; 0xe5
    83cc:	d029      	beq.n	8422 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    83ce:	b342      	cbz	r2, 8422 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    83d0:	42bc      	cmp	r4, r7
    83d2:	bf38      	it	cc
    83d4:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    83d6:	2a2e      	cmp	r2, #46	; 0x2e
    83d8:	d02b      	beq.n	8432 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    83da:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    83de:	f1bc 0f0f 	cmp.w	ip, #15
    83e2:	d054      	beq.n	848e <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    83e4:	f01c 0c08 	ands.w	ip, ip, #8
    83e8:	d123      	bne.n	8432 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    83ea:	f1b9 0f00 	cmp.w	r9, #0
    83ee:	f040 80d5 	bne.w	859c <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    83f2:	220b      	movs	r2, #11
    83f4:	ee18 1a10 	vmov	r1, s16
    83f8:	f009 fc4c 	bl	11c94 <memcmp>
    83fc:	2800      	cmp	r0, #0
    83fe:	d1da      	bne.n	83b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    8400:	f898 3015 	ldrb.w	r3, [r8, #21]
    8404:	f013 0301 	ands.w	r3, r3, #1
    8408:	f000 80e4 	beq.w	85d4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    840c:	2301      	movs	r3, #1
    840e:	9305      	str	r3, [sp, #20]
    8410:	e7d1      	b.n	83b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    8412:	7873      	ldrb	r3, [r6, #1]
    8414:	b183      	cbz	r3, 8438 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    8416:	2000      	movs	r0, #0
}
    8418:	b00b      	add	sp, #44	; 0x2c
    841a:	ecbd 8b02 	vpop	{d8}
    841e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8422:	2c00      	cmp	r4, #0
    8424:	bf08      	it	eq
    8426:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    8428:	42bc      	cmp	r4, r7
    842a:	d201      	bcs.n	8430 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    842c:	3401      	adds	r4, #1
    842e:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    8430:	b112      	cbz	r2, 8438 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    8432:	f04f 0900 	mov.w	r9, #0
    8436:	e7be      	b.n	83b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    8438:	9b03      	ldr	r3, [sp, #12]
    843a:	059a      	lsls	r2, r3, #22
    843c:	d5eb      	bpl.n	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    843e:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8442:	3b01      	subs	r3, #1
    8444:	2b01      	cmp	r3, #1
    8446:	d8e6      	bhi.n	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    8448:	2c00      	cmp	r4, #0
    844a:	bf08      	it	eq
    844c:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    844e:	42bc      	cmp	r4, r7
    8450:	d303      	bcc.n	845a <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    8452:	e048      	b.n	84e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    8454:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    8456:	42a7      	cmp	r7, r4
    8458:	d045      	beq.n	84e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    845a:	2100      	movs	r1, #0
    845c:	4630      	mov	r0, r6
    845e:	f7ff f965 	bl	772c <FatFile::readDirCache(bool)>
    freeFound++;
    8462:	1c63      	adds	r3, r4, #1
    if (!dir) {
    8464:	2800      	cmp	r0, #0
    8466:	d1f5      	bne.n	8454 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    8468:	7873      	ldrb	r3, [r6, #1]
    846a:	2b00      	cmp	r3, #0
    846c:	d1d3      	bne.n	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    846e:	42a7      	cmp	r7, r4
    8470:	d939      	bls.n	84e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    8472:	9d07      	ldr	r5, [sp, #28]
    8474:	e005      	b.n	8482 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8476:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    8478:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    847c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    847e:	42a7      	cmp	r7, r4
    8480:	d931      	bls.n	84e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    8482:	4630      	mov	r0, r6
    8484:	f7fe fdc2 	bl	700c <FatFile::addDirCluster()>
    8488:	2800      	cmp	r0, #0
    848a:	d1f4      	bne.n	8476 <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    848c:	e7c3      	b.n	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    848e:	f1b9 0f00 	cmp.w	r9, #0
    8492:	d119      	bne.n	84c8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    8494:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    8498:	9904      	ldr	r1, [sp, #16]
    849a:	4559      	cmp	r1, fp
    849c:	d18b      	bne.n	83b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    849e:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    84a2:	d088      	beq.n	83b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    84a4:	7b43      	ldrb	r3, [r0, #13]
    84a6:	4689      	mov	r9, r1
    84a8:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    84aa:	f1bb 0f01 	cmp.w	fp, #1
    84ae:	d182      	bne.n	83b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    84b0:	1c69      	adds	r1, r5, #1
    84b2:	464b      	mov	r3, r9
    84b4:	4642      	mov	r2, r8
    84b6:	4630      	mov	r0, r6
    84b8:	b289      	uxth	r1, r1
    84ba:	f7ff fd4d 	bl	7f58 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    84be:	2800      	cmp	r0, #0
    84c0:	bf08      	it	eq
    84c2:	f04f 0900 	moveq.w	r9, #0
    84c6:	e776      	b.n	83b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    84c8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    84cc:	fa5f fb8b 	uxtb.w	fp, fp
    84d0:	455a      	cmp	r2, fp
    84d2:	d1ae      	bne.n	8432 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    84d4:	7b43      	ldrb	r3, [r0, #13]
    84d6:	9a06      	ldr	r2, [sp, #24]
    84d8:	4293      	cmp	r3, r2
    84da:	d0e6      	beq.n	84aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    84dc:	f04f 0900 	mov.w	r9, #0
    84e0:	e769      	b.n	83b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    84e2:	2701      	movs	r7, #1
    84e4:	e758      	b.n	8398 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    84e6:	9b05      	ldr	r3, [sp, #20]
    84e8:	b12b      	cbz	r3, 84f6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    84ea:	4641      	mov	r1, r8
    84ec:	4630      	mov	r0, r6
    84ee:	f7ff fed7 	bl	82a0 <FatFile::makeUniqueSfn(FatLfn_t*)>
    84f2:	2800      	cmp	r0, #0
    84f4:	d08f      	beq.n	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    84f6:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    84f8:	4642      	mov	r2, r8
    84fa:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    84fc:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    84fe:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    8502:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    8504:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8506:	4629      	mov	r1, r5
    8508:	f7ff fd84 	bl	8014 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    850c:	2800      	cmp	r0, #0
    850e:	d082      	beq.n	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8510:	0169      	lsls	r1, r5, #5
    8512:	4630      	mov	r0, r6
    8514:	f7ff fa6a 	bl	79ec <FatFile::seekSet(unsigned long)>
    8518:	2800      	cmp	r0, #0
    851a:	f43f af7c 	beq.w	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    851e:	2100      	movs	r1, #0
    8520:	4630      	mov	r0, r6
    8522:	f7ff f903 	bl	772c <FatFile::readDirCache(bool)>
  if (!dir) {
    8526:	4604      	mov	r4, r0
    8528:	2800      	cmp	r0, #0
    852a:	f43f af74 	beq.w	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    852e:	2220      	movs	r2, #32
    8530:	2100      	movs	r1, #0
    8532:	f009 fc5b 	bl	11dec <memset>
  memcpy(dir->name, fname->sfn, 11);
    8536:	f8d8 2016 	ldr.w	r2, [r8, #22]
    853a:	f8d8 301a 	ldr.w	r3, [r8, #26]
    853e:	6022      	str	r2, [r4, #0]
    8540:	6063      	str	r3, [r4, #4]
    8542:	f898 3020 	ldrb.w	r3, [r8, #32]
    8546:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    854a:	72a3      	strb	r3, [r4, #10]
    854c:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    854e:	f898 3015 	ldrb.w	r3, [r8, #21]
    8552:	f003 0318 	and.w	r3, r3, #24
    8556:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    8558:	4b23      	ldr	r3, [pc, #140]	; (85e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    855a:	681b      	ldr	r3, [r3, #0]
    855c:	2b00      	cmp	r3, #0
    855e:	d03b      	beq.n	85d8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    8560:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    8564:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    8568:	a809      	add	r0, sp, #36	; 0x24
    856a:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    856c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8570:	8223      	strh	r3, [r4, #16]
    8572:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    8576:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    8578:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    857c:	7363      	strb	r3, [r4, #13]
    857e:	9a07      	ldr	r2, [sp, #28]
    8580:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    8584:	f043 0301 	orr.w	r3, r3, #1
    8588:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    858c:	9b03      	ldr	r3, [sp, #12]
    858e:	462a      	mov	r2, r5
    8590:	4631      	mov	r1, r6
    8592:	9802      	ldr	r0, [sp, #8]
    8594:	9700      	str	r7, [sp, #0]
    8596:	f7ff fa81 	bl	7a9c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    859a:	e73d      	b.n	8418 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    859c:	f1bb 0f01 	cmp.w	fp, #1
    85a0:	f47f af39 	bne.w	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    85a4:	300a      	adds	r0, #10
    85a6:	e001      	b.n	85ac <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    85a8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    85ac:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    85b0:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    85b2:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    85b6:	fa52 f281 	uxtab	r2, r2, r1
    85ba:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    85be:	d1f3      	bne.n	85a8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    85c0:	9b06      	ldr	r3, [sp, #24]
    85c2:	4563      	cmp	r3, ip
    85c4:	f47f af27 	bne.w	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    85c8:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    85ca:	9b03      	ldr	r3, [sp, #12]
    85cc:	0519      	lsls	r1, r3, #20
    85ce:	f53f af22 	bmi.w	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    85d2:	e7db      	b.n	858c <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    85d4:	461f      	mov	r7, r3
    85d6:	e7f8      	b.n	85ca <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    85d8:	f645 2321 	movw	r3, #23073	; 0x5a21
    85dc:	8223      	strh	r3, [r4, #16]
    85de:	8323      	strh	r3, [r4, #24]
    85e0:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    85e2:	e7cc      	b.n	857e <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    85e4:	4ec4ec4f 	.word	0x4ec4ec4f
    85e8:	200042b4 	.word	0x200042b4

000085ec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    85ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85f0:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    85f2:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    85f4:	b082      	sub	sp, #8
    85f6:	460c      	mov	r4, r1
  while (*path == ' ') {
    85f8:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    85fa:	4615      	mov	r5, r2
  while (*path == ' ') {
    85fc:	d103      	bne.n	8606 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    85fe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8602:	2b20      	cmp	r3, #32
    8604:	d0fb      	beq.n	85fe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    8606:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    8608:	7823      	ldrb	r3, [r4, #0]
    860a:	b363      	cbz	r3, 8666 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    860c:	2b2f      	cmp	r3, #47	; 0x2f
    860e:	d02a      	beq.n	8666 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    8610:	f04f 0800 	mov.w	r8, #0
    8614:	4e29      	ldr	r6, [pc, #164]	; (86bc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8616:	1d21      	adds	r1, r4, #4
    8618:	4620      	mov	r0, r4
    861a:	aa01      	add	r2, sp, #4
    861c:	f003 fc0e 	bl	be3c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8620:	4604      	mov	r4, r0
    8622:	b170      	cbz	r0, 8642 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    8624:	9b01      	ldr	r3, [sp, #4]
    8626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    862a:	d240      	bcs.n	86ae <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    862c:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    862e:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8632:	d831      	bhi.n	8698 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    8634:	2b3c      	cmp	r3, #60	; 0x3c
    8636:	b2d9      	uxtb	r1, r3
    8638:	d829      	bhi.n	868e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    863a:	2921      	cmp	r1, #33	; 0x21
    863c:	d805      	bhi.n	864a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    863e:	291f      	cmp	r1, #31
    8640:	d809      	bhi.n	8656 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    8642:	2000      	movs	r0, #0
    8644:	b002      	add	sp, #8
    8646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    864a:	3922      	subs	r1, #34	; 0x22
    864c:	b2c9      	uxtb	r1, r1
    864e:	fa26 f101 	lsr.w	r1, r6, r1
    8652:	07ca      	lsls	r2, r1, #31
    8654:	d4f5      	bmi.n	8642 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    8656:	2b2e      	cmp	r3, #46	; 0x2e
    8658:	d001      	beq.n	865e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    865a:	2b20      	cmp	r3, #32
    865c:	d11c      	bne.n	8698 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    865e:	7823      	ldrb	r3, [r4, #0]
    8660:	b10b      	cbz	r3, 8666 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    8662:	2b2f      	cmp	r3, #47	; 0x2f
    8664:	d1d7      	bne.n	8616 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    8666:	692b      	ldr	r3, [r5, #16]
    8668:	3b01      	subs	r3, #1
    866a:	2bfe      	cmp	r3, #254	; 0xfe
    866c:	d8e9      	bhi.n	8642 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    866e:	7823      	ldrb	r3, [r4, #0]
    8670:	2b20      	cmp	r3, #32
    8672:	d103      	bne.n	867c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    8674:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8678:	2b20      	cmp	r3, #32
    867a:	d0fb      	beq.n	8674 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    867c:	2b2f      	cmp	r3, #47	; 0x2f
    867e:	d0f9      	beq.n	8674 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    8680:	4628      	mov	r0, r5
  *ptr = path;
    8682:	603c      	str	r4, [r7, #0]
}
    8684:	b002      	add	sp, #8
    8686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    868a:	f7ff bd55 	b.w	8138 <FatFile::makeSFN(FatLfn_t*)>
    868e:	295c      	cmp	r1, #92	; 0x5c
    8690:	d0d7      	beq.n	8642 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    8692:	d905      	bls.n	86a0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    8694:	297c      	cmp	r1, #124	; 0x7c
    8696:	d0d4      	beq.n	8642 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    8698:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    869c:	60ac      	str	r4, [r5, #8]
    869e:	e7de      	b.n	865e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    86a0:	393e      	subs	r1, #62	; 0x3e
    86a2:	2901      	cmp	r1, #1
    86a4:	d8f8      	bhi.n	8698 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    86a6:	2000      	movs	r0, #0
    86a8:	b002      	add	sp, #8
    86aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    86ae:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    86b2:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    86b4:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    86b8:	e7d1      	b.n	865e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    86ba:	bf00      	nop
    86bc:	05002101 	.word	0x05002101

000086c0 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    86c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    86c2:	2300      	movs	r3, #0
    86c4:	b08b      	sub	sp, #44	; 0x2c
    86c6:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    86c8:	7883      	ldrb	r3, [r0, #2]
    86ca:	079a      	lsls	r2, r3, #30
    86cc:	d524      	bpl.n	8718 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    86ce:	6a01      	ldr	r1, [r0, #32]
    86d0:	4605      	mov	r5, r0
    86d2:	b119      	cbz	r1, 86dc <FatFile::remove()+0x1c>
    86d4:	6880      	ldr	r0, [r0, #8]
    86d6:	f000 fe19 	bl	930c <FatPartition::freeChain(unsigned long)>
    86da:	b1e8      	cbz	r0, 8718 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    86dc:	2101      	movs	r1, #1
    86de:	4628      	mov	r0, r5
    86e0:	f7fe fcd0 	bl	7084 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    86e4:	b1c0      	cbz	r0, 8718 <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    86e6:	1e42      	subs	r2, r0, #1
    86e8:	f100 0c0a 	add.w	ip, r0, #10
    uint8_t sum = 0;
    86ec:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    86ee:	01e3      	lsls	r3, r4, #7
    86f0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    86f4:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    86f8:	4594      	cmp	ip, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    86fa:	fa51 f383 	uxtab	r3, r1, r3
    86fe:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    8700:	d1f5      	bne.n	86ee <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    8702:	26e5      	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    8704:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    8706:	7006      	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    8708:	68af      	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    870a:	702b      	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    870c:	f107 0028 	add.w	r0, r7, #40	; 0x28
  m_flags = 0;
    8710:	70ab      	strb	r3, [r5, #2]
    8712:	f003 fa61 	bl	bbd8 <FsCache::sync()>
    8716:	b910      	cbnz	r0, 871e <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8718:	2000      	movs	r0, #0
}
    871a:	b00b      	add	sp, #44	; 0x2c
    871c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    871e:	f507 700e 	add.w	r0, r7, #568	; 0x238
    8722:	f003 fa59 	bl	bbd8 <FsCache::sync()>
    8726:	2800      	cmp	r0, #0
    8728:	d0f6      	beq.n	8718 <FatFile::remove()+0x58>
    872a:	6838      	ldr	r0, [r7, #0]
    return m_blockDev->syncDevice();
    872c:	6803      	ldr	r3, [r0, #0]
    872e:	6a1b      	ldr	r3, [r3, #32]
    8730:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8732:	2800      	cmp	r0, #0
    8734:	d0f0      	beq.n	8718 <FatFile::remove()+0x58>
  if (!isLFN()) {
    8736:	78eb      	ldrb	r3, [r5, #3]
    8738:	2b00      	cmp	r3, #0
    873a:	d0ee      	beq.n	871a <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    873c:	4629      	mov	r1, r5
    873e:	a801      	add	r0, sp, #4
    8740:	f7fe fec0 	bl	74c4 <FatFile::openCluster(FatFile*)>
    8744:	2800      	cmp	r0, #0
    8746:	d0e7      	beq.n	8718 <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8748:	78eb      	ldrb	r3, [r5, #3]
    874a:	2b00      	cmp	r3, #0
    874c:	d0e4      	beq.n	8718 <FatFile::remove()+0x58>
    874e:	2701      	movs	r7, #1
    8750:	e021      	b.n	8796 <FatFile::remove()+0xd6>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8752:	a801      	add	r0, sp, #4
    8754:	f7fe ffea 	bl	772c <FatFile::readDirCache(bool)>
    8758:	1c7b      	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    875a:	b2f9      	uxtb	r1, r7
    if (!ldir) {
    875c:	2800      	cmp	r0, #0
    875e:	d0db      	beq.n	8718 <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8760:	7ac2      	ldrb	r2, [r0, #11]
    8762:	2a0f      	cmp	r2, #15
    8764:	d1d8      	bne.n	8718 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    8766:	7802      	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8768:	fa5f fc83 	uxtb.w	ip, r3
    876c:	b29f      	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    876e:	f002 031f 	and.w	r3, r2, #31
    8772:	428b      	cmp	r3, r1
    8774:	d1d0      	bne.n	8718 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    8776:	7b43      	ldrb	r3, [r0, #13]
    8778:	42a3      	cmp	r3, r4
    877a:	d1cd      	bne.n	8718 <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    877c:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    877e:	68a9      	ldr	r1, [r5, #8]
    8780:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    8784:	f043 0301 	orr.w	r3, r3, #1
    8788:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    878c:	0653      	lsls	r3, r2, #25
    878e:	d40d      	bmi.n	87ac <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8790:	78eb      	ldrb	r3, [r5, #3]
    8792:	4563      	cmp	r3, ip
    8794:	d3c0      	bcc.n	8718 <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    8796:	88a9      	ldrh	r1, [r5, #4]
    8798:	a801      	add	r0, sp, #4
    879a:	1bc9      	subs	r1, r1, r7
    879c:	b289      	uxth	r1, r1
    879e:	0149      	lsls	r1, r1, #5
    87a0:	f7ff f924 	bl	79ec <FatFile::seekSet(unsigned long)>
    87a4:	2100      	movs	r1, #0
    87a6:	2800      	cmp	r0, #0
    87a8:	d1d3      	bne.n	8752 <FatFile::remove()+0x92>
    87aa:	e7b5      	b.n	8718 <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    87ac:	68ac      	ldr	r4, [r5, #8]
    87ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
    87b2:	f003 fa11 	bl	bbd8 <FsCache::sync()>
    87b6:	2800      	cmp	r0, #0
    87b8:	d0ae      	beq.n	8718 <FatFile::remove()+0x58>
    87ba:	f504 700e 	add.w	r0, r4, #568	; 0x238
    87be:	f003 fa0b 	bl	bbd8 <FsCache::sync()>
    87c2:	2800      	cmp	r0, #0
    87c4:	d0a8      	beq.n	8718 <FatFile::remove()+0x58>
    87c6:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    87c8:	6803      	ldr	r3, [r0, #0]
    87ca:	6a1b      	ldr	r3, [r3, #32]
    87cc:	4798      	blx	r3
    87ce:	e7a4      	b.n	871a <FatFile::remove()+0x5a>

000087d0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    87d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    87d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    87d8:	b1a2      	cbz	r2, 8804 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    87da:	4605      	mov	r5, r0
    87dc:	460c      	mov	r4, r1
    87de:	4698      	mov	r8, r3
    87e0:	1857      	adds	r7, r2, r1
    87e2:	e001      	b.n	87e8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    87e4:	42bc      	cmp	r4, r7
    87e6:	d00d      	beq.n	8804 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    87e8:	682b      	ldr	r3, [r5, #0]
    87ea:	4620      	mov	r0, r4
    87ec:	4649      	mov	r1, r9
    87ee:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    87f0:	47c0      	blx	r8
    87f2:	4621      	mov	r1, r4
    87f4:	4602      	mov	r2, r0
    87f6:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    87f8:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    87fa:	47b0      	blx	r6
    87fc:	2800      	cmp	r0, #0
    87fe:	d1f1      	bne.n	87e4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    8800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    8804:	2001      	movs	r0, #1
  }
    8806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    880a:	bf00      	nop

0000880c <initFatDirCallback(unsigned long, void*)>:
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    880c:	6848      	ldr	r0, [r1, #4]
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    880e:	b510      	push	{r4, lr}
    8810:	460c      	mov	r4, r1
  if (state->pr && ++state->count >= state->dotcount) {
    8812:	b130      	cbz	r0, 8822 <initFatDirCallback(unsigned long, void*)+0x16>
    8814:	890b      	ldrh	r3, [r1, #8]
    8816:	894a      	ldrh	r2, [r1, #10]
    8818:	3301      	adds	r3, #1
    881a:	b29b      	uxth	r3, r3
    881c:	429a      	cmp	r2, r3
    881e:	810b      	strh	r3, [r1, #8]
    8820:	d901      	bls.n	8826 <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
    8822:	6820      	ldr	r0, [r4, #0]
    8824:	bd10      	pop	{r4, pc}
    8826:	6803      	ldr	r3, [r0, #0]
    8828:	2201      	movs	r2, #1
    882a:	4903      	ldr	r1, [pc, #12]	; (8838 <initFatDirCallback(unsigned long, void*)+0x2c>)
    882c:	685b      	ldr	r3, [r3, #4]
    882e:	4798      	blx	r3
    state->count = 0;
    8830:	2300      	movs	r3, #0
}
    8832:	6820      	ldr	r0, [r4, #0]
    state->count = 0;
    8834:	8123      	strh	r3, [r4, #8]
}
    8836:	bd10      	pop	{r4, pc}
    8838:	20000fc8 	.word	0x20000fc8

0000883c <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8840:	4605      	mov	r5, r0
    8842:	b087      	sub	sp, #28
    8844:	4688      	mov	r8, r1
    8846:	4692      	mov	sl, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8848:	2100      	movs	r1, #0
    884a:	f44f 7200 	mov.w	r2, #512	; 0x200
    884e:	6a40      	ldr	r0, [r0, #36]	; 0x24
    8850:	f009 facc 	bl	11dec <memset>
  writeMsg("Writing FAT ");
    8854:	6a28      	ldr	r0, [r5, #32]
    8856:	b128      	cbz	r0, 8864 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x28>
    8858:	6803      	ldr	r3, [r0, #0]
    885a:	220c      	movs	r2, #12
    885c:	493a      	ldr	r1, [pc, #232]	; (8948 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x10c>)
    885e:	685b      	ldr	r3, [r3, #4]
    8860:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
    8862:	6a28      	ldr	r0, [r5, #32]
  state.buffer = m_secBuf;
    8864:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  state.count = 0;
    8866:	f04f 0900 	mov.w	r9, #0
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    886a:	69ee      	ldr	r6, [r5, #28]
    886c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
    8870:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8954 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x118>
    8874:	68e9      	ldr	r1, [r5, #12]
  state.count = 0;
    8876:	f8ad 9014 	strh.w	r9, [sp, #20]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    887a:	1c4c      	adds	r4, r1, #1
  state.buffer = m_secBuf;
    887c:	e9cd 3003 	strd	r3, r0, [sp, #12]
  state.dotcount = sectorCount/32;
    8880:	ea4f 135a 	mov.w	r3, sl, lsr #5
    8884:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    8888:	6833      	ldr	r3, [r6, #0]
    888a:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    888c:	4567      	cmp	r7, ip
    888e:	d126      	bne.n	88de <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa2>
     for (size_t i = 0; i < ns; i++) {
    8890:	b36a      	cbz	r2, 88ee <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb2>
    8892:	eb01 070a 	add.w	r7, r1, sl
    8896:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8958 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x11c>
    889a:	e00a      	b.n	88b2 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x76>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    889c:	4621      	mov	r1, r4
    889e:	9a03      	ldr	r2, [sp, #12]
    88a0:	4630      	mov	r0, r6
     for (size_t i = 0; i < ns; i++) {
    88a2:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    88a4:	47d8      	blx	fp
    88a6:	2800      	cmp	r0, #0
    88a8:	d03f      	beq.n	892a <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     for (size_t i = 0; i < ns; i++) {
    88aa:	42a7      	cmp	r7, r4
    88ac:	d01e      	beq.n	88ec <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb0>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    88ae:	6833      	ldr	r3, [r6, #0]
  if (state->pr && ++state->count >= state->dotcount) {
    88b0:	9804      	ldr	r0, [sp, #16]
    88b2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    88b6:	2800      	cmp	r0, #0
    88b8:	d0f0      	beq.n	889c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
    88ba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    88be:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    88c2:	3301      	adds	r3, #1
    88c4:	b29b      	uxth	r3, r3
    88c6:	429a      	cmp	r2, r3
    88c8:	f8ad 3014 	strh.w	r3, [sp, #20]
    88cc:	d8e6      	bhi.n	889c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
    88ce:	6803      	ldr	r3, [r0, #0]
    88d0:	4651      	mov	r1, sl
    88d2:	2201      	movs	r2, #1
    88d4:	685b      	ldr	r3, [r3, #4]
    88d6:	4798      	blx	r3
    state->count = 0;
    88d8:	f8ad 9014 	strh.w	r9, [sp, #20]
    88dc:	e7de      	b.n	889c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    88de:	ab03      	add	r3, sp, #12
    88e0:	4621      	mov	r1, r4
    88e2:	4630      	mov	r0, r6
    88e4:	9300      	str	r3, [sp, #0]
    88e6:	4b19      	ldr	r3, [pc, #100]	; (894c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x110>)
    88e8:	47b8      	blx	r7
    88ea:	b1f0      	cbz	r0, 892a <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     return false;
  }
  writeMsg("\r\n");
    88ec:	6a28      	ldr	r0, [r5, #32]
    88ee:	b120      	cbz	r0, 88fa <FatFormatter::initFatDir(unsigned char, unsigned long)+0xbe>
    88f0:	6803      	ldr	r3, [r0, #0]
    88f2:	2202      	movs	r2, #2
    88f4:	4916      	ldr	r1, [pc, #88]	; (8950 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x114>)
    88f6:	685b      	ldr	r3, [r3, #4]
    88f8:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
    88fa:	f1b8 0f10 	cmp.w	r8, #16
  m_secBuf[0] = 0XF8;
    88fe:	f04f 01f8 	mov.w	r1, #248	; 0xf8
    8902:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  for (size_t i = 1; i < n; i++) {
    8904:	f04f 0301 	mov.w	r3, #1
  n = fatType == 16 ? 4 : 12;
    8908:	bf0c      	ite	eq
    890a:	2004      	moveq	r0, #4
    890c:	200c      	movne	r0, #12
  m_secBuf[0] = 0XF8;
    890e:	7011      	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
    8910:	21ff      	movs	r1, #255	; 0xff
    8912:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    8914:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    8916:	3301      	adds	r3, #1
    8918:	4298      	cmp	r0, r3
    891a:	d1fa      	bne.n	8912 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xd6>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    891c:	69e8      	ldr	r0, [r5, #28]
    891e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    8920:	6803      	ldr	r3, [r0, #0]
    8922:	68e9      	ldr	r1, [r5, #12]
    8924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8926:	4798      	blx	r3
    8928:	b918      	cbnz	r0, 8932 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xf6>
     return false;
    892a:	2000      	movs	r0, #0
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
    892c:	b007      	add	sp, #28
    892e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    8932:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    8936:	69e8      	ldr	r0, [r5, #28]
    8938:	4419      	add	r1, r3
    893a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    893c:	6803      	ldr	r3, [r0, #0]
    893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8940:	4798      	blx	r3
}
    8942:	b007      	add	sp, #28
    8944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8948:	2000123c 	.word	0x2000123c
    894c:	0000880d 	.word	0x0000880d
    8950:	20001260 	.word	0x20001260
    8954:	000087d1 	.word	0x000087d1
    8958:	20000fc8 	.word	0x20000fc8

0000895c <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    895c:	b538      	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    895e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8960:	f44f 7500 	mov.w	r5, #512	; 0x200
void FatFormatter::initPbs() {
    8964:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8966:	2100      	movs	r1, #0
    8968:	462a      	mov	r2, r5
    896a:	4618      	mov	r0, r3
    896c:	f009 fa3e 	bl	11dec <memset>
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    8970:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  pbs->jmpInstruction[0] = 0XEB;
    8974:	22eb      	movs	r2, #235	; 0xeb
    8976:	f8a0 500b 	strh.w	r5, [r0, #11]
    pbs->oemName[i] = ' ';
    897a:	f8c0 1003 	str.w	r1, [r0, #3]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    897e:	4603      	mov	r3, r0
    pbs->oemName[i] = ' ';
    8980:	f8c0 1007 	str.w	r1, [r0, #7]
  pbs->jmpInstruction[2] = 0X90;
    8984:	2190      	movs	r1, #144	; 0x90
  pbs->jmpInstruction[0] = 0XEB;
    8986:	7002      	strb	r2, [r0, #0]
  pbs->jmpInstruction[1] = 0X76;
    8988:	2076      	movs	r0, #118	; 0x76
  pbs->jmpInstruction[2] = 0X90;
    898a:	7099      	strb	r1, [r3, #2]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
    898c:	2202      	movs	r2, #2
  pbs->jmpInstruction[1] = 0X76;
    898e:	7058      	strb	r0, [r3, #1]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    8990:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
    8994:	7359      	strb	r1, [r3, #13]
    8996:	f64a 2155 	movw	r1, #43605	; 0xaa55
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    899a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
    899c:	741a      	strb	r2, [r3, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    899e:	22f8      	movs	r2, #248	; 0xf8
    89a0:	81d8      	strh	r0, [r3, #14]
    89a2:	755a      	strb	r2, [r3, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    89a4:	6922      	ldr	r2, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    89a6:	61da      	str	r2, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    89a8:	69a2      	ldr	r2, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    89aa:	f8a3 11fe 	strh.w	r1, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
    89ae:	621a      	str	r2, [r3, #32]
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    89b0:	bd38      	pop	{r3, r4, r5, pc}
    89b2:	bf00      	nop

000089b4 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    89b4:	b570      	push	{r4, r5, r6, lr}
    89b6:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    89b8:	f44f 7200 	mov.w	r2, #512	; 0x200
    89bc:	2100      	movs	r1, #0
    89be:	6a40      	ldr	r0, [r0, #36]	; 0x24
    89c0:	f009 fa14 	bl	11dec <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    89c4:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    89c6:	6922      	ldr	r2, [r4, #16]
    89c8:	6821      	ldr	r1, [r4, #0]
    89ca:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
    89ce:	f003 f993 	bl	bcf8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    89d2:	69a3      	ldr	r3, [r4, #24]
    89d4:	6922      	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    89d6:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
    89da:	6821      	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors -1);
    89dc:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    89de:	3a01      	subs	r2, #1
    89e0:	f003 f98a 	bl	bcf8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    89e4:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  *reinterpret_cast<uint16_t*>(dst) = src;
    89e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
    89ec:	f885 21c2 	strb.w	r2, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    89f0:	6922      	ldr	r2, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    89f2:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    89f4:	f8c5 21c6 	str.w	r2, [r5, #454]	; 0x1c6
    89f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
  setLe32(mbr->part->totalSectors, m_totalSectors);
    89fa:	69a1      	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    89fc:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  return m_dev->writeSector(0, m_secBuf);
    8a00:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8a02:	f8c5 11ca 	str.w	r1, [r5, #458]	; 0x1ca
    8a06:	2100      	movs	r1, #0
    8a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    8a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
    8a0e:	4718      	bx	r3

00008a10 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    8a10:	b570      	push	{r4, r5, r6, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8a12:	6946      	ldr	r6, [r0, #20]
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    8a14:	f44f 7380 	mov.w	r3, #256	; 0x100
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8a18:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
    8a1c:	4604      	mov	r4, r0
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8a1e:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    8a22:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    8a24:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8a26:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    8a2a:	f202 1c01 	addw	ip, r2, #257	; 0x101
    8a2e:	ea4f 211c 	mov.w	r1, ip, lsr #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    8a32:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    8a36:	6081      	str	r1, [r0, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    8a38:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    8a3c:	4298      	cmp	r0, r3
    8a3e:	d90e      	bls.n	8a5e <FatFormatter::makeFat16()+0x4e>
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    8a40:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8a42:	1af2      	subs	r2, r6, r3
    8a44:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    8a48:	f202 1101 	addw	r1, r2, #257	; 0x101
    8a4c:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    8a4e:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a52:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    8a56:	4283      	cmp	r3, r0
    8a58:	d3f2      	bcc.n	8a40 <FatFormatter::makeFat16()+0x30>
    8a5a:	e9c4 3101 	strd	r3, r1, [r4, #4]
      m_relativeSectors = m_dataStart - r + BU16;
    8a5e:	1a1b      	subs	r3, r3, r0
  if (nc < 4085 || nc >= 65525) {
    8a60:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
      m_relativeSectors = m_dataStart - r + BU16;
    8a64:	f103 0080 	add.w	r0, r3, #128	; 0x80
  if (nc < 4085 || nc >= 65525) {
    8a68:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
      m_relativeSectors = m_dataStart - r + BU16;
    8a6c:	6120      	str	r0, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    8a6e:	d24f      	bcs.n	8b10 <FatFormatter::makeFat16()+0x100>
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    8a70:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    8a74:	3381      	adds	r3, #129	; 0x81
  if (!writeMbr()) {
    8a76:	4620      	mov	r0, r4
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    8a78:	fb02 c20e 	mla	r2, r2, lr, ip
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    8a7c:	60e3      	str	r3, [r4, #12]
    m_partType = 0X06;
    8a7e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  m_totalSectors = nc*m_sectorsPerCluster
    8a82:	61a2      	str	r2, [r4, #24]
    m_partType = 0X06;
    8a84:	bf34      	ite	cc
    8a86:	2304      	movcc	r3, #4
    8a88:	2306      	movcs	r3, #6
    8a8a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  m_reservedSectorCount = 1;
    8a8e:	2301      	movs	r3, #1
    8a90:	8523      	strh	r3, [r4, #40]	; 0x28
  if (!writeMbr()) {
    8a92:	f7ff ff8f 	bl	89b4 <FatFormatter::writeMbr()>
    8a96:	b908      	cbnz	r0, 8a9c <FatFormatter::makeFat16()+0x8c>
}
    8a98:	2000      	movs	r0, #0
    8a9a:	bd70      	pop	{r4, r5, r6, pc}
  initPbs();
    8a9c:	4620      	mov	r0, r4
    8a9e:	f7ff ff5d 	bl	895c <FatFormatter::initPbs()>
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    8aa2:	2229      	movs	r2, #41	; 0x29
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    8aa4:	68a1      	ldr	r1, [r4, #8]
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    8aa6:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    8aaa:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
  pbs->bpb.bpb16.volumeType[0] = 'F';
    8aae:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    8ab0:	f8c5 302f 	str.w	r3, [r5, #47]	; 0x2f
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    8ab4:	2080      	movs	r0, #128	; 0x80
  pbs->bpb.bpb16.volumeType[0] = 'F';
    8ab6:	f885 2036 	strb.w	r2, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[2] = 'T';
    8aba:	2254      	movs	r2, #84	; 0x54
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    8abc:	f8c5 302b 	str.w	r3, [r5, #43]	; 0x2b
    8ac0:	f8c5 3032 	str.w	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb16.volumeType[3] = '1';
    8ac4:	2331      	movs	r3, #49	; 0x31
  pbs->bpb.bpb16.volumeType[2] = 'T';
    8ac6:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[4] = '6';
    8aca:	2236      	movs	r2, #54	; 0x36
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    8acc:	82e9      	strh	r1, [r5, #22]
  pbs->bpb.bpb16.volumeType[1] = 'A';
    8ace:	2141      	movs	r1, #65	; 0x41
  pbs->bpb.bpb16.volumeType[3] = '1';
    8ad0:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[1] = 'A';
    8ad4:	f885 1037 	strb.w	r1, [r5, #55]	; 0x37
  *reinterpret_cast<uint16_t*>(dst) = src;
    8ad8:	f44f 7100 	mov.w	r1, #512	; 0x200
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    8adc:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  pbs->bpb.bpb16.volumeType[4] = '6';
    8ae0:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
  *reinterpret_cast<uint32_t*>(dst) = src;
    8ae4:	4b0f      	ldr	r3, [pc, #60]	; (8b24 <FatFormatter::makeFat16()+0x114>)
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    8ae6:	69e0      	ldr	r0, [r4, #28]
    8ae8:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
    8aec:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8aee:	f8a5 1011 	strh.w	r1, [r5, #17]
    8af2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8af4:	6921      	ldr	r1, [r4, #16]
    8af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8af8:	4798      	blx	r3
    8afa:	2800      	cmp	r0, #0
    8afc:	d0cc      	beq.n	8a98 <FatFormatter::makeFat16()+0x88>
  return initFatDir(16, m_dataStart - m_fatStart);
    8afe:	6862      	ldr	r2, [r4, #4]
    8b00:	4620      	mov	r0, r4
    8b02:	68e3      	ldr	r3, [r4, #12]
    8b04:	2110      	movs	r1, #16
    8b06:	1ad2      	subs	r2, r2, r3
}
    8b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return initFatDir(16, m_dataStart - m_fatStart);
    8b0c:	f7ff be96 	b.w	883c <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    8b10:	6a20      	ldr	r0, [r4, #32]
    8b12:	2800      	cmp	r0, #0
    8b14:	d0c0      	beq.n	8a98 <FatFormatter::makeFat16()+0x88>
    8b16:	6803      	ldr	r3, [r0, #0]
    8b18:	2213      	movs	r2, #19
    8b1a:	4903      	ldr	r1, [pc, #12]	; (8b28 <FatFormatter::makeFat16()+0x118>)
    8b1c:	685b      	ldr	r3, [r3, #4]
    8b1e:	4798      	blx	r3
}
    8b20:	2000      	movs	r0, #0
    8b22:	bd70      	pop	{r4, r5, r6, pc}
    8b24:	0012d687 	.word	0x0012d687
    8b28:	20001210 	.word	0x20001210

00008b2c <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    8b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8b2e:	6946      	ldr	r6, [r0, #20]
  m_relativeSectors = BU32;
    8b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8b34:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    8b38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8b3c:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
  m_relativeSectors = BU32;
    8b40:	6103      	str	r3, [r0, #16]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    8b42:	f242 0e09 	movw	lr, #8201	; 0x2009
bool FatFormatter::makeFat32() {
    8b46:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    8b48:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    8b4a:	6042      	str	r2, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8b4c:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    8b50:	f101 0381 	add.w	r3, r1, #129	; 0x81
    8b54:	09db      	lsrs	r3, r3, #7
    8b56:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    8b58:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    8b5c:	4290      	cmp	r0, r2
    8b5e:	f240 80b6 	bls.w	8cce <FatFormatter::makeFat32()+0x1a2>
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    8b62:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8b66:	1ab1      	subs	r1, r6, r2
    8b68:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    8b6c:	f101 0381 	add.w	r3, r1, #129	; 0x81
    8b70:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    8b72:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    8b76:	005f      	lsls	r7, r3, #1
    if (m_dataStart >= r) {
    8b78:	4282      	cmp	r2, r0
    8b7a:	d3f2      	bcc.n	8b62 <FatFormatter::makeFat32()+0x36>
    8b7c:	e9c4 2301 	strd	r2, r3, [r4, #4]
  if (nc < 65525) {
    8b80:	f64f 73f4 	movw	r3, #65524	; 0xfff4
    8b84:	4299      	cmp	r1, r3
    8b86:	f240 8097 	bls.w	8cb8 <FatFormatter::makeFat32()+0x18c>
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    8b8a:	fb01 2c0c 	mla	ip, r1, ip, r2
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    8b8e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  if (!writeMbr()) {
    8b92:	4620      	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    8b94:	1bd2      	subs	r2, r2, r7
    8b96:	b292      	uxth	r2, r2
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    8b98:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    8b9c:	8522      	strh	r2, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    8b9e:	4a4d      	ldr	r2, [pc, #308]	; (8cd4 <FatFormatter::makeFat32()+0x1a8>)
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    8ba0:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    8ba2:	f5ac 5300 	sub.w	r3, ip, #8192	; 0x2000
    m_partType = 0X0C;
    8ba6:	4594      	cmp	ip, r2
    8ba8:	bf94      	ite	ls
    8baa:	f04f 0c0b 	movls.w	ip, #11
    8bae:	f04f 0c0c 	movhi.w	ip, #12
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    8bb2:	61a3      	str	r3, [r4, #24]
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    8bb4:	f884 c02a 	strb.w	ip, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    8bb8:	f7ff fefc 	bl	89b4 <FatFormatter::writeMbr()>
    8bbc:	b908      	cbnz	r0, 8bc2 <FatFormatter::makeFat32()+0x96>
}
    8bbe:	2000      	movs	r0, #0
    8bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  initPbs();
    8bc2:	4620      	mov	r0, r4
    8bc4:	f7ff feca 	bl	895c <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    8bc8:	68a1      	ldr	r1, [r4, #8]
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    8bca:	2229      	movs	r2, #41	; 0x29
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    8bcc:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    8bd0:	2080      	movs	r0, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    8bd2:	6269      	str	r1, [r5, #36]	; 0x24
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    8bd4:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
  pbs->bpb.bpb32.volumeType[2] = 'T';
    8bd8:	2154      	movs	r1, #84	; 0x54
  pbs->bpb.bpb32.volumeType[0] = 'F';
    8bda:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    8bdc:	f8c5 304b 	str.w	r3, [r5, #75]	; 0x4b
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    8be0:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  pbs->bpb.bpb32.volumeType[1] = 'A';
    8be4:	2041      	movs	r0, #65	; 0x41
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    8be6:	f8c5 3047 	str.w	r3, [r5, #71]	; 0x47
    8bea:	f8c5 304e 	str.w	r3, [r5, #78]	; 0x4e
    8bee:	2302      	movs	r3, #2
  pbs->bpb.bpb32.volumeType[0] = 'F';
    8bf0:	f885 2052 	strb.w	r2, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[3] = '3';
    8bf4:	2233      	movs	r2, #51	; 0x33
  pbs->bpb.bpb32.volumeType[2] = 'T';
    8bf6:	f885 1054 	strb.w	r1, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[4] = '2';
    8bfa:	2132      	movs	r1, #50	; 0x32
  pbs->bpb.bpb32.volumeType[3] = '3';
    8bfc:	f885 2055 	strb.w	r2, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[1] = 'A';
    8c00:	f885 0053 	strb.w	r0, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[4] = '2';
    8c04:	f885 1056 	strb.w	r1, [r5, #86]	; 0x56
    8c08:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    8c0a:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8c0c:	4b32      	ldr	r3, [pc, #200]	; (8cd8 <FatFormatter::makeFat32()+0x1ac>)
  *reinterpret_cast<uint32_t*>(dst) = src;
    8c0e:	4a33      	ldr	r2, [pc, #204]	; (8cdc <FatFormatter::makeFat32()+0x1b0>)
  *reinterpret_cast<uint16_t*>(dst) = src;
    8c10:	632b      	str	r3, [r5, #48]	; 0x30
    8c12:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8c14:	f8c5 2043 	str.w	r2, [r5, #67]	; 0x43
    8c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8c1c:	6921      	ldr	r1, [r4, #16]
    8c1e:	4798      	blx	r3
    8c20:	2800      	cmp	r0, #0
    8c22:	d0cc      	beq.n	8bbe <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    8c24:	69e0      	ldr	r0, [r4, #28]
    8c26:	6921      	ldr	r1, [r4, #16]
    8c28:	6803      	ldr	r3, [r0, #0]
    8c2a:	3106      	adds	r1, #6
    8c2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c30:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    8c32:	2800      	cmp	r0, #0
    8c34:	d0c3      	beq.n	8bbe <FatFormatter::makeFat32()+0x92>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    8c36:	f44f 7200 	mov.w	r2, #512	; 0x200
    8c3a:	2100      	movs	r1, #0
    8c3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8c3e:	f009 f8d5 	bl	11dec <memset>
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    8c42:	69e0      	ldr	r0, [r4, #28]
    8c44:	4a26      	ldr	r2, [pc, #152]	; (8ce0 <FatFormatter::makeFat32()+0x1b4>)
    8c46:	6803      	ldr	r3, [r0, #0]
    8c48:	f8c5 21fc 	str.w	r2, [r5, #508]	; 0x1fc
    8c4c:	6921      	ldr	r1, [r4, #16]
    8c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c50:	3102      	adds	r1, #2
    8c52:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8c54:	4798      	blx	r3
    8c56:	2800      	cmp	r0, #0
    8c58:	d0b1      	beq.n	8bbe <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    8c5a:	69e0      	ldr	r0, [r4, #28]
    8c5c:	6921      	ldr	r1, [r4, #16]
    8c5e:	6803      	ldr	r3, [r0, #0]
    8c60:	3108      	adds	r1, #8
    8c62:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c66:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    8c68:	2800      	cmp	r0, #0
    8c6a:	d0a8      	beq.n	8bbe <FatFormatter::makeFat32()+0x92>
    8c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    8c70:	69e0      	ldr	r0, [r4, #28]
    8c72:	4a1c      	ldr	r2, [pc, #112]	; (8ce4 <FatFormatter::makeFat32()+0x1b8>)
    8c74:	e9c5 337a 	strd	r3, r3, [r5, #488]	; 0x1e8
    8c78:	4b1b      	ldr	r3, [pc, #108]	; (8ce8 <FatFormatter::makeFat32()+0x1bc>)
    8c7a:	602a      	str	r2, [r5, #0]
    8c7c:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
    8c80:	6803      	ldr	r3, [r0, #0]
    8c82:	6921      	ldr	r1, [r4, #16]
    8c84:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c88:	3101      	adds	r1, #1
    8c8a:	4798      	blx	r3
    8c8c:	2800      	cmp	r0, #0
    8c8e:	d096      	beq.n	8bbe <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    8c90:	69e0      	ldr	r0, [r4, #28]
    8c92:	6921      	ldr	r1, [r4, #16]
    8c94:	6803      	ldr	r3, [r0, #0]
    8c96:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8c98:	3107      	adds	r1, #7
    8c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c9c:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    8c9e:	2800      	cmp	r0, #0
    8ca0:	d08d      	beq.n	8bbe <FatFormatter::makeFat32()+0x92>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    8ca2:	68a2      	ldr	r2, [r4, #8]
    8ca4:	4620      	mov	r0, r4
    8ca6:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    8caa:	2120      	movs	r1, #32
    8cac:	eb03 0242 	add.w	r2, r3, r2, lsl #1
}
    8cb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    8cb4:	f7ff bdc2 	b.w	883c <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    8cb8:	6a20      	ldr	r0, [r4, #32]
    8cba:	2800      	cmp	r0, #0
    8cbc:	f43f af7f 	beq.w	8bbe <FatFormatter::makeFat32()+0x92>
    8cc0:	6803      	ldr	r3, [r0, #0]
    8cc2:	2213      	movs	r2, #19
    8cc4:	4909      	ldr	r1, [pc, #36]	; (8cec <FatFormatter::makeFat32()+0x1c0>)
    8cc6:	685b      	ldr	r3, [r3, #4]
    8cc8:	4798      	blx	r3
}
    8cca:	2000      	movs	r0, #0
    8ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8cce:	005f      	lsls	r7, r3, #1
    8cd0:	e756      	b.n	8b80 <FatFormatter::makeFat32()+0x54>
    8cd2:	bf00      	nop
    8cd4:	00fb0400 	.word	0x00fb0400
    8cd8:	00060001 	.word	0x00060001
    8cdc:	0012d687 	.word	0x0012d687
    8ce0:	aa550000 	.word	0xaa550000
    8ce4:	41615252 	.word	0x41615252
    8ce8:	61417272 	.word	0x61417272
    8cec:	20001210 	.word	0x20001210

00008cf0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    8cf0:	b538      	push	{r3, r4, r5, lr}
    8cf2:	4604      	mov	r4, r0
  m_sectorCount = m_dev->sectorCount();
    8cf4:	680d      	ldr	r5, [r1, #0]
  m_dev = dev;
    8cf6:	61c1      	str	r1, [r0, #28]
  m_sectorCount = m_dev->sectorCount();
    8cf8:	4608      	mov	r0, r1
  m_secBuf = secBuf;
    8cfa:	6262      	str	r2, [r4, #36]	; 0x24
  m_sectorCount = m_dev->sectorCount();
    8cfc:	69ea      	ldr	r2, [r5, #28]
  m_pr = pr;
    8cfe:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    8d00:	4790      	blx	r2
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    8d02:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
    8d06:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    8d08:	0adb      	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
    8d0a:	2b06      	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    8d0c:	6023      	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
    8d0e:	d924      	bls.n	8d5a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  } else if (m_capacityMB <= 16) {
    8d10:	2b10      	cmp	r3, #16
    8d12:	d813      	bhi.n	8d3c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c>
    8d14:	2302      	movs	r3, #2
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    8d16:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
    8d1a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    8d1e:	4620      	mov	r0, r4
    8d20:	d22e      	bcs.n	8d80 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
    8d22:	f7ff fe75 	bl	8a10 <FatFormatter::makeFat16()>
    8d26:	4605      	mov	r5, r0
    writeMsg("Format Done\r\n");
    8d28:	6a20      	ldr	r0, [r4, #32]
  if (rtn) {
    8d2a:	b305      	cbz	r5, 8d6e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7e>
    writeMsg("Format Done\r\n");
    8d2c:	b120      	cbz	r0, 8d38 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48>
    8d2e:	6803      	ldr	r3, [r0, #0]
    8d30:	220d      	movs	r2, #13
    8d32:	4919      	ldr	r1, [pc, #100]	; (8d98 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa8>)
    8d34:	685b      	ldr	r3, [r3, #4]
    8d36:	4798      	blx	r3
}
    8d38:	4628      	mov	r0, r5
    8d3a:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 32) {
    8d3c:	2b20      	cmp	r3, #32
    8d3e:	d923      	bls.n	8d88 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
  } else if (m_capacityMB <= 64) {
    8d40:	2b40      	cmp	r3, #64	; 0x40
    8d42:	d923      	bls.n	8d8c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>
  } else if (m_capacityMB <= 128) {
    8d44:	2b80      	cmp	r3, #128	; 0x80
    8d46:	d923      	bls.n	8d90 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>
  } else if (m_capacityMB <= 1024) {
    8d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    8d4c:	d922      	bls.n	8d94 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa4>
  } else if (m_capacityMB <= 32768) {
    8d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    8d52:	bf8c      	ite	hi
    8d54:	2380      	movhi	r3, #128	; 0x80
    8d56:	2340      	movls	r3, #64	; 0x40
    8d58:	e7dd      	b.n	8d16 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    writeMsg("Card is too small.\r\n");
    8d5a:	6a20      	ldr	r0, [r4, #32]
    8d5c:	b120      	cbz	r0, 8d68 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    8d5e:	6803      	ldr	r3, [r0, #0]
    8d60:	2214      	movs	r2, #20
    8d62:	490e      	ldr	r1, [pc, #56]	; (8d9c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xac>)
    8d64:	685b      	ldr	r3, [r3, #4]
    8d66:	4798      	blx	r3
    return false;
    8d68:	2500      	movs	r5, #0
}
    8d6a:	4628      	mov	r0, r5
    8d6c:	bd38      	pop	{r3, r4, r5, pc}
    writeMsg("Format Failed\r\n");
    8d6e:	2800      	cmp	r0, #0
    8d70:	d0fa      	beq.n	8d68 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    8d72:	6803      	ldr	r3, [r0, #0]
    8d74:	220f      	movs	r2, #15
    8d76:	490a      	ldr	r1, [pc, #40]	; (8da0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb0>)
    8d78:	685b      	ldr	r3, [r3, #4]
    8d7a:	4798      	blx	r3
}
    8d7c:	4628      	mov	r0, r5
    8d7e:	bd38      	pop	{r3, r4, r5, pc}
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    8d80:	f7ff fed4 	bl	8b2c <FatFormatter::makeFat32()>
    8d84:	4605      	mov	r5, r0
    8d86:	e7cf      	b.n	8d28 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x38>
    8d88:	2304      	movs	r3, #4
    8d8a:	e7c4      	b.n	8d16 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    8d8c:	2308      	movs	r3, #8
    8d8e:	e7c2      	b.n	8d16 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    8d90:	2310      	movs	r3, #16
    8d92:	e7c0      	b.n	8d16 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    8d94:	2320      	movs	r3, #32
    8d96:	e7be      	b.n	8d16 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    8d98:	200011f0 	.word	0x200011f0
    8d9c:	200011d8 	.word	0x200011d8
    8da0:	20001200 	.word	0x20001200

00008da4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    8da4:	2a04      	cmp	r2, #4
    8da6:	d804      	bhi.n	8db2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    8da8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    8dac:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    8db0:	4770      	bx	lr
  } else if (i < 11) {
    8db2:	2a0a      	cmp	r2, #10
    8db4:	d803      	bhi.n	8dbe <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    8db6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    8dba:	8890      	ldrh	r0, [r2, #4]
    8dbc:	4770      	bx	lr
  } else if (i < 13) {
    8dbe:	2a0c      	cmp	r2, #12
    8dc0:	d803      	bhi.n	8dca <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    8dc2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    8dc6:	88c8      	ldrh	r0, [r1, #6]
    8dc8:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    8dca:	2000      	movs	r0, #0
}
    8dcc:	4770      	bx	lr
    8dce:	bf00      	nop

00008dd0 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    8dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    8dd2:	7804      	ldrb	r4, [r0, #0]
    8dd4:	460e      	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    8dd6:	b17c      	cbz	r4, 8df8 <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    8dd8:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    8ddc:	4617      	mov	r7, r2
    8dde:	d007      	beq.n	8df0 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    8de0:	2a01      	cmp	r2, #1
    8de2:	d909      	bls.n	8df8 <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    8de4:	222f      	movs	r2, #47	; 0x2f
    name[1] = '\0';
    8de6:	2300      	movs	r3, #0
    return 1;
    8de8:	2001      	movs	r0, #1
    name[0] = '/';
    8dea:	700a      	strb	r2, [r1, #0]
    name[1] = '\0';
    8dec:	704b      	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    8dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    8df0:	4621      	mov	r1, r4
    8df2:	f7fe f947 	bl	7084 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8df6:	b918      	cbnz	r0, 8e00 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    8df8:	2300      	movs	r3, #0
  return 0;
    8dfa:	4618      	mov	r0, r3
  name[0] = '\0';
    8dfc:	7033      	strb	r3, [r6, #0]
}
    8dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    8e00:	4603      	mov	r3, r0
    8e02:	46a4      	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    8e04:	2108      	movs	r1, #8
    8e06:	e011      	b.n	8e2c <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    8e08:	7b02      	ldrb	r2, [r0, #12]
    8e0a:	4211      	tst	r1, r2
    8e0c:	d003      	beq.n	8e16 <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    8e0e:	f10e 0e20 	add.w	lr, lr, #32
    8e12:	fa5f fe8e 	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    8e16:	1c65      	adds	r5, r4, #1
    8e18:	42bd      	cmp	r5, r7
    8e1a:	d2ed      	bcs.n	8df8 <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    8e1c:	f10c 0c01 	add.w	ip, ip, #1
    name[j++] = c;
    8e20:	f806 e004 	strb.w	lr, [r6, r4]
    8e24:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    8e26:	f1bc 0f0c 	cmp.w	ip, #12
    8e2a:	d010      	beq.n	8e4e <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    8e2c:	f1bc 0f08 	cmp.w	ip, #8
    8e30:	d011      	beq.n	8e56 <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    8e32:	f813 eb01 	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    8e36:	f1ae 0241 	sub.w	r2, lr, #65	; 0x41
    8e3a:	2a19      	cmp	r2, #25
    8e3c:	d9e4      	bls.n	8e08 <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    8e3e:	f1be 0f20 	cmp.w	lr, #32
    8e42:	d1e8      	bne.n	8e16 <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    8e44:	f10c 0c01 	add.w	ip, ip, #1
    8e48:	f1bc 0f0c 	cmp.w	ip, #12
    8e4c:	d1ee      	bne.n	8e2c <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    8e4e:	2300      	movs	r3, #0
    8e50:	4620      	mov	r0, r4
    8e52:	5533      	strb	r3, [r6, r4]
}
    8e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    8e56:	781a      	ldrb	r2, [r3, #0]
    8e58:	2a20      	cmp	r2, #32
    8e5a:	d0f8      	beq.n	8e4e <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    8e5c:	2110      	movs	r1, #16
      c = '.';
    8e5e:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
    8e62:	e7d8      	b.n	8e16 <FatFile::getSFN(char*, unsigned int)+0x46>

00008e64 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    8e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    8e68:	2400      	movs	r4, #0
    8e6a:	b08b      	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    8e6c:	7803      	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    8e6e:	4689      	mov	r9, r1
    8e70:	9401      	str	r4, [sp, #4]
  if (!isOpen()) {
    8e72:	2b00      	cmp	r3, #0
    8e74:	d055      	beq.n	8f22 <FatFile::getName8(char*, unsigned int)+0xbe>
  if (!isLFN()) {
    8e76:	78c3      	ldrb	r3, [r0, #3]
    8e78:	4606      	mov	r6, r0
    8e7a:	2b00      	cmp	r3, #0
    8e7c:	d058      	beq.n	8f30 <FatFile::getName8(char*, unsigned int)+0xcc>
  if (!dir.openCluster(this)) {
    8e7e:	4601      	mov	r1, r0
    8e80:	a801      	add	r0, sp, #4
    8e82:	4690      	mov	r8, r2
    8e84:	f7fe fb1e 	bl	74c4 <FatFile::openCluster(FatFile*)>
    8e88:	2800      	cmp	r0, #0
    8e8a:	d04a      	beq.n	8f22 <FatFile::getName8(char*, unsigned int)+0xbe>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8e8c:	78f0      	ldrb	r0, [r6, #3]
    8e8e:	2800      	cmp	r0, #0
    8e90:	d043      	beq.n	8f1a <FatFile::getName8(char*, unsigned int)+0xb6>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    8e92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  char* str = name;
    8e96:	46cb      	mov	fp, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8e98:	f04f 0a01 	mov.w	sl, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    8e9c:	44c8      	add	r8, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    8e9e:	88b1      	ldrh	r1, [r6, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8ea0:	a801      	add	r0, sp, #4
    8ea2:	eba1 010a 	sub.w	r1, r1, sl
    8ea6:	b289      	uxth	r1, r1
    8ea8:	0149      	lsls	r1, r1, #5
    8eaa:	f7fe fd9f 	bl	79ec <FatFile::seekSet(unsigned long)>
    8eae:	b3c0      	cbz	r0, 8f22 <FatFile::getName8(char*, unsigned int)+0xbe>
    8eb0:	2100      	movs	r1, #0
    8eb2:	a801      	add	r0, sp, #4
    8eb4:	f7fe fc3a 	bl	772c <FatFile::readDirCache(bool)>
    if (!ldir) {
    8eb8:	b398      	cbz	r0, 8f22 <FatFile::getName8(char*, unsigned int)+0xbe>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8eba:	7ac3      	ldrb	r3, [r0, #11]
    8ebc:	2b0f      	cmp	r3, #15
    8ebe:	d130      	bne.n	8f22 <FatFile::getName8(char*, unsigned int)+0xbe>
    8ec0:	7803      	ldrb	r3, [r0, #0]
    8ec2:	fa5f f18a 	uxtb.w	r1, sl
    8ec6:	f003 031f 	and.w	r3, r3, #31
    8eca:	428b      	cmp	r3, r1
    8ecc:	d129      	bne.n	8f22 <FatFile::getName8(char*, unsigned int)+0xbe>
    8ece:	1c47      	adds	r7, r0, #1
    8ed0:	2500      	movs	r5, #0
  if (i < 5) {
    8ed2:	2d04      	cmp	r5, #4
    8ed4:	b2eb      	uxtb	r3, r5
    8ed6:	d83f      	bhi.n	8f58 <FatFile::getName8(char*, unsigned int)+0xf4>
    8ed8:	883b      	ldrh	r3, [r7, #0]
      if (hs) {
    8eda:	bb74      	cbnz	r4, 8f3a <FatFile::getName8(char*, unsigned int)+0xd6>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    8edc:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
    8ee0:	b289      	uxth	r1, r1
      } else if (!FsUtf::isSurrogate(c)) {
    8ee2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    8ee6:	d33e      	bcc.n	8f66 <FatFile::getName8(char*, unsigned int)+0x102>
        if (c == 0) {
    8ee8:	b1a3      	cbz	r3, 8f14 <FatFile::getName8(char*, unsigned int)+0xb0>
        cp = c;
    8eea:	4618      	mov	r0, r3
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    8eec:	4659      	mov	r1, fp
    8eee:	4642      	mov	r2, r8
    8ef0:	f002 ff52 	bl	bd98 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    8ef4:	4683      	mov	fp, r0
    8ef6:	b1a0      	cbz	r0, 8f22 <FatFile::getName8(char*, unsigned int)+0xbe>
    8ef8:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 13; i++) {
    8efa:	3501      	adds	r5, #1
    8efc:	3702      	adds	r7, #2
    8efe:	2d0d      	cmp	r5, #13
    8f00:	d1e7      	bne.n	8ed2 <FatFile::getName8(char*, unsigned int)+0x6e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8f02:	f10a 0a01 	add.w	sl, sl, #1
    8f06:	78f1      	ldrb	r1, [r6, #3]
    8f08:	fa5f f38a 	uxtb.w	r3, sl
    8f0c:	fa1f fa8a 	uxth.w	sl, sl
    8f10:	4299      	cmp	r1, r3
    8f12:	d2c4      	bcs.n	8e9e <FatFile::getName8(char*, unsigned int)+0x3a>
  return str - name;
    8f14:	ebab 0009 	sub.w	r0, fp, r9
    8f18:	46d9      	mov	r9, fp
  *str = '\0';
    8f1a:	2300      	movs	r3, #0
    8f1c:	f889 3000 	strb.w	r3, [r9]
  return str - name;
    8f20:	e003      	b.n	8f2a <FatFile::getName8(char*, unsigned int)+0xc6>
  *name = 0;
    8f22:	2300      	movs	r3, #0
  return 0;
    8f24:	4618      	mov	r0, r3
  *name = 0;
    8f26:	f889 3000 	strb.w	r3, [r9]
}
    8f2a:	b00b      	add	sp, #44	; 0x2c
    8f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return getSFN(name, size);
    8f30:	f7ff ff4e 	bl	8dd0 <FatFile::getSFN(char*, unsigned int)>
}
    8f34:	b00b      	add	sp, #44	; 0x2c
    8f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   /** Check for UTF-16 low surrogate.
   * \param[in] c UTF-16 unit..
   * \return true if c is a low surrogate else false.
   */
  inline bool isLowSurrogate(uint16_t c) {
    return 0XDC00 <= c && c <= 0XDFFF;
    8f3a:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    8f3e:	b289      	uxth	r1, r1
    8f40:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    8f44:	d2ed      	bcs.n	8f22 <FatFile::getName8(char*, unsigned int)+0xbe>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    8f46:	4a0a      	ldr	r2, [pc, #40]	; (8f70 <FatFile::getName8(char*, unsigned int)+0x10c>)
    8f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
    8f4c:	ea02 2084 	and.w	r0, r2, r4, lsl #10
    8f50:	4318      	orrs	r0, r3
    8f52:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
        hs = 0;
    8f56:	e7c9      	b.n	8eec <FatFile::getName8(char*, unsigned int)+0x88>
  } else if (i < 11) {
    8f58:	2b0a      	cmp	r3, #10
    8f5a:	bf94      	ite	ls
    8f5c:	f8b7 3003 	ldrhls.w	r3, [r7, #3]
    8f60:	f8b7 3005 	ldrhhi.w	r3, [r7, #5]
    return getLe16(ldir->unicode3 + 2*i - 22);
    8f64:	e7b9      	b.n	8eda <FatFile::getName8(char*, unsigned int)+0x76>
      } else if (FsUtf::isHighSurrogate(c)) {
    8f66:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    8f6a:	d2da      	bcs.n	8f22 <FatFile::getName8(char*, unsigned int)+0xbe>
    8f6c:	461c      	mov	r4, r3
    8f6e:	e7c4      	b.n	8efa <FatFile::getName8(char*, unsigned int)+0x96>
    8f70:	000ffc00 	.word	0x000ffc00

00008f74 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    8f74:	f7ff bf76 	b.w	8e64 <FatFile::getName8(char*, unsigned int)>

00008f78 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    8f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8f7c:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    8f80:	b1c3      	cbz	r3, 8fb4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    8f82:	4681      	mov	r9, r0
    8f84:	460c      	mov	r4, r1
    8f86:	4615      	mov	r5, r2
    8f88:	185e      	adds	r6, r3, r1
    8f8a:	e002      	b.n	8f92 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    8f8c:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    8f8e:	42b4      	cmp	r4, r6
    8f90:	d010      	beq.n	8fb4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    8f92:	f8d9 3000 	ldr.w	r3, [r9]
    8f96:	4621      	mov	r1, r4
    8f98:	462a      	mov	r2, r5
    8f9a:	4648      	mov	r0, r9
    8f9c:	691b      	ldr	r3, [r3, #16]
    8f9e:	4798      	blx	r3
    8fa0:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    8fa2:	463a      	mov	r2, r7
    8fa4:	4620      	mov	r0, r4
    8fa6:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    8fa8:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    8faa:	2b00      	cmp	r3, #0
    8fac:	d1ee      	bne.n	8f8c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    8fae:	4618      	mov	r0, r3
    8fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    8fb4:	2301      	movs	r3, #1
  }
    8fb6:	4618      	mov	r0, r3
    8fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008fbc <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    8fbc:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    8fbe:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    8fc0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    8fc4:	46a4      	mov	ip, r4
    8fc6:	bf28      	it	cs
    8fc8:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    8fcc:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    8fd0:	4281      	cmp	r1, r0
    8fd2:	d207      	bcs.n	8fe4 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    8fd4:	f831 3b02 	ldrh.w	r3, [r1], #2
    8fd8:	b913      	cbnz	r3, 8fe0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    8fda:	6853      	ldr	r3, [r2, #4]
    8fdc:	3301      	adds	r3, #1
    8fde:	6053      	str	r3, [r2, #4]
  while (p < e) {
    8fe0:	4288      	cmp	r0, r1
    8fe2:	d8f7      	bhi.n	8fd4 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
  }
  state->clusters_to_do -= n;
    8fe4:	eba4 040c 	sub.w	r4, r4, ip
    8fe8:	6014      	str	r4, [r2, #0]
}
    8fea:	f85d 4b04 	ldr.w	r4, [sp], #4
    8fee:	4770      	bx	lr

00008ff0 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    8ff0:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    8ff2:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    8ff4:	2c80      	cmp	r4, #128	; 0x80
    8ff6:	46a4      	mov	ip, r4
    8ff8:	bf28      	it	cs
    8ffa:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    8ffe:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    9002:	4281      	cmp	r1, r0
    9004:	d207      	bcs.n	9016 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
    9006:	f851 3b04 	ldr.w	r3, [r1], #4
    900a:	b913      	cbnz	r3, 9012 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    900c:	6853      	ldr	r3, [r2, #4]
    900e:	3301      	adds	r3, #1
    9010:	6053      	str	r3, [r2, #4]
  while (p < e) {
    9012:	4288      	cmp	r0, r1
    9014:	d8f7      	bhi.n	9006 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
  }
  state->clusters_to_do -= n;
    9016:	eba4 040c 	sub.w	r4, r4, ip
    901a:	6014      	str	r4, [r2, #0]
}
    901c:	f85d 4b04 	ldr.w	r4, [sp], #4
    9020:	4770      	bx	lr
    9022:	bf00      	nop

00009024 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    9024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    9028:	79c3      	ldrb	r3, [r0, #7]
    902a:	4604      	mov	r4, r0
    902c:	460d      	mov	r5, r1
    902e:	4617      	mov	r7, r2
  if (fatType() == 32) {
    9030:	2b20      	cmp	r3, #32
    9032:	d059      	beq.n	90e8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    9034:	2b10      	cmp	r3, #16
    9036:	d030      	beq.n	909a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    9038:	2b0c      	cmp	r3, #12
    903a:	d151      	bne.n	90e0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    903c:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    903e:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    9042:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9044:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    9048:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    904c:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    9050:	4648      	mov	r0, r9
    9052:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9054:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    9058:	f3c1 2146 	ubfx	r1, r1, #9, #7
    905c:	0952      	lsrs	r2, r2, #5
    905e:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    9062:	0052      	lsls	r2, r2, #1
    9064:	4641      	mov	r1, r8
    9066:	f002 fde3 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    906a:	2800      	cmp	r0, #0
    906c:	d038      	beq.n	90e0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    906e:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    9072:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    9074:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    9076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    907a:	d023      	beq.n	90c4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    907c:	4418      	add	r0, r3
    907e:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    9080:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    9082:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    9084:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    9088:	bf4c      	ite	mi
    908a:	091b      	lsrmi	r3, r3, #4
    908c:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    9090:	429a      	cmp	r2, r3
    9092:	d240      	bcs.n	9116 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    9094:	2000      	movs	r0, #0
}
    9096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    909a:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    909c:	f3c1 2107 	ubfx	r1, r1, #8, #8
    90a0:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    90a2:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    90a6:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    90aa:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    90ac:	fab2 f282 	clz	r2, r2
    90b0:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    90b2:	0052      	lsls	r2, r2, #1
    90b4:	f002 fdbc 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    90b8:	b190      	cbz	r0, 90e0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    90ba:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    90bc:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    90c0:	5b43      	ldrh	r3, [r0, r5]
    90c2:	e025      	b.n	9110 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    90c4:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    90c6:	f108 0101 	add.w	r1, r8, #1
    90ca:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    90cc:	f1a2 0202 	sub.w	r2, r2, #2
    90d0:	fab2 f282 	clz	r2, r2
    90d4:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    90d6:	0052      	lsls	r2, r2, #1
    90d8:	f002 fdaa 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    90dc:	2800      	cmp	r0, #0
    90de:	d1ce      	bne.n	907e <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    90e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    90e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    90e8:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    90ea:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    90ec:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    90f0:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    90f4:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    90f8:	fab2 f282 	clz	r2, r2
    90fc:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    90fe:	0052      	lsls	r2, r2, #1
    9100:	f002 fd96 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9104:	2800      	cmp	r0, #0
    9106:	d0eb      	beq.n	90e0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    9108:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    910a:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    910e:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    9110:	69e2      	ldr	r2, [r4, #28]
    9112:	429a      	cmp	r2, r3
    9114:	d3be      	bcc.n	9094 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    9116:	2001      	movs	r0, #1
  *value = next;
    9118:	603b      	str	r3, [r7, #0]
}
    911a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    911e:	bf00      	nop

00009120 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    9120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    9124:	79c3      	ldrb	r3, [r0, #7]
    9126:	4605      	mov	r5, r0
    9128:	460c      	mov	r4, r1
    912a:	4616      	mov	r6, r2
  if (fatType() == 32) {
    912c:	2b20      	cmp	r3, #32
    912e:	d048      	beq.n	91c2 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    9130:	2b10      	cmp	r3, #16
    9132:	d02d      	beq.n	9190 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    9134:	2b0c      	cmp	r3, #12
    9136:	d141      	bne.n	91bc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    9138:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    913c:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    913e:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    9142:	fa11 f184 	uxtah	r1, r1, r4
    9146:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    914a:	f3c1 2146 	ubfx	r1, r1, #9, #7
    914e:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9150:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    9152:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9154:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9156:	4639      	mov	r1, r7
    9158:	bf14      	ite	ne
    915a:	2201      	movne	r2, #1
    915c:	2203      	moveq	r2, #3
    915e:	f002 fd67 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9162:	b358      	cbz	r0, 91bc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    9164:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    9168:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    916c:	d03f      	beq.n	91ee <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    916e:	5cc2      	ldrb	r2, [r0, r3]
    9170:	f002 020f 	and.w	r2, r2, #15
    9174:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    9178:	54c2      	strb	r2, [r0, r3]
    index++;
    917a:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    917c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9180:	d03a      	beq.n	91f8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    9182:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    9186:	4403      	add	r3, r0
    return true;
    9188:	2001      	movs	r0, #1
    pc[index] = tmp;
    918a:	701a      	strb	r2, [r3, #0]
}
    918c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9190:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    9192:	f3c1 2107 	ubfx	r1, r1, #8, #8
    9196:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9198:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    919c:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    919e:	4419      	add	r1, r3
    91a0:	bf14      	ite	ne
    91a2:	2201      	movne	r2, #1
    91a4:	2203      	moveq	r2, #3
    91a6:	f002 fd43 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    91aa:	4603      	mov	r3, r0
    91ac:	b130      	cbz	r0, 91bc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    91ae:	0064      	lsls	r4, r4, #1
    return true;
    91b0:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    91b2:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    91b6:	531e      	strh	r6, [r3, r4]
}
    91b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    91bc:	2000      	movs	r0, #0
}
    91be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    91c2:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    91c4:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    91c6:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    91ca:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    91cc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    91d0:	bf14      	ite	ne
    91d2:	2201      	movne	r2, #1
    91d4:	2203      	moveq	r2, #3
    91d6:	f002 fd2b 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    91da:	4603      	mov	r3, r0
    91dc:	2800      	cmp	r0, #0
    91de:	d0ed      	beq.n	91bc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    91e0:	00a4      	lsls	r4, r4, #2
    return true;
    91e2:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    91e4:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    91e8:	511e      	str	r6, [r3, r4]
}
    91ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    91ee:	54c6      	strb	r6, [r0, r3]
    index++;
    91f0:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    91f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    91f6:	d115      	bne.n	9224 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    91f8:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    91fa:	1c79      	adds	r1, r7, #1
    91fc:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    91fe:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9200:	bf14      	ite	ne
    9202:	2201      	movne	r2, #1
    9204:	2203      	moveq	r2, #3
    9206:	f002 fd13 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    920a:	4603      	mov	r3, r0
    920c:	2800      	cmp	r0, #0
    920e:	d0d5      	beq.n	91bc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    9210:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    9214:	2c00      	cmp	r4, #0
    9216:	d1b7      	bne.n	9188 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    9218:	7819      	ldrb	r1, [r3, #0]
    921a:	f021 010f 	bic.w	r1, r1, #15
    921e:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    9222:	e7b1      	b.n	9188 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    9224:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    9228:	4403      	add	r3, r0
    922a:	e7f5      	b.n	9218 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

0000922c <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    922c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    9230:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    9232:	b082      	sub	sp, #8
    9234:	4605      	mov	r5, r0
    9236:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    9238:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    923a:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    923c:	d340      	bcc.n	92c0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    923e:	2701      	movs	r7, #1
    find++;
    9240:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    9242:	69eb      	ldr	r3, [r5, #28]
    9244:	aa01      	add	r2, sp, #4
    9246:	4628      	mov	r0, r5
    9248:	42a3      	cmp	r3, r4
    924a:	d205      	bcs.n	9258 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    924c:	bb9f      	cbnz	r7, 92b6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    924e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    9250:	2701      	movs	r7, #1
    find++;
    9252:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    9254:	42a3      	cmp	r3, r4
    9256:	d32e      	bcc.n	92b6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    9258:	42a6      	cmp	r6, r4
    925a:	bf18      	it	ne
    925c:	2c01      	cmpne	r4, #1
    925e:	4621      	mov	r1, r4
    9260:	d929      	bls.n	92b6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    9262:	f7ff fedf 	bl	9024 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    9266:	2800      	cmp	r0, #0
    9268:	db25      	blt.n	92b6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    926a:	d0e9      	beq.n	9240 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    926c:	9b01      	ldr	r3, [sp, #4]
    926e:	2b00      	cmp	r3, #0
    9270:	d1e6      	bne.n	9240 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    9272:	b107      	cbz	r7, 9276 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    9274:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    9276:	69eb      	ldr	r3, [r5, #28]
    9278:	42a3      	cmp	r3, r4
    927a:	d31c      	bcc.n	92b6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    927c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    9280:	4621      	mov	r1, r4
    9282:	4628      	mov	r0, r5
    9284:	f7ff ff4c 	bl	9120 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    9288:	4607      	mov	r7, r0
    928a:	b1a0      	cbz	r0, 92b6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    928c:	b93e      	cbnz	r6, 929e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    928e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9290:	2b00      	cmp	r3, #0
    9292:	db01      	blt.n	9298 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    9294:	3b01      	subs	r3, #1
    9296:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    9298:	f8c8 4000 	str.w	r4, [r8]
  return true;
    929c:	e00c      	b.n	92b8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    929e:	2e01      	cmp	r6, #1
    92a0:	d009      	beq.n	92b6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    92a2:	69eb      	ldr	r3, [r5, #28]
    92a4:	429e      	cmp	r6, r3
    92a6:	d806      	bhi.n	92b6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    92a8:	4631      	mov	r1, r6
    92aa:	4622      	mov	r2, r4
    92ac:	4628      	mov	r0, r5
    92ae:	f7ff ff37 	bl	9120 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    92b2:	2800      	cmp	r0, #0
    92b4:	d1eb      	bne.n	928e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    92b6:	2700      	movs	r7, #0
}
    92b8:	4638      	mov	r0, r7
    92ba:	b002      	add	sp, #8
    92bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92c0:	460c      	mov	r4, r1
    setStart = false;
    92c2:	2700      	movs	r7, #0
    92c4:	e7bc      	b.n	9240 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    92c6:	bf00      	nop

000092c8 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    92c8:	2901      	cmp	r1, #1
    92ca:	d90c      	bls.n	92e6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    92cc:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    92ce:	69c4      	ldr	r4, [r0, #28]
    92d0:	428c      	cmp	r4, r1
    92d2:	d303      	bcc.n	92dc <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    92d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    92d8:	f7ff bea4 	b.w	9024 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    92dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    92e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    92e4:	4770      	bx	lr
    92e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    92ea:	4770      	bx	lr

000092ec <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    92ec:	2901      	cmp	r1, #1
    92ee:	d90b      	bls.n	9308 <FatPartition::fatPut(unsigned long, unsigned long)+0x1c>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    92f0:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    92f2:	69c4      	ldr	r4, [r0, #28]
    92f4:	428c      	cmp	r4, r1
    92f6:	d303      	bcc.n	9300 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
}
    92f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    92fc:	f7ff bf10 	b.w	9120 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    9300:	2000      	movs	r0, #0
    9302:	f85d 4b04 	ldr.w	r4, [sp], #4
    9306:	4770      	bx	lr
    9308:	2000      	movs	r0, #0
    930a:	4770      	bx	lr

0000930c <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    930c:	b570      	push	{r4, r5, r6, lr}
    930e:	4605      	mov	r5, r0
    9310:	b082      	sub	sp, #8
    9312:	460c      	mov	r4, r1
    9314:	e01d      	b.n	9352 <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    9316:	69eb      	ldr	r3, [r5, #28]
    9318:	429c      	cmp	r4, r3
    931a:	d81f      	bhi.n	935c <FatPartition::freeChain(unsigned long)+0x50>
    931c:	f7ff fe82 	bl	9024 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    9320:	4606      	mov	r6, r0
    if (fg < 0) {
    9322:	4621      	mov	r1, r4
    9324:	2200      	movs	r2, #0
    9326:	2e00      	cmp	r6, #0
    9328:	4628      	mov	r0, r5
    932a:	db17      	blt.n	935c <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    932c:	69eb      	ldr	r3, [r5, #28]
    932e:	429c      	cmp	r4, r3
    9330:	d814      	bhi.n	935c <FatPartition::freeChain(unsigned long)+0x50>
    9332:	f7ff fef5 	bl	9120 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    9336:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    9338:	b180      	cbz	r0, 935c <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    933a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    933c:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    933e:	f103 0301 	add.w	r3, r3, #1
    9342:	bfa8      	it	ge
    9344:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    9346:	68eb      	ldr	r3, [r5, #12]
    9348:	42a3      	cmp	r3, r4
    cluster = next;
    934a:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    934c:	bf88      	it	hi
    934e:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    9350:	b12e      	cbz	r6, 935e <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    9352:	2c01      	cmp	r4, #1
    9354:	4621      	mov	r1, r4
    9356:	aa01      	add	r2, sp, #4
    9358:	4628      	mov	r0, r5
    935a:	d8dc      	bhi.n	9316 <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    935c:	2000      	movs	r0, #0
}
    935e:	b002      	add	sp, #8
    9360:	bd70      	pop	{r4, r5, r6, pc}
    9362:	bf00      	nop

00009364 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    9364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9368:	4606      	mov	r6, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    936a:	6a40      	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    936c:	b084      	sub	sp, #16
  if (m_freeClusterCount >= 0) {
    936e:	2800      	cmp	r0, #0
    9370:	da1b      	bge.n	93aa <FatPartition::freeClusterCount()+0x46>
    return m_fatType;
    9372:	79f2      	ldrb	r2, [r6, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    9374:	2a0c      	cmp	r2, #12
    9376:	d11b      	bne.n	93b0 <FatPartition::freeClusterCount()+0x4c>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    9378:	69f7      	ldr	r7, [r6, #28]
    937a:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    937c:	2b02      	cmp	r3, #2
    937e:	f240 80cd 	bls.w	951c <FatPartition::freeClusterCount()+0x1b8>
    9382:	2402      	movs	r4, #2
    uint32_t free = 0;
    9384:	2500      	movs	r5, #0
    9386:	4621      	mov	r1, r4
    9388:	aa02      	add	r2, sp, #8
    938a:	4630      	mov	r0, r6
    938c:	f7ff fe4a 	bl	9024 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
    9390:	2800      	cmp	r0, #0
    for (unsigned i = 2; i < todo; i++) {
    9392:	f104 0301 	add.w	r3, r4, #1
      if (fg < 0) {
    9396:	db06      	blt.n	93a6 <FatPartition::freeClusterCount()+0x42>
        DBG_FAIL_MACRO;
        return -1;
      }
      if (fg && c == 0) {
    9398:	d157      	bne.n	944a <FatPartition::freeClusterCount()+0xe6>
    for (unsigned i = 2; i < todo; i++) {
    939a:	42a7      	cmp	r7, r4
    939c:	461c      	mov	r4, r3
    939e:	d05c      	beq.n	945a <FatPartition::freeClusterCount()+0xf6>
  if (cluster < 2 || cluster > m_lastCluster) {
    93a0:	69f2      	ldr	r2, [r6, #28]
    93a2:	4293      	cmp	r3, r2
    93a4:	d9ef      	bls.n	9386 <FatPartition::freeClusterCount()+0x22>
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
    93a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
  }

  setFreeClusterCount(state.free_count);
  return state.free_count;
}
    93aa:	b004      	add	sp, #16
    93ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  state.clusters_to_do = m_lastCluster + 1;
    93b0:	69f1      	ldr	r1, [r6, #28]
  state.free_count = 0;
    93b2:	2000      	movs	r0, #0
    return m_status & CACHE_STATUS_DIRTY;
    93b4:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
    93b8:	3101      	adds	r1, #1
  num_sectors = m_sectorsPerFat;
    93ba:	6934      	ldr	r4, [r6, #16]
    if (isDirty() && !sync()) {
    93bc:	07db      	lsls	r3, r3, #31
  state.clusters_to_do = m_lastCluster + 1;
    93be:	e9cd 1002 	strd	r1, r0, [sp, #8]
    93c2:	f100 8085 	bmi.w	94d0 <FatPartition::freeClusterCount()+0x16c>
    m_status = 0;
    93c6:	2100      	movs	r1, #0
    m_sector = 0XFFFFFFFF;
    93c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (fatType() == FAT_TYPE_FAT32) {
    93cc:	2a20      	cmp	r2, #32
    return m_buffer;
    93ce:	f506 7712 	add.w	r7, r6, #584	; 0x248
    m_status = 0;
    93d2:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    93d6:	f8c6 3244 	str.w	r3, [r6, #580]	; 0x244
    93da:	d042      	beq.n	9462 <FatPartition::freeClusterCount()+0xfe>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    93dc:	f8d6 8000 	ldr.w	r8, [r6]
    93e0:	4b4f      	ldr	r3, [pc, #316]	; (9520 <FatPartition::freeClusterCount()+0x1bc>)
    93e2:	f8d8 2000 	ldr.w	r2, [r8]
    93e6:	f8d6 a018 	ldr.w	sl, [r6, #24]
    93ea:	6995      	ldr	r5, [r2, #24]
    93ec:	429d      	cmp	r5, r3
    93ee:	d178      	bne.n	94e2 <FatPartition::freeClusterCount()+0x17e>
     for (size_t i = 0; i < ns; i++) {
    93f0:	2c00      	cmp	r4, #0
    93f2:	f000 8082 	beq.w	94fa <FatPartition::freeClusterCount()+0x196>
    93f6:	eb0a 0904 	add.w	r9, sl, r4
       if (!readSector(sector + i, dst)) return false;
    93fa:	6913      	ldr	r3, [r2, #16]
    93fc:	4651      	mov	r1, sl
    93fe:	463a      	mov	r2, r7
    9400:	4640      	mov	r0, r8
    9402:	4798      	blx	r3
    9404:	2800      	cmp	r0, #0
    9406:	d0ce      	beq.n	93a6 <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    9408:	9902      	ldr	r1, [sp, #8]
  if (n > 256) n = 256;
    940a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    940e:	468e      	mov	lr, r1
    9410:	bf28      	it	cs
    9412:	f44f 7e80 	movcs.w	lr, #256	; 0x100
  uint16_t *e = p + n;
    9416:	eb07 0c4e 	add.w	ip, r7, lr, lsl #1
  while (p < e) {
    941a:	45bc      	cmp	ip, r7
    941c:	d90b      	bls.n	9436 <FatPartition::freeClusterCount()+0xd2>
    941e:	9d03      	ldr	r5, [sp, #12]
    9420:	463b      	mov	r3, r7
    9422:	2200      	movs	r2, #0
    if (*p++ == 0) state->free_count++;
    9424:	f833 4b02 	ldrh.w	r4, [r3], #2
    9428:	b90c      	cbnz	r4, 942e <FatPartition::freeClusterCount()+0xca>
    942a:	3501      	adds	r5, #1
    942c:	4602      	mov	r2, r0
  while (p < e) {
    942e:	459c      	cmp	ip, r3
    9430:	d8f8      	bhi.n	9424 <FatPartition::freeClusterCount()+0xc0>
    9432:	b102      	cbz	r2, 9436 <FatPartition::freeClusterCount()+0xd2>
    9434:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    9436:	f10a 0a01 	add.w	sl, sl, #1
  state->clusters_to_do -= n;
    943a:	eba1 010e 	sub.w	r1, r1, lr
    943e:	45d1      	cmp	r9, sl
    9440:	9102      	str	r1, [sp, #8]
    9442:	d05a      	beq.n	94fa <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    9444:	f8d8 2000 	ldr.w	r2, [r8]
    9448:	e7d7      	b.n	93fa <FatPartition::freeClusterCount()+0x96>
      if (fg && c == 0) {
    944a:	9a02      	ldr	r2, [sp, #8]
    944c:	2a00      	cmp	r2, #0
    944e:	d1a4      	bne.n	939a <FatPartition::freeClusterCount()+0x36>
    for (unsigned i = 2; i < todo; i++) {
    9450:	42a7      	cmp	r7, r4
        free++;
    9452:	f105 0501 	add.w	r5, r5, #1
    for (unsigned i = 2; i < todo; i++) {
    9456:	461c      	mov	r4, r3
    9458:	d1a2      	bne.n	93a0 <FatPartition::freeClusterCount()+0x3c>
    return free;
    945a:	4628      	mov	r0, r5
}
    945c:	b004      	add	sp, #16
    945e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    9462:	f8d6 a000 	ldr.w	sl, [r6]
    9466:	4b2e      	ldr	r3, [pc, #184]	; (9520 <FatPartition::freeClusterCount()+0x1bc>)
    9468:	f8da 2000 	ldr.w	r2, [sl]
    946c:	f8d6 9018 	ldr.w	r9, [r6, #24]
    9470:	6995      	ldr	r5, [r2, #24]
    9472:	429d      	cmp	r5, r3
    9474:	d146      	bne.n	9504 <FatPartition::freeClusterCount()+0x1a0>
     for (size_t i = 0; i < ns; i++) {
    9476:	2c00      	cmp	r4, #0
    9478:	d03f      	beq.n	94fa <FatPartition::freeClusterCount()+0x196>
    947a:	eb09 0804 	add.w	r8, r9, r4
       if (!readSector(sector + i, dst)) return false;
    947e:	6913      	ldr	r3, [r2, #16]
    9480:	4649      	mov	r1, r9
    9482:	463a      	mov	r2, r7
    9484:	4650      	mov	r0, sl
    9486:	4798      	blx	r3
    9488:	2800      	cmp	r0, #0
    948a:	d08c      	beq.n	93a6 <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    948c:	f8dd c008 	ldr.w	ip, [sp, #8]
  if (n > 128) n = 128;
    9490:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    9494:	46e6      	mov	lr, ip
    9496:	bf28      	it	cs
    9498:	f04f 0e80 	movcs.w	lr, #128	; 0x80
  uint32_t *e = p + n;
    949c:	eb07 028e 	add.w	r2, r7, lr, lsl #2
  while (p < e) {
    94a0:	42ba      	cmp	r2, r7
    94a2:	d90b      	bls.n	94bc <FatPartition::freeClusterCount()+0x158>
    94a4:	9d03      	ldr	r5, [sp, #12]
    94a6:	463b      	mov	r3, r7
    94a8:	2100      	movs	r1, #0
    if (*p++ == 0) state->free_count++;
    94aa:	f853 4b04 	ldr.w	r4, [r3], #4
    94ae:	b90c      	cbnz	r4, 94b4 <FatPartition::freeClusterCount()+0x150>
    94b0:	3501      	adds	r5, #1
    94b2:	4601      	mov	r1, r0
  while (p < e) {
    94b4:	429a      	cmp	r2, r3
    94b6:	d8f8      	bhi.n	94aa <FatPartition::freeClusterCount()+0x146>
    94b8:	b101      	cbz	r1, 94bc <FatPartition::freeClusterCount()+0x158>
    94ba:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    94bc:	f109 0901 	add.w	r9, r9, #1
  state->clusters_to_do -= n;
    94c0:	ebac 030e 	sub.w	r3, ip, lr
    94c4:	45c8      	cmp	r8, r9
    94c6:	9302      	str	r3, [sp, #8]
    94c8:	d017      	beq.n	94fa <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    94ca:	f8da 2000 	ldr.w	r2, [sl]
    94ce:	e7d6      	b.n	947e <FatPartition::freeClusterCount()+0x11a>
    if (isDirty() && !sync()) {
    94d0:	f506 700e 	add.w	r0, r6, #568	; 0x238
    94d4:	f002 fb80 	bl	bbd8 <FsCache::sync()>
    94d8:	2800      	cmp	r0, #0
    94da:	f43f af64 	beq.w	93a6 <FatPartition::freeClusterCount()+0x42>
    94de:	79f2      	ldrb	r2, [r6, #7]
    94e0:	e771      	b.n	93c6 <FatPartition::freeClusterCount()+0x62>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    94e2:	4623      	mov	r3, r4
    94e4:	ac02      	add	r4, sp, #8
    94e6:	463a      	mov	r2, r7
    94e8:	4651      	mov	r1, sl
    94ea:	9401      	str	r4, [sp, #4]
    94ec:	4640      	mov	r0, r8
    94ee:	4c0d      	ldr	r4, [pc, #52]	; (9524 <FatPartition::freeClusterCount()+0x1c0>)
    94f0:	9400      	str	r4, [sp, #0]
    94f2:	47a8      	blx	r5
    94f4:	2800      	cmp	r0, #0
    94f6:	f43f af56 	beq.w	93a6 <FatPartition::freeClusterCount()+0x42>
  setFreeClusterCount(state.free_count);
    94fa:	9803      	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
    94fc:	6270      	str	r0, [r6, #36]	; 0x24
}
    94fe:	b004      	add	sp, #16
    9500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    9504:	4623      	mov	r3, r4
    9506:	ac02      	add	r4, sp, #8
    9508:	463a      	mov	r2, r7
    950a:	4649      	mov	r1, r9
    950c:	9401      	str	r4, [sp, #4]
    950e:	4650      	mov	r0, sl
    9510:	4c05      	ldr	r4, [pc, #20]	; (9528 <FatPartition::freeClusterCount()+0x1c4>)
    9512:	9400      	str	r4, [sp, #0]
    9514:	47a8      	blx	r5
    9516:	2800      	cmp	r0, #0
    9518:	d1ef      	bne.n	94fa <FatPartition::freeClusterCount()+0x196>
    951a:	e744      	b.n	93a6 <FatPartition::freeClusterCount()+0x42>
    for (unsigned i = 2; i < todo; i++) {
    951c:	2000      	movs	r0, #0
    951e:	e744      	b.n	93aa <FatPartition::freeClusterCount()+0x46>
    9520:	00008f79 	.word	0x00008f79
    9524:	00008fbd 	.word	0x00008fbd
    9528:	00008ff1 	.word	0x00008ff1

0000952c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    952c:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    952e:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    9530:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    9532:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    9534:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    9536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  m_cache.init(dev);
    953a:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    953e:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    9540:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    9542:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    9544:	62e1      	str	r1, [r4, #44]	; 0x2c
    9546:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    954a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    954e:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    9552:	6362      	str	r2, [r4, #52]	; 0x34
    9554:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    9558:	b1cd      	cbz	r5, 958e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    955a:	2d04      	cmp	r5, #4
    955c:	d901      	bls.n	9562 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    955e:	2000      	movs	r0, #0
}
    9560:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    9562:	461a      	mov	r2, r3
    9564:	4619      	mov	r1, r3
    9566:	4630      	mov	r0, r6
    9568:	f002 fb62 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    956c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    9570:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    9574:	442b      	add	r3, r5
    9576:	011d      	lsls	r5, r3, #4
    9578:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    957c:	2800      	cmp	r0, #0
    957e:	d0ee      	beq.n	955e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    9580:	7919      	ldrb	r1, [r3, #4]
    9582:	2900      	cmp	r1, #0
    9584:	d0eb      	beq.n	955e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    9586:	5d52      	ldrb	r2, [r2, r5]
    9588:	0652      	lsls	r2, r2, #25
    958a:	d1e8      	bne.n	955e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    958c:	689d      	ldr	r5, [r3, #8]
    958e:	2200      	movs	r2, #0
    9590:	4629      	mov	r1, r5
    9592:	4630      	mov	r0, r6
    9594:	f002 fb4c 	bl	bc30 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    9598:	2800      	cmp	r0, #0
    959a:	d0e0      	beq.n	955e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    959c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    95a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    95a4:	d1db      	bne.n	955e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    95a6:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    95a8:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    95aa:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    95ac:	2a01      	cmp	r2, #1
    95ae:	d8d6      	bhi.n	955e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    95b0:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    95b2:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    95b4:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    95b6:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    95b8:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    95ba:	f04f 0300 	mov.w	r3, #0
    95be:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    95c0:	d044      	beq.n	964c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    95c2:	2201      	movs	r2, #1
    95c4:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    95c6:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    95c8:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    95ca:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    95cc:	4291      	cmp	r1, r2
    95ce:	d004      	beq.n	95da <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    95d0:	2b08      	cmp	r3, #8
    95d2:	d1f7      	bne.n	95c4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    95d4:	2000      	movs	r0, #0
    95d6:	71a3      	strb	r3, [r4, #6]
}
    95d8:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    95da:	461e      	mov	r6, r3
    95dc:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    95de:	8ac1      	ldrh	r1, [r0, #22]
    95e0:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    95e2:	b909      	cbnz	r1, 95e8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    95e4:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    95e6:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    95e8:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    95ea:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    95ee:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    95f0:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    95f2:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    95f4:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    95f6:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    95fa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    95fe:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    9602:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    9606:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    9608:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    960c:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    960e:	b902      	cbnz	r2, 9612 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    9610:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    9612:	1aed      	subs	r5, r5, r3
    9614:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    9616:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    9618:	1c5a      	adds	r2, r3, #1
    961a:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    961c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9620:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    9622:	f640 72f4 	movw	r2, #4084	; 0xff4
    9626:	4293      	cmp	r3, r2
    9628:	d90c      	bls.n	9644 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    962a:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    962e:	4293      	cmp	r3, r2
    9630:	d90a      	bls.n	9648 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    9632:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    9634:	2320      	movs	r3, #32
    9636:	6222      	str	r2, [r4, #32]
  return true;
    9638:	2001      	movs	r0, #1
    m_fatType = 12;
    963a:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    963c:	6321      	str	r1, [r4, #48]	; 0x30
    963e:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    9642:	bd70      	pop	{r4, r5, r6, pc}
    9644:	230c      	movs	r3, #12
    9646:	e7f7      	b.n	9638 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    9648:	2310      	movs	r3, #16
    964a:	e7f5      	b.n	9638 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    964c:	461e      	mov	r6, r3
    964e:	e7c6      	b.n	95de <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

00009650 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    9650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9652:	2600      	movs	r6, #0
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    9654:	6b8f      	ldr	r7, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    9656:	460d      	mov	r5, r1
    9658:	4604      	mov	r4, r0
    965a:	e9c0 660e 	strd	r6, r6, [r0, #56]	; 0x38
  if (from.m_fFile) {
    965e:	b19f      	cbz	r7, 9688 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    9660:	4601      	mov	r1, r0
    9662:	2024      	movs	r0, #36	; 0x24
    9664:	f000 f8dc 	bl	9820 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    9668:	8006      	strh	r6, [r0, #0]
    966a:	7086      	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    966c:	4684      	mov	ip, r0
    966e:	6bad      	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
    9670:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    9672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9674:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    967a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    967e:	682b      	ldr	r3, [r5, #0]
    9680:	f8cc 3000 	str.w	r3, [ip]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    9684:	4620      	mov	r0, r4
    9686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
    9688:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    968a:	2b00      	cmp	r3, #0
    968c:	d0fa      	beq.n	9684 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    968e:	4601      	mov	r1, r0
    9690:	2038      	movs	r0, #56	; 0x38
    9692:	f000 f8c5 	bl	9820 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    9696:	f880 7031 	strb.w	r7, [r0, #49]	; 0x31
    969a:	8647      	strh	r7, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    969c:	4602      	mov	r2, r0
    969e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
    96a0:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    96a2:	f103 0730 	add.w	r7, r3, #48	; 0x30
    96a6:	681e      	ldr	r6, [r3, #0]
    96a8:	3310      	adds	r3, #16
    96aa:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    96ae:	3210      	adds	r2, #16
    96b0:	f853 0c08 	ldr.w	r0, [r3, #-8]
    96b4:	f853 1c04 	ldr.w	r1, [r3, #-4]
    96b8:	42bb      	cmp	r3, r7
    96ba:	f842 6c10 	str.w	r6, [r2, #-16]
    96be:	f842 5c0c 	str.w	r5, [r2, #-12]
    96c2:	f842 0c08 	str.w	r0, [r2, #-8]
    96c6:	f842 1c04 	str.w	r1, [r2, #-4]
    96ca:	d1ec      	bne.n	96a6 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x56>
    96cc:	681b      	ldr	r3, [r3, #0]
}
    96ce:	4620      	mov	r0, r4
    *m_xFile = *from.m_xFile;
    96d0:	6013      	str	r3, [r2, #0]
}
    96d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000096d4 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    96d4:	b510      	push	{r4, lr}
    96d6:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    96d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
    96da:	b110      	cbz	r0, 96e2 <FsBaseFile::close()+0xe>
    96dc:	f7fd fce2 	bl	70a4 <FatFile::close()>
    96e0:	b930      	cbnz	r0, 96f0 <FsBaseFile::close()+0x1c>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    96e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    96e4:	b110      	cbz	r0, 96ec <FsBaseFile::close()+0x18>
    96e6:	f7fb fbcf 	bl	4e88 <ExFatFile::close()>
    96ea:	b920      	cbnz	r0, 96f6 <FsBaseFile::close()+0x22>
    m_xFile = nullptr;
    return true;
  }
  return false;
    96ec:	2000      	movs	r0, #0
}
    96ee:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    96f0:	2300      	movs	r3, #0
    96f2:	63a3      	str	r3, [r4, #56]	; 0x38
}
    96f4:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    96f6:	2300      	movs	r3, #0
    96f8:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    96fa:	bd10      	pop	{r4, pc}

000096fc <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    96fc:	2900      	cmp	r1, #0
    96fe:	d052      	beq.n	97a6 <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    9700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9704:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    9706:	6b80      	ldr	r0, [r0, #56]	; 0x38
    9708:	460d      	mov	r5, r1
    970a:	4617      	mov	r7, r2
    970c:	461e      	mov	r6, r3
    970e:	b110      	cbz	r0, 9716 <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    9710:	f7fd fcc8 	bl	70a4 <FatFile::close()>
    9714:	bba0      	cbnz	r0, 9780 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    9716:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9718:	b110      	cbz	r0, 9720 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    971a:	f7fb fbb5 	bl	4e88 <ExFatFile::close()>
    971e:	bbb8      	cbnz	r0, 9790 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
    return false;
  }
  close();
  if (vol->m_fVol) {
    9720:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    9724:	f1b8 0f00 	cmp.w	r8, #0
    9728:	d011      	beq.n	974e <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    972a:	4621      	mov	r1, r4
    972c:	2024      	movs	r0, #36	; 0x24
    972e:	f000 f877 	bl	9820 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    9732:	4633      	mov	r3, r6
    9734:	2600      	movs	r6, #0
    9736:	463a      	mov	r2, r7
    9738:	8006      	strh	r6, [r0, #0]
    973a:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    973c:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    973e:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    9742:	f7fd feb7 	bl	74b4 <FatFile::open(FatVolume*, char const*, int)>
    9746:	bb58      	cbnz	r0, 97a0 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
      return true;
    }
    m_fFile = nullptr;
    9748:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    974a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    974e:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    9752:	b193      	cbz	r3, 977a <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    9754:	4621      	mov	r1, r4
    9756:	2038      	movs	r0, #56	; 0x38
    9758:	f000 f862 	bl	9820 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    975c:	4633      	mov	r3, r6
    975e:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    9762:	463a      	mov	r2, r7
    9764:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    9768:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    976a:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    976e:	f7fb ffbf 	bl	56f0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    9772:	b9a8      	cbnz	r0, 97a0 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    9774:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    9776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    977a:	2000      	movs	r0, #0
}
    977c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    9780:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    9782:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    9786:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    9788:	f1b8 0f00 	cmp.w	r8, #0
    978c:	d1cd      	bne.n	972a <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    978e:	e7de      	b.n	974e <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    9790:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    9792:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    9796:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    9798:	f1b8 0f00 	cmp.w	r8, #0
    979c:	d1c5      	bne.n	972a <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    979e:	e7d6      	b.n	974e <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    97a0:	2001      	movs	r0, #1
}
    97a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    97a6:	2000      	movs	r0, #0
}
    97a8:	4770      	bx	lr
    97aa:	bf00      	nop

000097ac <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    97ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97ae:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    97b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    97b2:	460d      	mov	r5, r1
    97b4:	4617      	mov	r7, r2
  if (m_fFile && m_fFile->close()) {
    97b6:	b110      	cbz	r0, 97be <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    97b8:	f7fd fc74 	bl	70a4 <FatFile::close()>
    97bc:	bb38      	cbnz	r0, 980e <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
  if (m_xFile && m_xFile->close()) {
    97be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    97c0:	b110      	cbz	r0, 97c8 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    97c2:	f7fb fb61 	bl	4e88 <ExFatFile::close()>
    97c6:	bb38      	cbnz	r0, 9818 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
  close();
  if (dir->m_fFile) {
    97c8:	6bae      	ldr	r6, [r5, #56]	; 0x38
    97ca:	b176      	cbz	r6, 97ea <FsBaseFile::openNext(FsBaseFile*, int)+0x3e>
    m_fFile = new (m_fileMem) FatFile;
    97cc:	4621      	mov	r1, r4
    97ce:	2024      	movs	r0, #36	; 0x24
    97d0:	f000 f826 	bl	9820 <operator new(unsigned int, unsigned long*)>
    97d4:	2100      	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    97d6:	463a      	mov	r2, r7
    97d8:	8001      	strh	r1, [r0, #0]
    97da:	7081      	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    97dc:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    97de:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    97e0:	f7fe f9ce 	bl	7b80 <FatFile::openNext(FatFile*, int)>
    97e4:	b988      	cbnz	r0, 980a <FsBaseFile::openNext(FsBaseFile*, int)+0x5e>
      return true;
    }
    m_fFile = nullptr;
    97e6:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    97e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    97ea:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    97ec:	2800      	cmp	r0, #0
    97ee:	d0fb      	beq.n	97e8 <FsBaseFile::openNext(FsBaseFile*, int)+0x3c>
    m_xFile = new (m_fileMem) ExFatFile;
    97f0:	4621      	mov	r1, r4
    97f2:	2038      	movs	r0, #56	; 0x38
    97f4:	f000 f814 	bl	9820 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    97f8:	463a      	mov	r2, r7
    97fa:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    97fe:	8646      	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    9800:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    9802:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    9804:	f7fb ff7c 	bl	5700 <ExFatFile::openNext(ExFatFile*, int)>
    9808:	b120      	cbz	r0, 9814 <FsBaseFile::openNext(FsBaseFile*, int)+0x68>
      return true;
    980a:	2001      	movs	r0, #1
}
    980c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
    980e:	2300      	movs	r3, #0
    9810:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    9812:	e7d9      	b.n	97c8 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    m_xFile = nullptr;
    9814:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    9816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_xFile = nullptr;
    9818:	2300      	movs	r3, #0
    981a:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    981c:	e7d4      	b.n	97c8 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    981e:	bf00      	nop

00009820 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    9820:	4608      	mov	r0, r1
    9822:	4770      	bx	lr

00009824 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    9824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    9828:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    982a:	4604      	mov	r4, r0
    982c:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    982e:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    9832:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    9836:	4601      	mov	r1, r0
    9838:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    983c:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    983e:	f7ff ffef 	bl	9820 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    9842:	4642      	mov	r2, r8
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    9844:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    9848:	4605      	mov	r5, r0
    984a:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    984e:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    9852:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    9856:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    985a:	f7fd fae7 	bl	6e2c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    985e:	bba0      	cbnz	r0, 98ca <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    9860:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    9862:	4621      	mov	r1, r4
    9864:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    9868:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    986c:	f7ff ffd8 	bl	9820 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    9870:	2302      	movs	r3, #2
    9872:	71c6      	strb	r6, [r0, #7]
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    9874:	4642      	mov	r2, r8
    9876:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    987a:	4605      	mov	r5, r0
    987c:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    9880:	7203      	strb	r3, [r0, #8]
    9882:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    9886:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    988a:	f7ff fe4f 	bl	952c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    988e:	b938      	cbnz	r0, 98a0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    9890:	2300      	movs	r3, #0
    9892:	4a1a      	ldr	r2, [pc, #104]	; (98fc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    9894:	4618      	mov	r0, r3
  m_cwv = nullptr;
    9896:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    9898:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    989c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    98a0:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    98a4:	4630      	mov	r0, r6
    98a6:	f7fd fbfd 	bl	70a4 <FatFile::close()>
    return m_vwd.openRoot(this);
    98aa:	4629      	mov	r1, r5
    98ac:	4630      	mov	r0, r6
    98ae:	f7fd fe37 	bl	7520 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    98b2:	2800      	cmp	r0, #0
    98b4:	d0ec      	beq.n	9890 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    98b6:	4b12      	ldr	r3, [pc, #72]	; (9900 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    98b8:	681a      	ldr	r2, [r3, #0]
    98ba:	b9aa      	cbnz	r2, 98e8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    98bc:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    98be:	4b0f      	ldr	r3, [pc, #60]	; (98fc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    98c0:	b1af      	cbz	r7, 98ee <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    98c2:	2001      	movs	r0, #1
    m_cwv = this;
    98c4:	601c      	str	r4, [r3, #0]
}
    98c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    98ca:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    98ce:	4630      	mov	r0, r6
    98d0:	f7fb fada 	bl	4e88 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    98d4:	4629      	mov	r1, r5
    98d6:	4630      	mov	r0, r6
    98d8:	f7fb fb04 	bl	4ee4 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    98dc:	2800      	cmp	r0, #0
    98de:	d0bf      	beq.n	9860 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    98e0:	4b08      	ldr	r3, [pc, #32]	; (9904 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    98e2:	681a      	ldr	r2, [r3, #0]
    98e4:	2a00      	cmp	r2, #0
    98e6:	d0e9      	beq.n	98bc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    98e8:	4b04      	ldr	r3, [pc, #16]	; (98fc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    98ea:	2f00      	cmp	r7, #0
    98ec:	d1e9      	bne.n	98c2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    98ee:	681a      	ldr	r2, [r3, #0]
    98f0:	2a00      	cmp	r2, #0
    98f2:	d0e6      	beq.n	98c2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    98f4:	2001      	movs	r0, #1
}
    98f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98fa:	bf00      	nop
    98fc:	20004450 	.word	0x20004450
    9900:	20004454 	.word	0x20004454
    9904:	20004338 	.word	0x20004338

00009908 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    9908:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    990a:	2500      	movs	r5, #0
    990c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    9910:	4604      	mov	r4, r0
    9912:	6045      	str	r5, [r0, #4]
    9914:	7305      	strb	r5, [r0, #12]
    9916:	6086      	str	r6, [r0, #8]
  FsBaseFile() {}
    9918:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    991c:	4d03      	ldr	r5, [pc, #12]	; (992c <FsVolume::open(char const*, int)+0x24>)
    991e:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    9922:	f7ff feeb 	bl	96fc <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    9926:	4620      	mov	r0, r4
    9928:	bd70      	pop	{r4, r5, r6, pc}
    992a:	bf00      	nop
    992c:	2000148c 	.word	0x2000148c

00009930 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    9930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9934:	4770      	bx	lr
    9936:	bf00      	nop

00009938 <SharedSpiCard::errorCode() const>:
  }
    9938:	7c40      	ldrb	r0, [r0, #17]
    993a:	4770      	bx	lr

0000993c <SharedSpiCard::errorData() const>:
  }
    993c:	7d00      	ldrb	r0, [r0, #20]
    993e:	4770      	bx	lr

00009940 <SharedSpiCard::type() const>:
  }
    9940:	7d40      	ldrb	r0, [r0, #21]
    9942:	4770      	bx	lr

00009944 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    9944:	2001      	movs	r0, #1
    9946:	4770      	bx	lr

00009948 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    9948:	7f00      	ldrb	r0, [r0, #28]
    994a:	4770      	bx	lr

0000994c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    994c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9950:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9952:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9954:	4605      	mov	r5, r0
    9956:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9958:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    995a:	4691      	mov	r9, r2
    995c:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    995e:	d028      	beq.n	99b2 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    9960:	682b      	ldr	r3, [r5, #0]
    9962:	4621      	mov	r1, r4
    9964:	4628      	mov	r0, r5
    9966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9968:	4798      	blx	r3
    996a:	b198      	cbz	r0, 9994 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    996c:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    996e:	f1b9 0f00 	cmp.w	r9, #0
    9972:	d012      	beq.n	999a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    9974:	eb04 0809 	add.w	r8, r4, r9
    9978:	e001      	b.n	997e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    997a:	45a0      	cmp	r8, r4
    997c:	d00d      	beq.n	999a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    997e:	4639      	mov	r1, r7
    9980:	4620      	mov	r0, r4
    9982:	47b0      	blx	r6
    if (!writeData(src)) {
    9984:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    9986:	4601      	mov	r1, r0
    if (!writeData(src)) {
    9988:	4628      	mov	r0, r5
    998a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    998c:	3401      	adds	r4, #1
    if (!writeData(src)) {
    998e:	4798      	blx	r3
    9990:	2800      	cmp	r0, #0
    9992:	d1f2      	bne.n	997a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    9994:	2000      	movs	r0, #0
}
    9996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    999a:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    999c:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    999e:	444b      	add	r3, r9
    99a0:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    99a2:	2800      	cmp	r0, #0
    99a4:	d1f7      	bne.n	9996 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    99a6:	682b      	ldr	r3, [r5, #0]
    99a8:	4628      	mov	r0, r5
    99aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    99ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    99b0:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    99b2:	6983      	ldr	r3, [r0, #24]
    99b4:	428b      	cmp	r3, r1
    99b6:	d1d3      	bne.n	9960 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    99b8:	e7d9      	b.n	996e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    99ba:	bf00      	nop

000099bc <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    99bc:	4770      	bx	lr
    99be:	bf00      	nop

000099c0 <SharedSpiCard::end()>:
    m_spiDriver.end();
    99c0:	3004      	adds	r0, #4
    99c2:	f002 b8b5 	b.w	bb30 <SdSpiArduinoDriver::end()>
    99c6:	bf00      	nop

000099c8 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    99c8:	b510      	push	{r4, lr}
    99ca:	4604      	mov	r4, r0
    99cc:	2120      	movs	r1, #32
    99ce:	f004 fd3d 	bl	e44c <operator delete(void*, unsigned int)>
    99d2:	4620      	mov	r0, r4
    99d4:	bd10      	pop	{r4, pc}
    99d6:	bf00      	nop

000099d8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    99d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99dc:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    99de:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    99e0:	4605      	mov	r5, r0
    99e2:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    99e4:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    99e6:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    99e8:	d024      	beq.n	9a34 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    99ea:	682b      	ldr	r3, [r5, #0]
    99ec:	4631      	mov	r1, r6
    99ee:	4628      	mov	r0, r5
    99f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    99f2:	4798      	blx	r3
    99f4:	b178      	cbz	r0, 9a16 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    99f6:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    99f8:	b187      	cbz	r7, 9a1c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    99fa:	2600      	movs	r6, #0
    99fc:	e001      	b.n	9a02 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    99fe:	42b7      	cmp	r7, r6
    9a00:	d00c      	beq.n	9a1c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    9a02:	682a      	ldr	r2, [r5, #0]
    9a04:	4621      	mov	r1, r4
    9a06:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    9a08:	3601      	adds	r6, #1
    if (!writeData(src)) {
    9a0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    9a0c:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    9a10:	4790      	blx	r2
    9a12:	2800      	cmp	r0, #0
    9a14:	d1f3      	bne.n	99fe <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    9a16:	2000      	movs	r0, #0
}
    9a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    9a1c:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9a1e:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    9a20:	443b      	add	r3, r7
    9a22:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9a24:	2800      	cmp	r0, #0
    9a26:	d1f7      	bne.n	9a18 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    9a28:	682b      	ldr	r3, [r5, #0]
    9a2a:	4628      	mov	r0, r5
    9a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    9a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    9a32:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9a34:	6983      	ldr	r3, [r0, #24]
    9a36:	428b      	cmp	r3, r1
    9a38:	d1d7      	bne.n	99ea <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    9a3a:	e7dd      	b.n	99f8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

00009a3c <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    9a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a40:	4e20      	ldr	r6, [pc, #128]	; (9ac4 <SharedSpiCard::writeStop()+0x88>)
    9a42:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    9a44:	f100 0804 	add.w	r8, r0, #4
    9a48:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    9a4a:	f505 7516 	add.w	r5, r5, #600	; 0x258
    9a4e:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    9a50:	e003      	b.n	9a5a <SharedSpiCard::writeStop()+0x1e>
    9a52:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9a54:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    9a56:	041b      	lsls	r3, r3, #16
    9a58:	d410      	bmi.n	9a7c <SharedSpiCard::writeStop()+0x40>
    9a5a:	4640      	mov	r0, r8
    9a5c:	f002 f86c 	bl	bb38 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    9a60:	28ff      	cmp	r0, #255	; 0xff
    9a62:	4604      	mov	r4, r0
    9a64:	d1f5      	bne.n	9a52 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    9a66:	21fd      	movs	r1, #253	; 0xfd
    9a68:	4640      	mov	r0, r8
    9a6a:	f002 f883 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    9a6e:	7cbb      	ldrb	r3, [r7, #18]
    9a70:	b9cb      	cbnz	r3, 9aa6 <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    9a72:	2300      	movs	r3, #0
    9a74:	2001      	movs	r0, #1
    9a76:	74fb      	strb	r3, [r7, #19]
}
    9a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    9a7c:	231e      	movs	r3, #30
  if (m_spiActive) {
    9a7e:	7cb8      	ldrb	r0, [r7, #18]
    9a80:	747b      	strb	r3, [r7, #17]
    9a82:	2800      	cmp	r0, #0
    9a84:	d0f8      	beq.n	9a78 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    9a86:	7c38      	ldrb	r0, [r7, #16]
    9a88:	2101      	movs	r1, #1
    9a8a:	f002 f809 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9a8e:	21ff      	movs	r1, #255	; 0xff
    9a90:	4640      	mov	r0, r8
    9a92:	f002 f86f 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9a96:	4640      	mov	r0, r8
    9a98:	f002 f822 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9a9c:	2300      	movs	r3, #0
  return false;
    9a9e:	4618      	mov	r0, r3
    m_spiActive = false;
    9aa0:	74bb      	strb	r3, [r7, #18]
}
    9aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    9aa6:	2101      	movs	r1, #1
    9aa8:	7c38      	ldrb	r0, [r7, #16]
    9aaa:	f001 fff9 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9aae:	4621      	mov	r1, r4
    9ab0:	4640      	mov	r0, r8
    9ab2:	f002 f85f 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9ab6:	4640      	mov	r0, r8
    9ab8:	f002 f812 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9abc:	2300      	movs	r3, #0
    9abe:	74bb      	strb	r3, [r7, #18]
}
    9ac0:	e7d7      	b.n	9a72 <SharedSpiCard::writeStop()+0x36>
    9ac2:	bf00      	nop
    9ac4:	20004a9c 	.word	0x20004a9c

00009ac8 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    9ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    9acc:	7cc3      	ldrb	r3, [r0, #19]
    9ace:	2b01      	cmp	r3, #1
    9ad0:	d035      	beq.n	9b3e <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    9ad2:	7c86      	ldrb	r6, [r0, #18]
    9ad4:	4604      	mov	r4, r0
    9ad6:	b14e      	cbz	r6, 9aec <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    9ad8:	3004      	adds	r0, #4
    9ada:	f002 f82d 	bl	bb38 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    9ade:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    9ae2:	bf18      	it	ne
    9ae4:	2501      	movne	r5, #1
}
    9ae6:	4628      	mov	r0, r5
    9ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    9aec:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    9aee:	f04f 0801 	mov.w	r8, #1
    9af2:	4638      	mov	r0, r7
    9af4:	f001 ffd6 	bl	baa4 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    9af8:	4631      	mov	r1, r6
    9afa:	7c20      	ldrb	r0, [r4, #16]
    9afc:	f001 ffd0 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9b00:	21ff      	movs	r1, #255	; 0xff
    9b02:	4638      	mov	r0, r7
    9b04:	f002 f836 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    9b08:	4638      	mov	r0, r7
    9b0a:	f884 8012 	strb.w	r8, [r4, #18]
    9b0e:	f002 f813 	bl	bb38 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    9b12:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    9b14:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    9b18:	bf18      	it	ne
    9b1a:	2501      	movne	r5, #1
  if (m_spiActive) {
    9b1c:	2b00      	cmp	r3, #0
    9b1e:	d0e2      	beq.n	9ae6 <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    9b20:	4641      	mov	r1, r8
    9b22:	7c20      	ldrb	r0, [r4, #16]
    9b24:	f001 ffbc 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9b28:	21ff      	movs	r1, #255	; 0xff
    9b2a:	4638      	mov	r0, r7
    9b2c:	f002 f822 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9b30:	4638      	mov	r0, r7
    9b32:	f001 ffd5 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
}
    9b36:	4628      	mov	r0, r5
    m_spiActive = false;
    9b38:	74a6      	strb	r6, [r4, #18]
}
    9b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    9b3e:	2500      	movs	r5, #0
}
    9b40:	4628      	mov	r0, r5
    9b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b46:	bf00      	nop

00009b48 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    9b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9b4c:	4f20      	ldr	r7, [pc, #128]	; (9bd0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    9b4e:	4604      	mov	r4, r0
    9b50:	4688      	mov	r8, r1
    9b52:	4691      	mov	r9, r2
    9b54:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    9b56:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    9b58:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    9b5c:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    9b5e:	e003      	b.n	9b68 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    9b60:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9b62:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    9b64:	041b      	lsls	r3, r3, #16
    9b66:	d40d      	bmi.n	9b84 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    9b68:	4630      	mov	r0, r6
    9b6a:	f001 ffe5 	bl	bb38 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    9b6e:	28ff      	cmp	r0, #255	; 0xff
    9b70:	7520      	strb	r0, [r4, #20]
    9b72:	d0f5      	beq.n	9b60 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    9b74:	28fe      	cmp	r0, #254	; 0xfe
    9b76:	d01a      	beq.n	9bae <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    9b78:	2318      	movs	r3, #24
  if (m_spiActive) {
    9b7a:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    9b7c:	7463      	strb	r3, [r4, #17]
    9b7e:	b930      	cbnz	r0, 9b8e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    9b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9b84:	231d      	movs	r3, #29
  if (m_spiActive) {
    9b86:	7ca0      	ldrb	r0, [r4, #18]
    9b88:	7463      	strb	r3, [r4, #17]
    9b8a:	2800      	cmp	r0, #0
    9b8c:	d0f8      	beq.n	9b80 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    9b8e:	7c20      	ldrb	r0, [r4, #16]
    9b90:	2101      	movs	r1, #1
    9b92:	f001 ff85 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9b96:	21ff      	movs	r1, #255	; 0xff
    9b98:	4630      	mov	r0, r6
    9b9a:	f001 ffeb 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9b9e:	4630      	mov	r0, r6
    9ba0:	f001 ff9e 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9ba4:	2300      	movs	r3, #0
  return false;
    9ba6:	4618      	mov	r0, r3
    m_spiActive = false;
    9ba8:	74a3      	strb	r3, [r4, #18]
}
    9baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    9bae:	464a      	mov	r2, r9
    9bb0:	4641      	mov	r1, r8
    9bb2:	4630      	mov	r0, r6
    9bb4:	f001 ffcc 	bl	bb50 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    9bb8:	7520      	strb	r0, [r4, #20]
    9bba:	b938      	cbnz	r0, 9bcc <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    9bbc:	4630      	mov	r0, r6
    9bbe:	f001 ffbb 	bl	bb38 <SdSpiArduinoDriver::receive()>
    9bc2:	4630      	mov	r0, r6
    9bc4:	f001 ffb8 	bl	bb38 <SdSpiArduinoDriver::receive()>
  return true;
    9bc8:	2001      	movs	r0, #1
    9bca:	e7d9      	b.n	9b80 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    9bcc:	2325      	movs	r3, #37	; 0x25
    9bce:	e7d4      	b.n	9b7a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    9bd0:	20004a9c 	.word	0x20004a9c

00009bd4 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    9bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    9bd6:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    9bd8:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    9bda:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    9bdc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    9bde:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    9be0:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    9be2:	f000 f85b 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9be6:	b9b0      	cbnz	r0, 9c16 <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    9be8:	7ca6      	ldrb	r6, [r4, #18]
    9bea:	b91e      	cbnz	r6, 9bf4 <SharedSpiCard::readStop()+0x20>
  return true;
    9bec:	2601      	movs	r6, #1
}
    9bee:	4630      	mov	r0, r6
    9bf0:	b003      	add	sp, #12
    9bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    9bf4:	4605      	mov	r5, r0
    9bf6:	2101      	movs	r1, #1
    9bf8:	7c20      	ldrb	r0, [r4, #16]
    9bfa:	f001 ff51 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9bfe:	1d20      	adds	r0, r4, #4
    9c00:	21ff      	movs	r1, #255	; 0xff
    9c02:	9001      	str	r0, [sp, #4]
    9c04:	f001 ffb6 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9c08:	9801      	ldr	r0, [sp, #4]
    9c0a:	f001 ff69 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    9c0e:	4630      	mov	r0, r6
    m_spiActive = false;
    9c10:	74a5      	strb	r5, [r4, #18]
}
    9c12:	b003      	add	sp, #12
    9c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    9c16:	2309      	movs	r3, #9
  if (m_spiActive) {
    9c18:	7ca6      	ldrb	r6, [r4, #18]
    9c1a:	7463      	strb	r3, [r4, #17]
    9c1c:	2e00      	cmp	r6, #0
    9c1e:	d0e6      	beq.n	9bee <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    9c20:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    9c22:	7c20      	ldrb	r0, [r4, #16]
    9c24:	2101      	movs	r1, #1
}
    9c26:	463e      	mov	r6, r7
    9c28:	f001 ff3a 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9c2c:	21ff      	movs	r1, #255	; 0xff
    9c2e:	4628      	mov	r0, r5
    9c30:	f001 ffa0 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9c34:	4628      	mov	r0, r5
    9c36:	f001 ff53 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
}
    9c3a:	4630      	mov	r0, r6
    m_spiActive = false;
    9c3c:	74a7      	strb	r7, [r4, #18]
}
    9c3e:	b003      	add	sp, #12
    9c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c42:	bf00      	nop

00009c44 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    9c44:	7cc2      	ldrb	r2, [r0, #19]
    9c46:	2a02      	cmp	r2, #2
    9c48:	d003      	beq.n	9c52 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    9c4a:	2a01      	cmp	r2, #1
    9c4c:	d004      	beq.n	9c58 <SharedSpiCard::syncDevice()+0x14>
}
    9c4e:	2001      	movs	r0, #1
    9c50:	4770      	bx	lr
    return writeStop();
    9c52:	6803      	ldr	r3, [r0, #0]
    9c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9c56:	4718      	bx	r3
    return readStop();
    9c58:	f7ff bfbc 	b.w	9bd4 <SharedSpiCard::readStop()>

00009c5c <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    9c5c:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    9c5e:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    9c60:	460d      	mov	r5, r1
    9c62:	490d      	ldr	r1, [pc, #52]	; (9c98 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    9c64:	4604      	mov	r4, r0
  if (!syncDevice()) {
    9c66:	6a1a      	ldr	r2, [r3, #32]
    9c68:	428a      	cmp	r2, r1
    9c6a:	d10c      	bne.n	9c86 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    9c6c:	7cc2      	ldrb	r2, [r0, #19]
    9c6e:	2a02      	cmp	r2, #2
    9c70:	d004      	beq.n	9c7c <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    9c72:	2a01      	cmp	r2, #1
    9c74:	d00b      	beq.n	9c8e <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    9c76:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    9c78:	7725      	strb	r5, [r4, #28]
}
    9c7a:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    9c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9c7e:	4798      	blx	r3
  if (!syncDevice()) {
    9c80:	2800      	cmp	r0, #0
    9c82:	d1f8      	bne.n	9c76 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    9c84:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    9c86:	4790      	blx	r2
    9c88:	2800      	cmp	r0, #0
    9c8a:	d0fb      	beq.n	9c84 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    9c8c:	e7f3      	b.n	9c76 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    9c8e:	f7ff ffa1 	bl	9bd4 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    9c92:	2800      	cmp	r0, #0
    9c94:	d0f6      	beq.n	9c84 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    9c96:	e7ee      	b.n	9c76 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    9c98:	00009c45 	.word	0x00009c45

00009c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    9c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    9ca0:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    9ca2:	b082      	sub	sp, #8
    9ca4:	460f      	mov	r7, r1
    9ca6:	4935      	ldr	r1, [pc, #212]	; (9d7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    9ca8:	9201      	str	r2, [sp, #4]
    9caa:	4606      	mov	r6, r0
  if (!syncDevice()) {
    9cac:	6a1a      	ldr	r2, [r3, #32]
    9cae:	428a      	cmp	r2, r1
    9cb0:	d15e      	bne.n	9d70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    9cb2:	7cc2      	ldrb	r2, [r0, #19]
    9cb4:	2a02      	cmp	r2, #2
    9cb6:	d041      	beq.n	9d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    9cb8:	2a01      	cmp	r2, #1
    9cba:	d05b      	beq.n	9d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    9cbc:	7cb4      	ldrb	r4, [r6, #18]
    9cbe:	2c00      	cmp	r4, #0
    9cc0:	d047      	beq.n	9d52 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    9cc2:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    9cc4:	2f0c      	cmp	r7, #12
    9cc6:	d011      	beq.n	9cec <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    9cc8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 9d80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    9ccc:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    9cd0:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    9cd4:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    9cd6:	e004      	b.n	9ce2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    9cd8:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    9cdc:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    9cde:	041a      	lsls	r2, r3, #16
    9ce0:	d434      	bmi.n	9d4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    9ce2:	4628      	mov	r0, r5
    9ce4:	f001 ff28 	bl	bb38 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    9ce8:	28ff      	cmp	r0, #255	; 0xff
    9cea:	d1f5      	bne.n	9cd8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    9cec:	f10d 0804 	add.w	r8, sp, #4
    9cf0:	ac02      	add	r4, sp, #8
    9cf2:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    9cf6:	4628      	mov	r0, r5
    9cf8:	f001 ff3c 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    9cfc:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    9d00:	4628      	mov	r0, r5
    9d02:	f001 ff37 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    9d06:	45a0      	cmp	r8, r4
    9d08:	d1f8      	bne.n	9cfc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    9d0a:	2f00      	cmp	r7, #0
    9d0c:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    9d0e:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    9d12:	bf0c      	ite	eq
    9d14:	2195      	moveq	r1, #149	; 0x95
    9d16:	2187      	movne	r1, #135	; 0x87
    9d18:	f001 ff2c 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    9d1c:	4628      	mov	r0, r5
    9d1e:	f001 ff0b 	bl	bb38 <SdSpiArduinoDriver::receive()>
    9d22:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    9d24:	3c01      	subs	r4, #1
    9d26:	f001 ff07 	bl	bb38 <SdSpiArduinoDriver::receive()>
    9d2a:	0603      	lsls	r3, r0, #24
    9d2c:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    9d2e:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    9d30:	d501      	bpl.n	9d36 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    9d32:	2c00      	cmp	r4, #0
    9d34:	d1f5      	bne.n	9d22 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    9d36:	b002      	add	sp, #8
    9d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    9d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9d3e:	4798      	blx	r3
  if (!syncDevice()) {
    9d40:	2800      	cmp	r0, #0
    9d42:	d1bb      	bne.n	9cbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    9d44:	20ff      	movs	r0, #255	; 0xff
}
    9d46:	b002      	add	sp, #8
    9d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    9d4c:	2f00      	cmp	r7, #0
    9d4e:	d0cd      	beq.n	9cec <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    9d50:	e7f8      	b.n	9d44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    9d52:	1d35      	adds	r5, r6, #4
    9d54:	4628      	mov	r0, r5
    9d56:	f001 fea5 	bl	baa4 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    9d5a:	4621      	mov	r1, r4
    9d5c:	7c30      	ldrb	r0, [r6, #16]
    9d5e:	f001 fe9f 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9d62:	21ff      	movs	r1, #255	; 0xff
    9d64:	4628      	mov	r0, r5
    9d66:	f001 ff05 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    9d6a:	2301      	movs	r3, #1
    9d6c:	74b3      	strb	r3, [r6, #18]
}
    9d6e:	e7a9      	b.n	9cc4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    9d70:	4790      	blx	r2
    9d72:	e7e5      	b.n	9d40 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    9d74:	f7ff ff2e 	bl	9bd4 <SharedSpiCard::readStop()>
    9d78:	e7e2      	b.n	9d40 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    9d7a:	bf00      	nop
    9d7c:	00009c45 	.word	0x00009c45
    9d80:	20004a9c 	.word	0x20004a9c

00009d84 <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    9d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9d88:	b088      	sub	sp, #32
    9d8a:	4605      	mov	r5, r0
  m_spiActive = false;
    9d8c:	f04f 0800 	mov.w	r8, #0
    9d90:	4617      	mov	r7, r2
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    9d92:	ac01      	add	r4, sp, #4
    m_spiDriver.begin(spiConfig);
    9d94:	1d2e      	adds	r6, r5, #4
  m_spiActive = false;
    9d96:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
    9d9a:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
    9d9e:	f885 8015 	strb.w	r8, [r5, #21]
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    9da2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    9da6:	f89d 0004 	ldrb.w	r0, [sp, #4]
  m_csPin = spiConfig.csPin;
    9daa:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
    9dac:	f001 fe74 	bl	ba98 <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
    9db0:	2101      	movs	r1, #1
    9db2:	7c28      	ldrb	r0, [r5, #16]
    9db4:	f001 fe74 	bl	baa0 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    9db8:	496c      	ldr	r1, [pc, #432]	; (9f6c <SharedSpiCard::begin(SdSpiConfig)+0x1e8>)
    9dba:	2307      	movs	r3, #7
    9dbc:	e9c5 1302 	strd	r1, r3, [r5, #8]
  spiBegin(spiConfig);
    9dc0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    9dc4:	ab05      	add	r3, sp, #20
    9dc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
    9dca:	4630      	mov	r0, r6
    9dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
    9dce:	f001 fe73 	bl	bab8 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  if (!m_spiActive) {
    9dd2:	7cac      	ldrb	r4, [r5, #18]
  m_state = IDLE_STATE;
    9dd4:	f885 8013 	strb.w	r8, [r5, #19]
  if (!m_spiActive) {
    9dd8:	2c00      	cmp	r4, #0
    9dda:	d067      	beq.n	9eac <SharedSpiCard::begin(SdSpiConfig)+0x128>
    sdCsWrite(m_csPin, true);
    9ddc:	240a      	movs	r4, #10
    9dde:	2101      	movs	r1, #1
    9de0:	7c28      	ldrb	r0, [r5, #16]
    9de2:	f001 fe5d 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9de6:	21ff      	movs	r1, #255	; 0xff
    9de8:	4630      	mov	r0, r6
    9dea:	f001 fec3 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
    9dee:	1e61      	subs	r1, r4, #1
    9df0:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
    9df4:	d1f7      	bne.n	9de6 <SharedSpiCard::begin(SdSpiConfig)+0x62>
    sdCsWrite(m_csPin, false);
    9df6:	4621      	mov	r1, r4
    9df8:	240a      	movs	r4, #10
    9dfa:	7c28      	ldrb	r0, [r5, #16]
    9dfc:	f001 fe50 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    9e00:	2200      	movs	r2, #0
    9e02:	4628      	mov	r0, r5
    9e04:	4611      	mov	r1, r2
    9e06:	f7ff ff49 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9e0a:	2801      	cmp	r0, #1
    if (i == SD_CMD0_RETRY) {
    9e0c:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    9e10:	4604      	mov	r4, r0
    9e12:	d00a      	beq.n	9e2a <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (i == SD_CMD0_RETRY) {
    9e14:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    9e18:	d1f2      	bne.n	9e00 <SharedSpiCard::begin(SdSpiConfig)+0x7c>
    9e1a:	2301      	movs	r3, #1
  if (m_spiActive) {
    9e1c:	7ca8      	ldrb	r0, [r5, #18]
    m_errorCode = code;
    9e1e:	746b      	strb	r3, [r5, #17]
    9e20:	2800      	cmp	r0, #0
    9e22:	d151      	bne.n	9ec8 <SharedSpiCard::begin(SdSpiConfig)+0x144>
}
    9e24:	b008      	add	sp, #32
    9e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    9e2a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    9e2e:	2108      	movs	r1, #8
    9e30:	4628      	mov	r0, r5
    9e32:	f7ff ff33 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9e36:	0742      	lsls	r2, r0, #29
    9e38:	d557      	bpl.n	9eea <SharedSpiCard::begin(SdSpiConfig)+0x166>
    m_type = value;
    9e3a:	756c      	strb	r4, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    9e3c:	682b      	ldr	r3, [r5, #0]
    9e3e:	f8df a130 	ldr.w	sl, [pc, #304]	; 9f70 <SharedSpiCard::begin(SdSpiConfig)+0x1ec>
    9e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    9e44:	4553      	cmp	r3, sl
    9e46:	d161      	bne.n	9f0c <SharedSpiCard::begin(SdSpiConfig)+0x188>
    return m_type;
    9e48:	7d68      	ldrb	r0, [r5, #21]
    9e4a:	f1a0 0402 	sub.w	r4, r0, #2
    9e4e:	f8df 9124 	ldr.w	r9, [pc, #292]	; 9f74 <SharedSpiCard::begin(SdSpiConfig)+0x1f0>
    9e52:	fab4 f484 	clz	r4, r4
    9e56:	f8d9 3000 	ldr.w	r3, [r9]
    9e5a:	0964      	lsrs	r4, r4, #5
    m_endTime = ms + millis16();
    9e5c:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    9e60:	07a4      	lsls	r4, r4, #30
    m_endTime = ms + millis16();
    9e62:	fa1f f888 	uxth.w	r8, r8
  }
    9e66:	e005      	b.n	9e74 <SharedSpiCard::begin(SdSpiConfig)+0xf0>
    9e68:	f8d9 3000 	ldr.w	r3, [r9]
    return (int16_t)(m_endTime - millis16()) < 0;
    9e6c:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    9e70:	041b      	lsls	r3, r3, #16
    9e72:	d449      	bmi.n	9f08 <SharedSpiCard::begin(SdSpiConfig)+0x184>
    cardCommand(CMD55, 0);
    9e74:	2137      	movs	r1, #55	; 0x37
    9e76:	2200      	movs	r2, #0
    9e78:	4628      	mov	r0, r5
    9e7a:	f7ff ff0f 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    9e7e:	4622      	mov	r2, r4
    9e80:	2129      	movs	r1, #41	; 0x29
    9e82:	4628      	mov	r0, r5
    9e84:	f7ff ff0a 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    9e88:	2800      	cmp	r0, #0
    9e8a:	d1ed      	bne.n	9e68 <SharedSpiCard::begin(SdSpiConfig)+0xe4>
  if (type() == SD_CARD_TYPE_SD2) {
    9e8c:	682b      	ldr	r3, [r5, #0]
    9e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    9e90:	4553      	cmp	r3, sl
    9e92:	d165      	bne.n	9f60 <SharedSpiCard::begin(SdSpiConfig)+0x1dc>
    return m_type;
    9e94:	7d68      	ldrb	r0, [r5, #21]
    9e96:	2802      	cmp	r0, #2
    9e98:	d049      	beq.n	9f2e <SharedSpiCard::begin(SdSpiConfig)+0x1aa>
  if (m_spiActive) {
    9e9a:	7cab      	ldrb	r3, [r5, #18]
    9e9c:	bbcb      	cbnz	r3, 9f12 <SharedSpiCard::begin(SdSpiConfig)+0x18e>
    9e9e:	2307      	movs	r3, #7
  return true;
    9ea0:	2001      	movs	r0, #1
    9ea2:	e9c5 7302 	strd	r7, r3, [r5, #8]
}
    9ea6:	b008      	add	sp, #32
    9ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_spiDriver.activate();
    9eac:	4630      	mov	r0, r6
    9eae:	f001 fdf9 	bl	baa4 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    9eb2:	4621      	mov	r1, r4
    9eb4:	7c28      	ldrb	r0, [r5, #16]
    9eb6:	f001 fdf3 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9eba:	21ff      	movs	r1, #255	; 0xff
    9ebc:	4630      	mov	r0, r6
    9ebe:	f001 fe59 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    9ec2:	2301      	movs	r3, #1
    9ec4:	74ab      	strb	r3, [r5, #18]
}
    9ec6:	e789      	b.n	9ddc <SharedSpiCard::begin(SdSpiConfig)+0x58>
    sdCsWrite(m_csPin, true);
    9ec8:	7c28      	ldrb	r0, [r5, #16]
    9eca:	2101      	movs	r1, #1
    9ecc:	f001 fde8 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9ed0:	21ff      	movs	r1, #255	; 0xff
    9ed2:	4630      	mov	r0, r6
    9ed4:	f001 fe4e 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9ed8:	4630      	mov	r0, r6
    9eda:	f001 fe01 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9ede:	2300      	movs	r3, #0
  return false;
    9ee0:	4618      	mov	r0, r3
    m_spiActive = false;
    9ee2:	74ab      	strb	r3, [r5, #18]
}
    9ee4:	b008      	add	sp, #32
    9ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_type = value;
    9eea:	2302      	movs	r3, #2
    9eec:	2404      	movs	r4, #4
    9eee:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
    9ef0:	4630      	mov	r0, r6
    9ef2:	f001 fe21 	bl	bb38 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 4; i++) {
    9ef6:	1e63      	subs	r3, r4, #1
      m_status = spiReceive();
    9ef8:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
    9efa:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    9efe:	d1f7      	bne.n	9ef0 <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    if (m_status != 0XAA) {
    9f00:	28aa      	cmp	r0, #170	; 0xaa
    9f02:	d09b      	beq.n	9e3c <SharedSpiCard::begin(SdSpiConfig)+0xb8>
    9f04:	2306      	movs	r3, #6
    9f06:	e789      	b.n	9e1c <SharedSpiCard::begin(SdSpiConfig)+0x98>
    9f08:	2317      	movs	r3, #23
    9f0a:	e787      	b.n	9e1c <SharedSpiCard::begin(SdSpiConfig)+0x98>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    9f0c:	4628      	mov	r0, r5
    9f0e:	4798      	blx	r3
    9f10:	e79b      	b.n	9e4a <SharedSpiCard::begin(SdSpiConfig)+0xc6>
    sdCsWrite(m_csPin, true);
    9f12:	2101      	movs	r1, #1
    9f14:	7c28      	ldrb	r0, [r5, #16]
    9f16:	f001 fdc3 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9f1a:	21ff      	movs	r1, #255	; 0xff
    9f1c:	4630      	mov	r0, r6
    9f1e:	f001 fe29 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9f22:	4630      	mov	r0, r6
    9f24:	f001 fddc 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9f28:	2300      	movs	r3, #0
    9f2a:	74ab      	strb	r3, [r5, #18]
}
    9f2c:	e7b7      	b.n	9e9e <SharedSpiCard::begin(SdSpiConfig)+0x11a>
    if (cardCommand(CMD58, 0)) {
    9f2e:	2200      	movs	r2, #0
    9f30:	213a      	movs	r1, #58	; 0x3a
    9f32:	4628      	mov	r0, r5
    9f34:	f7ff feb2 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9f38:	b9a8      	cbnz	r0, 9f66 <SharedSpiCard::begin(SdSpiConfig)+0x1e2>
    return m_spiDriver.receive();
    9f3a:	4630      	mov	r0, r6
    9f3c:	f001 fdfc 	bl	bb38 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    9f40:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    9f44:	28c0      	cmp	r0, #192	; 0xc0
    9f46:	d101      	bne.n	9f4c <SharedSpiCard::begin(SdSpiConfig)+0x1c8>
    m_type = value;
    9f48:	2303      	movs	r3, #3
    9f4a:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
    9f4c:	4630      	mov	r0, r6
    9f4e:	f001 fdf3 	bl	bb38 <SdSpiArduinoDriver::receive()>
    9f52:	4630      	mov	r0, r6
    9f54:	f001 fdf0 	bl	bb38 <SdSpiArduinoDriver::receive()>
    9f58:	4630      	mov	r0, r6
    9f5a:	f001 fded 	bl	bb38 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    9f5e:	e79c      	b.n	9e9a <SharedSpiCard::begin(SdSpiConfig)+0x116>
  if (type() == SD_CARD_TYPE_SD2) {
    9f60:	4628      	mov	r0, r5
    9f62:	4798      	blx	r3
    9f64:	e797      	b.n	9e96 <SharedSpiCard::begin(SdSpiConfig)+0x112>
    9f66:	2312      	movs	r3, #18
    9f68:	e758      	b.n	9e1c <SharedSpiCard::begin(SdSpiConfig)+0x98>
    9f6a:	bf00      	nop
    9f6c:	00061a80 	.word	0x00061a80
    9f70:	00009941 	.word	0x00009941
    9f74:	20004a9c 	.word	0x20004a9c

00009f78 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    9f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    9f7a:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    9f7c:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    9f7e:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    9f80:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    9f82:	f7ff fe8b 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9f86:	b9e0      	cbnz	r0, 9fc2 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    9f88:	1d37      	adds	r7, r6, #4
    9f8a:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    9f8c:	4638      	mov	r0, r7
    9f8e:	f001 fdd3 	bl	bb38 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    9f92:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    9f96:	42a5      	cmp	r5, r4
    9f98:	d1f8      	bne.n	9f8c <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    9f9a:	7cb4      	ldrb	r4, [r6, #18]
    9f9c:	b914      	cbnz	r4, 9fa4 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    9f9e:	2401      	movs	r4, #1
}
    9fa0:	4620      	mov	r0, r4
    9fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    9fa4:	7c30      	ldrb	r0, [r6, #16]
    9fa6:	2101      	movs	r1, #1
    9fa8:	f001 fd7a 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9fac:	21ff      	movs	r1, #255	; 0xff
    9fae:	4638      	mov	r0, r7
    9fb0:	f001 fde0 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9fb4:	4638      	mov	r0, r7
    9fb6:	f001 fd93 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9fba:	2300      	movs	r3, #0
}
    9fbc:	4620      	mov	r0, r4
    m_spiActive = false;
    9fbe:	74b3      	strb	r3, [r6, #18]
}
    9fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    9fc2:	2312      	movs	r3, #18
  if (m_spiActive) {
    9fc4:	7cb4      	ldrb	r4, [r6, #18]
    9fc6:	7473      	strb	r3, [r6, #17]
    9fc8:	2c00      	cmp	r4, #0
    9fca:	d0e9      	beq.n	9fa0 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    9fcc:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    9fce:	7c30      	ldrb	r0, [r6, #16]
    9fd0:	2101      	movs	r1, #1
    9fd2:	f001 fd65 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9fd6:	21ff      	movs	r1, #255	; 0xff
    9fd8:	4620      	mov	r0, r4
    9fda:	f001 fdcb 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9fde:	4620      	mov	r0, r4
    9fe0:	f001 fd7e 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9fe4:	2300      	movs	r3, #0
  return false;
    9fe6:	461c      	mov	r4, r3
    m_spiActive = false;
    9fe8:	74b3      	strb	r3, [r6, #18]
}
    9fea:	4620      	mov	r0, r4
    9fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9fee:	bf00      	nop

00009ff0 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    9ff0:	b570      	push	{r4, r5, r6, lr}
    9ff2:	4616      	mov	r6, r2
    9ff4:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    9ff6:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    9ff8:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    9ffa:	f7ff fe4f 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9ffe:	b1b0      	cbz	r0, a02e <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    a000:	231b      	movs	r3, #27
    a002:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a004:	7ca0      	ldrb	r0, [r4, #18]
    a006:	b908      	cbnz	r0, a00c <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    a008:	b002      	add	sp, #8
    a00a:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a00c:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a00e:	7c20      	ldrb	r0, [r4, #16]
    a010:	2101      	movs	r1, #1
    a012:	f001 fd45 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a016:	21ff      	movs	r1, #255	; 0xff
    a018:	4628      	mov	r0, r5
    a01a:	f001 fdab 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a01e:	4628      	mov	r0, r5
    a020:	f001 fd5e 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a024:	2300      	movs	r3, #0
  return false;
    a026:	4618      	mov	r0, r3
    m_spiActive = false;
    a028:	74a3      	strb	r3, [r4, #18]
}
    a02a:	b002      	add	sp, #8
    a02c:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    a02e:	4605      	mov	r5, r0
    a030:	2210      	movs	r2, #16
    a032:	4631      	mov	r1, r6
    a034:	4620      	mov	r0, r4
    a036:	f7ff fd87 	bl	9b48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a03a:	2800      	cmp	r0, #0
    a03c:	d0e2      	beq.n	a004 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    a03e:	7ca6      	ldrb	r6, [r4, #18]
    a040:	2e00      	cmp	r6, #0
    a042:	d0e1      	beq.n	a008 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    a044:	7c20      	ldrb	r0, [r4, #16]
    a046:	2101      	movs	r1, #1
    a048:	f001 fd2a 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a04c:	1d20      	adds	r0, r4, #4
    a04e:	21ff      	movs	r1, #255	; 0xff
    a050:	9001      	str	r0, [sp, #4]
    a052:	f001 fd8f 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a056:	9801      	ldr	r0, [sp, #4]
    a058:	f001 fd42 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
}
    a05c:	4630      	mov	r0, r6
    m_spiActive = false;
    a05e:	74a5      	strb	r5, [r4, #18]
}
    a060:	b002      	add	sp, #8
    a062:	bd70      	pop	{r4, r5, r6, pc}

0000a064 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a064:	6803      	ldr	r3, [r0, #0]
    a066:	4a25      	ldr	r2, [pc, #148]	; (a0fc <SharedSpiCard::sectorCount()+0x98>)
    a068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a06a:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    a06c:	b500      	push	{lr}
    a06e:	b085      	sub	sp, #20
    a070:	d10f      	bne.n	a092 <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    a072:	466a      	mov	r2, sp
    a074:	2109      	movs	r1, #9
    a076:	f7ff ffbb 	bl	9ff0 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a07a:	b138      	cbz	r0, a08c <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    a07c:	f89d 3000 	ldrb.w	r3, [sp]
    a080:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a084:	d008      	beq.n	a098 <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    a086:	2b40      	cmp	r3, #64	; 0x40
    a088:	d027      	beq.n	a0da <SharedSpiCard::sectorCount()+0x76>
    a08a:	2000      	movs	r0, #0
}
    a08c:	b005      	add	sp, #20
    a08e:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a092:	4669      	mov	r1, sp
    a094:	4798      	blx	r3
    a096:	e7f0      	b.n	a07a <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a098:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    a09c:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a0a0:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a0a4:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a0a8:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    a0ac:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a0ae:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a0b2:	0080      	lsls	r0, r0, #2
    a0b4:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a0b8:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a0bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a0c0:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a0c4:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a0c8:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a0cc:	4413      	add	r3, r2
    a0ce:	3001      	adds	r0, #1
    a0d0:	3b07      	subs	r3, #7
    a0d2:	4098      	lsls	r0, r3
}
    a0d4:	b005      	add	sp, #20
    a0d6:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a0da:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a0de:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a0e2:	3001      	adds	r0, #1
    a0e4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a0e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a0ec:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    a0f0:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    a0f4:	0280      	lsls	r0, r0, #10
    a0f6:	b005      	add	sp, #20
    a0f8:	f85d fb04 	ldr.w	pc, [sp], #4
    a0fc:	0000a421 	.word	0x0000a421

0000a100 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    a100:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    a102:	460a      	mov	r2, r1
    a104:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    a106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    a108:	b083      	sub	sp, #12
    a10a:	4d16      	ldr	r5, [pc, #88]	; (a164 <SharedSpiCard::readStart(unsigned long)+0x64>)
    a10c:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    a10e:	42ab      	cmp	r3, r5
    a110:	d124      	bne.n	a15c <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    a112:	7d40      	ldrb	r0, [r0, #21]
    a114:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    a116:	f04f 0112 	mov.w	r1, #18
    a11a:	4620      	mov	r0, r4
    sector <<= 9;
    a11c:	bf18      	it	ne
    a11e:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    a120:	f7ff fdbc 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a124:	b920      	cbnz	r0, a130 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    a126:	2301      	movs	r3, #1
  return true;
    a128:	4618      	mov	r0, r3
  m_state = READ_STATE;
    a12a:	74e3      	strb	r3, [r4, #19]
}
    a12c:	b003      	add	sp, #12
    a12e:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    a130:	230c      	movs	r3, #12
  if (m_spiActive) {
    a132:	7ca0      	ldrb	r0, [r4, #18]
    a134:	7463      	strb	r3, [r4, #17]
    a136:	2800      	cmp	r0, #0
    a138:	d0f8      	beq.n	a12c <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    a13a:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a13c:	7c20      	ldrb	r0, [r4, #16]
    a13e:	2101      	movs	r1, #1
    a140:	f001 fcae 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a144:	21ff      	movs	r1, #255	; 0xff
    a146:	4628      	mov	r0, r5
    a148:	f001 fd14 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a14c:	4628      	mov	r0, r5
    a14e:	f001 fcc7 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a152:	2300      	movs	r3, #0
}
    a154:	4618      	mov	r0, r3
    m_spiActive = false;
    a156:	74a3      	strb	r3, [r4, #18]
}
    a158:	b003      	add	sp, #12
    a15a:	bd30      	pop	{r4, r5, pc}
    a15c:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    a15e:	4798      	blx	r3
    a160:	9a01      	ldr	r2, [sp, #4]
    a162:	e7d7      	b.n	a114 <SharedSpiCard::readStart(unsigned long)+0x14>
    a164:	00009941 	.word	0x00009941

0000a168 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a16a:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    a16c:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    a16e:	4606      	mov	r6, r0
    a170:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    a172:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    a174:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a176:	d102      	bne.n	a17e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    a178:	6983      	ldr	r3, [r0, #24]
    a17a:	428b      	cmp	r3, r1
    a17c:	d005      	beq.n	a18a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    a17e:	4629      	mov	r1, r5
    a180:	4630      	mov	r0, r6
    a182:	f7ff ffbd 	bl	a100 <SharedSpiCard::readStart(unsigned long)>
    a186:	b180      	cbz	r0, a1aa <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    a188:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a18a:	b187      	cbz	r7, a1ae <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    a18c:	2500      	movs	r5, #0
    a18e:	e001      	b.n	a194 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a190:	42af      	cmp	r7, r5
    a192:	d00c      	beq.n	a1ae <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    a194:	4621      	mov	r1, r4
    a196:	f44f 7200 	mov.w	r2, #512	; 0x200
    a19a:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a19c:	3501      	adds	r5, #1
    a19e:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    a1a2:	f7ff fcd1 	bl	9b48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    a1a6:	2800      	cmp	r0, #0
    a1a8:	d1f2      	bne.n	a190 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    a1aa:	2000      	movs	r0, #0
}
    a1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    a1ae:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a1b0:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    a1b2:	443b      	add	r3, r7
    a1b4:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a1b6:	2800      	cmp	r0, #0
    a1b8:	d1f8      	bne.n	a1ac <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    a1ba:	4630      	mov	r0, r6
}
    a1bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    a1c0:	f7ff bd08 	b.w	9bd4 <SharedSpiCard::readStop()>

0000a1c4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a1c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1c8:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a1ca:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a1cc:	4606      	mov	r6, r0
    a1ce:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    a1d0:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a1d2:	4615      	mov	r5, r2
    a1d4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    a1d8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    a1dc:	d102      	bne.n	a1e4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    a1de:	6983      	ldr	r3, [r0, #24]
    a1e0:	428b      	cmp	r3, r1
    a1e2:	d005      	beq.n	a1f0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    a1e4:	4621      	mov	r1, r4
    a1e6:	4630      	mov	r0, r6
    a1e8:	f7ff ff8a 	bl	a100 <SharedSpiCard::readStart(unsigned long)>
    a1ec:	b1b0      	cbz	r0, a21c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    a1ee:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    a1f0:	f1bb 0f00 	cmp.w	fp, #0
    a1f4:	d015      	beq.n	a222 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    a1f6:	eb04 0a0b 	add.w	sl, r4, fp
    a1fa:	e002      	b.n	a202 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    a1fc:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    a1fe:	45a2      	cmp	sl, r4
    a200:	d00f      	beq.n	a222 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    a202:	f44f 7200 	mov.w	r2, #512	; 0x200
    a206:	4629      	mov	r1, r5
    a208:	4630      	mov	r0, r6
    a20a:	f7ff fc9d 	bl	9b48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a20e:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    a210:	4642      	mov	r2, r8
    a212:	4620      	mov	r0, r4
    a214:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    a216:	3401      	adds	r4, #1
    if (readData(dst)) {
    a218:	2f00      	cmp	r7, #0
    a21a:	d1ef      	bne.n	a1fc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    a21c:	2000      	movs	r0, #0
}
    a21e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    a222:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a224:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    a226:	445b      	add	r3, fp
    a228:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a22a:	2800      	cmp	r0, #0
    a22c:	d1f7      	bne.n	a21e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    a22e:	4630      	mov	r0, r6
}
    a230:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    a234:	f7ff bcce 	b.w	9bd4 <SharedSpiCard::readStop()>

0000a238 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    a238:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    a23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    a23e:	695f      	ldr	r7, [r3, #20]
    a240:	4b16      	ldr	r3, [pc, #88]	; (a29c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    a242:	429f      	cmp	r7, r3
    a244:	d11f      	bne.n	a286 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    a246:	7cc3      	ldrb	r3, [r0, #19]
    a248:	4604      	mov	r4, r0
    a24a:	460d      	mov	r5, r1
    a24c:	4616      	mov	r6, r2
    a24e:	2b01      	cmp	r3, #1
    a250:	d102      	bne.n	a258 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    a252:	6983      	ldr	r3, [r0, #24]
    a254:	4299      	cmp	r1, r3
    a256:	d005      	beq.n	a264 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    a258:	4629      	mov	r1, r5
    a25a:	4620      	mov	r0, r4
    a25c:	f7ff ff50 	bl	a100 <SharedSpiCard::readStart(unsigned long)>
    a260:	b170      	cbz	r0, a280 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    a262:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    a264:	f44f 7200 	mov.w	r2, #512	; 0x200
    a268:	4631      	mov	r1, r6
    a26a:	4620      	mov	r0, r4
    a26c:	f7ff fc6c 	bl	9b48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    a270:	b130      	cbz	r0, a280 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    a272:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    a274:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    a276:	3301      	adds	r3, #1
    a278:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    a27a:	b148      	cbz	r0, a290 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    a27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    a280:	2000      	movs	r0, #0
}
    a282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    a286:	46bc      	mov	ip, r7
    a288:	2301      	movs	r3, #1
}
    a28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    a28e:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    a290:	4620      	mov	r0, r4
}
    a292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    a296:	f7ff bc9d 	b.w	9bd4 <SharedSpiCard::readStop()>
    a29a:	bf00      	nop
    a29c:	0000a169 	.word	0x0000a169

0000a2a0 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    a2a0:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    a2a2:	460a      	mov	r2, r1
    a2a4:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    a2a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    a2a8:	b083      	sub	sp, #12
    a2aa:	4d16      	ldr	r5, [pc, #88]	; (a304 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    a2ac:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    a2ae:	42ab      	cmp	r3, r5
    a2b0:	d124      	bne.n	a2fc <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    a2b2:	7d40      	ldrb	r0, [r0, #21]
    a2b4:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    a2b6:	f04f 0119 	mov.w	r1, #25
    a2ba:	4620      	mov	r0, r4
    sector <<= 9;
    a2bc:	bf18      	it	ne
    a2be:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    a2c0:	f7ff fcec 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a2c4:	b920      	cbnz	r0, a2d0 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    a2c6:	2302      	movs	r3, #2
  return true;
    a2c8:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    a2ca:	74e3      	strb	r3, [r4, #19]
}
    a2cc:	b003      	add	sp, #12
    a2ce:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    a2d0:	230e      	movs	r3, #14
  if (m_spiActive) {
    a2d2:	7ca0      	ldrb	r0, [r4, #18]
    a2d4:	7463      	strb	r3, [r4, #17]
    a2d6:	2800      	cmp	r0, #0
    a2d8:	d0f8      	beq.n	a2cc <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    a2da:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a2dc:	7c20      	ldrb	r0, [r4, #16]
    a2de:	2101      	movs	r1, #1
    a2e0:	f001 fbde 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a2e4:	21ff      	movs	r1, #255	; 0xff
    a2e6:	4628      	mov	r0, r5
    a2e8:	f001 fc44 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a2ec:	4628      	mov	r0, r5
    a2ee:	f001 fbf7 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a2f2:	2300      	movs	r3, #0
}
    a2f4:	4618      	mov	r0, r3
    m_spiActive = false;
    a2f6:	74a3      	strb	r3, [r4, #18]
}
    a2f8:	b003      	add	sp, #12
    a2fa:	bd30      	pop	{r4, r5, pc}
    a2fc:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    a2fe:	4798      	blx	r3
    a300:	9a01      	ldr	r2, [sp, #4]
    a302:	e7d7      	b.n	a2b4 <SharedSpiCard::writeStart(unsigned long)+0x14>
    a304:	00009941 	.word	0x00009941

0000a308 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    a308:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a30a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    a30e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a310:	4617      	mov	r7, r2
    a312:	4a41      	ldr	r2, [pc, #260]	; (a418 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    a314:	b085      	sub	sp, #20
    a316:	4604      	mov	r4, r0
    a318:	460e      	mov	r6, r1
    a31a:	4293      	cmp	r3, r2
    a31c:	d145      	bne.n	a3aa <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    a31e:	466a      	mov	r2, sp
    a320:	2109      	movs	r1, #9
    a322:	f7ff fe65 	bl	9ff0 <SharedSpiCard::readRegister(unsigned char, void*)>
    a326:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    a328:	b1b5      	cbz	r5, a358 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    a32a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a32e:	065a      	lsls	r2, r3, #25
    a330:	d518      	bpl.n	a364 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    a332:	7d63      	ldrb	r3, [r4, #21]
    a334:	2b03      	cmp	r3, #3
    a336:	d001      	beq.n	a33c <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    a338:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    a33a:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    a33c:	4632      	mov	r2, r6
    a33e:	2120      	movs	r1, #32
    a340:	4620      	mov	r0, r4
    a342:	f7ff fcab 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    a346:	b928      	cbnz	r0, a354 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    a348:	463a      	mov	r2, r7
    a34a:	2121      	movs	r1, #33	; 0x21
    a34c:	4620      	mov	r0, r4
    a34e:	f7ff fca5 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a352:	b370      	cbz	r0, a3b2 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    a354:	2326      	movs	r3, #38	; 0x26
    a356:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a358:	7ca5      	ldrb	r5, [r4, #18]
    a35a:	b99d      	cbnz	r5, a384 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    a35c:	4628      	mov	r0, r5
    a35e:	b005      	add	sp, #20
    a360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    a364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a368:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a36c:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a36e:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    a372:	1c7a      	adds	r2, r7, #1
    a374:	4332      	orrs	r2, r6
    a376:	4213      	tst	r3, r2
    a378:	d0db      	beq.n	a332 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    a37a:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    a37c:	7ca5      	ldrb	r5, [r4, #18]
    a37e:	7463      	strb	r3, [r4, #17]
    a380:	2d00      	cmp	r5, #0
    a382:	d0eb      	beq.n	a35c <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    a384:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a386:	7c20      	ldrb	r0, [r4, #16]
    a388:	2101      	movs	r1, #1
    a38a:	f001 fb89 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a38e:	21ff      	movs	r1, #255	; 0xff
    a390:	4628      	mov	r0, r5
    a392:	f001 fbef 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a396:	4628      	mov	r0, r5
    a398:	f001 fba2 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a39c:	2300      	movs	r3, #0
  return false;
    a39e:	461d      	mov	r5, r3
    m_spiActive = false;
    a3a0:	74a3      	strb	r3, [r4, #18]
}
    a3a2:	4628      	mov	r0, r5
    a3a4:	b005      	add	sp, #20
    a3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    a3aa:	4669      	mov	r1, sp
    a3ac:	4798      	blx	r3
    a3ae:	4605      	mov	r5, r0
    a3b0:	e7ba      	b.n	a328 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    a3b2:	4602      	mov	r2, r0
    a3b4:	2126      	movs	r1, #38	; 0x26
    a3b6:	4620      	mov	r0, r4
    a3b8:	f7ff fc70 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a3bc:	2800      	cmp	r0, #0
    a3be:	d1c9      	bne.n	a354 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    a3c0:	f8df 8058 	ldr.w	r8, [pc, #88]	; a41c <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    a3c4:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    a3c8:	f104 0904 	add.w	r9, r4, #4
    a3cc:	f8d8 3000 	ldr.w	r3, [r8]
    a3d0:	441f      	add	r7, r3
    a3d2:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    a3d4:	e004      	b.n	a3e0 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    a3d6:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    a3da:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    a3dc:	041b      	lsls	r3, r3, #16
    a3de:	d417      	bmi.n	a410 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    a3e0:	4648      	mov	r0, r9
    a3e2:	f001 fba9 	bl	bb38 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    a3e6:	28ff      	cmp	r0, #255	; 0xff
    a3e8:	4606      	mov	r6, r0
    a3ea:	d1f4      	bne.n	a3d6 <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    a3ec:	7ca3      	ldrb	r3, [r4, #18]
    a3ee:	2b00      	cmp	r3, #0
    a3f0:	d0b4      	beq.n	a35c <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    a3f2:	2101      	movs	r1, #1
    a3f4:	7c20      	ldrb	r0, [r4, #16]
  return true;
    a3f6:	461d      	mov	r5, r3
    a3f8:	f001 fb52 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a3fc:	4631      	mov	r1, r6
    a3fe:	4648      	mov	r0, r9
    a400:	f001 fbb8 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a404:	4648      	mov	r0, r9
    a406:	f001 fb6b 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a40a:	2300      	movs	r3, #0
    a40c:	74a3      	strb	r3, [r4, #18]
}
    a40e:	e7a5      	b.n	a35c <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    a410:	2328      	movs	r3, #40	; 0x28
    a412:	7463      	strb	r3, [r4, #17]
    goto fail;
    a414:	e7a0      	b.n	a358 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    a416:	bf00      	nop
    a418:	0000a421 	.word	0x0000a421
    a41c:	20004a9c 	.word	0x20004a9c

0000a420 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    a420:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    a422:	2200      	movs	r2, #0
    a424:	b082      	sub	sp, #8
    a426:	460e      	mov	r6, r1
    a428:	2109      	movs	r1, #9
    a42a:	4604      	mov	r4, r0
    a42c:	f7ff fc36 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a430:	b1b0      	cbz	r0, a460 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    a432:	231b      	movs	r3, #27
    a434:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a436:	7ca0      	ldrb	r0, [r4, #18]
    a438:	b908      	cbnz	r0, a43e <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    a43a:	b002      	add	sp, #8
    a43c:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a43e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a440:	7c20      	ldrb	r0, [r4, #16]
    a442:	2101      	movs	r1, #1
    a444:	f001 fb2c 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a448:	21ff      	movs	r1, #255	; 0xff
    a44a:	4628      	mov	r0, r5
    a44c:	f001 fb92 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a450:	4628      	mov	r0, r5
    a452:	f001 fb45 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a456:	2300      	movs	r3, #0
  return false;
    a458:	4618      	mov	r0, r3
    m_spiActive = false;
    a45a:	74a3      	strb	r3, [r4, #18]
  }
    a45c:	b002      	add	sp, #8
    a45e:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    a460:	4605      	mov	r5, r0
    a462:	2210      	movs	r2, #16
    a464:	4631      	mov	r1, r6
    a466:	4620      	mov	r0, r4
    a468:	f7ff fb6e 	bl	9b48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a46c:	2800      	cmp	r0, #0
    a46e:	d0e2      	beq.n	a436 <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    a470:	7ca6      	ldrb	r6, [r4, #18]
    a472:	2e00      	cmp	r6, #0
    a474:	d0e1      	beq.n	a43a <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    a476:	7c20      	ldrb	r0, [r4, #16]
    a478:	2101      	movs	r1, #1
    a47a:	f001 fb11 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a47e:	1d20      	adds	r0, r4, #4
    a480:	21ff      	movs	r1, #255	; 0xff
    a482:	9001      	str	r0, [sp, #4]
    a484:	f001 fb76 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a488:	9801      	ldr	r0, [sp, #4]
    a48a:	f001 fb29 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
}
    a48e:	4630      	mov	r0, r6
    m_spiActive = false;
    a490:	74a5      	strb	r5, [r4, #18]
  }
    a492:	b002      	add	sp, #8
    a494:	bd70      	pop	{r4, r5, r6, pc}
    a496:	bf00      	nop

0000a498 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    a498:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    a49a:	2200      	movs	r2, #0
    a49c:	b082      	sub	sp, #8
    a49e:	460e      	mov	r6, r1
    a4a0:	210a      	movs	r1, #10
    a4a2:	4604      	mov	r4, r0
    a4a4:	f7ff fbfa 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a4a8:	b1b0      	cbz	r0, a4d8 <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    a4aa:	231b      	movs	r3, #27
    a4ac:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a4ae:	7ca0      	ldrb	r0, [r4, #18]
    a4b0:	b908      	cbnz	r0, a4b6 <SharedSpiCard::readCID(CID*)+0x1e>
  }
    a4b2:	b002      	add	sp, #8
    a4b4:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a4b6:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a4b8:	7c20      	ldrb	r0, [r4, #16]
    a4ba:	2101      	movs	r1, #1
    a4bc:	f001 faf0 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a4c0:	21ff      	movs	r1, #255	; 0xff
    a4c2:	4628      	mov	r0, r5
    a4c4:	f001 fb56 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a4c8:	4628      	mov	r0, r5
    a4ca:	f001 fb09 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a4ce:	2300      	movs	r3, #0
  return false;
    a4d0:	4618      	mov	r0, r3
    m_spiActive = false;
    a4d2:	74a3      	strb	r3, [r4, #18]
  }
    a4d4:	b002      	add	sp, #8
    a4d6:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    a4d8:	4605      	mov	r5, r0
    a4da:	2210      	movs	r2, #16
    a4dc:	4631      	mov	r1, r6
    a4de:	4620      	mov	r0, r4
    a4e0:	f7ff fb32 	bl	9b48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a4e4:	2800      	cmp	r0, #0
    a4e6:	d0e2      	beq.n	a4ae <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    a4e8:	7ca6      	ldrb	r6, [r4, #18]
    a4ea:	2e00      	cmp	r6, #0
    a4ec:	d0e1      	beq.n	a4b2 <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    a4ee:	7c20      	ldrb	r0, [r4, #16]
    a4f0:	2101      	movs	r1, #1
    a4f2:	f001 fad5 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a4f6:	1d20      	adds	r0, r4, #4
    a4f8:	21ff      	movs	r1, #255	; 0xff
    a4fa:	9001      	str	r0, [sp, #4]
    a4fc:	f001 fb3a 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a500:	9801      	ldr	r0, [sp, #4]
    a502:	f001 faed 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
}
    a506:	4630      	mov	r0, r6
    m_spiActive = false;
    a508:	74a5      	strb	r5, [r4, #18]
  }
    a50a:	b002      	add	sp, #8
    a50c:	bd70      	pop	{r4, r5, r6, pc}
    a50e:	bf00      	nop

0000a510 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    a510:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    a512:	1d05      	adds	r5, r0, #4
    a514:	4616      	mov	r6, r2
    a516:	4604      	mov	r4, r0
    a518:	4628      	mov	r0, r5
    a51a:	f001 fb2b 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    a51e:	f44f 7200 	mov.w	r2, #512	; 0x200
    a522:	4631      	mov	r1, r6
    a524:	4628      	mov	r0, r5
    a526:	f001 fb2f 	bl	bb88 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    a52a:	21ff      	movs	r1, #255	; 0xff
    a52c:	4628      	mov	r0, r5
    a52e:	f001 fb21 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    a532:	21ff      	movs	r1, #255	; 0xff
    a534:	4628      	mov	r0, r5
    a536:	f001 fb1d 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a53a:	4628      	mov	r0, r5
    a53c:	f001 fafc 	bl	bb38 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    a540:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    a544:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    a546:	2b05      	cmp	r3, #5
    a548:	d004      	beq.n	a554 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    a54a:	2320      	movs	r3, #32
  if (m_spiActive) {
    a54c:	7ca0      	ldrb	r0, [r4, #18]
    a54e:	7463      	strb	r3, [r4, #17]
    a550:	b910      	cbnz	r0, a558 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    a552:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    a554:	2001      	movs	r0, #1
}
    a556:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    a558:	7c20      	ldrb	r0, [r4, #16]
    a55a:	2101      	movs	r1, #1
    a55c:	f001 faa0 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a560:	21ff      	movs	r1, #255	; 0xff
    a562:	4628      	mov	r0, r5
    a564:	f001 fb06 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a568:	4628      	mov	r0, r5
    a56a:	f001 fab9 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a56e:	2300      	movs	r3, #0
}
    a570:	4618      	mov	r0, r3
    m_spiActive = false;
    a572:	74a3      	strb	r3, [r4, #18]
}
    a574:	bd70      	pop	{r4, r5, r6, pc}
    a576:	bf00      	nop

0000a578 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    a578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a57c:	4d17      	ldr	r5, [pc, #92]	; (a5dc <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    a57e:	4606      	mov	r6, r0
    a580:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    a582:	f100 0804 	add.w	r8, r0, #4
    a586:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    a588:	f504 7416 	add.w	r4, r4, #600	; 0x258
    a58c:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    a58e:	e003      	b.n	a598 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    a590:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    a592:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    a594:	041b      	lsls	r3, r3, #16
    a596:	d40c      	bmi.n	a5b2 <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    a598:	4640      	mov	r0, r8
    a59a:	f001 facd 	bl	bb38 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    a59e:	28ff      	cmp	r0, #255	; 0xff
    a5a0:	d1f6      	bne.n	a590 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    a5a2:	463a      	mov	r2, r7
    a5a4:	21fc      	movs	r1, #252	; 0xfc
    a5a6:	4630      	mov	r0, r6
    a5a8:	f7ff ffb2 	bl	a510 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a5ac:	b118      	cbz	r0, a5b6 <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    a5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    a5b2:	2324      	movs	r3, #36	; 0x24
    a5b4:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    a5b6:	7cb0      	ldrb	r0, [r6, #18]
    a5b8:	2800      	cmp	r0, #0
    a5ba:	d0f8      	beq.n	a5ae <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    a5bc:	7c30      	ldrb	r0, [r6, #16]
    a5be:	2101      	movs	r1, #1
    a5c0:	f001 fa6e 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a5c4:	21ff      	movs	r1, #255	; 0xff
    a5c6:	4640      	mov	r0, r8
    a5c8:	f001 fad4 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a5cc:	4640      	mov	r0, r8
    a5ce:	f001 fa87 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a5d2:	2300      	movs	r3, #0
}
    a5d4:	4618      	mov	r0, r3
    m_spiActive = false;
    a5d6:	74b3      	strb	r3, [r6, #18]
}
    a5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a5dc:	20004a9c 	.word	0x20004a9c

0000a5e0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    a5e0:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a5e2:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    a5e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a5e6:	4616      	mov	r6, r2
    a5e8:	4a22      	ldr	r2, [pc, #136]	; (a674 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    a5ea:	b082      	sub	sp, #8
    a5ec:	4604      	mov	r4, r0
    a5ee:	460d      	mov	r5, r1
    a5f0:	4293      	cmp	r3, r2
    a5f2:	d13c      	bne.n	a66e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    a5f4:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    a5f6:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    a5f8:	f04f 0118 	mov.w	r1, #24
    a5fc:	4620      	mov	r0, r4
    sector <<= 9;
    a5fe:	bf18      	it	ne
    a600:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    a602:	462a      	mov	r2, r5
    a604:	f7ff fb4a 	bl	9c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a608:	4605      	mov	r5, r0
    a60a:	b1b0      	cbz	r0, a63a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    a60c:	230d      	movs	r3, #13
    a60e:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a610:	7ca0      	ldrb	r0, [r4, #18]
    a612:	b908      	cbnz	r0, a618 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    a614:	b002      	add	sp, #8
    a616:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a618:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a61a:	7c20      	ldrb	r0, [r4, #16]
    a61c:	2101      	movs	r1, #1
    a61e:	f001 fa3f 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a622:	21ff      	movs	r1, #255	; 0xff
    a624:	4628      	mov	r0, r5
    a626:	f001 faa5 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a62a:	4628      	mov	r0, r5
    a62c:	f001 fa58 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a630:	2300      	movs	r3, #0
  return false;
    a632:	4618      	mov	r0, r3
    m_spiActive = false;
    a634:	74a3      	strb	r3, [r4, #18]
}
    a636:	b002      	add	sp, #8
    a638:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    a63a:	4632      	mov	r2, r6
    a63c:	21fe      	movs	r1, #254	; 0xfe
    a63e:	4620      	mov	r0, r4
    a640:	f7ff ff66 	bl	a510 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a644:	2800      	cmp	r0, #0
    a646:	d0e3      	beq.n	a610 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    a648:	7ca6      	ldrb	r6, [r4, #18]
    a64a:	2e00      	cmp	r6, #0
    a64c:	d0e2      	beq.n	a614 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    a64e:	7c20      	ldrb	r0, [r4, #16]
    a650:	2101      	movs	r1, #1
    a652:	f001 fa25 	bl	baa0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a656:	1d20      	adds	r0, r4, #4
    a658:	21ff      	movs	r1, #255	; 0xff
    a65a:	9001      	str	r0, [sp, #4]
    a65c:	f001 fa8a 	bl	bb74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a660:	9801      	ldr	r0, [sp, #4]
    a662:	f001 fa3d 	bl	bae0 <SdSpiArduinoDriver::deactivate()>
  return true;
    a666:	4630      	mov	r0, r6
    m_spiActive = false;
    a668:	74a5      	strb	r5, [r4, #18]
}
    a66a:	b002      	add	sp, #8
    a66c:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    a66e:	4798      	blx	r3
    a670:	e7c1      	b.n	a5f6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    a672:	bf00      	nop
    a674:	00009941 	.word	0x00009941

0000a678 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a678:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    a67a:	7f04      	ldrb	r4, [r0, #28]
    a67c:	b134      	cbz	r4, a68c <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    a67e:	6804      	ldr	r4, [r0, #0]
    a680:	2301      	movs	r3, #1
    a682:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    a684:	46a4      	mov	ip, r4
}
    a686:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    a68a:	4760      	bx	ip
}
    a68c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    a690:	f7ff bfa6 	b.w	a5e0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000a694 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    a694:	b510      	push	{r4, lr}
    a696:	b084      	sub	sp, #16
    a698:	4604      	mov	r4, r0
    a69a:	f10d 0c04 	add.w	ip, sp, #4
    a69e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    a6a2:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
    a6a6:	f7ff fb6d 	bl	9d84 <SharedSpiCard::begin(SdSpiConfig)>
    a6aa:	b120      	cbz	r0, a6b6 <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
    a6ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a6b0:	f003 0301 	and.w	r3, r3, #1
    a6b4:	7723      	strb	r3, [r4, #28]
}
    a6b6:	b004      	add	sp, #16
    a6b8:	bd10      	pop	{r4, pc}
    a6ba:	bf00      	nop

0000a6bc <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    a6bc:	2000      	movs	r0, #0
    a6be:	4770      	bx	lr

0000a6c0 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    a6c0:	2000      	movs	r0, #0
    a6c2:	4770      	bx	lr

0000a6c4 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    a6c4:	2000      	movs	r0, #0
    a6c6:	4770      	bx	lr

0000a6c8 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    a6c8:	4770      	bx	lr
    a6ca:	bf00      	nop

0000a6cc <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    a6cc:	4b08      	ldr	r3, [pc, #32]	; (a6f0 <sdIrs()+0x24>)
    a6ce:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    a6d0:	4a08      	ldr	r2, [pc, #32]	; (a6f4 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    a6d2:	4809      	ldr	r0, [pc, #36]	; (a6f8 <sdIrs()+0x2c>)
static void sdIrs() {
    a6d4:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    a6d6:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    a6d8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    a6da:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    a6dc:	6812      	ldr	r2, [r2, #0]
}
    a6de:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    a6e2:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    a6e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a6e6:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    a6ea:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    a6ec:	7001      	strb	r1, [r0, #0]
}
    a6ee:	4770      	bx	lr
    a6f0:	402c0000 	.word	0x402c0000
    a6f4:	200042b0 	.word	0x200042b0
    a6f8:	20004d4c 	.word	0x20004d4c

0000a6fc <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    a6fc:	4b03      	ldr	r3, [pc, #12]	; (a70c <isBusyDat()+0x10>)
    a6fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a700:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    a704:	f3c0 6000 	ubfx	r0, r0, #24, #1
    a708:	4770      	bx	lr
    a70a:	bf00      	nop
    a70c:	402c0000 	.word	0x402c0000

0000a710 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    a710:	4b01      	ldr	r3, [pc, #4]	; (a718 <isBusyDMA()+0x8>)
    a712:	7818      	ldrb	r0, [r3, #0]
}
    a714:	4770      	bx	lr
    a716:	bf00      	nop
    a718:	20004d4c 	.word	0x20004d4c

0000a71c <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a71c:	4a2b      	ldr	r2, [pc, #172]	; (a7cc <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a71e:	4b2c      	ldr	r3, [pc, #176]	; (a7d0 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a720:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a722:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    a726:	492b      	ldr	r1, [pc, #172]	; (a7d4 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a728:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a72c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a730:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    a732:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a734:	4c28      	ldr	r4, [pc, #160]	; (a7d8 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    a736:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a73a:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    a73e:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a742:	089b      	lsrs	r3, r3, #2
    a744:	fbb1 fef3 	udiv	lr, r1, r3
    a748:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a74c:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    a750:	d235      	bcs.n	a7be <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    a752:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    a754:	461e      	mov	r6, r3
    a756:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a758:	011a      	lsls	r2, r3, #4
    a75a:	fbbe f2f2 	udiv	r2, lr, r2
    a75e:	4282      	cmp	r2, r0
    a760:	d901      	bls.n	a766 <setSdclk(unsigned long)+0x4a>
    a762:	2bff      	cmp	r3, #255	; 0xff
    a764:	d9f6      	bls.n	a754 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a766:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    a76a:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a76c:	4290      	cmp	r0, r2
    a76e:	d22a      	bcs.n	a7c6 <setSdclk(unsigned long)+0xaa>
    a770:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    a774:	2201      	movs	r2, #1
    a776:	e000      	b.n	a77a <setSdclk(unsigned long)+0x5e>
    a778:	46a4      	mov	ip, r4
    dvs++;
    a77a:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a77c:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    a780:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a782:	fbbe f1fc 	udiv	r1, lr, ip
    a786:	4281      	cmp	r1, r0
    a788:	d917      	bls.n	a7ba <setSdclk(unsigned long)+0x9e>
    a78a:	2a10      	cmp	r2, #16
    a78c:	d1f4      	bne.n	a778 <setSdclk(unsigned long)+0x5c>
    a78e:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    a790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a794:	4911      	ldr	r1, [pc, #68]	; (a7dc <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    a796:	4a12      	ldr	r2, [pc, #72]	; (a7e0 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    a798:	fb03 fc0c 	mul.w	ip, r3, ip
    a79c:	fbbe f3fc 	udiv	r3, lr, ip
    a7a0:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    a7a2:	4b10      	ldr	r3, [pc, #64]	; (a7e4 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    a7a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    a7a6:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a7a8:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    a7aa:	4333      	orrs	r3, r6
    a7ac:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a7b0:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    a7b2:	6a53      	ldr	r3, [r2, #36]	; 0x24
    a7b4:	071b      	lsls	r3, r3, #28
    a7b6:	d5fc      	bpl.n	a7b2 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    a7b8:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a7ba:	012d      	lsls	r5, r5, #4
    a7bc:	e7e8      	b.n	a790 <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a7be:	4672      	mov	r2, lr
    a7c0:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    a7c2:	2301      	movs	r3, #1
    a7c4:	e7d2      	b.n	a76c <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a7c6:	469c      	mov	ip, r3
    a7c8:	2500      	movs	r5, #0
    a7ca:	e7e1      	b.n	a790 <setSdclk(unsigned long)+0x74>
    a7cc:	400fc000 	.word	0x400fc000
    a7d0:	400d8000 	.word	0x400d8000
    a7d4:	5e69ec00 	.word	0x5e69ec00
    a7d8:	aaaaaaab 	.word	0xaaaaaaab
    a7dc:	20004214 	.word	0x20004214
    a7e0:	402c0000 	.word	0x402c0000
    a7e4:	fff0000f 	.word	0xfff0000f

0000a7e8 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    a7e8:	4b01      	ldr	r3, [pc, #4]	; (a7f0 <SdioCard::errorCode() const+0x8>)
}
    a7ea:	7818      	ldrb	r0, [r3, #0]
    a7ec:	4770      	bx	lr
    a7ee:	bf00      	nop
    a7f0:	2000351a 	.word	0x2000351a

0000a7f4 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    a7f4:	4b01      	ldr	r3, [pc, #4]	; (a7fc <SdioCard::errorData() const+0x8>)
    a7f6:	6818      	ldr	r0, [r3, #0]
}
    a7f8:	4770      	bx	lr
    a7fa:	bf00      	nop
    a7fc:	200042b0 	.word	0x200042b0

0000a800 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    a800:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    a802:	4c07      	ldr	r4, [pc, #28]	; (a820 <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    a804:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    a806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a808:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    a80c:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    a80e:	f8cc 1004 	str.w	r1, [ip, #4]
    a812:	f8cc 2008 	str.w	r2, [ip, #8]
    a816:	f8cc 300c 	str.w	r3, [ip, #12]
}
    a81a:	f85d 4b04 	ldr.w	r4, [sp], #4
    a81e:	4770      	bx	lr
    a820:	20004284 	.word	0x20004284

0000a824 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    a824:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    a826:	4c07      	ldr	r4, [pc, #28]	; (a844 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    a828:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    a82a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a82c:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    a830:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    a832:	f8cc 1004 	str.w	r1, [ip, #4]
    a836:	f8cc 2008 	str.w	r2, [ip, #8]
    a83a:	f8cc 300c 	str.w	r3, [ip, #12]
}
    a83e:	f85d 4b04 	ldr.w	r4, [sp], #4
    a842:	4770      	bx	lr
    a844:	20004294 	.word	0x20004294

0000a848 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    a848:	4b02      	ldr	r3, [pc, #8]	; (a854 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    a84a:	2001      	movs	r0, #1
  *ocr = m_ocr;
    a84c:	681b      	ldr	r3, [r3, #0]
    a84e:	600b      	str	r3, [r1, #0]
}
    a850:	4770      	bx	lr
    a852:	bf00      	nop
    a854:	200042a4 	.word	0x200042a4

0000a858 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    a858:	4770      	bx	lr
    a85a:	bf00      	nop

0000a85c <SdioCard::~SdioCard()>:
    a85c:	b510      	push	{r4, lr}
    a85e:	4604      	mov	r4, r0
    a860:	210c      	movs	r1, #12
    a862:	f003 fdf3 	bl	e44c <operator delete(void*, unsigned int)>
    a866:	4620      	mov	r0, r4
    a868:	bd10      	pop	{r4, pc}
    a86a:	bf00      	nop

0000a86c <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    a86c:	4b04      	ldr	r3, [pc, #16]	; (a880 <SdioCard::type() const+0x14>)
    a86e:	781b      	ldrb	r3, [r3, #0]
    a870:	b123      	cbz	r3, a87c <SdioCard::type() const+0x10>
    a872:	4b04      	ldr	r3, [pc, #16]	; (a884 <SdioCard::type() const+0x18>)
    a874:	7818      	ldrb	r0, [r3, #0]
    a876:	3002      	adds	r0, #2
    a878:	b2c0      	uxtb	r0, r0
    a87a:	4770      	bx	lr
    a87c:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    a87e:	4770      	bx	lr
    a880:	20004d49 	.word	0x20004d49
    a884:	20004d4a 	.word	0x20004d4a

0000a888 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    a888:	4b18      	ldr	r3, [pc, #96]	; (a8ec <SdioCard::sectorCount()+0x64>)
    a88a:	781a      	ldrb	r2, [r3, #0]
    a88c:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    a890:	d00f      	beq.n	a8b2 <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    a892:	2a40      	cmp	r2, #64	; 0x40
    a894:	d001      	beq.n	a89a <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    a896:	2000      	movs	r0, #0
}
    a898:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a89a:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a89c:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a89e:	7a19      	ldrb	r1, [r3, #8]
    a8a0:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a8a2:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a8a6:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    a8aa:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    a8ae:	0280      	lsls	r0, r0, #10
    a8b0:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a8b2:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a8b4:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a8b6:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a8b8:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a8bc:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a8c0:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a8c4:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    a8c6:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a8c8:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    a8cc:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    a8ce:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a8d2:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a8d6:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a8d8:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    a8dc:	3001      	adds	r0, #1
    a8de:	f003 030f 	and.w	r3, r3, #15
    a8e2:	4413      	add	r3, r2
    a8e4:	3b07      	subs	r3, #7
    a8e6:	4098      	lsls	r0, r3
}
    a8e8:	f85d fb04 	ldr.w	pc, [sp], #4
    a8ec:	20004294 	.word	0x20004294

0000a8f0 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    a8f0:	4a40      	ldr	r2, [pc, #256]	; (a9f4 <initSDHC()+0x104>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a8f2:	2005      	movs	r0, #5
    a8f4:	4940      	ldr	r1, [pc, #256]	; (a9f8 <initSDHC()+0x108>)
static void initSDHC() {
    a8f6:	b538      	push	{r3, r4, r5, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    a8f8:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    a8fc:	4b3f      	ldr	r3, [pc, #252]	; (a9fc <initSDHC()+0x10c>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    a8fe:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    a902:	4d3f      	ldr	r5, [pc, #252]	; (aa00 <initSDHC()+0x110>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    a904:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    a908:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    a90c:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
    a910:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    a914:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    a918:	f044 0418 	orr.w	r4, r4, #24
    a91c:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    a920:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    a924:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    a928:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    a92c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    a930:	f042 020c 	orr.w	r2, r2, #12
    a934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    a938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a93a:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    a93e:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    a940:	69da      	ldr	r2, [r3, #28]
    a942:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    a946:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    a948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a94a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    a94e:	625a      	str	r2, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a950:	f8c1 01cc 	str.w	r0, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    a954:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    a958:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    a95c:	f8c1 01c0 	str.w	r0, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    a960:	f8c1 01c4 	str.w	r0, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    a964:	f8c1 01c8 	str.w	r0, [r1, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    a968:	6caa      	ldr	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    a96a:	4b26      	ldr	r3, [pc, #152]	; (aa04 <initSDHC()+0x114>)
  SDHC_MIX_CTRL |= 0x80000000;
    a96c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    a970:	64aa      	str	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    a972:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    a974:	4313      	orrs	r3, r2
    a976:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    a978:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    a97a:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    a97e:	d1fb      	bne.n	a978 <initSDHC()+0x88>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    a980:	f44f 70c8 	mov.w	r0, #400	; 0x190
    a984:	f7ff feca 	bl	a71c <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a988:	4b1b      	ldr	r3, [pc, #108]	; (a9f8 <initSDHC()+0x108>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    a98a:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    a98e:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a992:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    a996:	481c      	ldr	r0, [pc, #112]	; (aa08 <initSDHC()+0x118>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    a998:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    a99c:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    a9a0:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    a9a4:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    a9a8:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    a9ac:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    a9b0:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    a9b4:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    a9b8:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    a9bc:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    a9c0:	4912      	ldr	r1, [pc, #72]	; (aa0c <initSDHC()+0x11c>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    a9c2:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    a9c6:	4b12      	ldr	r3, [pc, #72]	; (aa10 <initSDHC()+0x120>)
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    a9c8:	6368      	str	r0, [r5, #52]	; 0x34
    a9ca:	f8c1 31f8 	str.w	r3, [r1, #504]	; 0x1f8
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    a9ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a9d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    a9d6:	490f      	ldr	r1, [pc, #60]	; (aa14 <initSDHC()+0x124>)
    a9d8:	2060      	movs	r0, #96	; 0x60
    a9da:	f881 006e 	strb.w	r0, [r1, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    a9de:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    a9e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    a9e4:	4a06      	ldr	r2, [pc, #24]	; (aa00 <initSDHC()+0x110>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    a9e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    a9ea:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    a9ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    a9ee:	011b      	lsls	r3, r3, #4
    a9f0:	d4fc      	bmi.n	a9ec <initSDHC()+0xfc>
}
    a9f2:	bd38      	pop	{r3, r4, r5, pc}
    a9f4:	400d8000 	.word	0x400d8000
    a9f8:	401f8000 	.word	0x401f8000
    a9fc:	400fc000 	.word	0x400fc000
    aa00:	402c0000 	.word	0x402c0000
    aa04:	01008000 	.word	0x01008000
    aa08:	117f000b 	.word	0x117f000b
    aa0c:	20003800 	.word	0x20003800
    aa10:	0000a6cd 	.word	0x0000a6cd
    aa14:	e000e400 	.word	0xe000e400

0000aa18 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    aa18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    aa1c:	f003 fbd4 	bl	e1c8 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    aa20:	4e17      	ldr	r6, [pc, #92]	; (aa80 <waitTransferComplete() [clone .part.0]+0x68>)
    aa22:	4d18      	ldr	r5, [pc, #96]	; (aa84 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    aa24:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aa26:	f8df 8074 	ldr.w	r8, [pc, #116]	; aa9c <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    aa2a:	e004      	b.n	aa36 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aa2c:	f003 fbcc 	bl	e1c8 <micros>
    aa30:	1bc0      	subs	r0, r0, r7
    aa32:	4540      	cmp	r0, r8
    aa34:	d81b      	bhi.n	aa6e <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    aa36:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    aa38:	402c      	ands	r4, r5
    aa3a:	d0f7      	beq.n	aa2c <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    aa3c:	4a12      	ldr	r2, [pc, #72]	; (aa88 <waitTransferComplete() [clone .part.0]+0x70>)
    aa3e:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    aa40:	4b12      	ldr	r3, [pc, #72]	; (aa8c <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    aa42:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    aa44:	6b32      	ldr	r2, [r6, #48]	; 0x30
    aa46:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    aa48:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    aa4a:	4a11      	ldr	r2, [pc, #68]	; (aa90 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    aa4c:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    aa4e:	681b      	ldr	r3, [r3, #0]
    aa50:	4213      	tst	r3, r2
    aa52:	d009      	beq.n	aa68 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    aa54:	490f      	ldr	r1, [pc, #60]	; (aa94 <waitTransferComplete() [clone .part.0]+0x7c>)
    aa56:	241f      	movs	r4, #31
  m_errorLine = line;
    aa58:	4b0f      	ldr	r3, [pc, #60]	; (aa98 <waitTransferComplete() [clone .part.0]+0x80>)
    aa5a:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    aa5e:	2000      	movs	r0, #0
  m_errorCode = code;
    aa60:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    aa62:	601a      	str	r2, [r3, #0]
}
    aa64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    aa68:	2001      	movs	r0, #1
}
    aa6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    aa6e:	4a06      	ldr	r2, [pc, #24]	; (aa88 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    aa70:	4b06      	ldr	r3, [pc, #24]	; (aa8c <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    aa72:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    aa74:	6b32      	ldr	r2, [r6, #48]	; 0x30
    aa76:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    aa78:	681b      	ldr	r3, [r3, #0]
    aa7a:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    aa7c:	e7ea      	b.n	aa54 <waitTransferComplete() [clone .part.0]+0x3c>
    aa7e:	bf00      	nop
    aa80:	402c0000 	.word	0x402c0000
    aa84:	117f0002 	.word	0x117f0002
    aa88:	20004d4b 	.word	0x20004d4b
    aa8c:	200042b0 	.word	0x200042b0
    aa90:	117f0000 	.word	0x117f0000
    aa94:	2000351a 	.word	0x2000351a
    aa98:	20004280 	.word	0x20004280
    aa9c:	000f4240 	.word	0x000f4240

0000aaa0 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    aaa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    aaa4:	4c26      	ldr	r4, [pc, #152]	; (ab40 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    aaa6:	460f      	mov	r7, r1
  if (!m_transferActive) {
    aaa8:	7823      	ldrb	r3, [r4, #0]
    aaaa:	2b00      	cmp	r3, #0
    aaac:	d138      	bne.n	ab20 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    aaae:	4b25      	ldr	r3, [pc, #148]	; (ab44 <SdioCard::writeData(unsigned char const*)+0xa4>)
    aab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    aab2:	05d2      	lsls	r2, r2, #23
    aab4:	d52b      	bpl.n	ab0e <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    aab6:	4d23      	ldr	r5, [pc, #140]	; (ab44 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aab8:	f8df 8094 	ldr.w	r8, [pc, #148]	; ab50 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    aabc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    aabe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    aac2:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    aac4:	f003 fb80 	bl	e1c8 <micros>
    aac8:	4606      	mov	r6, r0
  while (fcn()) {
    aaca:	e004      	b.n	aad6 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aacc:	f003 fb7c 	bl	e1c8 <micros>
    aad0:	1b80      	subs	r0, r0, r6
    aad2:	4540      	cmp	r0, r8
    aad4:	d82a      	bhi.n	ab2c <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    aad6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    aad8:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    aadc:	d0f6      	beq.n	aacc <SdioCard::writeData(unsigned char const*)+0x2c>
    aade:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    aae2:	4818      	ldr	r0, [pc, #96]	; (ab44 <SdioCard::writeData(unsigned char const*)+0xa4>)
    aae4:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    aae8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    aaea:	055b      	lsls	r3, r3, #21
    aaec:	d5fc      	bpl.n	aae8 <SdioCard::writeData(unsigned char const*)+0x48>
    aaee:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    aaf2:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    aaf6:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    aaf8:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    aafa:	d1fa      	bne.n	aaf2 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    aafc:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    ab00:	45bc      	cmp	ip, r7
    ab02:	d1f1      	bne.n	aae8 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    ab04:	2301      	movs	r3, #1
  return true;
    ab06:	4618      	mov	r0, r3
  m_transferActive = true;
    ab08:	7023      	strb	r3, [r4, #0]
}
    ab0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ab0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ab10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    ab14:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    ab16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ab18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    ab1c:	629a      	str	r2, [r3, #40]	; 0x28
    ab1e:	e7ca      	b.n	aab6 <SdioCard::writeData(unsigned char const*)+0x16>
    ab20:	f7ff ff7a 	bl	aa18 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    ab24:	2800      	cmp	r0, #0
    ab26:	d1c2      	bne.n	aaae <SdioCard::writeData(unsigned char const*)+0xe>
}
    ab28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    ab2c:	4906      	ldr	r1, [pc, #24]	; (ab48 <SdioCard::writeData(unsigned char const*)+0xa8>)
    ab2e:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    ab30:	4b06      	ldr	r3, [pc, #24]	; (ab4c <SdioCard::writeData(unsigned char const*)+0xac>)
    ab32:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    ab36:	4648      	mov	r0, r9
  m_errorCode = code;
    ab38:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    ab3a:	601a      	str	r2, [r3, #0]
}
    ab3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ab40:	20004d4b 	.word	0x20004d4b
    ab44:	402c0000 	.word	0x402c0000
    ab48:	2000351a 	.word	0x2000351a
    ab4c:	20004280 	.word	0x20004280
    ab50:	000f4240 	.word	0x000f4240

0000ab54 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    ab54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab58:	4607      	mov	r7, r0
    ab5a:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    ab5c:	4c1f      	ldr	r4, [pc, #124]	; (abdc <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    ab5e:	f003 fb33 	bl	e1c8 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ab62:	4e1f      	ldr	r6, [pc, #124]	; (abe0 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    ab64:	4605      	mov	r5, r0
  while (fcn()) {
    ab66:	e004      	b.n	ab72 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ab68:	f003 fb2e 	bl	e1c8 <micros>
    ab6c:	1b43      	subs	r3, r0, r5
    ab6e:	42b3      	cmp	r3, r6
    ab70:	d824      	bhi.n	abbc <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    ab72:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    ab74:	07d9      	lsls	r1, r3, #31
    ab76:	d4f7      	bmi.n	ab68 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    ab78:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    ab7a:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    ab7e:	d420      	bmi.n	abc2 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    ab80:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    ab84:	4c15      	ldr	r4, [pc, #84]	; (abdc <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    ab86:	4e17      	ldr	r6, [pc, #92]	; (abe4 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    ab88:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    ab8a:	f003 fb1d 	bl	e1c8 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ab8e:	4f14      	ldr	r7, [pc, #80]	; (abe0 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    ab90:	4605      	mov	r5, r0
  while (fcn()) {
    ab92:	e004      	b.n	ab9e <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ab94:	f003 fb18 	bl	e1c8 <micros>
    ab98:	1b40      	subs	r0, r0, r5
    ab9a:	42b8      	cmp	r0, r7
    ab9c:	d80e      	bhi.n	abbc <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    ab9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    aba0:	4233      	tst	r3, r6
    aba2:	d0f7      	beq.n	ab94 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    aba4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    aba6:	4b10      	ldr	r3, [pc, #64]	; (abe8 <cardCommand(unsigned long, unsigned long)+0x94>)
    aba8:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    abaa:	681a      	ldr	r2, [r3, #0]
    abac:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    abae:	681a      	ldr	r2, [r3, #0]
    abb0:	07d2      	lsls	r2, r2, #31
    abb2:	d503      	bpl.n	abbc <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    abb4:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    abb6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    abba:	d00b      	beq.n	abd4 <cardCommand(unsigned long, unsigned long)+0x80>
    abbc:	2000      	movs	r0, #0
}
    abbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    abc2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    abc4:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    abc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    abca:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    abcc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    abce:	4313      	orrs	r3, r2
    abd0:	64a3      	str	r3, [r4, #72]	; 0x48
    abd2:	e7d5      	b.n	ab80 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    abd4:	2001      	movs	r0, #1
}
    abd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abda:	bf00      	nop
    abdc:	402c0000 	.word	0x402c0000
    abe0:	000f4240 	.word	0x000f4240
    abe4:	000f0001 	.word	0x000f0001
    abe8:	200042b0 	.word	0x200042b0

0000abec <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    abec:	4b15      	ldr	r3, [pc, #84]	; (ac44 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    abee:	b530      	push	{r4, r5, lr}
    abf0:	460d      	mov	r5, r1
    abf2:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    abf4:	6819      	ldr	r1, [r3, #0]
    abf6:	f7ff ffad 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    abfa:	b308      	cbz	r0, ac40 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    abfc:	4b12      	ldr	r3, [pc, #72]	; (ac48 <readReg16(unsigned long, void*)+0x5c>)
    abfe:	f105 040f 	add.w	r4, r5, #15
    ac02:	691a      	ldr	r2, [r3, #16]
    ac04:	9200      	str	r2, [sp, #0]
    ac06:	6959      	ldr	r1, [r3, #20]
    ac08:	9101      	str	r1, [sp, #4]
    ac0a:	6999      	ldr	r1, [r3, #24]
    ac0c:	9102      	str	r1, [sp, #8]
    ac0e:	69db      	ldr	r3, [r3, #28]
    ac10:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    ac12:	2300      	movs	r3, #0
    ac14:	e001      	b.n	ac1a <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ac16:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    ac1a:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    ac1e:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ac20:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    ac24:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    ac28:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ac2a:	fa22 f20c 	lsr.w	r2, r2, ip
    ac2e:	f10e 0110 	add.w	r1, lr, #16
    ac32:	f804 2d01 	strb.w	r2, [r4, #-1]!
    ac36:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    ac3a:	d1ec      	bne.n	ac16 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    ac3c:	2300      	movs	r3, #0
    ac3e:	73eb      	strb	r3, [r5, #15]
}
    ac40:	b005      	add	sp, #20
    ac42:	bd30      	pop	{r4, r5, pc}
    ac44:	200042a8 	.word	0x200042a8
    ac48:	402c0000 	.word	0x402c0000

0000ac4c <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    ac4c:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    ac4e:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    ac50:	07db      	lsls	r3, r3, #31
    ac52:	d505      	bpl.n	ac60 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    ac54:	4b15      	ldr	r3, [pc, #84]	; (acac <SdioCard::isBusy()+0x60>)
    ac56:	681b      	ldr	r3, [r3, #0]
    ac58:	b1b3      	cbz	r3, ac88 <SdioCard::isBusy()+0x3c>
}
    ac5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    ac5e:	4718      	bx	r3
    if (m_transferActive) {
    ac60:	4b13      	ldr	r3, [pc, #76]	; (acb0 <SdioCard::isBusy()+0x64>)
    ac62:	781b      	ldrb	r3, [r3, #0]
    ac64:	b93b      	cbnz	r3, ac76 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    ac66:	4b13      	ldr	r3, [pc, #76]	; (acb4 <SdioCard::isBusy()+0x68>)
    ac68:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    ac6a:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    ac6e:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    ac72:	4620      	mov	r0, r4
    ac74:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    ac76:	4b0f      	ldr	r3, [pc, #60]	; (acb4 <SdioCard::isBusy()+0x68>)
    ac78:	4c0f      	ldr	r4, [pc, #60]	; (acb8 <SdioCard::isBusy()+0x6c>)
    ac7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ac7c:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    ac7e:	fab4 f484 	clz	r4, r4
    ac82:	0964      	lsrs	r4, r4, #5
}
    ac84:	4620      	mov	r0, r4
    ac86:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    ac88:	4b0c      	ldr	r3, [pc, #48]	; (acbc <SdioCard::isBusy()+0x70>)
    ac8a:	781c      	ldrb	r4, [r3, #0]
    ac8c:	2c00      	cmp	r4, #0
    ac8e:	d0f0      	beq.n	ac72 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ac90:	4b0b      	ldr	r3, [pc, #44]	; (acc0 <SdioCard::isBusy()+0x74>)
    ac92:	480c      	ldr	r0, [pc, #48]	; (acc4 <SdioCard::isBusy()+0x78>)
    ac94:	6819      	ldr	r1, [r3, #0]
    ac96:	f7ff ff5d 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    ac9a:	2800      	cmp	r0, #0
    ac9c:	d0e9      	beq.n	ac72 <SdioCard::isBusy()+0x26>
    ac9e:	4b05      	ldr	r3, [pc, #20]	; (acb4 <SdioCard::isBusy()+0x68>)
    aca0:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    aca2:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    aca6:	f3c4 2400 	ubfx	r4, r4, #8, #1
    acaa:	e7e2      	b.n	ac72 <SdioCard::isBusy()+0x26>
    acac:	200042ac 	.word	0x200042ac
    acb0:	20004d4b 	.word	0x20004d4b
    acb4:	402c0000 	.word	0x402c0000
    acb8:	117f0002 	.word	0x117f0002
    acbc:	20004d48 	.word	0x20004d48
    acc0:	200042a8 	.word	0x200042a8
    acc4:	0d1a0000 	.word	0x0d1a0000

0000acc8 <SdioCard::status()>:
uint32_t SdioCard::status() {
    acc8:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    acca:	4b04      	ldr	r3, [pc, #16]	; (acdc <SdioCard::status()+0x14>)
    accc:	4804      	ldr	r0, [pc, #16]	; (ace0 <SdioCard::status()+0x18>)
    acce:	6819      	ldr	r1, [r3, #0]
    acd0:	f7ff ff40 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    acd4:	b108      	cbz	r0, acda <SdioCard::status()+0x12>
    acd6:	4b03      	ldr	r3, [pc, #12]	; (ace4 <SdioCard::status()+0x1c>)
    acd8:	6918      	ldr	r0, [r3, #16]
}
    acda:	bd08      	pop	{r3, pc}
    acdc:	200042a8 	.word	0x200042a8
    ace0:	0d1a0000 	.word	0x0d1a0000
    ace4:	402c0000 	.word	0x402c0000

0000ace8 <isBusyCMD13()>:
static bool isBusyCMD13() {
    ace8:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    acea:	4b07      	ldr	r3, [pc, #28]	; (ad08 <isBusyCMD13()+0x20>)
    acec:	4807      	ldr	r0, [pc, #28]	; (ad0c <isBusyCMD13()+0x24>)
    acee:	6819      	ldr	r1, [r3, #0]
    acf0:	f7ff ff30 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    acf4:	b130      	cbz	r0, ad04 <isBusyCMD13()+0x1c>
    acf6:	4b06      	ldr	r3, [pc, #24]	; (ad10 <isBusyCMD13()+0x28>)
    acf8:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    acfa:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    acfe:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    ad02:	bd08      	pop	{r3, pc}
    ad04:	2001      	movs	r0, #1
    ad06:	bd08      	pop	{r3, pc}
    ad08:	200042a8 	.word	0x200042a8
    ad0c:	0d1a0000 	.word	0x0d1a0000
    ad10:	402c0000 	.word	0x402c0000

0000ad14 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    ad14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    ad18:	4b29      	ldr	r3, [pc, #164]	; (adc0 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    ad1a:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    ad1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; ade0 <SdioCard::writeStart(unsigned long)+0xcc>
    ad20:	4e28      	ldr	r6, [pc, #160]	; (adc4 <SdioCard::writeStart(unsigned long)+0xb0>)
    ad22:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    ad26:	f003 fa4f 	bl	e1c8 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ad2a:	4d27      	ldr	r5, [pc, #156]	; (adc8 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    ad2c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ad2e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; ade4 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ad32:	4f26      	ldr	r7, [pc, #152]	; (adcc <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    ad34:	e006      	b.n	ad44 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ad36:	f003 fa47 	bl	e1c8 <micros>
    ad3a:	1b00      	subs	r0, r0, r4
    ad3c:	42b8      	cmp	r0, r7
    ad3e:	d829      	bhi.n	ad94 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    ad40:	f004 feca 	bl	fad8 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ad44:	6831      	ldr	r1, [r6, #0]
    ad46:	4628      	mov	r0, r5
    ad48:	f7ff ff04 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    ad4c:	2800      	cmp	r0, #0
    ad4e:	d0f2      	beq.n	ad36 <SdioCard::writeStart(unsigned long)+0x22>
    ad50:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    ad54:	05db      	lsls	r3, r3, #23
    ad56:	d5ee      	bpl.n	ad36 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    ad58:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    ad5a:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    ad5e:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ad62:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    ad66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    ad6a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ad6e:	4b18      	ldr	r3, [pc, #96]	; (add0 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    ad70:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ad74:	781b      	ldrb	r3, [r3, #0]
    ad76:	b1cb      	cbz	r3, adac <SdioCard::writeStart(unsigned long)+0x98>
    ad78:	4649      	mov	r1, r9
    ad7a:	4816      	ldr	r0, [pc, #88]	; (add4 <SdioCard::writeStart(unsigned long)+0xc0>)
    ad7c:	f7ff feea 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    ad80:	b930      	cbnz	r0, ad90 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    ad82:	4915      	ldr	r1, [pc, #84]	; (add8 <SdioCard::writeStart(unsigned long)+0xc4>)
    ad84:	240e      	movs	r4, #14
  m_errorLine = line;
    ad86:	4b15      	ldr	r3, [pc, #84]	; (addc <SdioCard::writeStart(unsigned long)+0xc8>)
    ad88:	f240 4257 	movw	r2, #1111	; 0x457
  m_errorCode = code;
    ad8c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    ad8e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    ad90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    ad94:	4a10      	ldr	r2, [pc, #64]	; (add8 <SdioCard::writeStart(unsigned long)+0xc4>)
    ad96:	210a      	movs	r1, #10
      m_busyFcn = 0;
    ad98:	2000      	movs	r0, #0
  m_errorLine = line;
    ad9a:	4b10      	ldr	r3, [pc, #64]	; (addc <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    ad9c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    ad9e:	f240 424b 	movw	r2, #1099	; 0x44b
      m_busyFcn = 0;
    ada2:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    ada6:	601a      	str	r2, [r3, #0]
}
    ada8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    adac:	ea4f 2949 	mov.w	r9, r9, lsl #9
    adb0:	4808      	ldr	r0, [pc, #32]	; (add4 <SdioCard::writeStart(unsigned long)+0xc0>)
    adb2:	4649      	mov	r1, r9
    adb4:	f7ff fece 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    adb8:	2800      	cmp	r0, #0
    adba:	d1e9      	bne.n	ad90 <SdioCard::writeStart(unsigned long)+0x7c>
    adbc:	e7e1      	b.n	ad82 <SdioCard::writeStart(unsigned long)+0x6e>
    adbe:	bf00      	nop
    adc0:	0000ace9 	.word	0x0000ace9
    adc4:	200042a8 	.word	0x200042a8
    adc8:	0d1a0000 	.word	0x0d1a0000
    adcc:	000f4240 	.word	0x000f4240
    add0:	20004d4a 	.word	0x20004d4a
    add4:	193a0020 	.word	0x193a0020
    add8:	2000351a 	.word	0x2000351a
    addc:	20004280 	.word	0x20004280
    ade0:	200042ac 	.word	0x200042ac
    ade4:	402c0000 	.word	0x402c0000

0000ade8 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    ade8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    adec:	4c25      	ldr	r4, [pc, #148]	; (ae84 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    adee:	2100      	movs	r1, #0
    adf0:	4825      	ldr	r0, [pc, #148]	; (ae88 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    adf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    adf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    adf8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    adfa:	f7ff feab 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    adfe:	4605      	mov	r5, r0
    ae00:	b948      	cbnz	r0, ae16 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    ae02:	4922      	ldr	r1, [pc, #136]	; (ae8c <SdioCard::readStop()+0xa4>)
    ae04:	2009      	movs	r0, #9
  m_errorLine = line;
    ae06:	4b22      	ldr	r3, [pc, #136]	; (ae90 <SdioCard::readStop()+0xa8>)
    ae08:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    ae0c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    ae0e:	601a      	str	r2, [r3, #0]
}
    ae10:	4628      	mov	r0, r5
    ae12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    ae16:	4b1f      	ldr	r3, [pc, #124]	; (ae94 <SdioCard::readStop()+0xac>)
    ae18:	f8df 8080 	ldr.w	r8, [pc, #128]	; ae9c <SdioCard::readStop()+0xb4>
    ae1c:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    ae20:	f003 f9d2 	bl	e1c8 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    ae24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    ae26:	4606      	mov	r6, r0
  while (fcn()) {
    ae28:	01d8      	lsls	r0, r3, #7
    ae2a:	d418      	bmi.n	ae5e <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ae2c:	4f1a      	ldr	r7, [pc, #104]	; (ae98 <SdioCard::readStop()+0xb0>)
    ae2e:	e004      	b.n	ae3a <SdioCard::readStop()+0x52>
    yield();
    ae30:	f004 fe52 	bl	fad8 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    ae34:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    ae36:	01d9      	lsls	r1, r3, #7
    ae38:	d411      	bmi.n	ae5e <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ae3a:	f003 f9c5 	bl	e1c8 <micros>
    ae3e:	1b83      	subs	r3, r0, r6
    ae40:	42bb      	cmp	r3, r7
    ae42:	d9f5      	bls.n	ae30 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    ae44:	4a11      	ldr	r2, [pc, #68]	; (ae8c <SdioCard::readStop()+0xa4>)
    ae46:	210a      	movs	r1, #10
      m_busyFcn = 0;
    ae48:	2500      	movs	r5, #0
  m_errorLine = line;
    ae4a:	4b11      	ldr	r3, [pc, #68]	; (ae90 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    ae4c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    ae4e:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    ae52:	4628      	mov	r0, r5
      m_busyFcn = 0;
    ae54:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    ae58:	601a      	str	r2, [r3, #0]
}
    ae5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    ae5e:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    ae60:	4b08      	ldr	r3, [pc, #32]	; (ae84 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    ae62:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    ae66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ae68:	0792      	lsls	r2, r2, #30
    ae6a:	d5d1      	bpl.n	ae10 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    ae6c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    ae6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    ae70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    ae72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    ae76:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    ae7a:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    ae7c:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    ae7e:	629a      	str	r2, [r3, #40]	; 0x28
    ae80:	e7c6      	b.n	ae10 <SdioCard::readStop()+0x28>
    ae82:	bf00      	nop
    ae84:	402c0000 	.word	0x402c0000
    ae88:	0cdb0000 	.word	0x0cdb0000
    ae8c:	2000351a 	.word	0x2000351a
    ae90:	20004280 	.word	0x20004280
    ae94:	0000a6fd 	.word	0x0000a6fd
    ae98:	000f4240 	.word	0x000f4240
    ae9c:	200042ac 	.word	0x200042ac

0000aea0 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    aea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aea4:	4682      	mov	sl, r0
    aea6:	4689      	mov	r9, r1
    aea8:	4e36      	ldr	r6, [pc, #216]	; (af84 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    aeaa:	f003 f98d 	bl	e1c8 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    aeae:	4d36      	ldr	r5, [pc, #216]	; (af88 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    aeb0:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    aeb2:	f8df 8100 	ldr.w	r8, [pc, #256]	; afb4 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aeb6:	4f35      	ldr	r7, [pc, #212]	; (af8c <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    aeb8:	e004      	b.n	aec4 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aeba:	f003 f985 	bl	e1c8 <micros>
    aebe:	1b03      	subs	r3, r0, r4
    aec0:	42bb      	cmp	r3, r7
    aec2:	d827      	bhi.n	af14 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    aec4:	6831      	ldr	r1, [r6, #0]
    aec6:	4628      	mov	r0, r5
    aec8:	f7ff fe44 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    aecc:	2800      	cmp	r0, #0
    aece:	d0f4      	beq.n	aeba <cardCMD6(unsigned long, unsigned char*)+0x1a>
    aed0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    aed4:	05da      	lsls	r2, r3, #23
    aed6:	d5f0      	bpl.n	aeba <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    aed8:	2301      	movs	r3, #1
    aeda:	4d2d      	ldr	r5, [pc, #180]	; (af90 <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    aedc:	4f2d      	ldr	r7, [pc, #180]	; (af94 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    aede:	4651      	mov	r1, sl
  m_dmaBusy = true;
    aee0:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    aee2:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    aee4:	482c      	ldr	r0, [pc, #176]	; (af98 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    aee6:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    aee8:	4b2c      	ldr	r3, [pc, #176]	; (af9c <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    aeea:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    aeee:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    aef2:	4b2b      	ldr	r3, [pc, #172]	; (afa0 <cardCMD6(unsigned long, unsigned char*)+0x100>)
    aef4:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    aef8:	f7ff fe2c 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    aefc:	4604      	mov	r4, r0
    aefe:	b9a0      	cbnz	r0, af2a <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    af00:	4928      	ldr	r1, [pc, #160]	; (afa4 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    af02:	2004      	movs	r0, #4
  m_errorLine = line;
    af04:	4b28      	ldr	r3, [pc, #160]	; (afa8 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    af06:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    af0a:	7008      	strb	r0, [r1, #0]
}
    af0c:	4620      	mov	r0, r4
  m_errorLine = line;
    af0e:	601a      	str	r2, [r3, #0]
}
    af10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    af14:	4923      	ldr	r1, [pc, #140]	; (afa4 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    af16:	200a      	movs	r0, #10
  m_errorLine = line;
    af18:	4b23      	ldr	r3, [pc, #140]	; (afa8 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    af1a:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    af1e:	2400      	movs	r4, #0
  m_errorCode = code;
    af20:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    af22:	601a      	str	r2, [r3, #0]
}
    af24:	4620      	mov	r0, r4
    af26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    af2a:	4b20      	ldr	r3, [pc, #128]	; (afac <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    af2c:	f8df 9088 	ldr.w	r9, [pc, #136]	; afb8 <cardCMD6(unsigned long, unsigned char*)+0x118>
    af30:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    af34:	f003 f948 	bl	e1c8 <micros>
  return m_dmaBusy;
    af38:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    af3a:	4606      	mov	r6, r0
  while (fcn()) {
    af3c:	b1bb      	cbz	r3, af6e <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    af3e:	f8df 804c 	ldr.w	r8, [pc, #76]	; af8c <cardCMD6(unsigned long, unsigned char*)+0xec>
    af42:	e003      	b.n	af4c <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    af44:	f004 fdc8 	bl	fad8 <yield>
  return m_dmaBusy;
    af48:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    af4a:	b183      	cbz	r3, af6e <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    af4c:	f003 f93c 	bl	e1c8 <micros>
    af50:	1b83      	subs	r3, r0, r6
    af52:	4543      	cmp	r3, r8
    af54:	d9f6      	bls.n	af44 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    af56:	2300      	movs	r3, #0
    af58:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    af5c:	4911      	ldr	r1, [pc, #68]	; (afa4 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    af5e:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    af60:	4b11      	ldr	r3, [pc, #68]	; (afa8 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    af62:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    af66:	2400      	movs	r4, #0
  m_errorCode = code;
    af68:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    af6a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    af6c:	e7da      	b.n	af24 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    af6e:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    af70:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    af72:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    af74:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    af78:	d5f0      	bpl.n	af5c <cardCMD6(unsigned long, unsigned char*)+0xbc>
    af7a:	683a      	ldr	r2, [r7, #0]
    af7c:	4b0c      	ldr	r3, [pc, #48]	; (afb0 <cardCMD6(unsigned long, unsigned char*)+0x110>)
    af7e:	421a      	tst	r2, r3
    af80:	d0d0      	beq.n	af24 <cardCMD6(unsigned long, unsigned char*)+0x84>
    af82:	e7eb      	b.n	af5c <cardCMD6(unsigned long, unsigned char*)+0xbc>
    af84:	200042a8 	.word	0x200042a8
    af88:	0d1a0000 	.word	0x0d1a0000
    af8c:	000f4240 	.word	0x000f4240
    af90:	20004d4c 	.word	0x20004d4c
    af94:	200042b0 	.word	0x200042b0
    af98:	063a0011 	.word	0x063a0011
    af9c:	00010040 	.word	0x00010040
    afa0:	117f0002 	.word	0x117f0002
    afa4:	2000351a 	.word	0x2000351a
    afa8:	20004280 	.word	0x20004280
    afac:	0000a711 	.word	0x0000a711
    afb0:	117f0000 	.word	0x117f0000
    afb4:	402c0000 	.word	0x402c0000
    afb8:	200042ac 	.word	0x200042ac

0000afbc <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    afbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    afc0:	4d32      	ldr	r5, [pc, #200]	; (b08c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    afc2:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    afc4:	7aab      	ldrb	r3, [r5, #10]
    afc6:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    afca:	d112      	bne.n	aff2 <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    afcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    afd0:	7aea      	ldrb	r2, [r5, #11]
    afd2:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    afd4:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    afd8:	1c62      	adds	r2, r4, #1
    afda:	430a      	orrs	r2, r1
    afdc:	4213      	tst	r3, r2
    afde:	d008      	beq.n	aff2 <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    afe0:	492b      	ldr	r1, [pc, #172]	; (b090 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    afe2:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    afe4:	4b2b      	ldr	r3, [pc, #172]	; (b094 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    afe6:	f240 3202 	movw	r2, #770	; 0x302
  m_errorCode = code;
    afea:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    afec:	601a      	str	r2, [r3, #0]
}
    afee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    aff2:	4b29      	ldr	r3, [pc, #164]	; (b098 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    aff4:	781b      	ldrb	r3, [r3, #0]
    aff6:	b90b      	cbnz	r3, affc <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    aff8:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    affa:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    affc:	4827      	ldr	r0, [pc, #156]	; (b09c <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    affe:	f7ff fda9 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b002:	b940      	cbnz	r0, b016 <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    b004:	4922      	ldr	r1, [pc, #136]	; (b090 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b006:	240f      	movs	r4, #15
  m_errorLine = line;
    b008:	4b22      	ldr	r3, [pc, #136]	; (b094 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b00a:	f240 320a 	movw	r2, #778	; 0x30a
  m_errorCode = code;
    b00e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b010:	601a      	str	r2, [r3, #0]
}
    b012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    b016:	4621      	mov	r1, r4
    b018:	4821      	ldr	r0, [pc, #132]	; (b0a0 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    b01a:	f7ff fd9b 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b01e:	b940      	cbnz	r0, b032 <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    b020:	491b      	ldr	r1, [pc, #108]	; (b090 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b022:	2410      	movs	r4, #16
  m_errorLine = line;
    b024:	4b1b      	ldr	r3, [pc, #108]	; (b094 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b026:	f240 320d 	movw	r2, #781	; 0x30d
  m_errorCode = code;
    b02a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b02c:	601a      	str	r2, [r3, #0]
}
    b02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    b032:	2100      	movs	r1, #0
    b034:	481b      	ldr	r0, [pc, #108]	; (b0a4 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    b036:	f7ff fd8d 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b03a:	b938      	cbnz	r0, b04c <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    b03c:	4914      	ldr	r1, [pc, #80]	; (b090 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b03e:	2411      	movs	r4, #17
  m_errorLine = line;
    b040:	4b14      	ldr	r3, [pc, #80]	; (b094 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b042:	f44f 7244 	mov.w	r2, #784	; 0x310
  m_errorCode = code;
    b046:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b048:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    b04a:	e7e2      	b.n	b012 <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    b04c:	f003 f8bc 	bl	e1c8 <micros>
    b050:	4e15      	ldr	r6, [pc, #84]	; (b0a8 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b052:	4d16      	ldr	r5, [pc, #88]	; (b0ac <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    b054:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b056:	f8df 805c 	ldr.w	r8, [pc, #92]	; b0b4 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b05a:	4f15      	ldr	r7, [pc, #84]	; (b0b0 <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b05c:	6831      	ldr	r1, [r6, #0]
    b05e:	4628      	mov	r0, r5
    b060:	f7ff fd78 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b064:	b118      	cbz	r0, b06e <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    b066:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    b06a:	05db      	lsls	r3, r3, #23
    b06c:	d4d1      	bmi.n	b012 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b06e:	f003 f8ab 	bl	e1c8 <micros>
    b072:	1b00      	subs	r0, r0, r4
    b074:	42b8      	cmp	r0, r7
    b076:	d9f1      	bls.n	b05c <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    b078:	4905      	ldr	r1, [pc, #20]	; (b090 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b07a:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    b07c:	4b05      	ldr	r3, [pc, #20]	; (b094 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b07e:	f240 3213 	movw	r2, #787	; 0x313
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    b082:	2000      	movs	r0, #0
  m_errorCode = code;
    b084:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b086:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    b088:	e7c3      	b.n	b012 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    b08a:	bf00      	nop
    b08c:	20004294 	.word	0x20004294
    b090:	2000351a 	.word	0x2000351a
    b094:	20004280 	.word	0x20004280
    b098:	20004d4a 	.word	0x20004d4a
    b09c:	201a0000 	.word	0x201a0000
    b0a0:	211a0000 	.word	0x211a0000
    b0a4:	261b0000 	.word	0x261b0000
    b0a8:	200042a8 	.word	0x200042a8
    b0ac:	0d1a0000 	.word	0x0d1a0000
    b0b0:	000f4240 	.word	0x000f4240
    b0b4:	402c0000 	.word	0x402c0000

0000b0b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    b0bc:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    b0c0:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    b0c2:	bf18      	it	ne
    b0c4:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    b0c6:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    b0c8:	9300      	str	r3, [sp, #0]
    b0ca:	2b00      	cmp	r3, #0
    b0cc:	bf08      	it	eq
    b0ce:	f044 0401 	orreq.w	r4, r4, #1
    b0d2:	b15c      	cbz	r4, b0ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    b0d4:	4940      	ldr	r1, [pc, #256]	; (b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    b0d6:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    b0d8:	4b40      	ldr	r3, [pc, #256]	; (b1dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    b0da:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    b0de:	2400      	movs	r4, #0
  m_errorCode = code;
    b0e0:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    b0e2:	601a      	str	r2, [r3, #0]
}
    b0e4:	4620      	mov	r0, r4
    b0e6:	b003      	add	sp, #12
    b0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    b0ec:	4b3c      	ldr	r3, [pc, #240]	; (b1e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    b0ee:	4615      	mov	r5, r2
    b0f0:	4a3c      	ldr	r2, [pc, #240]	; (b1e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b0f2:	460e      	mov	r6, r1
    b0f4:	f8df 910c 	ldr.w	r9, [pc, #268]	; b204 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    b0f8:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    b0fa:	f003 f865 	bl	e1c8 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b0fe:	f8df 8108 	ldr.w	r8, [pc, #264]	; b208 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    b102:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b104:	f8df b104 	ldr.w	fp, [pc, #260]	; b20c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b108:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b1fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    b10c:	e006      	b.n	b11c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b10e:	f003 f85b 	bl	e1c8 <micros>
    b112:	1bc0      	subs	r0, r0, r7
    b114:	4550      	cmp	r0, sl
    b116:	d844      	bhi.n	b1a2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    b118:	f004 fcde 	bl	fad8 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b11c:	f8d9 1000 	ldr.w	r1, [r9]
    b120:	4640      	mov	r0, r8
    b122:	f7ff fd17 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b126:	2800      	cmp	r0, #0
    b128:	d0f1      	beq.n	b10e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    b12a:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    b12e:	05da      	lsls	r2, r3, #23
    b130:	d5ed      	bpl.n	b10e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b132:	9a00      	ldr	r2, [sp, #0]
    b134:	4b2c      	ldr	r3, [pc, #176]	; (b1e8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    b136:	492b      	ldr	r1, [pc, #172]	; (b1e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b138:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    b13c:	2200      	movs	r2, #0
  m_dmaBusy = true;
    b13e:	4f2b      	ldr	r7, [pc, #172]	; (b1ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    b140:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    b146:	2101      	movs	r1, #1
  m_irqstat = 0;
    b148:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b210 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    b14c:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    b14e:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    b152:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b156:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b15a:	4b25      	ldr	r3, [pc, #148]	; (b1f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    b15c:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b160:	4b24      	ldr	r3, [pc, #144]	; (b1f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    b162:	781b      	ldrb	r3, [r3, #0]
    b164:	b343      	cbz	r3, b1b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    b166:	4631      	mov	r1, r6
    b168:	9801      	ldr	r0, [sp, #4]
    b16a:	f7ff fcf3 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b16e:	4681      	mov	r9, r0
    b170:	2800      	cmp	r0, #0
    b172:	d0b7      	beq.n	b0e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    b174:	4b20      	ldr	r3, [pc, #128]	; (b1f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    b176:	4a1b      	ldr	r2, [pc, #108]	; (b1e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b178:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    b17a:	f003 f825 	bl	e1c8 <micros>
  return m_dmaBusy;
    b17e:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    b180:	4605      	mov	r5, r0
  while (fcn()) {
    b182:	b1db      	cbz	r3, b1bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b184:	4e1d      	ldr	r6, [pc, #116]	; (b1fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    b186:	e003      	b.n	b190 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    b188:	f004 fca6 	bl	fad8 <yield>
  return m_dmaBusy;
    b18c:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    b18e:	b1ab      	cbz	r3, b1bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b190:	f003 f81a 	bl	e1c8 <micros>
    b194:	1b40      	subs	r0, r0, r5
    b196:	42b0      	cmp	r0, r6
    b198:	d9f6      	bls.n	b188 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    b19a:	2300      	movs	r3, #0
    b19c:	4a11      	ldr	r2, [pc, #68]	; (b1e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b19e:	6013      	str	r3, [r2, #0]
      return true;
    b1a0:	e7a0      	b.n	b0e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    b1a2:	4b0d      	ldr	r3, [pc, #52]	; (b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    b1a4:	220a      	movs	r2, #10
      m_busyFcn = 0;
    b1a6:	2100      	movs	r1, #0
    b1a8:	480e      	ldr	r0, [pc, #56]	; (b1e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    b1aa:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b1ac:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    b1b0:	4b0a      	ldr	r3, [pc, #40]	; (b1dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    b1b2:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    b1b4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b1b6:	e795      	b.n	b0e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b1b8:	0276      	lsls	r6, r6, #9
    b1ba:	e7d4      	b.n	b166 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    b1bc:	2300      	movs	r3, #0
    b1be:	4a09      	ldr	r2, [pc, #36]	; (b1e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b1c0:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b1c2:	f8d8 3000 	ldr.w	r3, [r8]
    b1c6:	079b      	lsls	r3, r3, #30
    b1c8:	d58c      	bpl.n	b0e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    b1ca:	f8d8 2000 	ldr.w	r2, [r8]
    b1ce:	4b0c      	ldr	r3, [pc, #48]	; (b200 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    b1d0:	421a      	tst	r2, r3
    b1d2:	bf08      	it	eq
    b1d4:	464c      	moveq	r4, r9
    b1d6:	e785      	b.n	b0e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    b1d8:	2000351a 	.word	0x2000351a
    b1dc:	20004280 	.word	0x20004280
    b1e0:	0000ace9 	.word	0x0000ace9
    b1e4:	200042ac 	.word	0x200042ac
    b1e8:	1fff0000 	.word	0x1fff0000
    b1ec:	20004d4c 	.word	0x20004d4c
    b1f0:	117f0002 	.word	0x117f0002
    b1f4:	20004d4a 	.word	0x20004d4a
    b1f8:	0000a711 	.word	0x0000a711
    b1fc:	000f4240 	.word	0x000f4240
    b200:	117f0000 	.word	0x117f0000
    b204:	200042a8 	.word	0x200042a8
    b208:	0d1a0000 	.word	0x0d1a0000
    b20c:	402c0000 	.word	0x402c0000
    b210:	200042b0 	.word	0x200042b0

0000b214 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    b214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b216:	4606      	mov	r6, r0
    b218:	7a00      	ldrb	r0, [r0, #8]
    b21a:	460c      	mov	r4, r1
    b21c:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b21e:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    b220:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    b222:	d413      	bmi.n	b24c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    b224:	b183      	cbz	r3, b248 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    b226:	440f      	add	r7, r1
    b228:	e001      	b.n	b22e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    b22a:	42bc      	cmp	r4, r7
    b22c:	d00c      	beq.n	b248 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    b22e:	6833      	ldr	r3, [r6, #0]
    b230:	462a      	mov	r2, r5
    b232:	4621      	mov	r1, r4
    b234:	4630      	mov	r0, r6
    b236:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    b238:	3401      	adds	r4, #1
    b23a:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    b23e:	4798      	blx	r3
    b240:	2800      	cmp	r0, #0
    b242:	d1f2      	bne.n	b22a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    b244:	2000      	movs	r0, #0
}
    b246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b248:	2001      	movs	r0, #1
}
    b24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    b24c:	0790      	lsls	r0, r2, #30
    b24e:	d012      	beq.n	b276 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b250:	2b00      	cmp	r3, #0
    b252:	d0f9      	beq.n	b248 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    b254:	440f      	add	r7, r1
    b256:	e001      	b.n	b25c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    b258:	42bc      	cmp	r4, r7
    b25a:	d0f5      	beq.n	b248 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    b25c:	6833      	ldr	r3, [r6, #0]
    b25e:	462a      	mov	r2, r5
    b260:	4621      	mov	r1, r4
    b262:	4630      	mov	r0, r6
    b264:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b266:	3401      	adds	r4, #1
    b268:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    b26c:	4798      	blx	r3
    b26e:	2800      	cmp	r0, #0
    b270:	d1f2      	bne.n	b258 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    b272:	2000      	movs	r0, #0
    b274:	e7e7      	b.n	b246 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    b276:	4806      	ldr	r0, [pc, #24]	; (b290 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    b278:	f7ff ff1e 	bl	b0b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b27c:	2800      	cmp	r0, #0
    b27e:	d1e3      	bne.n	b248 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    b280:	4904      	ldr	r1, [pc, #16]	; (b294 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    b282:	240c      	movs	r4, #12
  m_errorLine = line;
    b284:	4b04      	ldr	r3, [pc, #16]	; (b298 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    b286:	f240 32a1 	movw	r2, #929	; 0x3a1
  m_errorCode = code;
    b28a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b28c:	601a      	str	r2, [r3, #0]
}
    b28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b290:	123a0037 	.word	0x123a0037
    b294:	2000351a 	.word	0x2000351a
    b298:	20004280 	.word	0x20004280

0000b29c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b29e:	4606      	mov	r6, r0
    b2a0:	7a00      	ldrb	r0, [r0, #8]
    b2a2:	460c      	mov	r4, r1
    b2a4:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b2a6:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b2a8:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    b2aa:	d413      	bmi.n	b2d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    b2ac:	b183      	cbz	r3, b2d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    b2ae:	440f      	add	r7, r1
    b2b0:	e001      	b.n	b2b6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    b2b2:	42bc      	cmp	r4, r7
    b2b4:	d00c      	beq.n	b2d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    b2b6:	6833      	ldr	r3, [r6, #0]
    b2b8:	462a      	mov	r2, r5
    b2ba:	4621      	mov	r1, r4
    b2bc:	4630      	mov	r0, r6
    b2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    b2c0:	3401      	adds	r4, #1
    b2c2:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    b2c6:	4798      	blx	r3
    b2c8:	2800      	cmp	r0, #0
    b2ca:	d1f2      	bne.n	b2b2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    b2cc:	2000      	movs	r0, #0
}
    b2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b2d0:	2001      	movs	r0, #1
}
    b2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    b2d4:	0790      	lsls	r0, r2, #30
    b2d6:	d012      	beq.n	b2fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b2d8:	2b00      	cmp	r3, #0
    b2da:	d0f9      	beq.n	b2d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    b2dc:	440f      	add	r7, r1
    b2de:	e001      	b.n	b2e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    b2e0:	42bc      	cmp	r4, r7
    b2e2:	d0f5      	beq.n	b2d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    b2e4:	6833      	ldr	r3, [r6, #0]
    b2e6:	462a      	mov	r2, r5
    b2e8:	4621      	mov	r1, r4
    b2ea:	4630      	mov	r0, r6
    b2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b2ee:	3401      	adds	r4, #1
    b2f0:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    b2f4:	4798      	blx	r3
    b2f6:	2800      	cmp	r0, #0
    b2f8:	d1f2      	bne.n	b2e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    b2fa:	2000      	movs	r0, #0
    b2fc:	e7e7      	b.n	b2ce <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    b2fe:	4806      	ldr	r0, [pc, #24]	; (b318 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    b300:	f7ff feda 	bl	b0b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b304:	2800      	cmp	r0, #0
    b306:	d1e3      	bne.n	b2d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    b308:	4904      	ldr	r1, [pc, #16]	; (b31c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    b30a:	240e      	movs	r4, #14
  m_errorLine = line;
    b30c:	4b04      	ldr	r3, [pc, #16]	; (b320 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    b30e:	f240 423d 	movw	r2, #1085	; 0x43d
  m_errorCode = code;
    b312:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b314:	601a      	str	r2, [r3, #0]
}
    b316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b318:	193a0027 	.word	0x193a0027
    b31c:	2000351a 	.word	0x2000351a
    b320:	20004280 	.word	0x20004280

0000b324 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    b324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    b328:	2500      	movs	r5, #0
  m_initDone = false;
    b32a:	f8df 92c0 	ldr.w	r9, [pc, #704]	; b5ec <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = SD_CARD_ERROR_NONE;
    b32e:	4c9b      	ldr	r4, [pc, #620]	; (b59c <SdioCard::begin(SdioConfig)+0x278>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    b330:	b091      	sub	sp, #68	; 0x44
  m_highCapacity = false;
    b332:	f8df 82bc 	ldr.w	r8, [pc, #700]	; b5f0 <SdioCard::begin(SdioConfig)+0x2cc>
  m_version2 = false;
    b336:	4e9a      	ldr	r6, [pc, #616]	; (b5a0 <SdioCard::begin(SdioConfig)+0x27c>)
  m_sdioConfig = sdioConfig;
    b338:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    b33a:	7245      	strb	r5, [r0, #9]
  m_initDone = false;
    b33c:	f889 5000 	strb.w	r5, [r9]
  m_errorCode = SD_CARD_ERROR_NONE;
    b340:	7025      	strb	r5, [r4, #0]
  m_highCapacity = false;
    b342:	f888 5000 	strb.w	r5, [r8]
  m_version2 = false;
    b346:	7035      	strb	r5, [r6, #0]
  initSDHC();
    b348:	f7ff fad2 	bl	a8f0 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    b34c:	4629      	mov	r1, r5
    b34e:	4628      	mov	r0, r5
    b350:	f7ff fc00 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b354:	b950      	cbnz	r0, b36c <SdioCard::begin(SdioConfig)+0x48>
  m_errorCode = code;
    b356:	2101      	movs	r1, #1
  m_errorLine = line;
    b358:	4b92      	ldr	r3, [pc, #584]	; (b5a4 <SdioCard::begin(SdioConfig)+0x280>)
    b35a:	f240 228e 	movw	r2, #654	; 0x28e
    b35e:	4605      	mov	r5, r0
  m_errorCode = code;
    b360:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b362:	601a      	str	r2, [r3, #0]
}
    b364:	4628      	mov	r0, r5
    b366:	b011      	add	sp, #68	; 0x44
    b368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b36c:	2503      	movs	r5, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    b36e:	4f8e      	ldr	r7, [pc, #568]	; (b5a8 <SdioCard::begin(SdioConfig)+0x284>)
    b370:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    b374:	4638      	mov	r0, r7
    b376:	f7ff fbed 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b37a:	2800      	cmp	r0, #0
    b37c:	d14e      	bne.n	b41c <SdioCard::begin(SdioConfig)+0xf8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    b37e:	3d01      	subs	r5, #1
    b380:	d1f6      	bne.n	b370 <SdioCard::begin(SdioConfig)+0x4c>
  if (!m_version2) {
    b382:	7833      	ldrb	r3, [r6, #0]
    b384:	2b00      	cmp	r3, #0
    b386:	d03d      	beq.n	b404 <SdioCard::begin(SdioConfig)+0xe0>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b388:	f8df b268 	ldr.w	fp, [pc, #616]	; b5f4 <SdioCard::begin(SdioConfig)+0x2d0>
  int m = micros();
    b38c:	f002 ff1c 	bl	e1c8 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b390:	4e86      	ldr	r6, [pc, #536]	; (b5ac <SdioCard::begin(SdioConfig)+0x288>)
  int m = micros();
    b392:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b394:	f8df a260 	ldr.w	sl, [pc, #608]	; b5f8 <SdioCard::begin(SdioConfig)+0x2d4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b398:	4f85      	ldr	r7, [pc, #532]	; (b5b0 <SdioCard::begin(SdioConfig)+0x28c>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b39a:	2100      	movs	r1, #0
    b39c:	4630      	mov	r0, r6
    b39e:	f7ff fbd9 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b3a2:	b950      	cbnz	r0, b3ba <SdioCard::begin(SdioConfig)+0x96>
      return sdError(SD_CARD_ERROR_ACMD41);
    b3a4:	2500      	movs	r5, #0
  m_errorCode = code;
    b3a6:	2117      	movs	r1, #23
  m_errorLine = line;
    b3a8:	4b7e      	ldr	r3, [pc, #504]	; (b5a4 <SdioCard::begin(SdioConfig)+0x280>)
    b3aa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
}
    b3ae:	4628      	mov	r0, r5
  m_errorCode = code;
    b3b0:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b3b2:	601a      	str	r2, [r3, #0]
}
    b3b4:	b011      	add	sp, #68	; 0x44
    b3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b3ba:	4659      	mov	r1, fp
    b3bc:	4650      	mov	r0, sl
    b3be:	f7ff fbc9 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b3c2:	2800      	cmp	r0, #0
    b3c4:	d0ee      	beq.n	b3a4 <SdioCard::begin(SdioConfig)+0x80>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    b3c6:	f002 feff 	bl	e1c8 <micros>
    b3ca:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b3cc:	4b79      	ldr	r3, [pc, #484]	; (b5b4 <SdioCard::begin(SdioConfig)+0x290>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b3ce:	42b8      	cmp	r0, r7
    b3d0:	d8e8      	bhi.n	b3a4 <SdioCard::begin(SdioConfig)+0x80>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b3d2:	691a      	ldr	r2, [r3, #16]
    b3d4:	2a00      	cmp	r2, #0
    b3d6:	dae0      	bge.n	b39a <SdioCard::begin(SdioConfig)+0x76>
  m_ocr = SDHC_CMDRSP0;
    b3d8:	6919      	ldr	r1, [r3, #16]
    b3da:	4a77      	ldr	r2, [pc, #476]	; (b5b8 <SdioCard::begin(SdioConfig)+0x294>)
    b3dc:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    b3de:	691b      	ldr	r3, [r3, #16]
    b3e0:	005a      	lsls	r2, r3, #1
    b3e2:	d502      	bpl.n	b3ea <SdioCard::begin(SdioConfig)+0xc6>
    m_highCapacity = true;
    b3e4:	2301      	movs	r3, #1
    b3e6:	f888 3000 	strb.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    b3ea:	2100      	movs	r1, #0
    b3ec:	4873      	ldr	r0, [pc, #460]	; (b5bc <SdioCard::begin(SdioConfig)+0x298>)
    b3ee:	f7ff fbb1 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b3f2:	4605      	mov	r5, r0
    b3f4:	bb10      	cbnz	r0, b43c <SdioCard::begin(SdioConfig)+0x118>
  m_errorCode = code;
    b3f6:	2102      	movs	r1, #2
  m_errorLine = line;
    b3f8:	4b6a      	ldr	r3, [pc, #424]	; (b5a4 <SdioCard::begin(SdioConfig)+0x280>)
    b3fa:	f240 22b1 	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    b3fe:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b400:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    b402:	e7af      	b.n	b364 <SdioCard::begin(SdioConfig)+0x40>
    initSDHC();
    b404:	f7ff fa74 	bl	a8f0 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    b408:	4629      	mov	r1, r5
    b40a:	4628      	mov	r0, r5
    b40c:	f7ff fba2 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b410:	7833      	ldrb	r3, [r6, #0]
    b412:	2b00      	cmp	r3, #0
    b414:	d1b8      	bne.n	b388 <SdioCard::begin(SdioConfig)+0x64>
    b416:	f44f 1b40 	mov.w	fp, #3145728	; 0x300000
    b41a:	e7b7      	b.n	b38c <SdioCard::begin(SdioConfig)+0x68>
      if (SDHC_CMDRSP0 != 0X1AA) {
    b41c:	4b65      	ldr	r3, [pc, #404]	; (b5b4 <SdioCard::begin(SdioConfig)+0x290>)
    b41e:	691b      	ldr	r3, [r3, #16]
    b420:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    b424:	d007      	beq.n	b436 <SdioCard::begin(SdioConfig)+0x112>
  m_errorCode = code;
    b426:	2106      	movs	r1, #6
  m_errorLine = line;
    b428:	4b5e      	ldr	r3, [pc, #376]	; (b5a4 <SdioCard::begin(SdioConfig)+0x280>)
    b42a:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    b42e:	2500      	movs	r5, #0
  m_errorCode = code;
    b430:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b432:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    b434:	e796      	b.n	b364 <SdioCard::begin(SdioConfig)+0x40>
      m_version2 = true;
    b436:	2301      	movs	r3, #1
    b438:	7033      	strb	r3, [r6, #0]
  if (!m_version2) {
    b43a:	e7a5      	b.n	b388 <SdioCard::begin(SdioConfig)+0x64>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    b43c:	2100      	movs	r1, #0
    b43e:	4860      	ldr	r0, [pc, #384]	; (b5c0 <SdioCard::begin(SdioConfig)+0x29c>)
    b440:	f7ff fb88 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b444:	4605      	mov	r5, r0
    b446:	b930      	cbnz	r0, b456 <SdioCard::begin(SdioConfig)+0x132>
  m_errorCode = code;
    b448:	2103      	movs	r1, #3
  m_errorLine = line;
    b44a:	4b56      	ldr	r3, [pc, #344]	; (b5a4 <SdioCard::begin(SdioConfig)+0x280>)
    b44c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    b450:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b452:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    b454:	e786      	b.n	b364 <SdioCard::begin(SdioConfig)+0x40>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b456:	4e57      	ldr	r6, [pc, #348]	; (b5b4 <SdioCard::begin(SdioConfig)+0x290>)
    b458:	4b5a      	ldr	r3, [pc, #360]	; (b5c4 <SdioCard::begin(SdioConfig)+0x2a0>)
    b45a:	6932      	ldr	r2, [r6, #16]
    b45c:	4f5a      	ldr	r7, [pc, #360]	; (b5c8 <SdioCard::begin(SdioConfig)+0x2a4>)
    b45e:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b460:	495a      	ldr	r1, [pc, #360]	; (b5cc <SdioCard::begin(SdioConfig)+0x2a8>)
    b462:	485b      	ldr	r0, [pc, #364]	; (b5d0 <SdioCard::begin(SdioConfig)+0x2ac>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b464:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b466:	f7ff fbc1 	bl	abec <readReg16(unsigned long, void*)>
    b46a:	4605      	mov	r5, r0
    b46c:	b930      	cbnz	r0, b47c <SdioCard::begin(SdioConfig)+0x158>
  m_errorCode = code;
    b46e:	2107      	movs	r1, #7
  m_errorLine = line;
    b470:	4b4c      	ldr	r3, [pc, #304]	; (b5a4 <SdioCard::begin(SdioConfig)+0x280>)
    b472:	f240 22b9 	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    b476:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b478:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    b47a:	e773      	b.n	b364 <SdioCard::begin(SdioConfig)+0x40>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    b47c:	4955      	ldr	r1, [pc, #340]	; (b5d4 <SdioCard::begin(SdioConfig)+0x2b0>)
    b47e:	4856      	ldr	r0, [pc, #344]	; (b5d8 <SdioCard::begin(SdioConfig)+0x2b4>)
    b480:	f7ff fbb4 	bl	abec <readReg16(unsigned long, void*)>
    b484:	4605      	mov	r5, r0
    b486:	b930      	cbnz	r0, b496 <SdioCard::begin(SdioConfig)+0x172>
  m_errorCode = code;
    b488:	2108      	movs	r1, #8
  m_errorLine = line;
    b48a:	4b46      	ldr	r3, [pc, #280]	; (b5a4 <SdioCard::begin(SdioConfig)+0x280>)
    b48c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    b490:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b492:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    b494:	e766      	b.n	b364 <SdioCard::begin(SdioConfig)+0x40>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    b496:	6839      	ldr	r1, [r7, #0]
    b498:	4850      	ldr	r0, [pc, #320]	; (b5dc <SdioCard::begin(SdioConfig)+0x2b8>)
    b49a:	f7ff fb5b 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b49e:	4605      	mov	r5, r0
    b4a0:	b930      	cbnz	r0, b4b0 <SdioCard::begin(SdioConfig)+0x18c>
  m_errorCode = code;
    b4a2:	2105      	movs	r1, #5
  m_errorLine = line;
    b4a4:	4b3f      	ldr	r3, [pc, #252]	; (b5a4 <SdioCard::begin(SdioConfig)+0x280>)
    b4a6:	f240 22bf 	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    b4aa:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b4ac:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    b4ae:	e759      	b.n	b364 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b4b0:	6839      	ldr	r1, [r7, #0]
    b4b2:	483e      	ldr	r0, [pc, #248]	; (b5ac <SdioCard::begin(SdioConfig)+0x288>)
    b4b4:	f7ff fb4e 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b4b8:	b938      	cbnz	r0, b4ca <SdioCard::begin(SdioConfig)+0x1a6>
  m_errorCode = code;
    b4ba:	2114      	movs	r1, #20
  m_errorLine = line;
    b4bc:	4b39      	ldr	r3, [pc, #228]	; (b5a4 <SdioCard::begin(SdioConfig)+0x280>)
    b4be:	f240 22c3 	movw	r2, #707	; 0x2c3
    return sdError(SD_CARD_ERROR_ACMD6);
    b4c2:	2500      	movs	r5, #0
  m_errorCode = code;
    b4c4:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b4c6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    b4c8:	e74c      	b.n	b364 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b4ca:	2102      	movs	r1, #2
    b4cc:	4844      	ldr	r0, [pc, #272]	; (b5e0 <SdioCard::begin(SdioConfig)+0x2bc>)
    b4ce:	f7ff fb41 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b4d2:	4605      	mov	r5, r0
    b4d4:	2800      	cmp	r0, #0
    b4d6:	d0f0      	beq.n	b4ba <SdioCard::begin(SdioConfig)+0x196>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b4d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    b4da:	4669      	mov	r1, sp
    b4dc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b4e0:	f023 0306 	bic.w	r3, r3, #6
    b4e4:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    b4e6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    b4e8:	f043 0302 	orr.w	r3, r3, #2
    b4ec:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    b4ee:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    b4f2:	6473      	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    b4f4:	f7ff fcd4 	bl	aea0 <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
    b4f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
    b4fc:	079b      	lsls	r3, r3, #30
    b4fe:	d543      	bpl.n	b588 <SdioCard::begin(SdioConfig)+0x264>
    b500:	2800      	cmp	r0, #0
    b502:	d041      	beq.n	b588 <SdioCard::begin(SdioConfig)+0x264>
    uint32_t m_errorLine_before = m_errorLine;
    b504:	4e27      	ldr	r6, [pc, #156]	; (b5a4 <SdioCard::begin(SdioConfig)+0x280>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    b506:	4669      	mov	r1, sp
    b508:	4836      	ldr	r0, [pc, #216]	; (b5e4 <SdioCard::begin(SdioConfig)+0x2c0>)
    uint8_t err_code_before = m_errorCode;
    b50a:	f894 8000 	ldrb.w	r8, [r4]
    uint32_t m_errorLine_before = m_errorLine;
    b50e:	6837      	ldr	r7, [r6, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    b510:	f7ff fcc6 	bl	aea0 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    b514:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b518:	f003 030f 	and.w	r3, r3, #15
    if (switchRequestAsk && switchRequestDone) {
    b51c:	2b01      	cmp	r3, #1
    b51e:	d136      	bne.n	b58e <SdioCard::begin(SdioConfig)+0x26a>
    b520:	b3a8      	cbz	r0, b58e <SdioCard::begin(SdioConfig)+0x26a>
      kHzSdClk = 50000;
    b522:	f24c 3050 	movw	r0, #50000	; 0xc350
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b526:	4c30      	ldr	r4, [pc, #192]	; (b5e8 <SdioCard::begin(SdioConfig)+0x2c4>)
    b528:	2305      	movs	r3, #5
    b52a:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    b52e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    b532:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    b536:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    b53a:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    b53e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    b542:	f7ff f8eb 	bl	a71c <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b546:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b548:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b54c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    b550:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    b554:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    b558:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    b55c:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    b560:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b564:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b568:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b56c:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b570:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b574:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    b578:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b57a:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b57e:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    b582:	f889 3000 	strb.w	r3, [r9]
  return true;
    b586:	e6ed      	b.n	b364 <SdioCard::begin(SdioConfig)+0x40>
  kHzSdClk = 25000;
    b588:	f246 10a8 	movw	r0, #25000	; 0x61a8
    b58c:	e7cb      	b.n	b526 <SdioCard::begin(SdioConfig)+0x202>
    b58e:	f246 10a8 	movw	r0, #25000	; 0x61a8
      m_errorCode = err_code_before;
    b592:	f884 8000 	strb.w	r8, [r4]
      m_errorLine = m_errorLine_before;
    b596:	6037      	str	r7, [r6, #0]
    b598:	e7c5      	b.n	b526 <SdioCard::begin(SdioConfig)+0x202>
    b59a:	bf00      	nop
    b59c:	2000351a 	.word	0x2000351a
    b5a0:	20004d49 	.word	0x20004d49
    b5a4:	20004280 	.word	0x20004280
    b5a8:	081a0000 	.word	0x081a0000
    b5ac:	371a0000 	.word	0x371a0000
    b5b0:	000f4240 	.word	0x000f4240
    b5b4:	402c0000 	.word	0x402c0000
    b5b8:	200042a4 	.word	0x200042a4
    b5bc:	02090000 	.word	0x02090000
    b5c0:	031a0000 	.word	0x031a0000
    b5c4:	ffff0000 	.word	0xffff0000
    b5c8:	200042a8 	.word	0x200042a8
    b5cc:	20004294 	.word	0x20004294
    b5d0:	09090000 	.word	0x09090000
    b5d4:	20004284 	.word	0x20004284
    b5d8:	0a090000 	.word	0x0a090000
    b5dc:	071b0000 	.word	0x071b0000
    b5e0:	061a0000 	.word	0x061a0000
    b5e4:	80fffff1 	.word	0x80fffff1
    b5e8:	401f8000 	.word	0x401f8000
    b5ec:	20004d48 	.word	0x20004d48
    b5f0:	20004d4a 	.word	0x20004d4a
    b5f4:	40300000 	.word	0x40300000
    b5f8:	29020000 	.word	0x29020000

0000b5fc <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    b5fc:	4b37      	ldr	r3, [pc, #220]	; (b6dc <SdioCard::readData(unsigned char*)+0xe0>)
    b5fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b600:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    b602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b606:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    b608:	d40d      	bmi.n	b626 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b60a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b60c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b610:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    b612:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    b614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b616:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    b61a:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b61c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b61e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b622:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    b624:	b662      	cpsie	i
  uint32_t m = micros();
    b626:	f002 fdcf 	bl	e1c8 <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    b62a:	4e2c      	ldr	r6, [pc, #176]	; (b6dc <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b62c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b6f4 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    b630:	4605      	mov	r5, r0
  while (fcn()) {
    b632:	e004      	b.n	b63e <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b634:	f002 fdc8 	bl	e1c8 <micros>
    b638:	1b43      	subs	r3, r0, r5
    b63a:	4543      	cmp	r3, r8
    b63c:	d837      	bhi.n	b6ae <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    b63e:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    b640:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    b644:	d0f6      	beq.n	b634 <SdioCard::readData(unsigned char*)+0x38>
    b646:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    b64a:	4824      	ldr	r0, [pc, #144]	; (b6dc <SdioCard::readData(unsigned char*)+0xe0>)
    b64c:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    b650:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b652:	051b      	lsls	r3, r3, #20
    b654:	d5fc      	bpl.n	b650 <SdioCard::readData(unsigned char*)+0x54>
    b656:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    b65a:	6a02      	ldr	r2, [r0, #32]
    b65c:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    b660:	459c      	cmp	ip, r3
    b662:	d1fa      	bne.n	b65a <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    b664:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    b668:	4567      	cmp	r7, ip
    b66a:	d1f1      	bne.n	b650 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    b66c:	f002 fdac 	bl	e1c8 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    b670:	4f1a      	ldr	r7, [pc, #104]	; (b6dc <SdioCard::readData(unsigned char*)+0xe0>)
    b672:	4d1b      	ldr	r5, [pc, #108]	; (b6e0 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    b674:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b676:	f8df 807c 	ldr.w	r8, [pc, #124]	; b6f4 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    b67a:	e004      	b.n	b686 <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b67c:	f002 fda4 	bl	e1c8 <micros>
    b680:	1b83      	subs	r3, r0, r6
    b682:	4543      	cmp	r3, r8
    b684:	d81d      	bhi.n	b6c2 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    b686:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    b688:	402c      	ands	r4, r5
    b68a:	d0f7      	beq.n	b67c <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b68e:	4a15      	ldr	r2, [pc, #84]	; (b6e4 <SdioCard::readData(unsigned char*)+0xe8>)
    b690:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    b692:	6813      	ldr	r3, [r2, #0]
    b694:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b696:	6813      	ldr	r3, [r2, #0]
    b698:	f013 0302 	ands.w	r3, r3, #2
    b69c:	d01b      	beq.n	b6d6 <SdioCard::readData(unsigned char*)+0xda>
    b69e:	6812      	ldr	r2, [r2, #0]
    b6a0:	4b11      	ldr	r3, [pc, #68]	; (b6e8 <SdioCard::readData(unsigned char*)+0xec>)
    b6a2:	421a      	tst	r2, r3
    b6a4:	bf0c      	ite	eq
    b6a6:	2001      	moveq	r0, #1
    b6a8:	2000      	movne	r0, #0
}
    b6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    b6ae:	490f      	ldr	r1, [pc, #60]	; (b6ec <SdioCard::readData(unsigned char*)+0xf0>)
    b6b0:	251a      	movs	r5, #26
  m_errorLine = line;
    b6b2:	4b0f      	ldr	r3, [pc, #60]	; (b6f0 <SdioCard::readData(unsigned char*)+0xf4>)
    b6b4:	f240 3256 	movw	r2, #854	; 0x356
    return sdError(SD_CARD_ERROR_READ_FIFO);
    b6b8:	4620      	mov	r0, r4
  m_errorCode = code;
    b6ba:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    b6bc:	601a      	str	r2, [r3, #0]
}
    b6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    b6c2:	490a      	ldr	r1, [pc, #40]	; (b6ec <SdioCard::readData(unsigned char*)+0xf0>)
    b6c4:	251d      	movs	r5, #29
  m_errorLine = line;
    b6c6:	4b0a      	ldr	r3, [pc, #40]	; (b6f0 <SdioCard::readData(unsigned char*)+0xf4>)
    b6c8:	f240 3261 	movw	r2, #865	; 0x361
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    b6cc:	4620      	mov	r0, r4
  m_errorCode = code;
    b6ce:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    b6d0:	601a      	str	r2, [r3, #0]
}
    b6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b6d6:	4618      	mov	r0, r3
}
    b6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6dc:	402c0000 	.word	0x402c0000
    b6e0:	117f0002 	.word	0x117f0002
    b6e4:	200042b0 	.word	0x200042b0
    b6e8:	117f0000 	.word	0x117f0000
    b6ec:	2000351a 	.word	0x2000351a
    b6f0:	20004280 	.word	0x20004280
    b6f4:	000f4240 	.word	0x000f4240

0000b6f8 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    b6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    b6fc:	4b29      	ldr	r3, [pc, #164]	; (b7a4 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    b6fe:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    b700:	f8df a0c0 	ldr.w	sl, [pc, #192]	; b7c4 <SdioCard::readStart(unsigned long)+0xcc>
    b704:	4e28      	ldr	r6, [pc, #160]	; (b7a8 <SdioCard::readStart(unsigned long)+0xb0>)
    b706:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    b70a:	f002 fd5d 	bl	e1c8 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b70e:	4d27      	ldr	r5, [pc, #156]	; (b7ac <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    b710:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b712:	f8df 80b4 	ldr.w	r8, [pc, #180]	; b7c8 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b716:	4f26      	ldr	r7, [pc, #152]	; (b7b0 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    b718:	e006      	b.n	b728 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b71a:	f002 fd55 	bl	e1c8 <micros>
    b71e:	1b00      	subs	r0, r0, r4
    b720:	42b8      	cmp	r0, r7
    b722:	d829      	bhi.n	b778 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    b724:	f004 f9d8 	bl	fad8 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b728:	6831      	ldr	r1, [r6, #0]
    b72a:	4628      	mov	r0, r5
    b72c:	f7ff fa12 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b730:	2800      	cmp	r0, #0
    b732:	d0f2      	beq.n	b71a <SdioCard::readStart(unsigned long)+0x22>
    b734:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    b738:	05db      	lsls	r3, r3, #23
    b73a:	d5ee      	bpl.n	b71a <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    b73c:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b73e:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    b742:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b746:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    b74a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    b74e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b752:	4b18      	ldr	r3, [pc, #96]	; (b7b4 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b754:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b758:	781b      	ldrb	r3, [r3, #0]
    b75a:	b1cb      	cbz	r3, b790 <SdioCard::readStart(unsigned long)+0x98>
    b75c:	4649      	mov	r1, r9
    b75e:	4816      	ldr	r0, [pc, #88]	; (b7b8 <SdioCard::readStart(unsigned long)+0xc0>)
    b760:	f7ff f9f8 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b764:	b930      	cbnz	r0, b774 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    b766:	4915      	ldr	r1, [pc, #84]	; (b7bc <SdioCard::readStart(unsigned long)+0xc4>)
    b768:	240c      	movs	r4, #12
  m_errorLine = line;
    b76a:	4b15      	ldr	r3, [pc, #84]	; (b7c0 <SdioCard::readStart(unsigned long)+0xc8>)
    b76c:	f240 32bd 	movw	r2, #957	; 0x3bd
  m_errorCode = code;
    b770:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b772:	601a      	str	r2, [r3, #0]
}
    b774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    b778:	4a10      	ldr	r2, [pc, #64]	; (b7bc <SdioCard::readStart(unsigned long)+0xc4>)
    b77a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    b77c:	2000      	movs	r0, #0
  m_errorLine = line;
    b77e:	4b10      	ldr	r3, [pc, #64]	; (b7c0 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    b780:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b782:	f240 32b1 	movw	r2, #945	; 0x3b1
      m_busyFcn = 0;
    b786:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    b78a:	601a      	str	r2, [r3, #0]
}
    b78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b790:	ea4f 2949 	mov.w	r9, r9, lsl #9
    b794:	4808      	ldr	r0, [pc, #32]	; (b7b8 <SdioCard::readStart(unsigned long)+0xc0>)
    b796:	4649      	mov	r1, r9
    b798:	f7ff f9dc 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b79c:	2800      	cmp	r0, #0
    b79e:	d1e9      	bne.n	b774 <SdioCard::readStart(unsigned long)+0x7c>
    b7a0:	e7e1      	b.n	b766 <SdioCard::readStart(unsigned long)+0x6e>
    b7a2:	bf00      	nop
    b7a4:	0000ace9 	.word	0x0000ace9
    b7a8:	200042a8 	.word	0x200042a8
    b7ac:	0d1a0000 	.word	0x0d1a0000
    b7b0:	000f4240 	.word	0x000f4240
    b7b4:	20004d4a 	.word	0x20004d4a
    b7b8:	123a0030 	.word	0x123a0030
    b7bc:	2000351a 	.word	0x2000351a
    b7c0:	20004280 	.word	0x20004280
    b7c4:	200042ac 	.word	0x200042ac
    b7c8:	402c0000 	.word	0x402c0000

0000b7cc <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    b7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    b7d0:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b7d2:	4c1d      	ldr	r4, [pc, #116]	; (b848 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    b7d4:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    b7d6:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b7d8:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b7da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b7dc:	481b      	ldr	r0, [pc, #108]	; (b84c <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b7de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b7e2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b7e4:	f7ff f9b6 	bl	ab54 <cardCommand(unsigned long, unsigned long)>
    b7e8:	b940      	cbnz	r0, b7fc <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    b7ea:	4919      	ldr	r1, [pc, #100]	; (b850 <SdioCard::stopTransmission(bool)+0x84>)
    b7ec:	2409      	movs	r4, #9
  m_errorLine = line;
    b7ee:	4b19      	ldr	r3, [pc, #100]	; (b854 <SdioCard::stopTransmission(bool)+0x88>)
    b7f0:	f240 32d3 	movw	r2, #979	; 0x3d3
  m_errorCode = code;
    b7f4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b7f6:	601a      	str	r2, [r3, #0]
}
    b7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    b7fc:	2d00      	cmp	r5, #0
    b7fe:	d0fb      	beq.n	b7f8 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    b800:	4b15      	ldr	r3, [pc, #84]	; (b858 <SdioCard::stopTransmission(bool)+0x8c>)
    b802:	4e16      	ldr	r6, [pc, #88]	; (b85c <SdioCard::stopTransmission(bool)+0x90>)
    b804:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    b806:	f002 fcdf 	bl	e1c8 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    b80a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    b80c:	4607      	mov	r7, r0
  while (fcn()) {
    b80e:	01da      	lsls	r2, r3, #7
    b810:	d416      	bmi.n	b840 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b812:	f8df 804c 	ldr.w	r8, [pc, #76]	; b860 <SdioCard::stopTransmission(bool)+0x94>
    b816:	e004      	b.n	b822 <SdioCard::stopTransmission(bool)+0x56>
    yield();
    b818:	f004 f95e 	bl	fad8 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    b81c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    b81e:	01db      	lsls	r3, r3, #7
    b820:	d40e      	bmi.n	b840 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b822:	f002 fcd1 	bl	e1c8 <micros>
    b826:	1bc0      	subs	r0, r0, r7
    b828:	4540      	cmp	r0, r8
    b82a:	d9f5      	bls.n	b818 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    b82c:	4a08      	ldr	r2, [pc, #32]	; (b850 <SdioCard::stopTransmission(bool)+0x84>)
    b82e:	210a      	movs	r1, #10
      m_busyFcn = 0;
    b830:	2000      	movs	r0, #0
  m_errorLine = line;
    b832:	4b08      	ldr	r3, [pc, #32]	; (b854 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    b834:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b836:	f240 32d7 	movw	r2, #983	; 0x3d7
      m_busyFcn = 0;
    b83a:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    b83c:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    b83e:	e7db      	b.n	b7f8 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    b840:	2300      	movs	r3, #0
  return true;
    b842:	4628      	mov	r0, r5
  m_busyFcn = 0;
    b844:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    b846:	e7d7      	b.n	b7f8 <SdioCard::stopTransmission(bool)+0x2c>
    b848:	402c0000 	.word	0x402c0000
    b84c:	0cdb0000 	.word	0x0cdb0000
    b850:	2000351a 	.word	0x2000351a
    b854:	20004280 	.word	0x20004280
    b858:	0000a6fd 	.word	0x0000a6fd
    b85c:	200042ac 	.word	0x200042ac
    b860:	000f4240 	.word	0x000f4240

0000b864 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    b864:	4b0a      	ldr	r3, [pc, #40]	; (b890 <SdioCard::syncDevice()+0x2c>)
    b866:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    b868:	b510      	push	{r4, lr}
    b86a:	4604      	mov	r4, r0
  if (!m_transferActive) {
    b86c:	b91b      	cbnz	r3, b876 <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    b86e:	7a63      	ldrb	r3, [r4, #9]
    b870:	b943      	cbnz	r3, b884 <SdioCard::syncDevice()+0x20>
  return true;
    b872:	2001      	movs	r0, #1
}
    b874:	bd10      	pop	{r4, pc}
    b876:	f7ff f8cf 	bl	aa18 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    b87a:	2800      	cmp	r0, #0
    b87c:	d0fa      	beq.n	b874 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    b87e:	7a63      	ldrb	r3, [r4, #9]
    b880:	2b00      	cmp	r3, #0
    b882:	d0f6      	beq.n	b872 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    b884:	4620      	mov	r0, r4
    b886:	2101      	movs	r1, #1
}
    b888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    b88c:	f7ff bf9e 	b.w	b7cc <SdioCard::stopTransmission(bool)>
    b890:	20004d4b 	.word	0x20004d4b

0000b894 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    b894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b898:	4604      	mov	r4, r0
    b89a:	7a00      	ldrb	r0, [r0, #8]
    b89c:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    b8a0:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    b8a2:	f010 0501 	ands.w	r5, r0, #1
    b8a6:	d013      	beq.n	b8d0 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    b8a8:	0793      	lsls	r3, r2, #30
    b8aa:	d03c      	beq.n	b926 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b8ac:	2301      	movs	r3, #1
    b8ae:	4838      	ldr	r0, [pc, #224]	; (b990 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    b8b0:	466a      	mov	r2, sp
    b8b2:	f7ff fc01 	bl	b0b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b8b6:	2800      	cmp	r0, #0
    b8b8:	d03a      	beq.n	b930 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    b8ba:	f44f 7200 	mov.w	r2, #512	; 0x200
    b8be:	4669      	mov	r1, sp
    b8c0:	4630      	mov	r0, r6
    b8c2:	f002 fd27 	bl	e314 <memcpy>
}
    b8c6:	4628      	mov	r0, r5
    b8c8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    b8d0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; b9a0 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    b8d4:	460f      	mov	r7, r1
    b8d6:	f898 3000 	ldrb.w	r3, [r8]
    b8da:	2b00      	cmp	r3, #0
    b8dc:	d135      	bne.n	b94a <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b8de:	7a63      	ldrb	r3, [r4, #9]
    b8e0:	2b01      	cmp	r3, #1
    b8e2:	d039      	beq.n	b958 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    b8e4:	6822      	ldr	r2, [r4, #0]
    b8e6:	492b      	ldr	r1, [pc, #172]	; (b994 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    b8e8:	6a12      	ldr	r2, [r2, #32]
    b8ea:	428a      	cmp	r2, r1
    b8ec:	d14a      	bne.n	b984 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    b8ee:	f898 2000 	ldrb.w	r2, [r8]
    b8f2:	2a00      	cmp	r2, #0
    b8f4:	d134      	bne.n	b960 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    b8f6:	2b00      	cmp	r3, #0
    b8f8:	d139      	bne.n	b96e <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    b8fa:	4639      	mov	r1, r7
    b8fc:	4620      	mov	r0, r4
    b8fe:	f7ff fefb 	bl	b6f8 <SdioCard::readStart(unsigned long)>
    b902:	b1e8      	cbz	r0, b940 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    b904:	2301      	movs	r3, #1
      m_curSector = sector;
    b906:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    b908:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    b90a:	4631      	mov	r1, r6
    b90c:	4620      	mov	r0, r4
    b90e:	f7ff fe75 	bl	b5fc <SdioCard::readData(unsigned char*)>
    b912:	b1a8      	cbz	r0, b940 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    b914:	6863      	ldr	r3, [r4, #4]
  return true;
    b916:	4605      	mov	r5, r0
    m_curSector++;
    b918:	3301      	adds	r3, #1
}
    b91a:	4628      	mov	r0, r5
    m_curSector++;
    b91c:	6063      	str	r3, [r4, #4]
}
    b91e:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b926:	2301      	movs	r3, #1
    b928:	4819      	ldr	r0, [pc, #100]	; (b990 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    b92a:	f7ff fbc5 	bl	b0b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b92e:	b938      	cbnz	r0, b940 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    b930:	4919      	ldr	r1, [pc, #100]	; (b998 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    b932:	200b      	movs	r0, #11
  m_errorLine = line;
    b934:	4b19      	ldr	r3, [pc, #100]	; (b99c <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    b936:	f44f 725d 	mov.w	r2, #884	; 0x374
      return sdError(SD_CARD_ERROR_CMD17);
    b93a:	2500      	movs	r5, #0
  m_errorCode = code;
    b93c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    b93e:	601a      	str	r2, [r3, #0]
}
    b940:	4628      	mov	r0, r5
    b942:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b94a:	f7ff f865 	bl	aa18 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    b94e:	2800      	cmp	r0, #0
    b950:	d0f6      	beq.n	b940 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b952:	7a63      	ldrb	r3, [r4, #9]
    b954:	2b01      	cmp	r3, #1
    b956:	d1c5      	bne.n	b8e4 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    b958:	6862      	ldr	r2, [r4, #4]
    b95a:	42ba      	cmp	r2, r7
    b95c:	d1c2      	bne.n	b8e4 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    b95e:	e7d4      	b.n	b90a <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    b960:	f7ff f85a 	bl	aa18 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    b964:	2800      	cmp	r0, #0
    b966:	d0eb      	beq.n	b940 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    b968:	7a63      	ldrb	r3, [r4, #9]
    b96a:	2b00      	cmp	r3, #0
    b96c:	d0c5      	beq.n	b8fa <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    b96e:	2101      	movs	r1, #1
    b970:	4620      	mov	r0, r4
    b972:	f7ff ff2b 	bl	b7cc <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    b976:	2800      	cmp	r0, #0
    b978:	d1bf      	bne.n	b8fa <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    b97a:	4628      	mov	r0, r5
    b97c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    b984:	4620      	mov	r0, r4
    b986:	4790      	blx	r2
    b988:	2800      	cmp	r0, #0
    b98a:	d0f6      	beq.n	b97a <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    b98c:	e7b5      	b.n	b8fa <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    b98e:	bf00      	nop
    b990:	113a0011 	.word	0x113a0011
    b994:	0000b865 	.word	0x0000b865
    b998:	2000351a 	.word	0x2000351a
    b99c:	20004280 	.word	0x20004280
    b9a0:	20004d4b 	.word	0x20004d4b

0000b9a4 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    b9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9a8:	7a04      	ldrb	r4, [r0, #8]
    b9aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    b9ae:	460f      	mov	r7, r1
    b9b0:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    b9b2:	f014 0401 	ands.w	r4, r4, #1
    b9b6:	d01d      	beq.n	b9f4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    b9b8:	f012 0f03 	tst.w	r2, #3
    b9bc:	d006      	beq.n	b9cc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    b9be:	4668      	mov	r0, sp
    b9c0:	4611      	mov	r1, r2
    b9c2:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    b9c6:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    b9c8:	f002 fca4 	bl	e314 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    b9cc:	2301      	movs	r3, #1
    b9ce:	4642      	mov	r2, r8
    b9d0:	4639      	mov	r1, r7
    b9d2:	482c      	ldr	r0, [pc, #176]	; (ba84 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    b9d4:	f7ff fb70 	bl	b0b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b9d8:	4604      	mov	r4, r0
    b9da:	b930      	cbnz	r0, b9ea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    b9dc:	492a      	ldr	r1, [pc, #168]	; (ba88 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    b9de:	200d      	movs	r0, #13
  m_errorLine = line;
    b9e0:	4b2a      	ldr	r3, [pc, #168]	; (ba8c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    b9e2:	f240 4211 	movw	r2, #1041	; 0x411
  m_errorCode = code;
    b9e6:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    b9e8:	601a      	str	r2, [r3, #0]
}
    b9ea:	4620      	mov	r0, r4
    b9ec:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    b9f4:	4d26      	ldr	r5, [pc, #152]	; (ba90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    b9f6:	4606      	mov	r6, r0
    b9f8:	782b      	ldrb	r3, [r5, #0]
    b9fa:	bb2b      	cbnz	r3, ba48 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    b9fc:	7a73      	ldrb	r3, [r6, #9]
    b9fe:	2b02      	cmp	r3, #2
    ba00:	d029      	beq.n	ba56 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    ba02:	6832      	ldr	r2, [r6, #0]
    ba04:	4923      	ldr	r1, [pc, #140]	; (ba94 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    ba06:	6a12      	ldr	r2, [r2, #32]
    ba08:	428a      	cmp	r2, r1
    ba0a:	d136      	bne.n	ba7a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    ba0c:	782a      	ldrb	r2, [r5, #0]
    ba0e:	bb32      	cbnz	r2, ba5e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    ba10:	2b00      	cmp	r3, #0
    ba12:	d12b      	bne.n	ba6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    ba14:	6833      	ldr	r3, [r6, #0]
    ba16:	4639      	mov	r1, r7
    ba18:	4630      	mov	r0, r6
    ba1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    ba1c:	4798      	blx	r3
    ba1e:	2800      	cmp	r0, #0
    ba20:	d0e3      	beq.n	b9ea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    ba22:	2302      	movs	r3, #2
      m_curSector = sector;
    ba24:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    ba26:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    ba28:	6833      	ldr	r3, [r6, #0]
    ba2a:	4641      	mov	r1, r8
    ba2c:	4630      	mov	r0, r6
    ba2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    ba30:	4798      	blx	r3
    ba32:	2800      	cmp	r0, #0
    ba34:	d0d9      	beq.n	b9ea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    ba36:	6873      	ldr	r3, [r6, #4]
  return true;
    ba38:	4604      	mov	r4, r0
    m_curSector++;
    ba3a:	3301      	adds	r3, #1
}
    ba3c:	4620      	mov	r0, r4
    m_curSector++;
    ba3e:	6073      	str	r3, [r6, #4]
}
    ba40:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    ba44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba48:	f7fe ffe6 	bl	aa18 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    ba4c:	2800      	cmp	r0, #0
    ba4e:	d0cc      	beq.n	b9ea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    ba50:	7a73      	ldrb	r3, [r6, #9]
    ba52:	2b02      	cmp	r3, #2
    ba54:	d1d5      	bne.n	ba02 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    ba56:	6872      	ldr	r2, [r6, #4]
    ba58:	42ba      	cmp	r2, r7
    ba5a:	d1d2      	bne.n	ba02 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    ba5c:	e7e4      	b.n	ba28 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    ba5e:	f7fe ffdb 	bl	aa18 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    ba62:	2800      	cmp	r0, #0
    ba64:	d0c1      	beq.n	b9ea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    ba66:	7a73      	ldrb	r3, [r6, #9]
    ba68:	2b00      	cmp	r3, #0
    ba6a:	d0d3      	beq.n	ba14 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    ba6c:	2101      	movs	r1, #1
    ba6e:	4630      	mov	r0, r6
    ba70:	f7ff feac 	bl	b7cc <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    ba74:	2800      	cmp	r0, #0
    ba76:	d0b8      	beq.n	b9ea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    ba78:	e7cc      	b.n	ba14 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    ba7a:	4630      	mov	r0, r6
    ba7c:	4790      	blx	r2
    ba7e:	2800      	cmp	r0, #0
    ba80:	d0b3      	beq.n	b9ea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    ba82:	e7c7      	b.n	ba14 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    ba84:	183a0001 	.word	0x183a0001
    ba88:	2000351a 	.word	0x2000351a
    ba8c:	20004280 	.word	0x20004280
    ba90:	20004d4b 	.word	0x20004d4b
    ba94:	0000b865 	.word	0x0000b865

0000ba98 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    ba98:	2101      	movs	r1, #1
    ba9a:	f002 bbfb 	b.w	e294 <pinMode>
    ba9e:	bf00      	nop

0000baa0 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    baa0:	f002 bbbc 	b.w	e21c <digitalWrite>

0000baa4 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    baa4:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    baa6:	4603      	mov	r3, r0
    baa8:	f853 0b04 	ldr.w	r0, [r3], #4
    baac:	e893 0006 	ldmia.w	r3, {r1, r2}
    bab0:	f7f7 fa82 	bl	2fb8 <SPIClass::beginTransaction(SPISettings)>
}
    bab4:	bd08      	pop	{r3, pc}
    bab6:	bf00      	nop

0000bab8 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    bab8:	b084      	sub	sp, #16
    baba:	f10d 0c10 	add.w	ip, sp, #16
    babe:	e90c 000e 	stmdb	ip, {r1, r2, r3}
    bac2:	4602      	mov	r2, r0
  if (spiConfig.spiPort) {
    bac4:	b123      	cbz	r3, bad0 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    bac6:	4618      	mov	r0, r3
    bac8:	6013      	str	r3, [r2, #0]
}
    baca:	b004      	add	sp, #16
  m_spi->begin();
    bacc:	f7f8 bcaa 	b.w	4424 <SPIClass::begin()>
    m_spi = &SPI;
    bad0:	4b02      	ldr	r3, [pc, #8]	; (badc <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
  m_spi->begin();
    bad2:	4618      	mov	r0, r3
    bad4:	6013      	str	r3, [r2, #0]
}
    bad6:	b004      	add	sp, #16
  m_spi->begin();
    bad8:	f7f8 bca4 	b.w	4424 <SPIClass::begin()>
    badc:	20002a2c 	.word	0x20002a2c

0000bae0 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    bae0:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    bae2:	7cd3      	ldrb	r3, [r2, #19]
    bae4:	b313      	cbz	r3, bb2c <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    bae6:	07d8      	lsls	r0, r3, #31
    bae8:	d504      	bpl.n	baf4 <SdSpiArduinoDriver::deactivate()+0x14>
    baea:	6a90      	ldr	r0, [r2, #40]	; 0x28
    baec:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    baf0:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    baf4:	0799      	lsls	r1, r3, #30
    baf6:	d504      	bpl.n	bb02 <SdSpiArduinoDriver::deactivate()+0x22>
    baf8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    bafa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bafe:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    bb02:	0758      	lsls	r0, r3, #29
    bb04:	d504      	bpl.n	bb10 <SdSpiArduinoDriver::deactivate()+0x30>
    bb06:	6b10      	ldr	r0, [r2, #48]	; 0x30
    bb08:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bb0c:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    bb10:	0719      	lsls	r1, r3, #28
    bb12:	d504      	bpl.n	bb1e <SdSpiArduinoDriver::deactivate()+0x3e>
    bb14:	6b50      	ldr	r0, [r2, #52]	; 0x34
    bb16:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bb1a:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    bb1e:	06db      	lsls	r3, r3, #27
    bb20:	d504      	bpl.n	bb2c <SdSpiArduinoDriver::deactivate()+0x4c>
    bb22:	6b92      	ldr	r2, [r2, #56]	; 0x38
    bb24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    bb28:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    bb2c:	4770      	bx	lr
    bb2e:	bf00      	nop

0000bb30 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    bb30:	6800      	ldr	r0, [r0, #0]
    bb32:	f7f8 bdc9 	b.w	46c8 <SPIClass::end()>
    bb36:	bf00      	nop

0000bb38 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb38:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    bb3a:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb3c:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    bb3e:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bb40:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bb42:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bb46:	d0fb      	beq.n	bb40 <SdSpiArduinoDriver::receive()+0x8>
    bb48:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    bb4a:	b2c0      	uxtb	r0, r0
    bb4c:	4770      	bx	lr
    bb4e:	bf00      	nop

0000bb50 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    bb50:	b530      	push	{r4, r5, lr}
    bb52:	460c      	mov	r4, r1
    bb54:	b083      	sub	sp, #12
    bb56:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    bb58:	21ff      	movs	r1, #255	; 0xff
    bb5a:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    bb5c:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    bb5e:	f006 f945 	bl	11dec <memset>
		transfer(buf, buf, count);
    bb62:	6828      	ldr	r0, [r5, #0]
    bb64:	9b01      	ldr	r3, [sp, #4]
    bb66:	4622      	mov	r2, r4
    bb68:	4621      	mov	r1, r4
    bb6a:	f7f8 fda9 	bl	46c0 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    bb6e:	2000      	movs	r0, #0
    bb70:	b003      	add	sp, #12
    bb72:	bd30      	pop	{r4, r5, pc}

0000bb74 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb74:	6803      	ldr	r3, [r0, #0]
    bb76:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    bb78:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bb7a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bb7c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bb80:	d0fb      	beq.n	bb7a <SdSpiArduinoDriver::send(unsigned char)+0x6>
    bb82:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    bb84:	4770      	bx	lr
    bb86:	bf00      	nop

0000bb88 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    bb88:	1e53      	subs	r3, r2, #1
    bb8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    bb8e:	b530      	push	{r4, r5, lr}
    bb90:	4614      	mov	r4, r2
    bb92:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    bb96:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    bb98:	d311      	bcc.n	bbbe <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    bb9a:	b16a      	cbz	r2, bbb8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb9c:	6803      	ldr	r3, [r0, #0]
    bb9e:	1e48      	subs	r0, r1, #1
    bba0:	6819      	ldr	r1, [r3, #0]
    bba2:	1882      	adds	r2, r0, r2
		port().TDR = data;
    bba4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    bba8:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bbaa:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bbac:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bbb0:	d0fb      	beq.n	bbaa <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    bbb2:	4290      	cmp	r0, r2
    bbb4:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    bbb6:	d1f5      	bne.n	bba4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    bbb8:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    bbbc:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    bbbe:	4668      	mov	r0, sp
    bbc0:	f002 fba8 	bl	e314 <memcpy>
		transfer(buf, buf, count);
    bbc4:	466a      	mov	r2, sp
    bbc6:	4623      	mov	r3, r4
    bbc8:	6828      	ldr	r0, [r5, #0]
    bbca:	4611      	mov	r1, r2
    bbcc:	f7f8 fd78 	bl	46c0 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    bbd0:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    bbd4:	bd30      	pop	{r4, r5, pc}
    bbd6:	bf00      	nop

0000bbd8 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    bbd8:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    bbda:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    bbdc:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    bbde:	07dc      	lsls	r4, r3, #31
    bbe0:	d51d      	bpl.n	bc1e <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    bbe2:	4604      	mov	r4, r0
    bbe4:	6840      	ldr	r0, [r0, #4]
    bbe6:	f104 0210 	add.w	r2, r4, #16
    bbea:	6803      	ldr	r3, [r0, #0]
    bbec:	68e1      	ldr	r1, [r4, #12]
    bbee:	9201      	str	r2, [sp, #4]
    bbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bbf2:	4798      	blx	r3
    bbf4:	9a01      	ldr	r2, [sp, #4]
    bbf6:	4605      	mov	r5, r0
    bbf8:	b1a8      	cbz	r0, bc26 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    bbfa:	7823      	ldrb	r3, [r4, #0]
    bbfc:	0799      	lsls	r1, r3, #30
    bbfe:	d508      	bpl.n	bc12 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    bc00:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    bc02:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    bc06:	4419      	add	r1, r3
    bc08:	6803      	ldr	r3, [r0, #0]
    bc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bc0c:	4798      	blx	r3
    bc0e:	b150      	cbz	r0, bc26 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    bc10:	7823      	ldrb	r3, [r4, #0]
    bc12:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    bc16:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    bc18:	7023      	strb	r3, [r4, #0]
}
    bc1a:	b003      	add	sp, #12
    bc1c:	bd30      	pop	{r4, r5, pc}
  return true;
    bc1e:	2501      	movs	r5, #1
}
    bc20:	4628      	mov	r0, r5
    bc22:	b003      	add	sp, #12
    bc24:	bd30      	pop	{r4, r5, pc}
  return false;
    bc26:	2500      	movs	r5, #0
}
    bc28:	4628      	mov	r0, r5
    bc2a:	b003      	add	sp, #12
    bc2c:	bd30      	pop	{r4, r5, pc}
    bc2e:	bf00      	nop

0000bc30 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    bc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    bc32:	6843      	ldr	r3, [r0, #4]
    bc34:	b30b      	cbz	r3, bc7a <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    bc36:	68c3      	ldr	r3, [r0, #12]
    bc38:	4604      	mov	r4, r0
    bc3a:	460f      	mov	r7, r1
    bc3c:	4615      	mov	r5, r2
    bc3e:	428b      	cmp	r3, r1
    bc40:	d106      	bne.n	bc50 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    bc42:	f810 3b10 	ldrb.w	r3, [r0], #16
    bc46:	f005 0503 	and.w	r5, r5, #3
    bc4a:	432b      	orrs	r3, r5
    bc4c:	7023      	strb	r3, [r4, #0]
}
    bc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    bc50:	f7ff ffc2 	bl	bbd8 <FsCache::sync()>
    bc54:	b188      	cbz	r0, bc7a <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    bc56:	076b      	lsls	r3, r5, #29
    bc58:	d505      	bpl.n	bc66 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    bc5a:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    bc5e:	4630      	mov	r0, r6
    m_sector = sector;
    bc60:	2300      	movs	r3, #0
    bc62:	60e7      	str	r7, [r4, #12]
    bc64:	e7ef      	b.n	bc46 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    bc66:	6860      	ldr	r0, [r4, #4]
    bc68:	f104 0610 	add.w	r6, r4, #16
    bc6c:	4639      	mov	r1, r7
    bc6e:	6803      	ldr	r3, [r0, #0]
    bc70:	4632      	mov	r2, r6
    bc72:	691b      	ldr	r3, [r3, #16]
    bc74:	4798      	blx	r3
    bc76:	2800      	cmp	r0, #0
    bc78:	d1f1      	bne.n	bc5e <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    bc7a:	2000      	movs	r0, #0
}
    bc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc7e:	bf00      	nop

0000bc80 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
  *ms10 = 0;
    bc80:	f04f 0c00 	mov.w	ip, #0
  FsDateTime::callback2(date, time);
    bc84:	4b02      	ldr	r3, [pc, #8]	; (bc90 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
  *ms10 = 0;
    bc86:	f882 c000 	strb.w	ip, [r2]
  FsDateTime::callback2(date, time);
    bc8a:	681b      	ldr	r3, [r3, #0]
    bc8c:	4718      	bx	r3
    bc8e:	bf00      	nop
    bc90:	200042b8 	.word	0x200042b8

0000bc94 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
    callback = dateTimeMs10;
    bc94:	4a02      	ldr	r2, [pc, #8]	; (bca0 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    bc96:	4903      	ldr	r1, [pc, #12]	; (bca4 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
    callback2 = dateTime;
    bc98:	4b03      	ldr	r3, [pc, #12]	; (bca8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
    callback = dateTimeMs10;
    bc9a:	6011      	str	r1, [r2, #0]
    callback2 = dateTime;
    bc9c:	6018      	str	r0, [r3, #0]
  }
    bc9e:	4770      	bx	lr
    bca0:	200042b4 	.word	0x200042b4
    bca4:	0000bc81 	.word	0x0000bc81
    bca8:	200042b8 	.word	0x200042b8

0000bcac <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    bcac:	b510      	push	{r4, lr}
    bcae:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    bcb0:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    bcb2:	b082      	sub	sp, #8
  if (ls) {
    bcb4:	b118      	cbz	r0, bcbe <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    bcb6:	2300      	movs	r3, #0
    bcb8:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    bcba:	b002      	add	sp, #8
    bcbc:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    bcbe:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    bcc2:	428b      	cmp	r3, r1
    bcc4:	d2f9      	bcs.n	bcba <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    bcc6:	aa01      	add	r2, sp, #4
    bcc8:	4618      	mov	r0, r3
    bcca:	f000 f8b7 	bl	be3c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    bcce:	b180      	cbz	r0, bcf2 <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    bcd0:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    bcd2:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    bcd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bcd8:	d201      	bcs.n	bcde <FsName::get16()+0x32>
      rtn = cp;
    bcda:	b298      	uxth	r0, r3
    bcdc:	e7ed      	b.n	bcba <FsName::get16()+0xe>
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    bcde:	0a98      	lsrs	r0, r3, #10
    return (cp & 0X3FF) + 0XDC00;
    bce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    bce4:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    bce8:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    bcec:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    bcee:	81a3      	strh	r3, [r4, #12]
    bcf0:	e7e3      	b.n	bcba <FsName::get16()+0xe>
  return 0XFFFF;
    bcf2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    bcf6:	e7e0      	b.n	bcba <FsName::get16()+0xe>

0000bcf8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bcf8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    bcfc:	d821      	bhi.n	bd42 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
  if (capacityMB <= 16) {
    bcfe:	2910      	cmp	r1, #16
    bd00:	d82e      	bhi.n	bd60 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x68>
    bd02:	2340      	movs	r3, #64	; 0x40
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bd04:	f04f 0c20 	mov.w	ip, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    bd08:	fbb2 f1f3 	udiv	r1, r2, r3
  if (c <= 1023) {
    bd0c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    bd10:	d220      	bcs.n	bd54 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x5c>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    bd12:	fb03 2311 	mls	r3, r3, r1, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    bd16:	b500      	push	{lr}
    s = (lba % sectorsPerTrack) + 1;
    bd18:	fbb2 fefc 	udiv	lr, r2, ip
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    bd1c:	fbb3 f3fc 	udiv	r3, r3, ip
    s = (lba % sectorsPerTrack) + 1;
    bd20:	fb0c 221e 	mls	r2, ip, lr, r2
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    bd24:	ea4f 0c91 	mov.w	ip, r1, lsr #2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    bd28:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    bd2a:	3201      	adds	r2, #1
  chs[1] = ((c >> 2) & 0XC0) | s;
    bd2c:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
  chs[2] = c;
    bd30:	b2c9      	uxtb	r1, r1
  chs[0] = h;
    bd32:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    bd34:	ea42 020c 	orr.w	r2, r2, ip
  chs[2] = c;
    bd38:	7081      	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
    bd3a:	b2d2      	uxtb	r2, r2
    bd3c:	7042      	strb	r2, [r0, #1]
}
    bd3e:	f85d fb04 	ldr.w	pc, [sp], #4
    bd42:	233f      	movs	r3, #63	; 0x3f
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bd44:	469c      	mov	ip, r3
  } else if (capacityMB <= 128) {
    bd46:	2980      	cmp	r1, #128	; 0x80
    bd48:	d910      	bls.n	bd6c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x74>
  } else if (capacityMB <= 504) {
    bd4a:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
    bd4e:	d80f      	bhi.n	bd70 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x78>
  c = lba / (numberOfHeads * sectorsPerTrack);
    bd50:	011b      	lsls	r3, r3, #4
    bd52:	e7d9      	b.n	bd08 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    bd54:	21ff      	movs	r1, #255	; 0xff
    h = 254;
    bd56:	23fe      	movs	r3, #254	; 0xfe
  chs[1] = ((c >> 2) & 0XC0) | s;
    bd58:	7041      	strb	r1, [r0, #1]
  chs[0] = h;
    bd5a:	7003      	strb	r3, [r0, #0]
  chs[2] = c;
    bd5c:	7081      	strb	r1, [r0, #2]
    bd5e:	4770      	bx	lr
  } else if (capacityMB <= 32) {
    bd60:	2920      	cmp	r1, #32
    bd62:	d816      	bhi.n	bd92 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x9a>
    bd64:	2380      	movs	r3, #128	; 0x80
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bd66:	f04f 0c20 	mov.w	ip, #32
    bd6a:	e7cd      	b.n	bd08 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  c = lba / (numberOfHeads * sectorsPerTrack);
    bd6c:	00db      	lsls	r3, r3, #3
    bd6e:	e7cb      	b.n	bd08 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 1008) {
    bd70:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
    bd74:	d904      	bls.n	bd80 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 2016) {
    bd76:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
    bd7a:	d803      	bhi.n	bd84 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x8c>
  c = lba / (numberOfHeads * sectorsPerTrack);
    bd7c:	019b      	lsls	r3, r3, #6
    bd7e:	e7c3      	b.n	bd08 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    bd80:	015b      	lsls	r3, r3, #5
    bd82:	e7c1      	b.n	bd08 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 4032) {
    bd84:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
  c = lba / (numberOfHeads * sectorsPerTrack);
    bd88:	bf94      	ite	ls
    bd8a:	01db      	lslls	r3, r3, #7
    bd8c:	ebc3 2303 	rsbhi	r3, r3, r3, lsl #8
    bd90:	e7ba      	b.n	bd08 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    bd92:	2320      	movs	r3, #32
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bd94:	469c      	mov	ip, r3
    bd96:	e7d6      	b.n	bd46 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>

0000bd98 <FsUtf::cpToMb(unsigned long, char*, char*)>:
    if (cp < 0X80) {
    bd98:	287f      	cmp	r0, #127	; 0x7f
    size_t n = end - str;
    bd9a:	eba2 0201 	sub.w	r2, r2, r1
    if (cp < 0X80) {
    bd9e:	d805      	bhi.n	bdac <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    bda0:	b112      	cbz	r2, bda8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
      *(str++) = static_cast<uint8_t>(cp);
    bda2:	460a      	mov	r2, r1
    bda4:	f802 0b01 	strb.w	r0, [r2], #1
  }
    bda8:	4610      	mov	r0, r2
    bdaa:	4770      	bx	lr
    } else if (cp < 0X800) {
    bdac:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    bdb0:	d20f      	bcs.n	bdd2 <FsUtf::cpToMb(unsigned long, char*, char*)+0x3a>
      if (n < 2) goto fail;
    bdb2:	2a01      	cmp	r2, #1
    bdb4:	d940      	bls.n	be38 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    bdb6:	ea4f 1c90 	mov.w	ip, r0, lsr #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bdba:	f000 033f 	and.w	r3, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    bdbe:	460a      	mov	r2, r1
    bdc0:	f06c 003f 	orn	r0, ip, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bdc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    bdc8:	f802 0b02 	strb.w	r0, [r2], #2
  }
    bdcc:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bdce:	704b      	strb	r3, [r1, #1]
  }
    bdd0:	4770      	bx	lr
    } else if (cp < 0X10000) {
    bdd2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    bdd6:	d216      	bcs.n	be06 <FsUtf::cpToMb(unsigned long, char*, char*)+0x6e>
      if (n < 3) goto fail;
    bdd8:	2a02      	cmp	r2, #2
    bdda:	d92d      	bls.n	be38 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bddc:	f3c0 1c85 	ubfx	ip, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bde0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    bde4:	1cca      	adds	r2, r1, #3
    bde6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  char* cpToMb(uint32_t cp, char* str, char* end) {
    bdea:	b500      	push	{lr}
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    bdec:	ea4f 3e10 	mov.w	lr, r0, lsr #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bdf0:	f06c 007f 	orn	r0, ip, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bdf4:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    bdf6:	f06e 0e1f 	orn	lr, lr, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bdfa:	7048      	strb	r0, [r1, #1]
  }
    bdfc:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    bdfe:	f881 e000 	strb.w	lr, [r1]
  }
    be02:	f85d fb04 	ldr.w	pc, [sp], #4
       if (n < 4) goto fail;
    be06:	2a03      	cmp	r2, #3
    be08:	d916      	bls.n	be38 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    be0a:	ea4f 4c90 	mov.w	ip, r0, lsr #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    be0e:	f3c0 3205 	ubfx	r2, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    be12:	f3c0 1385 	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    be16:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    be1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    be1e:	f06c 0c0f 	orn	ip, ip, #15
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    be22:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    be26:	f060 007f 	orn	r0, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    be2a:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    be2c:	1d0a      	adds	r2, r1, #4
    be2e:	70c8      	strb	r0, [r1, #3]
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    be30:	f881 c000 	strb.w	ip, [r1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    be34:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    be36:	e7b7      	b.n	bda8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
    return nullptr;
    be38:	2200      	movs	r2, #0
    be3a:	e7b5      	b.n	bda8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>

0000be3c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    be3c:	4288      	cmp	r0, r1
    be3e:	d23d      	bcs.n	bebc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    be40:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    be42:	b410      	push	{r4}
    if ((ch & 0X80) == 0) {
    be44:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    be48:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    be4a:	2800      	cmp	r0, #0
    be4c:	da2d      	bge.n	beaa <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
    if ((ch & 0XE0) == 0XC0) {
    be4e:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    be52:	28c0      	cmp	r0, #192	; 0xc0
    be54:	d034      	beq.n	bec0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
    } else if ((ch & 0XF0) == 0XE0) {
    be56:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    be5a:	28e0      	cmp	r0, #224	; 0xe0
    be5c:	d034      	beq.n	bec8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
    } else if ((ch & 0XF8) == 0XF0) {
    be5e:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    be62:	28f0      	cmp	r0, #240	; 0xf0
    be64:	d126      	bne.n	beb4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    be66:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    be6a:	2004      	movs	r0, #4
    if ((str + n) > end) {
    be6c:	4418      	add	r0, r3
    be6e:	4288      	cmp	r0, r1
    be70:	d820      	bhi.n	beb4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    be72:	3301      	adds	r3, #1
      ch = str[i];
    be74:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    be78:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
      cp |= ch & 0X3F;
    be7c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    be80:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    be84:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    be88:	d114      	bne.n	beb4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    be8a:	4283      	cmp	r3, r0
    be8c:	d1f2      	bne.n	be74 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    if (cp < 0X80 || !isValidCp(cp)) {
    be8e:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    be92:	4b0f      	ldr	r3, [pc, #60]	; (bed0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    be94:	4299      	cmp	r1, r3
    be96:	d80d      	bhi.n	beb4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    be98:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    be9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    bea0:	d308      	bcc.n	beb4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    *rtn = cp;
    bea2:	6014      	str	r4, [r2, #0]
  }
    bea4:	f85d 4b04 	ldr.w	r4, [sp], #4
    bea8:	4770      	bx	lr
      return str + 1;
    beaa:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    beac:	6014      	str	r4, [r2, #0]
  }
    beae:	f85d 4b04 	ldr.w	r4, [sp], #4
    beb2:	4770      	bx	lr
      return nullptr;
    beb4:	2000      	movs	r0, #0
  }
    beb6:	f85d 4b04 	ldr.w	r4, [sp], #4
    beba:	4770      	bx	lr
      return nullptr;
    bebc:	2000      	movs	r0, #0
  }
    bebe:	4770      	bx	lr
      cp = ch & 0X1F;
    bec0:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    bec4:	2002      	movs	r0, #2
    bec6:	e7d1      	b.n	be6c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    bec8:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    becc:	2003      	movs	r0, #3
    bece:	e7cd      	b.n	be6c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    bed0:	0010ff7f 	.word	0x0010ff7f

0000bed4 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    bed4:	287e      	cmp	r0, #126	; 0x7e
    bed6:	d93e      	bls.n	bf56 <toUpcase(unsigned short)+0x82>
  size_t right = size;
    bed8:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    bedc:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    bede:	b430      	push	{r4, r5}
    bee0:	4c28      	ldr	r4, [pc, #160]	; (bf84 <toUpcase(unsigned short)+0xb0>)
    bee2:	e004      	b.n	beee <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    bee4:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    bee8:	4282      	cmp	r2, r0
    beea:	d820      	bhi.n	bf2e <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    beec:	460b      	mov	r3, r1
  while (right - left > 1) {
    beee:	ebac 0203 	sub.w	r2, ip, r3
    bef2:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    bef4:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    bef8:	d8f4      	bhi.n	bee4 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    befa:	b29b      	uxth	r3, r3
    befc:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    bf00:	4290      	cmp	r0, r2
    bf02:	d216      	bcs.n	bf32 <toUpcase(unsigned short)+0x5e>
    bf04:	244b      	movs	r4, #75	; 0x4b
    bf06:	2300      	movs	r3, #0
    bf08:	4d1f      	ldr	r5, [pc, #124]	; (bf88 <toUpcase(unsigned short)+0xb4>)
    bf0a:	e004      	b.n	bf16 <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    bf0c:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    bf10:	4282      	cmp	r2, r0
    bf12:	d81e      	bhi.n	bf52 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    bf14:	460b      	mov	r3, r1
  while (right - left > 1) {
    bf16:	1ae2      	subs	r2, r4, r3
    bf18:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    bf1a:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    bf1e:	d8f5      	bhi.n	bf0c <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    bf20:	b29b      	uxth	r3, r3
    bf22:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    bf26:	4282      	cmp	r2, r0
    bf28:	d01f      	beq.n	bf6a <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    bf2a:	bc30      	pop	{r4, r5}
    bf2c:	4770      	bx	lr
    mid = left + (right - left)/2;
    bf2e:	468c      	mov	ip, r1
    bf30:	e7dd      	b.n	beee <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    bf32:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    bf36:	1a82      	subs	r2, r0, r2
    bf38:	78e3      	ldrb	r3, [r4, #3]
    bf3a:	429a      	cmp	r2, r3
    bf3c:	dae2      	bge.n	bf04 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    bf3e:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    bf42:	2b01      	cmp	r3, #1
    bf44:	d016      	beq.n	bf74 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    bf46:	b1d3      	cbz	r3, bf7e <toUpcase(unsigned short)+0xaa>
    bf48:	b29b      	uxth	r3, r3
    bf4a:	4403      	add	r3, r0
}
    bf4c:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    bf4e:	b298      	uxth	r0, r3
}
    bf50:	4770      	bx	lr
    mid = left + (right - left)/2;
    bf52:	460c      	mov	r4, r1
    bf54:	e7df      	b.n	bf16 <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    bf56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    bf5a:	2b19      	cmp	r3, #25
    bf5c:	bf8c      	ite	hi
    bf5e:	2300      	movhi	r3, #0
    bf60:	2301      	movls	r3, #1
    bf62:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    bf66:	b298      	uxth	r0, r3
}
    bf68:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    bf6a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    bf6e:	8868      	ldrh	r0, [r5, #2]
}
    bf70:	bc30      	pop	{r4, r5}
    bf72:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    bf74:	f002 0201 	and.w	r2, r2, #1
    bf78:	1a83      	subs	r3, r0, r2
    bf7a:	b298      	uxth	r0, r3
    bf7c:	e7d5      	b.n	bf2a <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    bf7e:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    bf82:	e7e2      	b.n	bf4a <toUpcase(unsigned short)+0x76>
    bf84:	200010f8 	.word	0x200010f8
    bf88:	20000fcc 	.word	0x20000fcc

0000bf8c <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    bf8c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    bf90:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    bf94:	1a10      	subs	r0, r2, r0
    bf96:	4770      	bx	lr

0000bf98 <TwoWire::read()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
    bf98:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    bf9c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    bfa0:	429a      	cmp	r2, r3
    bfa2:	d905      	bls.n	bfb0 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    bfa4:	1c5a      	adds	r2, r3, #1
    bfa6:	4403      	add	r3, r0
    bfa8:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    bfac:	7e98      	ldrb	r0, [r3, #26]
    bfae:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    bfb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    bfb4:	4770      	bx	lr
    bfb6:	bf00      	nop

0000bfb8 <TwoWire::peek()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
    bfb8:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    bfbc:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    bfc0:	429a      	cmp	r2, r3
    bfc2:	d902      	bls.n	bfca <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    bfc4:	4418      	add	r0, r3
    bfc6:	7e80      	ldrb	r0, [r0, #26]
    bfc8:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    bfca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    bfce:	4770      	bx	lr

0000bfd0 <TwoWire::flush()>:
	}
    bfd0:	4770      	bx	lr
    bfd2:	bf00      	nop

0000bfd4 <TwoWire::write(unsigned char)>:
{
    bfd4:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    bfd6:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    bfda:	b178      	cbz	r0, bffc <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    bfdc:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    bfe0:	2a88      	cmp	r2, #136	; 0x88
    bfe2:	d903      	bls.n	bfec <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    bfe4:	2201      	movs	r2, #1
			return 0;
    bfe6:	2000      	movs	r0, #0
    bfe8:	605a      	str	r2, [r3, #4]
    bfea:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    bfec:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    bff0:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    bff2:	441a      	add	r2, r3
    bff4:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    bff8:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    bffc:	4770      	bx	lr
    bffe:	bf00      	nop

0000c000 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    c000:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    c002:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    c006:	b90c      	cbnz	r4, c00c <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    c008:	4620      	mov	r0, r4
    c00a:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    c00c:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    c010:	4605      	mov	r5, r0
    c012:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    c016:	42a2      	cmp	r2, r4
    c018:	d80d      	bhi.n	c036 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    c01a:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    c01c:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    c020:	4622      	mov	r2, r4
    c022:	4418      	add	r0, r3
    c024:	f002 f976 	bl	e314 <memcpy>
		txBufferLength += quantity;
    c028:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    c02c:	4620      	mov	r0, r4
		txBufferLength += quantity;
    c02e:	4423      	add	r3, r4
    c030:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    c034:	bd38      	pop	{r3, r4, r5, pc}
    c036:	2201      	movs	r2, #1
    c038:	6042      	str	r2, [r0, #4]
    c03a:	e7ef      	b.n	c01c <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

0000c03c <TwoWire::force_clock()>:
{
    c03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    c040:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    c044:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    c046:	7e01      	ldrb	r1, [r0, #24]
{
    c048:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    c04a:	7e43      	ldrb	r3, [r0, #25]
{
    c04c:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    c04e:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    c052:	4a38      	ldr	r2, [pc, #224]	; (c134 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    c054:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    c058:	4f37      	ldr	r7, [pc, #220]	; (c138 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    c05a:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    c05c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    c060:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    c064:	0109      	lsls	r1, r1, #4
    c066:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    c068:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    c06c:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    c070:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    c074:	011b      	lsls	r3, r3, #4
    c076:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    c078:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    c07a:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    c07e:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    c082:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    c086:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    c088:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    c08a:	492c      	ldr	r1, [pc, #176]	; (c13c <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    c08c:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    c08e:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    c092:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    c094:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    c098:	686b      	ldr	r3, [r5, #4]
    c09a:	4333      	orrs	r3, r6
    c09c:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    c09e:	4b28      	ldr	r3, [pc, #160]	; (c140 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    c0a0:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    c0a2:	683a      	ldr	r2, [r7, #0]
    c0a4:	fba3 3202 	umull	r3, r2, r3, r2
    c0a8:	0c92      	lsrs	r2, r2, #18
    c0aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    c0ae:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    c0b0:	684b      	ldr	r3, [r1, #4]
    c0b2:	1b1b      	subs	r3, r3, r4
    c0b4:	429a      	cmp	r2, r3
    c0b6:	d8fb      	bhi.n	c0b0 <TwoWire::force_clock()+0x74>
    c0b8:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    c0bc:	4a1f      	ldr	r2, [pc, #124]	; (c13c <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    c0be:	f8df e080 	ldr.w	lr, [pc, #128]	; c140 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    c0c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    c0c6:	4203      	tst	r3, r0
    c0c8:	d002      	beq.n	c0d0 <TwoWire::force_clock()+0x94>
    c0ca:	68ab      	ldr	r3, [r5, #8]
    c0cc:	4233      	tst	r3, r6
    c0ce:	d12f      	bne.n	c130 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    c0d0:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    c0d4:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    c0d6:	6839      	ldr	r1, [r7, #0]
    c0d8:	fbae 3101 	umull	r3, r1, lr, r1
    c0dc:	0c89      	lsrs	r1, r1, #18
    c0de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    c0e2:	6853      	ldr	r3, [r2, #4]
    c0e4:	1b1b      	subs	r3, r3, r4
    c0e6:	4299      	cmp	r1, r3
    c0e8:	d8fb      	bhi.n	c0e2 <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    c0ea:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    c0ee:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    c0f0:	6839      	ldr	r1, [r7, #0]
    c0f2:	fbae 3101 	umull	r3, r1, lr, r1
    c0f6:	0c89      	lsrs	r1, r1, #18
    c0f8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    c0fc:	6853      	ldr	r3, [r2, #4]
    c0fe:	1b1b      	subs	r3, r3, r4
    c100:	4299      	cmp	r1, r3
    c102:	d8fb      	bhi.n	c0fc <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    c104:	f1bc 0c01 	subs.w	ip, ip, #1
    c108:	d1db      	bne.n	c0c2 <TwoWire::force_clock()+0x86>
	bool ret = false;
    c10a:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    c10c:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    c110:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    c112:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    c116:	68db      	ldr	r3, [r3, #12]
    c118:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    c11c:	f899 3019 	ldrb.w	r3, [r9, #25]
    c120:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    c124:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    c128:	6013      	str	r3, [r2, #0]
}
    c12a:	b003      	add	sp, #12
    c12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    c130:	2001      	movs	r0, #1
    c132:	e7eb      	b.n	c10c <TwoWire::force_clock()+0xd0>
    c134:	20001a68 	.word	0x20001a68
    c138:	20002a28 	.word	0x20002a28
    c13c:	e0001000 	.word	0xe0001000
    c140:	431bde83 	.word	0x431bde83

0000c144 <TwoWire::wait_idle()>:
	return systick_millis_count;
    c144:	4a0e      	ldr	r2, [pc, #56]	; (c180 <TwoWire::wait_idle()+0x3c>)
{
    c146:	b510      	push	{r4, lr}
    c148:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    c14a:	6904      	ldr	r4, [r0, #16]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    c14c:	e005      	b.n	c15a <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    c14e:	01db      	lsls	r3, r3, #7
    c150:	d407      	bmi.n	c162 <TwoWire::wait_idle()+0x1e>
    c152:	6813      	ldr	r3, [r2, #0]
	operator unsigned long () const { return millis() - ms; }
    c154:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    c156:	2b10      	cmp	r3, #16
    c158:	d808      	bhi.n	c16c <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    c15a:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    c15c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    c160:	d1f5      	bne.n	c14e <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    c162:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    c166:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    c168:	6163      	str	r3, [r4, #20]
}
    c16a:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    c16c:	f7ff ff66 	bl	c03c <TwoWire::force_clock()>
    c170:	2800      	cmp	r0, #0
    c172:	d0fa      	beq.n	c16a <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    c174:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    c178:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    c17a:	6163      	str	r3, [r4, #20]
	return true;
    c17c:	e7f5      	b.n	c16a <TwoWire::wait_idle()+0x26>
    c17e:	bf00      	nop
    c180:	20004a9c 	.word	0x20004a9c

0000c184 <TwoWire::endTransmission(unsigned char)>:
{
    c184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    c188:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    c18c:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    c18e:	f1ba 0f00 	cmp.w	sl, #0
    c192:	d04f      	beq.n	c234 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
    c194:	4681      	mov	r9, r0
    c196:	4688      	mov	r8, r1
    c198:	f7ff ffd4 	bl	c144 <TwoWire::wait_idle()>
    c19c:	2800      	cmp	r0, #0
    c19e:	d049      	beq.n	c234 <TwoWire::endTransmission(unsigned char)+0xb0>
    c1a0:	4e37      	ldr	r6, [pc, #220]	; (c280 <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    c1a2:	2400      	movs	r4, #0
    c1a4:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    c1a6:	e018      	b.n	c1da <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
    c1a8:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    c1aa:	0519      	lsls	r1, r3, #20
    c1ac:	d451      	bmi.n	c252 <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
    c1ae:	04da      	lsls	r2, r3, #19
    c1b0:	d455      	bmi.n	c25e <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
    c1b2:	0558      	lsls	r0, r3, #21
    c1b4:	d459      	bmi.n	c26a <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    c1b6:	0499      	lsls	r1, r3, #18
    c1b8:	d441      	bmi.n	c23e <TwoWire::endTransmission(unsigned char)+0xba>
    c1ba:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    c1bc:	1bd2      	subs	r2, r2, r7
    c1be:	2a32      	cmp	r2, #50	; 0x32
    c1c0:	d83d      	bhi.n	c23e <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
    c1c2:	4554      	cmp	r4, sl
    c1c4:	d907      	bls.n	c1d6 <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
    c1c6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    c1c8:	0752      	lsls	r2, r2, #29
    c1ca:	d104      	bne.n	c1d6 <TwoWire::endTransmission(unsigned char)+0x52>
    c1cc:	059b      	lsls	r3, r3, #22
    c1ce:	d455      	bmi.n	c27c <TwoWire::endTransmission(unsigned char)+0xf8>
    c1d0:	f1b8 0f00 	cmp.w	r8, #0
    c1d4:	d052      	beq.n	c27c <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
    c1d6:	f003 fc7f 	bl	fad8 <yield>
		if (tx_index <= tx_len) {
    c1da:	4554      	cmp	r4, sl
    c1dc:	d8e4      	bhi.n	c1a8 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    c1de:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    c1e0:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    c1e2:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    c1e6:	d4df      	bmi.n	c1a8 <TwoWire::endTransmission(unsigned char)+0x24>
    c1e8:	e013      	b.n	c212 <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    c1ea:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    c1ee:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    c1f0:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    c1f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    c1f6:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    c1f8:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    c1fa:	d01e      	beq.n	c23a <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
    c1fc:	458a      	cmp	sl, r1
				fifo_used++;
    c1fe:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    c202:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    c206:	d90e      	bls.n	c226 <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    c208:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    c20c:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    c20e:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    c210:	d0ca      	beq.n	c1a8 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
    c212:	2101      	movs	r1, #1
				if (tx_index == 0) {
    c214:	2c00      	cmp	r4, #0
    c216:	d0e8      	beq.n	c1ea <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    c218:	4621      	mov	r1, r4
				fifo_used++;
    c21a:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    c21c:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    c21e:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    c220:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    c224:	d8f0      	bhi.n	c208 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    c226:	f1b8 0f00 	cmp.w	r8, #0
    c22a:	d0bd      	beq.n	c1a8 <TwoWire::endTransmission(unsigned char)+0x24>
    c22c:	f44f 7300 	mov.w	r3, #512	; 0x200
    c230:	662b      	str	r3, [r5, #96]	; 0x60
					break;
    c232:	e7b9      	b.n	c1a8 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
    c234:	2004      	movs	r0, #4
}
    c236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    c23a:	2401      	movs	r4, #1
    c23c:	e7b4      	b.n	c1a8 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c23e:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    c240:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    c244:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c246:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    c24a:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    c24c:	662a      	str	r2, [r5, #96]	; 0x60
}
    c24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c252:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    c254:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c256:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    c25a:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    c25c:	e7eb      	b.n	c236 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c25e:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
    c260:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c262:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    c266:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
    c268:	e7e5      	b.n	c236 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c26a:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    c26c:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    c270:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c272:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    c276:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    c278:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    c27a:	e7dc      	b.n	c236 <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
    c27c:	2000      	movs	r0, #0
    c27e:	e7da      	b.n	c236 <TwoWire::endTransmission(unsigned char)+0xb2>
    c280:	20004a9c 	.word	0x20004a9c

0000c284 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    c284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c288:	4683      	mov	fp, r0
    c28a:	460c      	mov	r4, r1
    c28c:	4615      	mov	r5, r2
    c28e:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    c290:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
    c294:	f7ff ff56 	bl	c144 <TwoWire::wait_idle()>
    c298:	2800      	cmp	r0, #0
    c29a:	f000 809e 	beq.w	c3da <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
    c29e:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
    c2a0:	2d01      	cmp	r5, #1
    c2a2:	f8df 813c 	ldr.w	r8, [pc, #316]	; c3e0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    c2a6:	f240 4601 	movw	r6, #1025	; 0x401
    c2aa:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
    c2ac:	f04f 0100 	mov.w	r1, #0
    c2b0:	bf38      	it	cc
    c2b2:	2501      	movcc	r5, #1
    c2b4:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    c2b8:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    c2ba:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
    c2bc:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    c2c0:	e020      	b.n	c304 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
    c2c2:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    c2c6:	2b87      	cmp	r3, #135	; 0x87
    c2c8:	d93f      	bls.n	c34a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    c2ca:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    c2ce:	0510      	lsls	r0, r2, #20
    c2d0:	d45a      	bmi.n	c388 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    c2d2:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    c2d6:	d170      	bne.n	c3ba <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
    c2d8:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    c2dc:	eba3 0309 	sub.w	r3, r3, r9
    c2e0:	2b32      	cmp	r3, #50	; 0x32
    c2e2:	d86a      	bhi.n	c3ba <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
    c2e4:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    c2e8:	42ab      	cmp	r3, r5
    c2ea:	d309      	bcc.n	c300 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    c2ec:	2c02      	cmp	r4, #2
    c2ee:	d907      	bls.n	c300 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    c2f0:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    c2f4:	0759      	lsls	r1, r3, #29
    c2f6:	d103      	bne.n	c300 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    c2f8:	0593      	lsls	r3, r2, #22
    c2fa:	d44b      	bmi.n	c394 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
    c2fc:	2f00      	cmp	r7, #0
    c2fe:	d049      	beq.n	c394 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
    c300:	f003 fbea 	bl	fad8 <yield>
		if (tx_state < 3) {
    c304:	2c02      	cmp	r4, #2
    c306:	d8dc      	bhi.n	c2c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    c308:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    c30c:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    c310:	075b      	lsls	r3, r3, #29
    c312:	d4d6      	bmi.n	c2c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    c314:	1e68      	subs	r0, r5, #1
    c316:	4422      	add	r2, r4
    c318:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
    c31c:	b94c      	cbnz	r4, c332 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    c31e:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
    c322:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
    c324:	1b13      	subs	r3, r2, r4
    c326:	2b03      	cmp	r3, #3
    c328:	d8cb      	bhi.n	c2c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    c32a:	2c02      	cmp	r4, #2
    c32c:	d8c9      	bhi.n	c2c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
    c32e:	2c00      	cmp	r4, #0
    c330:	d0f5      	beq.n	c31e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
    c332:	2c01      	cmp	r4, #1
    c334:	d037      	beq.n	c3a6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    c336:	b11f      	cbz	r7, c340 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    c338:	f44f 7300 	mov.w	r3, #512	; 0x200
    c33c:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    c340:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
    c344:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    c346:	2b87      	cmp	r3, #135	; 0x87
    c348:	d8bf      	bhi.n	c2ca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    c34a:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    c34e:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    c352:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    c356:	d0b8      	beq.n	c2ca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    c358:	1c59      	adds	r1, r3, #1
    c35a:	449c      	add	ip, r3
    c35c:	3319      	adds	r3, #25
    c35e:	b2c9      	uxtb	r1, r1
    c360:	fa5f fc8c 	uxtb.w	ip, ip
    c364:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    c368:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    c36c:	1c4a      	adds	r2, r1, #1
    c36e:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
    c370:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    c374:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
    c376:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    c37a:	d0a6      	beq.n	c2ca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    c37c:	2989      	cmp	r1, #137	; 0x89
    c37e:	d1f3      	bne.n	c368 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
    c380:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    c384:	0510      	lsls	r0, r2, #20
    c386:	d5a4      	bpl.n	c2d2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c388:	f8da 3010 	ldr.w	r3, [sl, #16]
    c38c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    c390:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    c394:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    c398:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    c39c:	d106      	bne.n	c3ac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
    c39e:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
    c3a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    c3a6:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
    c3aa:	e7ba      	b.n	c322 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    c3ac:	f8da 3010 	ldr.w	r3, [sl, #16]
    c3b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c3b4:	f8ca 3010 	str.w	r3, [sl, #16]
    c3b8:	e7f1      	b.n	c39e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c3ba:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    c3be:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c3c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    c3c6:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    c3ca:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    c3ce:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    c3d2:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    c3d6:	d0e2      	beq.n	c39e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
    c3d8:	e7e8      	b.n	c3ac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
    c3da:	2004      	movs	r0, #4
}
    c3dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3e0:	20004a9c 	.word	0x20004a9c

0000c3e4 <TwoWire::isr()>:
{
    c3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    c3e6:	6906      	ldr	r6, [r0, #16]
{
    c3e8:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    c3ea:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    c3ee:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
    c3f2:	d001      	beq.n	c3f8 <TwoWire::isr()+0x14>
    c3f4:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    c3f8:	07a8      	lsls	r0, r5, #30
    c3fa:	d50b      	bpl.n	c414 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    c3fc:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    c400:	0411      	lsls	r1, r2, #16
    c402:	d53d      	bpl.n	c480 <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
    c404:	2300      	movs	r3, #0
    c406:	2101      	movs	r1, #1
    c408:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    c40c:	4423      	add	r3, r4
    c40e:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    c412:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    c414:	07ea      	lsls	r2, r5, #31
    c416:	d510      	bpl.n	c43a <TwoWire::isr()+0x56>
		if (!transmitting) {
    c418:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
    c41c:	b1f7      	cbz	r7, c45c <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    c41e:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
    c422:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    c426:	42bb      	cmp	r3, r7
    c428:	d926      	bls.n	c478 <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
    c42a:	1c7b      	adds	r3, r7, #1
    c42c:	4427      	add	r7, r4
    c42e:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
    c432:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    c436:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    c43a:	05ab      	lsls	r3, r5, #22
    c43c:	d50d      	bpl.n	c45a <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    c43e:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    c442:	b118      	cbz	r0, c44c <TwoWire::isr()+0x68>
    c444:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c448:	b103      	cbz	r3, c44c <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    c44a:	4798      	blx	r3
		rxBufferIndex = 0;
    c44c:	2300      	movs	r3, #0
    c44e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    c452:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    c456:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    c45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
    c45c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    c460:	b103      	cbz	r3, c464 <TwoWire::isr()+0x80>
				(*user_onRequest)();
    c462:	4798      	blx	r3
			txBufferIndex = 0;
    c464:	2300      	movs	r3, #0
    c466:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    c46a:	2301      	movs	r3, #1
    c46c:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    c470:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    c474:	42bb      	cmp	r3, r7
    c476:	d8d8      	bhi.n	c42a <TwoWire::isr()+0x46>
			port->STDR = 0;
    c478:	2300      	movs	r3, #0
    c47a:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
    c47e:	e7dc      	b.n	c43a <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    c480:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    c484:	2b87      	cmp	r3, #135	; 0x87
    c486:	d8c5      	bhi.n	c414 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    c488:	1c59      	adds	r1, r3, #1
    c48a:	b2c9      	uxtb	r1, r1
    c48c:	e7be      	b.n	c40c <TwoWire::isr()+0x28>
    c48e:	bf00      	nop

0000c490 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    c490:	4801      	ldr	r0, [pc, #4]	; (c498 <lpi2c1_isr()+0x8>)
    c492:	f7ff bfa7 	b.w	c3e4 <TwoWire::isr()>
    c496:	bf00      	nop
    c498:	20002aec 	.word	0x20002aec

0000c49c <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    c49c:	4801      	ldr	r0, [pc, #4]	; (c4a4 <lpi2c3_isr()+0x8>)
    c49e:	f7ff bfa1 	b.w	c3e4 <TwoWire::isr()>
    c4a2:	bf00      	nop
    c4a4:	20002c2c 	.word	0x20002c2c

0000c4a8 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    c4a8:	4801      	ldr	r0, [pc, #4]	; (c4b0 <lpi2c4_isr()+0x8>)
    c4aa:	f7ff bf9b 	b.w	c3e4 <TwoWire::isr()>
    c4ae:	bf00      	nop
    c4b0:	20002d6c 	.word	0x20002d6c

0000c4b4 <RTC_DS3231::begin(TwoWire*)>:
    @brief  Start I2C for the DS3231 and test succesful connection
    @param  wireInstance pointer to the I2C bus
    @return True if Wire can find DS3231 or false otherwise.
*/
/**************************************************************************/
bool RTC_DS3231::begin(TwoWire *wireInstance) {
    c4b4:	b538      	push	{r3, r4, r5, lr}
    c4b6:	4604      	mov	r4, r0
  if (i2c_dev)
    c4b8:	6800      	ldr	r0, [r0, #0]
bool RTC_DS3231::begin(TwoWire *wireInstance) {
    c4ba:	460d      	mov	r5, r1
  if (i2c_dev)
    c4bc:	b110      	cbz	r0, c4c4 <RTC_DS3231::begin(TwoWire*)+0x10>
    delete i2c_dev;
    c4be:	2110      	movs	r1, #16
    c4c0:	f001 ffc4 	bl	e44c <operator delete(void*, unsigned int)>
  i2c_dev = new Adafruit_I2CDevice(DS3231_ADDRESS, wireInstance);
    c4c4:	2010      	movs	r0, #16
    c4c6:	f001 ffbf 	bl	e448 <operator new(unsigned int)>
    c4ca:	462a      	mov	r2, r5
    c4cc:	4605      	mov	r5, r0
    c4ce:	2168      	movs	r1, #104	; 0x68
    c4d0:	f000 fa0a 	bl	c8e8 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>
  if (!i2c_dev->begin())
    c4d4:	2101      	movs	r1, #1
    c4d6:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(DS3231_ADDRESS, wireInstance);
    c4d8:	6025      	str	r5, [r4, #0]
    return false;
  return true;
}
    c4da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (!i2c_dev->begin())
    c4de:	f000 ba0d 	b.w	c8fc <Adafruit_I2CDevice::begin(bool)>
    c4e2:	bf00      	nop

0000c4e4 <RTC_DS3231::lostPower()>:
    @return True if the bit is set (oscillator stopped) or false if it is
   running
*/
/**************************************************************************/
bool RTC_DS3231::lostPower(void) {
  return read_register(DS3231_STATUSREG) >> 7;
    c4e4:	210f      	movs	r1, #15
bool RTC_DS3231::lostPower(void) {
    c4e6:	b508      	push	{r3, lr}
  return read_register(DS3231_STATUSREG) >> 7;
    c4e8:	f000 f902 	bl	c6f0 <RTC_I2C::read_register(unsigned char)>
}
    c4ec:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    c4f0:	bd08      	pop	{r3, pc}
    c4f2:	bf00      	nop

0000c4f4 <RTC_DS3231::adjust(DateTime const&)>:
/*!
    @brief  Set the date and flip the Oscillator Stop Flag
    @param dt DateTime object containing the date/time to set
*/
/**************************************************************************/
void RTC_DS3231::adjust(const DateTime &dt) {
    c4f4:	b570      	push	{r4, r5, r6, lr}
  uint8_t buffer[8] = {DS3231_TIME,
    c4f6:	2300      	movs	r3, #0
void RTC_DS3231::adjust(const DateTime &dt) {
    c4f8:	b084      	sub	sp, #16
  /*!
      @brief  Convert a binary value to BCD format for the RTC registers
      @param val Binary value
      @return BCD value
  */
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    c4fa:	4d35      	ldr	r5, [pc, #212]	; (c5d0 <RTC_DS3231::adjust(DateTime const&)+0xdc>)
    c4fc:	4606      	mov	r6, r0
  uint8_t second() const { return ss; }
    c4fe:	7948      	ldrb	r0, [r1, #5]
    c500:	460c      	mov	r4, r1
  uint8_t minute() const { return mm; }
    c502:	7909      	ldrb	r1, [r1, #4]
  uint8_t hour() const { return hh; }
    c504:	78e2      	ldrb	r2, [r4, #3]
  uint8_t buffer[8] = {DS3231_TIME,
    c506:	e9cd 3302 	strd	r3, r3, [sp, #8]
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    c50a:	fba5 c300 	umull	ip, r3, r5, r0
    c50e:	08db      	lsrs	r3, r3, #3
    c510:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c514:	eb00 0043 	add.w	r0, r0, r3, lsl #1
                       bin2bcd(dt.minute()),
                       bin2bcd(dt.hour()),
                       bin2bcd(dowToDS3231(dt.dayOfTheWeek())),
                       bin2bcd(dt.day()),
                       bin2bcd(dt.month()),
                       bin2bcd(dt.year() - 2000U)};
    c518:	f88d 0009 	strb.w	r0, [sp, #9]
    c51c:	fba5 0301 	umull	r0, r3, r5, r1
                       bin2bcd(dowToDS3231(dt.dayOfTheWeek())),
    c520:	4620      	mov	r0, r4
    c522:	08db      	lsrs	r3, r3, #3
    c524:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c528:	eb01 0143 	add.w	r1, r1, r3, lsl #1
                       bin2bcd(dt.year() - 2000U)};
    c52c:	f88d 100a 	strb.w	r1, [sp, #10]
    c530:	fba5 1302 	umull	r1, r3, r5, r2
    c534:	08db      	lsrs	r3, r3, #3
    c536:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c53a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    c53e:	f88d 200b 	strb.w	r2, [sp, #11]
                       bin2bcd(dowToDS3231(dt.dayOfTheWeek())),
    c542:	f000 f9bb 	bl	c8bc <DateTime::dayOfTheWeek() const>
              storing in the DS3231: from 1 (Monday) to 7 (Sunday).
      @param  d Day of the week as represented by the library:
              from 0 (Sunday) to 6 (Saturday).
      @return the converted value
  */
  static uint8_t dowToDS3231(uint8_t d) { return d == 0 ? 7 : d; }
    c546:	2800      	cmp	r0, #0
    c548:	d03f      	beq.n	c5ca <RTC_DS3231::adjust(DateTime const&)+0xd6>
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    c54a:	fba5 3500 	umull	r3, r5, r5, r0
    c54e:	08ed      	lsrs	r5, r5, #3
    c550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    c554:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    c558:	b2c0      	uxtb	r0, r0
  uint8_t day() const { return d; }
    c55a:	f894 c002 	ldrb.w	ip, [r4, #2]
  i2c_dev->write(buffer, 8);
    c55e:	a902      	add	r1, sp, #8
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    c560:	4b1b      	ldr	r3, [pc, #108]	; (c5d0 <RTC_DS3231::adjust(DateTime const&)+0xdc>)
  uint8_t month() const { return m; }
    c562:	7865      	ldrb	r5, [r4, #1]
                       bin2bcd(dt.year() - 2000U)};
    c564:	f88d 000c 	strb.w	r0, [sp, #12]
  uint16_t year() const { return 2000U + yOff; }
    c568:	7820      	ldrb	r0, [r4, #0]
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    c56a:	fba3 420c 	umull	r4, r2, r3, ip
    c56e:	08d2      	lsrs	r2, r2, #3
    c570:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c574:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
    c578:	fba3 4205 	umull	r4, r2, r3, r5
    c57c:	fba3 4300 	umull	r4, r3, r3, r0
    c580:	08d2      	lsrs	r2, r2, #3
    c582:	f88d c00d 	strb.w	ip, [sp, #13]
    c586:	08db      	lsrs	r3, r3, #3
    c588:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c58c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c590:	eb05 0542 	add.w	r5, r5, r2, lsl #1
  i2c_dev->write(buffer, 8);
    c594:	2208      	movs	r2, #8
    c596:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    c59a:	2300      	movs	r3, #0
                       bin2bcd(dt.year() - 2000U)};
    c59c:	f88d 500e 	strb.w	r5, [sp, #14]
    c5a0:	f88d 000f 	strb.w	r0, [sp, #15]
  i2c_dev->write(buffer, 8);
    c5a4:	e9cd 3300 	strd	r3, r3, [sp]
    c5a8:	2301      	movs	r3, #1
    c5aa:	6830      	ldr	r0, [r6, #0]
    c5ac:	f000 f9c2 	bl	c934 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>

  uint8_t statreg = read_register(DS3231_STATUSREG);
    c5b0:	210f      	movs	r1, #15
    c5b2:	4630      	mov	r0, r6
    c5b4:	f000 f89c 	bl	c6f0 <RTC_I2C::read_register(unsigned char)>
    c5b8:	4602      	mov	r2, r0
  statreg &= ~0x80; // flip OSF bit
  write_register(DS3231_STATUSREG, statreg);
    c5ba:	210f      	movs	r1, #15
    c5bc:	4630      	mov	r0, r6
    c5be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c5c2:	f000 f883 	bl	c6cc <RTC_I2C::write_register(unsigned char, unsigned char)>
}
    c5c6:	b004      	add	sp, #16
    c5c8:	bd70      	pop	{r4, r5, r6, pc}
    c5ca:	2007      	movs	r0, #7
    c5cc:	e7c5      	b.n	c55a <RTC_DS3231::adjust(DateTime const&)+0x66>
    c5ce:	bf00      	nop
    c5d0:	cccccccd 	.word	0xcccccccd

0000c5d4 <RTC_DS3231::now()>:
/*!
    @brief  Get the current date/time
    @return DateTime object with the current date/time
*/
/**************************************************************************/
DateTime RTC_DS3231::now() {
    c5d4:	b570      	push	{r4, r5, r6, lr}
  uint8_t buffer[7];
  buffer[0] = 0;
    c5d6:	2200      	movs	r2, #0
DateTime RTC_DS3231::now() {
    c5d8:	b086      	sub	sp, #24
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
    c5da:	2307      	movs	r3, #7
    c5dc:	680c      	ldr	r4, [r1, #0]
DateTime RTC_DS3231::now() {
    c5de:	4605      	mov	r5, r0
  buffer[0] = 0;
    c5e0:	f88d 2010 	strb.w	r2, [sp, #16]
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
    c5e4:	4620      	mov	r0, r4
    c5e6:	e9cd 3200 	strd	r3, r2, [sp]
    c5ea:	ab04      	add	r3, sp, #16
    c5ec:	2201      	movs	r2, #1
    c5ee:	4619      	mov	r1, r3
    c5f0:	f000 fa30 	bl	ca54 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5] & 0x7F),
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
    c5f4:	f89d 4015 	ldrb.w	r4, [sp, #21]
  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5] & 0x7F),
    c5f8:	f89d 1016 	ldrb.w	r1, [sp, #22]
                  bcd2bin(buffer[0] & 0x7F));
    c5fc:	f004 027f 	and.w	r2, r4, #127	; 0x7f
  static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    c600:	f3c4 1402 	ubfx	r4, r4, #4, #3
    c604:	f89d c010 	ldrb.w	ip, [sp, #16]
    c608:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
    c60c:	f89d e011 	ldrb.w	lr, [sp, #17]
    c610:	f3cc 1602 	ubfx	r6, ip, #4, #3
    c614:	f89d 0012 	ldrb.w	r0, [sp, #18]
    c618:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    c61c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c620:	090c      	lsrs	r4, r1, #4
    c622:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
    c626:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
    c62a:	b2d2      	uxtb	r2, r2
    c62c:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    c630:	f00c 047f 	and.w	r4, ip, #127	; 0x7f
    c634:	eb04 0446 	add.w	r4, r4, r6, lsl #1
  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5] & 0x7F),
    c638:	b2c9      	uxtb	r1, r1
                  bcd2bin(buffer[0] & 0x7F));
    c63a:	b2e4      	uxtb	r4, r4
    c63c:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    c640:	9402      	str	r4, [sp, #8]
    c642:	ea4f 141e 	mov.w	r4, lr, lsr #4
    c646:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
    c64a:	eb0e 0e44 	add.w	lr, lr, r4, lsl #1
    c64e:	fa5f f48e 	uxtb.w	r4, lr
    c652:	9401      	str	r4, [sp, #4]
    c654:	0904      	lsrs	r4, r0, #4
    c656:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
    c65a:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    c65e:	b2c0      	uxtb	r0, r0
    c660:	9000      	str	r0, [sp, #0]
    c662:	0918      	lsrs	r0, r3, #4
    c664:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
    c668:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    c66c:	4628      	mov	r0, r5
    c66e:	b2db      	uxtb	r3, r3
    c670:	f000 f858 	bl	c724 <DateTime::DateTime(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    c674:	4628      	mov	r0, r5
    c676:	b006      	add	sp, #24
    c678:	bd70      	pop	{r4, r5, r6, pc}
    c67a:	bf00      	nop

0000c67c <date2days(unsigned short, unsigned char, unsigned char)>:
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
    c67c:	2901      	cmp	r1, #1
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    c67e:	b500      	push	{lr}
  for (uint8_t i = 1; i < m; ++i)
    c680:	d913      	bls.n	c6aa <date2days(unsigned short, unsigned char, unsigned char)+0x2e>
    c682:	4b11      	ldr	r3, [pc, #68]	; (c6c8 <date2days(unsigned short, unsigned char, unsigned char)+0x4c>)
    c684:	f1a1 0e02 	sub.w	lr, r1, #2
    c688:	f04f 0c1f 	mov.w	ip, #31
    c68c:	fa53 fe8e 	uxtab	lr, r3, lr
    c690:	e001      	b.n	c696 <date2days(unsigned short, unsigned char, unsigned char)+0x1a>
    days += pgm_read_byte(daysInMonth + i - 1);
    c692:	f813 cf01 	ldrb.w	ip, [r3, #1]!
    c696:	4462      	add	r2, ip
  for (uint8_t i = 1; i < m; ++i)
    c698:	4573      	cmp	r3, lr
    days += pgm_read_byte(daysInMonth + i - 1);
    c69a:	b292      	uxth	r2, r2
  for (uint8_t i = 1; i < m; ++i)
    c69c:	d1f9      	bne.n	c692 <date2days(unsigned short, unsigned char, unsigned char)+0x16>
  if (m > 2 && y % 4 == 0)
    c69e:	2902      	cmp	r1, #2
    c6a0:	d903      	bls.n	c6aa <date2days(unsigned short, unsigned char, unsigned char)+0x2e>
    c6a2:	0783      	lsls	r3, r0, #30
    c6a4:	d101      	bne.n	c6aa <date2days(unsigned short, unsigned char, unsigned char)+0x2e>
    ++days;
    c6a6:	3201      	adds	r2, #1
    c6a8:	b292      	uxth	r2, r2
  return days + 365 * y + (y + 3) / 4 - 1;
    c6aa:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
    c6ae:	1cc3      	adds	r3, r0, #3
    c6b0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    c6b4:	f3c3 038d 	ubfx	r3, r3, #2, #14
    c6b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c6bc:	3801      	subs	r0, #1
    c6be:	4403      	add	r3, r0
    c6c0:	441a      	add	r2, r3
}
    c6c2:	b290      	uxth	r0, r2
    c6c4:	f85d fb04 	ldr.w	pc, [sp], #4
    c6c8:	60002758 	.word	0x60002758

0000c6cc <RTC_I2C::write_register(unsigned char, unsigned char)>:
void RTC_I2C::write_register(uint8_t reg, uint8_t val) {
    c6cc:	b510      	push	{r4, lr}
    c6ce:	b084      	sub	sp, #16
  i2c_dev->write(buffer, 2);
    c6d0:	2400      	movs	r4, #0
    c6d2:	2301      	movs	r3, #1
    c6d4:	6800      	ldr	r0, [r0, #0]
  uint8_t buffer[2] = {reg, val};
    c6d6:	f88d 100c 	strb.w	r1, [sp, #12]
  i2c_dev->write(buffer, 2);
    c6da:	a903      	add	r1, sp, #12
  uint8_t buffer[2] = {reg, val};
    c6dc:	f88d 200d 	strb.w	r2, [sp, #13]
  i2c_dev->write(buffer, 2);
    c6e0:	2202      	movs	r2, #2
    c6e2:	e9cd 4400 	strd	r4, r4, [sp]
    c6e6:	f000 f925 	bl	c934 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
}
    c6ea:	b004      	add	sp, #16
    c6ec:	bd10      	pop	{r4, pc}
    c6ee:	bf00      	nop

0000c6f0 <RTC_I2C::read_register(unsigned char)>:
uint8_t RTC_I2C::read_register(uint8_t reg) {
    c6f0:	b530      	push	{r4, r5, lr}
  i2c_dev->write(&reg, 1);
    c6f2:	2301      	movs	r3, #1
uint8_t RTC_I2C::read_register(uint8_t reg) {
    c6f4:	b087      	sub	sp, #28
  i2c_dev->write(&reg, 1);
    c6f6:	2500      	movs	r5, #0
uint8_t RTC_I2C::read_register(uint8_t reg) {
    c6f8:	4604      	mov	r4, r0
  i2c_dev->write(&reg, 1);
    c6fa:	461a      	mov	r2, r3
uint8_t RTC_I2C::read_register(uint8_t reg) {
    c6fc:	f88d 100f 	strb.w	r1, [sp, #15]
  i2c_dev->write(&reg, 1);
    c700:	f10d 010f 	add.w	r1, sp, #15
    c704:	e9cd 5500 	strd	r5, r5, [sp]
    c708:	6800      	ldr	r0, [r0, #0]
    c70a:	f000 f913 	bl	c934 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
  i2c_dev->read(buffer, 1);
    c70e:	2301      	movs	r3, #1
    c710:	a905      	add	r1, sp, #20
    c712:	6820      	ldr	r0, [r4, #0]
    c714:	461a      	mov	r2, r3
    c716:	f000 f979 	bl	ca0c <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool)>
}
    c71a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    c71e:	b007      	add	sp, #28
    c720:	bd30      	pop	{r4, r5, pc}
    c722:	bf00      	nop

0000c724 <DateTime::DateTime(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    c724:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
    c728:	b510      	push	{r4, lr}
    c72a:	f89d 4008 	ldrb.w	r4, [sp, #8]
    c72e:	f89d e00c 	ldrb.w	lr, [sp, #12]
    c732:	f89d c010 	ldrb.w	ip, [sp, #16]
  if (year >= 2000U)
    c736:	d302      	bcc.n	c73e <DateTime::DateTime(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x1a>
    year -= 2000U;
    c738:	f5a1 61fa 	sub.w	r1, r1, #2000	; 0x7d0
    c73c:	b289      	uxth	r1, r1
  yOff = year;
    c73e:	7001      	strb	r1, [r0, #0]
  m = month;
    c740:	7042      	strb	r2, [r0, #1]
  d = day;
    c742:	7083      	strb	r3, [r0, #2]
  hh = hour;
    c744:	70c4      	strb	r4, [r0, #3]
  mm = min;
    c746:	f880 e004 	strb.w	lr, [r0, #4]
  ss = sec;
    c74a:	f880 c005 	strb.w	ip, [r0, #5]
}
    c74e:	bd10      	pop	{r4, pc}

0000c750 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)>:

    @param date Date PROGMEM string, e.g. F("Apr 16 2020").
    @param time Time PROGMEM string, e.g. F("18:34:56").
*/
/**************************************************************************/
DateTime::DateTime(const __FlashStringHelper *date,
    c750:	b500      	push	{lr}
    c752:	b085      	sub	sp, #20
    c754:	468e      	mov	lr, r1
    c756:	4684      	mov	ip, r0
                   const __FlashStringHelper *time) {
  char buff[11];
  memcpy_P(buff, date, 11);
    c758:	6808      	ldr	r0, [r1, #0]
    c75a:	ab01      	add	r3, sp, #4
    c75c:	6849      	ldr	r1, [r1, #4]
    c75e:	c303      	stmia	r3!, {r0, r1}
    c760:	f8be 1008 	ldrh.w	r1, [lr, #8]
    c764:	8019      	strh	r1, [r3, #0]
    c766:	f89e 100a 	ldrb.w	r1, [lr, #10]
    c76a:	7099      	strb	r1, [r3, #2]
  if ('0' <= *p && *p <= '9')
    c76c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c770:	3b30      	subs	r3, #48	; 0x30
    c772:	b2db      	uxtb	r3, r3
    c774:	2b09      	cmp	r3, #9
    c776:	d867      	bhi.n	c848 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0xf8>
  return 10 * v + *++p - '0';
    c778:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c77c:	005b      	lsls	r3, r3, #1
    c77e:	b2db      	uxtb	r3, r3
    c780:	f89d 100e 	ldrb.w	r1, [sp, #14]
    c784:	3930      	subs	r1, #48	; 0x30
    c786:	440b      	add	r3, r1
  yOff = conv2d(buff + 9);
  // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
  switch (buff[0]) {
    c788:	f89d 1004 	ldrb.w	r1, [sp, #4]
    c78c:	3941      	subs	r1, #65	; 0x41
  yOff = conv2d(buff + 9);
    c78e:	f88c 3000 	strb.w	r3, [ip]
  switch (buff[0]) {
    c792:	2912      	cmp	r1, #18
    c794:	d80e      	bhi.n	c7b4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x64>
    c796:	e8df f001 	tbb	[pc, r1]
    c79a:	0d65      	.short	0x0d65
    c79c:	6e0d0a0d 	.word	0x6e0d0a0d
    c7a0:	720d0d0d 	.word	0x720d0d0d
    c7a4:	867d0d0d 	.word	0x867d0d0d
    c7a8:	0d0d0d8a 	.word	0x0d0d0d8a
    c7ac:	61          	.byte	0x61
    c7ad:	00          	.byte	0x00
    break;
  case 'N':
    m = 11;
    break;
  case 'D':
    m = 12;
    c7ae:	230c      	movs	r3, #12
    c7b0:	f88c 3001 	strb.w	r3, [ip, #1]
  if ('0' <= *p && *p <= '9')
    c7b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c7b8:	3b30      	subs	r3, #48	; 0x30
    c7ba:	b2db      	uxtb	r3, r3
    c7bc:	2b09      	cmp	r3, #9
    c7be:	d84b      	bhi.n	c858 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x108>
  return 10 * v + *++p - '0';
    c7c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c7c4:	005b      	lsls	r3, r3, #1
    c7c6:	b2db      	uxtb	r3, r3
    c7c8:	f89d 1009 	ldrb.w	r1, [sp, #9]
    break;
  }
  d = conv2d(buff + 4);
  memcpy_P(buff, time, 8);
    c7cc:	f10d 0e04 	add.w	lr, sp, #4
  return 10 * v + *++p - '0';
    c7d0:	3930      	subs	r1, #48	; 0x30
    c7d2:	440b      	add	r3, r1
  d = conv2d(buff + 4);
    c7d4:	f88c 3002 	strb.w	r3, [ip, #2]
  memcpy_P(buff, time, 8);
    c7d8:	6810      	ldr	r0, [r2, #0]
    c7da:	6851      	ldr	r1, [r2, #4]
    c7dc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
  if ('0' <= *p && *p <= '9')
    c7e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c7e4:	3b30      	subs	r3, #48	; 0x30
    c7e6:	b2db      	uxtb	r3, r3
    c7e8:	2b09      	cmp	r3, #9
    c7ea:	d833      	bhi.n	c854 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x104>
  return 10 * v + *++p - '0';
    c7ec:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    c7f0:	0052      	lsls	r2, r2, #1
    c7f2:	b2d2      	uxtb	r2, r2
  if ('0' <= *p && *p <= '9')
    c7f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  return 10 * v + *++p - '0';
    c7f8:	f89d 1005 	ldrb.w	r1, [sp, #5]
  if ('0' <= *p && *p <= '9')
    c7fc:	3b30      	subs	r3, #48	; 0x30
  return 10 * v + *++p - '0';
    c7fe:	3930      	subs	r1, #48	; 0x30
  if ('0' <= *p && *p <= '9')
    c800:	b2db      	uxtb	r3, r3
  return 10 * v + *++p - '0';
    c802:	440a      	add	r2, r1
  if ('0' <= *p && *p <= '9')
    c804:	2b09      	cmp	r3, #9
  hh = conv2d(buff);
    c806:	f88c 2003 	strb.w	r2, [ip, #3]
  if ('0' <= *p && *p <= '9')
    c80a:	d821      	bhi.n	c850 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x100>
  return 10 * v + *++p - '0';
    c80c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    c810:	0052      	lsls	r2, r2, #1
    c812:	b2d2      	uxtb	r2, r2
  if ('0' <= *p && *p <= '9')
    c814:	f89d 300a 	ldrb.w	r3, [sp, #10]
  return 10 * v + *++p - '0';
    c818:	f89d 1008 	ldrb.w	r1, [sp, #8]
  if ('0' <= *p && *p <= '9')
    c81c:	3b30      	subs	r3, #48	; 0x30
  return 10 * v + *++p - '0';
    c81e:	3930      	subs	r1, #48	; 0x30
  if ('0' <= *p && *p <= '9')
    c820:	b2db      	uxtb	r3, r3
  return 10 * v + *++p - '0';
    c822:	440a      	add	r2, r1
  if ('0' <= *p && *p <= '9')
    c824:	2b09      	cmp	r3, #9
  mm = conv2d(buff + 3);
    c826:	f88c 2004 	strb.w	r2, [ip, #4]
  if ('0' <= *p && *p <= '9')
    c82a:	d80f      	bhi.n	c84c <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0xfc>
  return 10 * v + *++p - '0';
    c82c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c830:	005b      	lsls	r3, r3, #1
    c832:	b2db      	uxtb	r3, r3
    c834:	f89d 200b 	ldrb.w	r2, [sp, #11]
  ss = conv2d(buff + 6);
}
    c838:	4660      	mov	r0, ip
  return 10 * v + *++p - '0';
    c83a:	3a30      	subs	r2, #48	; 0x30
    c83c:	4413      	add	r3, r2
  ss = conv2d(buff + 6);
    c83e:	f88c 3005 	strb.w	r3, [ip, #5]
}
    c842:	b005      	add	sp, #20
    c844:	f85d fb04 	ldr.w	pc, [sp], #4
    c848:	2300      	movs	r3, #0
    c84a:	e799      	b.n	c780 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x30>
    c84c:	2300      	movs	r3, #0
    c84e:	e7f1      	b.n	c834 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0xe4>
    c850:	2200      	movs	r2, #0
    c852:	e7df      	b.n	c814 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0xc4>
    c854:	2200      	movs	r2, #0
    c856:	e7cd      	b.n	c7f4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0xa4>
    c858:	2300      	movs	r3, #0
    c85a:	e7b5      	b.n	c7c8 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x78>
    m = 9;
    c85c:	2309      	movs	r3, #9
    c85e:	f88c 3001 	strb.w	r3, [ip, #1]
    break;
    c862:	e7a7      	b.n	c7b4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x64>
    m = buff[2] == 'r' ? 4 : 8;
    c864:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c868:	2b72      	cmp	r3, #114	; 0x72
    c86a:	bf0c      	ite	eq
    c86c:	2304      	moveq	r3, #4
    c86e:	2308      	movne	r3, #8
    c870:	f88c 3001 	strb.w	r3, [ip, #1]
    break;
    c874:	e79e      	b.n	c7b4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x64>
    m = 2;
    c876:	2302      	movs	r3, #2
    c878:	f88c 3001 	strb.w	r3, [ip, #1]
    break;
    c87c:	e79a      	b.n	c7b4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x64>
    m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7);
    c87e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c882:	2b61      	cmp	r3, #97	; 0x61
    c884:	d017      	beq.n	c8b6 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x166>
    c886:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c88a:	2b6e      	cmp	r3, #110	; 0x6e
    c88c:	bf0c      	ite	eq
    c88e:	2306      	moveq	r3, #6
    c890:	2307      	movne	r3, #7
    c892:	e78d      	b.n	c7b0 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x60>
    m = buff[2] == 'r' ? 3 : 5;
    c894:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c898:	2b72      	cmp	r3, #114	; 0x72
    c89a:	bf0c      	ite	eq
    c89c:	2303      	moveq	r3, #3
    c89e:	2305      	movne	r3, #5
    c8a0:	f88c 3001 	strb.w	r3, [ip, #1]
    break;
    c8a4:	e786      	b.n	c7b4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x64>
    m = 11;
    c8a6:	230b      	movs	r3, #11
    c8a8:	f88c 3001 	strb.w	r3, [ip, #1]
    break;
    c8ac:	e782      	b.n	c7b4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x64>
    m = 10;
    c8ae:	230a      	movs	r3, #10
    c8b0:	f88c 3001 	strb.w	r3, [ip, #1]
    break;
    c8b4:	e77e      	b.n	c7b4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x64>
    m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7);
    c8b6:	2301      	movs	r3, #1
    c8b8:	e77a      	b.n	c7b0 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x60>
    c8ba:	bf00      	nop

0000c8bc <DateTime::dayOfTheWeek() const>:
/*!
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
    c8bc:	b508      	push	{r3, lr}
  uint16_t day = date2days(yOff, m, d);
    c8be:	7882      	ldrb	r2, [r0, #2]
    c8c0:	7841      	ldrb	r1, [r0, #1]
    c8c2:	7800      	ldrb	r0, [r0, #0]
    c8c4:	f7ff feda 	bl	c67c <date2days(unsigned short, unsigned char, unsigned char)>
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
    c8c8:	4b06      	ldr	r3, [pc, #24]	; (c8e4 <DateTime::dayOfTheWeek() const+0x28>)
    c8ca:	3006      	adds	r0, #6
    c8cc:	fba3 2300 	umull	r2, r3, r3, r0
    c8d0:	1ac2      	subs	r2, r0, r3
    c8d2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    c8d6:	089b      	lsrs	r3, r3, #2
    c8d8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    c8dc:	1ac0      	subs	r0, r0, r3
}
    c8de:	b2c0      	uxtb	r0, r0
    c8e0:	bd08      	pop	{r3, pc}
    c8e2:	bf00      	nop
    c8e4:	24924925 	.word	0x24924925

0000c8e8 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>:
  _begun = false;
    c8e8:	f04f 0c00 	mov.w	ip, #0
  _wire = theWire;
    c8ec:	6042      	str	r2, [r0, #4]
  _maxBufferSize = 32;
    c8ee:	2220      	movs	r2, #32
  _addr = addr;
    c8f0:	7001      	strb	r1, [r0, #0]
  _begun = false;
    c8f2:	f880 c008 	strb.w	ip, [r0, #8]
  _maxBufferSize = 32;
    c8f6:	60c2      	str	r2, [r0, #12]
}
    c8f8:	4770      	bx	lr
    c8fa:	bf00      	nop

0000c8fc <Adafruit_I2CDevice::begin(bool)>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    c8fc:	b538      	push	{r3, r4, r5, lr}
    c8fe:	4604      	mov	r4, r0
  _wire->begin();
    c900:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    c902:	460d      	mov	r5, r1
  _wire->begin();
    c904:	f00b fdd0 	bl	184a8 <___ZN7TwoWire5beginEv_veneer>
  _begun = true;
    c908:	2101      	movs	r1, #1
    c90a:	7221      	strb	r1, [r4, #8]
  if (addr_detect) {
    c90c:	b90d      	cbnz	r5, c912 <Adafruit_I2CDevice::begin(bool)+0x16>
  return true;
    c90e:	4608      	mov	r0, r1
}
    c910:	bd38      	pop	{r3, r4, r5, pc}
		txBuffer[0] = (address << 1);
    c912:	7820      	ldrb	r0, [r4, #0]
  _wire->beginTransmission(_addr);
    c914:	6862      	ldr	r2, [r4, #4]
    c916:	4088      	lsls	r0, r1
		transmitting = 1;
    c918:	f882 1130 	strb.w	r1, [r2, #304]	; 0x130
		txBufferLength = 1;
    c91c:	f882 112f 	strb.w	r1, [r2, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    c920:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		return endTransmission(1);
    c924:	6860      	ldr	r0, [r4, #4]
    c926:	f7ff fc2d 	bl	c184 <TwoWire::endTransmission(unsigned char)>
  if (_wire->endTransmission() == 0) {
    c92a:	fab0 f080 	clz	r0, r0
    c92e:	0940      	lsrs	r0, r0, #5
}
    c930:	bd38      	pop	{r3, r4, r5, pc}
    c932:	bf00      	nop

0000c934 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    c934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c938:	9f07      	ldr	r7, [sp, #28]
    c93a:	4615      	mov	r5, r2
    c93c:	4698      	mov	r8, r3
  if ((len + prefix_len) > maxBufferSize()) {
    c93e:	68c3      	ldr	r3, [r0, #12]
    c940:	443a      	add	r2, r7
    c942:	429a      	cmp	r2, r3
    c944:	d816      	bhi.n	c974 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
		txBuffer[0] = (address << 1);
    c946:	7802      	ldrb	r2, [r0, #0]
    c948:	4604      	mov	r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    c94a:	6843      	ldr	r3, [r0, #4]
    c94c:	460e      	mov	r6, r1
    c94e:	0052      	lsls	r2, r2, #1
    c950:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    c954:	2201      	movs	r2, #1
    c956:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    c95a:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    c95e:	b167      	cbz	r7, c97a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    c960:	9b06      	ldr	r3, [sp, #24]
    c962:	b153      	cbz	r3, c97a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    c964:	6840      	ldr	r0, [r0, #4]
    c966:	463a      	mov	r2, r7
    c968:	9906      	ldr	r1, [sp, #24]
    c96a:	6803      	ldr	r3, [r0, #0]
    c96c:	685b      	ldr	r3, [r3, #4]
    c96e:	4798      	blx	r3
    c970:	4287      	cmp	r7, r0
    c972:	d002      	beq.n	c97a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    return false;
    c974:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    c976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_wire->write(buffer, len) != len) {
    c97a:	6860      	ldr	r0, [r4, #4]
    c97c:	4631      	mov	r1, r6
    c97e:	462a      	mov	r2, r5
    c980:	6803      	ldr	r3, [r0, #0]
    c982:	685b      	ldr	r3, [r3, #4]
    c984:	4798      	blx	r3
    c986:	4285      	cmp	r5, r0
    c988:	d1f4      	bne.n	c974 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
  if (_wire->endTransmission(stop) == 0) {
    c98a:	4641      	mov	r1, r8
    c98c:	6860      	ldr	r0, [r4, #4]
    c98e:	f7ff fbf9 	bl	c184 <TwoWire::endTransmission(unsigned char)>
    c992:	fab0 f080 	clz	r0, r0
    c996:	0940      	lsrs	r0, r0, #5
}
    c998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c99c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    c99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c9a0:	4615      	mov	r5, r2
    c9a2:	4606      	mov	r6, r0
    c9a4:	460f      	mov	r7, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    c9a6:	b2d2      	uxtb	r2, r2
    c9a8:	7801      	ldrb	r1, [r0, #0]
    c9aa:	6840      	ldr	r0, [r0, #4]
    c9ac:	f7ff fc6a 	bl	c284 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
#endif

  if (recv != len) {
    c9b0:	4285      	cmp	r5, r0
    c9b2:	d124      	bne.n	c9fe <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x62>
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    c9b4:	b305      	cbz	r5, c9f8 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    c9b6:	2400      	movs	r4, #0
    c9b8:	f8df 904c 	ldr.w	r9, [pc, #76]	; ca08 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x6c>
    c9bc:	46a0      	mov	r8, r4
    c9be:	e013      	b.n	c9e8 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x4c>
		if (rxBufferIndex >= rxBufferLength) return -1;
    c9c0:	f890 c0a2 	ldrb.w	ip, [r0, #162]	; 0xa2
    c9c4:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    c9c8:	4562      	cmp	r2, ip
		return rxBuffer[rxBufferIndex++];
    c9ca:	f10c 0201 	add.w	r2, ip, #1
    c9ce:	4484      	add	ip, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    c9d0:	d918      	bls.n	ca04 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x68>
		return rxBuffer[rxBufferIndex++];
    c9d2:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    c9d6:	f89c 301a 	ldrb.w	r3, [ip, #26]
    c9da:	3401      	adds	r4, #1
    buffer[i] = _wire->read();
    c9dc:	f807 3008 	strb.w	r3, [r7, r8]
  for (uint16_t i = 0; i < len; i++) {
    c9e0:	b2a4      	uxth	r4, r4
    c9e2:	42a5      	cmp	r5, r4
    c9e4:	46a0      	mov	r8, r4
    c9e6:	d907      	bls.n	c9f8 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    buffer[i] = _wire->read();
    c9e8:	6870      	ldr	r0, [r6, #4]
    c9ea:	6802      	ldr	r2, [r0, #0]
    c9ec:	6952      	ldr	r2, [r2, #20]
    c9ee:	454a      	cmp	r2, r9
    c9f0:	d0e6      	beq.n	c9c0 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x24>
    c9f2:	4790      	blx	r2
    c9f4:	b2c3      	uxtb	r3, r0
    c9f6:	e7f0      	b.n	c9da <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    return false;
    c9f8:	2001      	movs	r0, #1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    c9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    c9fe:	2000      	movs	r0, #0
}
    ca00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ca04:	23ff      	movs	r3, #255	; 0xff
    ca06:	e7e8      	b.n	c9da <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    ca08:	0000bf99 	.word	0x0000bf99

0000ca0c <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool)>:
  while (pos < len) {
    ca0c:	b302      	cbz	r2, ca50 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool)+0x44>
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
    ca0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca12:	4606      	mov	r6, r0
    ca14:	460f      	mov	r7, r1
    ca16:	4698      	mov	r8, r3
    ca18:	4615      	mov	r5, r2
  size_t pos = 0;
    ca1a:	2400      	movs	r4, #0
    ca1c:	e001      	b.n	ca22 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool)+0x16>
  while (pos < len) {
    ca1e:	42a5      	cmp	r5, r4
    ca20:	d913      	bls.n	ca4a <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool)+0x3e>
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    ca22:	1b2a      	subs	r2, r5, r4
    ca24:	68f3      	ldr	r3, [r6, #12]
    if (!_read(buffer + pos, read_len, read_stop))
    ca26:	1939      	adds	r1, r7, r4
    ca28:	4630      	mov	r0, r6
    ca2a:	429a      	cmp	r2, r3
    ca2c:	bf28      	it	cs
    ca2e:	461a      	movcs	r2, r3
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    ca30:	1aab      	subs	r3, r5, r2
    if (!_read(buffer + pos, read_len, read_stop))
    ca32:	42a3      	cmp	r3, r4
    ca34:	bf8c      	ite	hi
    ca36:	2300      	movhi	r3, #0
    ca38:	f008 0301 	andls.w	r3, r8, #1
    pos += read_len;
    ca3c:	4414      	add	r4, r2
    if (!_read(buffer + pos, read_len, read_stop))
    ca3e:	f7ff ffad 	bl	c99c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
    ca42:	2800      	cmp	r0, #0
    ca44:	d1eb      	bne.n	ca1e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool)+0x12>
}
    ca46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    ca4a:	2001      	movs	r0, #1
}
    ca4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    ca50:	2001      	movs	r0, #1
}
    ca52:	4770      	bx	lr

0000ca54 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    ca54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!write(write_buffer, write_len, stop)) {
    ca58:	2400      	movs	r4, #0
                                         size_t read_len, bool stop) {
    ca5a:	b082      	sub	sp, #8
    ca5c:	461f      	mov	r7, r3
    ca5e:	4606      	mov	r6, r0
  if (!write(write_buffer, write_len, stop)) {
    ca60:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                                         size_t read_len, bool stop) {
    ca64:	9d08      	ldr	r5, [sp, #32]
  if (!write(write_buffer, write_len, stop)) {
    ca66:	e9cd 4400 	strd	r4, r4, [sp]
    ca6a:	f7ff ff63 	bl	c934 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    ca6e:	b928      	cbnz	r0, ca7c <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x28>
    return false;
    ca70:	f04f 0800 	mov.w	r8, #0
  }

  return read(read_buffer, read_len);
}
    ca74:	4640      	mov	r0, r8
    ca76:	b002      	add	sp, #8
    ca78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (pos < len) {
    ca7c:	4680      	mov	r8, r0
    ca7e:	b915      	cbnz	r5, ca86 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x32>
    ca80:	e7f8      	b.n	ca74 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
    ca82:	42a5      	cmp	r5, r4
    ca84:	d9f6      	bls.n	ca74 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    ca86:	1b2a      	subs	r2, r5, r4
    ca88:	68f3      	ldr	r3, [r6, #12]
    if (!_read(buffer + pos, read_len, read_stop))
    ca8a:	1939      	adds	r1, r7, r4
    ca8c:	4630      	mov	r0, r6
    ca8e:	429a      	cmp	r2, r3
    ca90:	bf28      	it	cs
    ca92:	461a      	movcs	r2, r3
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    ca94:	1aab      	subs	r3, r5, r2
    if (!_read(buffer + pos, read_len, read_stop))
    ca96:	42a3      	cmp	r3, r4
    pos += read_len;
    ca98:	4414      	add	r4, r2
    if (!_read(buffer + pos, read_len, read_stop))
    ca9a:	bf8c      	ite	hi
    ca9c:	2300      	movhi	r3, #0
    ca9e:	2301      	movls	r3, #1
    caa0:	f7ff ff7c 	bl	c99c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
    caa4:	2800      	cmp	r0, #0
    caa6:	d1ec      	bne.n	ca82 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x2e>
    caa8:	e7e2      	b.n	ca70 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x1c>
    caaa:	bf00      	nop

0000caac <AudioStream::update_all()>:
    caac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    cab0:	2240      	movs	r2, #64	; 0x40
    cab2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    cab6:	4770      	bx	lr

0000cab8 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    cab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    caba:	4b14      	ldr	r3, [pc, #80]	; (cb0c <software_isr()+0x54>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    cabc:	4d14      	ldr	r5, [pc, #80]	; (cb10 <software_isr()+0x58>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
    cabe:	681c      	ldr	r4, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    cac0:	686e      	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    cac2:	b19c      	cbz	r4, caec <software_isr()+0x34>
		if (p->active) {
    cac4:	7a23      	ldrb	r3, [r4, #8]
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    cac6:	4620      	mov	r0, r4
		if (p->active) {
    cac8:	b16b      	cbz	r3, cae6 <software_isr()+0x2e>
			p->update();
    caca:	6823      	ldr	r3, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
    cacc:	686f      	ldr	r7, [r5, #4]
			p->update();
    cace:	681b      	ldr	r3, [r3, #0]
    cad0:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    cad2:	686b      	ldr	r3, [r5, #4]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    cad4:	88e1      	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    cad6:	1bdb      	subs	r3, r3, r7
			p->cpu_cycles = cycles;
    cad8:	f3c3 128f 	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    cadc:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
    cae0:	80a2      	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    cae2:	bf38      	it	cc
    cae4:	80e2      	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    cae6:	6964      	ldr	r4, [r4, #20]
    cae8:	2c00      	cmp	r4, #0
    caea:	d1eb      	bne.n	cac4 <software_isr()+0xc>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    caec:	4b08      	ldr	r3, [pc, #32]	; (cb10 <software_isr()+0x58>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    caee:	4a09      	ldr	r2, [pc, #36]	; (cb14 <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    caf0:	685b      	ldr	r3, [r3, #4]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    caf2:	8810      	ldrh	r0, [r2, #0]
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    caf4:	1b9b      	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    caf6:	4c08      	ldr	r4, [pc, #32]	; (cb18 <software_isr()+0x60>)
    caf8:	f3c3 118f 	ubfx	r1, r3, #6, #16
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    cafc:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
	AudioStream::cpu_cycles_total = totalcycles;
    cb00:	8021      	strh	r1, [r4, #0]
		AudioStream::cpu_cycles_total_max = totalcycles;
    cb02:	bf38      	it	cc
    cb04:	8011      	strhcc	r1, [r2, #0]

	asm("DSB");
    cb06:	f3bf 8f4f 	dsb	sy
}
    cb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb0c:	200042c0 	.word	0x200042c0
    cb10:	e0001000 	.word	0xe0001000
    cb14:	20004d38 	.word	0x20004d38
    cb18:	20004d36 	.word	0x20004d36

0000cb1c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)>:
            { return (*static_cast<C*>(storage_ptr))(
    cb1c:	6803      	ldr	r3, [r0, #0]
    cb1e:	4718      	bx	r3

0000cb20 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
            { ::new (dst_ptr) C{ (*static_cast<C*>(src_ptr)) }; }
    cb20:	680b      	ldr	r3, [r1, #0]
    cb22:	6003      	str	r3, [r0, #0]
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    cb24:	4770      	bx	lr
    cb26:	bf00      	nop

0000cb28 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
                ::new (dst_ptr) C{ std::move(*static_cast<C*>(src_ptr)) };
    cb28:	680b      	ldr	r3, [r1, #0]
    cb2a:	6003      	str	r3, [r0, #0]
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    cb2c:	4770      	bx	lr
    cb2e:	bf00      	nop

0000cb30 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t src_ptr) -> void
    cb30:	4770      	bx	lr
    cb32:	bf00      	nop

0000cb34 <AudioStream::allocate()>:
{
    cb34:	b430      	push	{r4, r5}
	__disable_irq();
    cb36:	b672      	cpsid	i
	index = memory_pool_first_mask;
    cb38:	4d24      	ldr	r5, [pc, #144]	; (cbcc <AudioStream::allocate()+0x98>)
	p += index;
    cb3a:	4c25      	ldr	r4, [pc, #148]	; (cbd0 <AudioStream::allocate()+0x9c>)
	index = memory_pool_first_mask;
    cb3c:	882a      	ldrh	r2, [r5, #0]
		if (p >= end) {
    cb3e:	f104 0170 	add.w	r1, r4, #112	; 0x70
	p += index;
    cb42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
		if (p >= end) {
    cb46:	428b      	cmp	r3, r1
    cb48:	d23c      	bcs.n	cbc4 <AudioStream::allocate()+0x90>
    cb4a:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    cb4e:	1c50      	adds	r0, r2, #1
    cb50:	1ac9      	subs	r1, r1, r3
    cb52:	eb00 0091 	add.w	r0, r0, r1, lsr #2
    cb56:	e002      	b.n	cb5e <AudioStream::allocate()+0x2a>
		index++;
    cb58:	3201      	adds	r2, #1
		if (p >= end) {
    cb5a:	4282      	cmp	r2, r0
    cb5c:	d032      	beq.n	cbc4 <AudioStream::allocate()+0x90>
		index++;
    cb5e:	469c      	mov	ip, r3
		avail = *p;
    cb60:	f853 1b04 	ldr.w	r1, [r3], #4
		if (avail) break;
    cb64:	2900      	cmp	r1, #0
    cb66:	d0f7      	beq.n	cb58 <AudioStream::allocate()+0x24>
	n = __builtin_clz(avail);
    cb68:	fab1 f081 	clz	r0, r1
	avail &= ~(0x80000000 >> n);
    cb6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    cb70:	40c3      	lsrs	r3, r0
    cb72:	ea21 0103 	bic.w	r1, r1, r3
	*p = avail;
    cb76:	f8cc 1000 	str.w	r1, [ip]
	if (!avail) index++;
    cb7a:	b901      	cbnz	r1, cb7e <AudioStream::allocate()+0x4a>
    cb7c:	3201      	adds	r2, #1
	used = memory_used + 1;
    cb7e:	4b15      	ldr	r3, [pc, #84]	; (cbd4 <AudioStream::allocate()+0xa0>)
	memory_pool_first_mask = index;
    cb80:	802a      	strh	r2, [r5, #0]
	used = memory_used + 1;
    cb82:	881a      	ldrh	r2, [r3, #0]
	memory_used = used;
    cb84:	3201      	adds	r2, #1
    cb86:	b291      	uxth	r1, r2
    cb88:	8019      	strh	r1, [r3, #0]
	__enable_irq();
    cb8a:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
    cb8c:	ebac 0c04 	sub.w	ip, ip, r4
	block = memory_pool + ((index << 5) + (31 - n));
    cb90:	f641 737c 	movw	r3, #8060	; 0x1f7c
    cb94:	ebc0 6400 	rsb	r4, r0, r0, lsl #24
	index = p - memory_pool_available_mask;
    cb98:	ea4f 0cac 	mov.w	ip, ip, asr #2
	block = memory_pool + ((index << 5) + (31 - n));
    cb9c:	ebc0 1084 	rsb	r0, r0, r4, lsl #6
	block->ref_count = 1;
    cba0:	2401      	movs	r4, #1
	block = memory_pool + ((index << 5) + (31 - n));
    cba2:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
    cba6:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
    cbaa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    cbae:	480a      	ldr	r0, [pc, #40]	; (cbd8 <AudioStream::allocate()+0xa4>)
    cbb0:	6800      	ldr	r0, [r0, #0]
	block->ref_count = 1;
    cbb2:	54c4      	strb	r4, [r0, r3]
	block = memory_pool + ((index << 5) + (31 - n));
    cbb4:	4418      	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
    cbb6:	4b09      	ldr	r3, [pc, #36]	; (cbdc <AudioStream::allocate()+0xa8>)
    cbb8:	881c      	ldrh	r4, [r3, #0]
    cbba:	4294      	cmp	r4, r2
}
    cbbc:	bc30      	pop	{r4, r5}
	if (used > memory_used_max) memory_used_max = used;
    cbbe:	bf38      	it	cc
    cbc0:	8019      	strhcc	r1, [r3, #0]
}
    cbc2:	4770      	bx	lr
			__enable_irq();
    cbc4:	b662      	cpsie	i
			return NULL;
    cbc6:	2000      	movs	r0, #0
}
    cbc8:	bc30      	pop	{r4, r5}
    cbca:	4770      	bx	lr
    cbcc:	20004d3a 	.word	0x20004d3a
    cbd0:	200042c4 	.word	0x200042c4
    cbd4:	20004d32 	.word	0x20004d32
    cbd8:	200042bc 	.word	0x200042bc
    cbdc:	20004d34 	.word	0x20004d34

0000cbe0 <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    cbe0:	8842      	ldrh	r2, [r0, #2]
	__disable_irq();
    cbe2:	b672      	cpsid	i
	if (block->ref_count > 1) {
    cbe4:	7803      	ldrb	r3, [r0, #0]
    cbe6:	2b01      	cmp	r3, #1
    cbe8:	d903      	bls.n	cbf2 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    cbea:	3b01      	subs	r3, #1
    cbec:	7003      	strb	r3, [r0, #0]
	__enable_irq();
    cbee:	b662      	cpsie	i
}
    cbf0:	4770      	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    cbf2:	43d1      	mvns	r1, r2
	uint32_t index = block->memory_pool_index >> 5;
    cbf4:	0953      	lsrs	r3, r2, #5
		memory_pool_available_mask[index] |= mask;
    cbf6:	480b      	ldr	r0, [pc, #44]	; (cc24 <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    cbf8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    cbfc:	f001 011f 	and.w	r1, r1, #31
    cc00:	40ca      	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
    cc02:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    cc06:	430a      	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    cc08:	4907      	ldr	r1, [pc, #28]	; (cc28 <AudioStream::release(audio_block_struct*)+0x48>)
    cc0a:	f8b1 c000 	ldrh.w	ip, [r1]
		memory_pool_available_mask[index] |= mask;
    cc0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    cc12:	459c      	cmp	ip, r3
		memory_used--;
    cc14:	4a05      	ldr	r2, [pc, #20]	; (cc2c <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    cc16:	bf88      	it	hi
    cc18:	800b      	strhhi	r3, [r1, #0]
		memory_used--;
    cc1a:	8813      	ldrh	r3, [r2, #0]
    cc1c:	3b01      	subs	r3, #1
    cc1e:	8013      	strh	r3, [r2, #0]
	__enable_irq();
    cc20:	b662      	cpsie	i
}
    cc22:	4770      	bx	lr
    cc24:	200042c4 	.word	0x200042c4
    cc28:	20004d3a 	.word	0x20004d3a
    cc2c:	20004d32 	.word	0x20004d32

0000cc30 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    cc30:	68c3      	ldr	r3, [r0, #12]
    cc32:	b913      	cbnz	r3, cc3a <AudioStream::transmit(audio_block_struct*, unsigned char)+0xa>
    cc34:	e01d      	b.n	cc72 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
    cc36:	68db      	ldr	r3, [r3, #12]
    cc38:	b1e3      	cbz	r3, cc74 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x44>
		if (c->src_index == index) {
    cc3a:	7a18      	ldrb	r0, [r3, #8]
    cc3c:	4290      	cmp	r0, r2
    cc3e:	d1fa      	bne.n	cc36 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
{
    cc40:	b410      	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
    cc42:	6858      	ldr	r0, [r3, #4]
    cc44:	f893 c009 	ldrb.w	ip, [r3, #9]
    cc48:	6900      	ldr	r0, [r0, #16]
    cc4a:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    cc4e:	b154      	cbz	r4, cc66 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x36>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    cc50:	68db      	ldr	r3, [r3, #12]
    cc52:	b12b      	cbz	r3, cc60 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    cc54:	7a18      	ldrb	r0, [r3, #8]
    cc56:	4290      	cmp	r0, r2
    cc58:	d0f3      	beq.n	cc42 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    cc5a:	68db      	ldr	r3, [r3, #12]
    cc5c:	2b00      	cmp	r3, #0
    cc5e:	d1f9      	bne.n	cc54 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
}
    cc60:	f85d 4b04 	ldr.w	r4, [sp], #4
    cc64:	4770      	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
    cc66:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
    cc6a:	7808      	ldrb	r0, [r1, #0]
    cc6c:	3001      	adds	r0, #1
    cc6e:	7008      	strb	r0, [r1, #0]
    cc70:	e7ee      	b.n	cc50 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x20>
    cc72:	4770      	bx	lr
    cc74:	4770      	bx	lr
    cc76:	bf00      	nop

0000cc78 <AudioStream::receiveReadOnly(unsigned int)>:
	if (index >= num_inputs) return NULL;
    cc78:	7a43      	ldrb	r3, [r0, #9]
    cc7a:	428b      	cmp	r3, r1
    cc7c:	d906      	bls.n	cc8c <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    cc7e:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    cc80:	2200      	movs	r2, #0
	in = inputQueue[index];
    cc82:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    cc86:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	return in;
    cc8a:	4770      	bx	lr
	if (index >= num_inputs) return NULL;
    cc8c:	2000      	movs	r0, #0
}
    cc8e:	4770      	bx	lr

0000cc90 <AudioConnection::AudioConnection()>:
	: src(NULL), dst(NULL),
    cc90:	2200      	movs	r2, #0
	next_dest = AudioStream::unused;
    cc92:	4904      	ldr	r1, [pc, #16]	; (cca4 <AudioConnection::AudioConnection()+0x14>)
	: src(NULL), dst(NULL),
    cc94:	e9c0 2200 	strd	r2, r2, [r0]
	  src_index(0), dest_index(0),
    cc98:	8102      	strh	r2, [r0, #8]
	  isConnected(false)
    cc9a:	7402      	strb	r2, [r0, #16]
	next_dest = AudioStream::unused;
    cc9c:	680a      	ldr	r2, [r1, #0]
	AudioStream::unused = this;
    cc9e:	6008      	str	r0, [r1, #0]
	next_dest = AudioStream::unused;
    cca0:	60c2      	str	r2, [r0, #12]
}
    cca2:	4770      	bx	lr
    cca4:	20004334 	.word	0x20004334

0000cca8 <AudioConnection::connect()>:
		if (isConnected) // already connected
    cca8:	7c03      	ldrb	r3, [r0, #16]
    ccaa:	b9fb      	cbnz	r3, ccec <AudioConnection::connect()+0x44>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
    ccac:	6803      	ldr	r3, [r0, #0]
    ccae:	4601      	mov	r1, r0
    ccb0:	b1fb      	cbz	r3, ccf2 <AudioConnection::connect()+0x4a>
    ccb2:	6843      	ldr	r3, [r0, #4]
    ccb4:	b1eb      	cbz	r3, ccf2 <AudioConnection::connect()+0x4a>
		if (dest_index >= dst->num_inputs) // input number too high
    ccb6:	7a42      	ldrb	r2, [r0, #9]
    ccb8:	7a5b      	ldrb	r3, [r3, #9]
    ccba:	429a      	cmp	r2, r3
    ccbc:	d21c      	bcs.n	ccf8 <AudioConnection::connect()+0x50>
{
    ccbe:	b430      	push	{r4, r5}
		__disable_irq();
    ccc0:	b672      	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
    ccc2:	4b2b      	ldr	r3, [pc, #172]	; (cd70 <AudioConnection::connect()+0xc8>)
    ccc4:	681c      	ldr	r4, [r3, #0]
		while (s) // go through all AudioStream objects
    ccc6:	b1ec      	cbz	r4, cd04 <AudioConnection::connect()+0x5c>
			p = s->destination_list;	// first patchCord in this stream's list
    ccc8:	68e3      	ldr	r3, [r4, #12]
			while (p)
    ccca:	b1c3      	cbz	r3, ccfe <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    cccc:	6848      	ldr	r0, [r1, #4]
    ccce:	e001      	b.n	ccd4 <AudioConnection::connect()+0x2c>
				p = p->next_dest;
    ccd0:	68db      	ldr	r3, [r3, #12]
			while (p)
    ccd2:	b1a3      	cbz	r3, ccfe <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    ccd4:	685a      	ldr	r2, [r3, #4]
    ccd6:	4282      	cmp	r2, r0
    ccd8:	d1fa      	bne.n	ccd0 <AudioConnection::connect()+0x28>
    ccda:	f893 c009 	ldrb.w	ip, [r3, #9]
    ccde:	7a4a      	ldrb	r2, [r1, #9]
    cce0:	4594      	cmp	ip, r2
    cce2:	d1f5      	bne.n	ccd0 <AudioConnection::connect()+0x28>
					__enable_irq();
    cce4:	b662      	cpsie	i
					return 4;
    cce6:	2004      	movs	r0, #4
}
    cce8:	bc30      	pop	{r4, r5}
    ccea:	4770      	bx	lr
	int result = 1;
    ccec:	2001      	movs	r0, #1
	__enable_irq();
    ccee:	b662      	cpsie	i
}
    ccf0:	4770      	bx	lr
			result = 3;
    ccf2:	2003      	movs	r0, #3
	__enable_irq();
    ccf4:	b662      	cpsie	i
}
    ccf6:	4770      	bx	lr
			result = 2;
    ccf8:	2002      	movs	r0, #2
	__enable_irq();
    ccfa:	b662      	cpsie	i
}
    ccfc:	4770      	bx	lr
			s = s->next_update;
    ccfe:	6964      	ldr	r4, [r4, #20]
		while (s) // go through all AudioStream objects
    cd00:	2c00      	cmp	r4, #0
    cd02:	d1e1      	bne.n	ccc8 <AudioConnection::connect()+0x20>
		pp = &AudioStream::unused;
    cd04:	4c1b      	ldr	r4, [pc, #108]	; (cd74 <AudioConnection::connect()+0xcc>)
    cd06:	6823      	ldr	r3, [r4, #0]
		while (*pp && *pp != this)
    cd08:	b143      	cbz	r3, cd1c <AudioConnection::connect()+0x74>
    cd0a:	4299      	cmp	r1, r3
    cd0c:	d102      	bne.n	cd14 <AudioConnection::connect()+0x6c>
    cd0e:	e00b      	b.n	cd28 <AudioConnection::connect()+0x80>
    cd10:	4299      	cmp	r1, r3
    cd12:	d007      	beq.n	cd24 <AudioConnection::connect()+0x7c>
			pp = &((*pp)->next_dest);
    cd14:	461a      	mov	r2, r3
    cd16:	68db      	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
    cd18:	2b00      	cmp	r3, #0
    cd1a:	d1f9      	bne.n	cd10 <AudioConnection::connect()+0x68>
			result = 5;
    cd1c:	2005      	movs	r0, #5
	__enable_irq();
    cd1e:	b662      	cpsie	i
}
    cd20:	bc30      	pop	{r4, r5}
    cd22:	4770      	bx	lr
			pp = &((*pp)->next_dest);
    cd24:	f102 040c 	add.w	r4, r2, #12
		p = src->destination_list; // first AudioConnection
    cd28:	680d      	ldr	r5, [r1, #0]
    cd2a:	68e8      	ldr	r0, [r5, #12]
		if (p == NULL) 
    cd2c:	b1e8      	cbz	r0, cd6a <AudioConnection::connect()+0xc2>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    cd2e:	68c3      	ldr	r3, [r0, #12]
    cd30:	b91b      	cbnz	r3, cd3a <AudioConnection::connect()+0x92>
    cd32:	e008      	b.n	cd46 <AudioConnection::connect()+0x9e>
    cd34:	68da      	ldr	r2, [r3, #12]
    cd36:	b13a      	cbz	r2, cd48 <AudioConnection::connect()+0xa0>
    cd38:	4613      	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
    cd3a:	4281      	cmp	r1, r0
    cd3c:	4618      	mov	r0, r3
    cd3e:	d1f9      	bne.n	cd34 <AudioConnection::connect()+0x8c>
					__enable_irq();
    cd40:	b662      	cpsie	i
					return 6;
    cd42:	2006      	movs	r0, #6
    cd44:	e7d0      	b.n	cce8 <AudioConnection::connect()+0x40>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    cd46:	4603      	mov	r3, r0
			p->next_dest = this; // end of list, can link ourselves in
    cd48:	60d9      	str	r1, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
    cd4a:	68cb      	ldr	r3, [r1, #12]
		next_dest = NULL; // we're last in the source's destination list
    cd4c:	2000      	movs	r0, #0
		*pp = next_dest;  // remove ourselves from the unused list
    cd4e:	6023      	str	r3, [r4, #0]
		src->active = true;
    cd50:	2301      	movs	r3, #1
		next_dest = NULL; // we're last in the source's destination list
    cd52:	60c8      	str	r0, [r1, #12]
		src->numConnections++;
    cd54:	7aaa      	ldrb	r2, [r5, #10]
		src->active = true;
    cd56:	722b      	strb	r3, [r5, #8]
		src->numConnections++;
    cd58:	441a      	add	r2, r3
    cd5a:	72aa      	strb	r2, [r5, #10]
		dst->numConnections++;
    cd5c:	684a      	ldr	r2, [r1, #4]
    cd5e:	7a94      	ldrb	r4, [r2, #10]
		dst->active = true;
    cd60:	7213      	strb	r3, [r2, #8]
		dst->numConnections++;
    cd62:	441c      	add	r4, r3
    cd64:	7294      	strb	r4, [r2, #10]
		isConnected = true;
    cd66:	740b      	strb	r3, [r1, #16]
		result = 0;
    cd68:	e7d9      	b.n	cd1e <AudioConnection::connect()+0x76>
			src->destination_list = this;
    cd6a:	60e9      	str	r1, [r5, #12]
    cd6c:	e7ed      	b.n	cd4a <AudioConnection::connect()+0xa2>
    cd6e:	bf00      	nop
    cd70:	200042c0 	.word	0x200042c0
    cd74:	20004334 	.word	0x20004334

0000cd78 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
{
    cd78:	b510      	push	{r4, lr}
	if (!isConnected)
    cd7a:	7c04      	ldrb	r4, [r0, #16]
{
    cd7c:	f89d e008 	ldrb.w	lr, [sp, #8]
	if (!isConnected)
    cd80:	b10c      	cbz	r4, cd86 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)+0xe>
}
    cd82:	2001      	movs	r0, #1
    cd84:	bd10      	pop	{r4, pc}
		src_index = sourceOutput;
    cd86:	7202      	strb	r2, [r0, #8]
		dest_index = destinationInput;
    cd88:	f880 e009 	strb.w	lr, [r0, #9]
		dst = &destination;
    cd8c:	e9c0 1300 	strd	r1, r3, [r0]
}
    cd90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		result = connect();
    cd94:	f7ff bf88 	b.w	cca8 <AudioConnection::connect()>

0000cd98 <AudioConnection::disconnect()>:
{
    cd98:	b538      	push	{r3, r4, r5, lr}
	if (!isConnected) return 1;
    cd9a:	7c03      	ldrb	r3, [r0, #16]
    cd9c:	2b00      	cmp	r3, #0
    cd9e:	d036      	beq.n	ce0e <AudioConnection::disconnect()+0x76>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    cda0:	6843      	ldr	r3, [r0, #4]
    cda2:	4604      	mov	r4, r0
    cda4:	7a42      	ldrb	r2, [r0, #9]
    cda6:	7a5b      	ldrb	r3, [r3, #9]
    cda8:	429a      	cmp	r2, r3
    cdaa:	d238      	bcs.n	ce1e <AudioConnection::disconnect()+0x86>
	__disable_irq();
    cdac:	b672      	cpsid	i
	p = src->destination_list;
    cdae:	6801      	ldr	r1, [r0, #0]
    cdb0:	68cb      	ldr	r3, [r1, #12]
	if (p == NULL) {
    cdb2:	2b00      	cmp	r3, #0
    cdb4:	d02d      	beq.n	ce12 <AudioConnection::disconnect()+0x7a>
	} else if (p == this) {
    cdb6:	4298      	cmp	r0, r3
    cdb8:	d033      	beq.n	ce22 <AudioConnection::disconnect()+0x8a>
			if (p->next_dest == this) // found the parent of the disconnecting object
    cdba:	461a      	mov	r2, r3
    cdbc:	68db      	ldr	r3, [r3, #12]
    cdbe:	429c      	cmp	r4, r3
    cdc0:	d02a      	beq.n	ce18 <AudioConnection::disconnect()+0x80>
		while (p)
    cdc2:	2b00      	cmp	r3, #0
    cdc4:	d1f9      	bne.n	cdba <AudioConnection::disconnect()+0x22>
	if(dst->inputQueue[dest_index] != NULL) {
    cdc6:	6862      	ldr	r2, [r4, #4]
    cdc8:	7a60      	ldrb	r0, [r4, #9]
    cdca:	6913      	ldr	r3, [r2, #16]
    cdcc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    cdd0:	b148      	cbz	r0, cde6 <AudioConnection::disconnect()+0x4e>
		AudioStream::release(dst->inputQueue[dest_index]);
    cdd2:	f7ff ff05 	bl	cbe0 <AudioStream::release(audio_block_struct*)>
		__disable_irq();
    cdd6:	b672      	cpsid	i
		dst->inputQueue[dest_index] = NULL;
    cdd8:	6862      	ldr	r2, [r4, #4]
    cdda:	2500      	movs	r5, #0
    cddc:	7a60      	ldrb	r0, [r4, #9]
    cdde:	6913      	ldr	r3, [r2, #16]
	src->numConnections--;
    cde0:	6821      	ldr	r1, [r4, #0]
		dst->inputQueue[dest_index] = NULL;
    cde2:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
	src->numConnections--;
    cde6:	7a8b      	ldrb	r3, [r1, #10]
    cde8:	3b01      	subs	r3, #1
    cdea:	b2db      	uxtb	r3, r3
    cdec:	728b      	strb	r3, [r1, #10]
	if (src->numConnections == 0) {
    cdee:	b903      	cbnz	r3, cdf2 <AudioConnection::disconnect()+0x5a>
		src->active = false;
    cdf0:	720b      	strb	r3, [r1, #8]
	dst->numConnections--;
    cdf2:	7a93      	ldrb	r3, [r2, #10]
    cdf4:	3b01      	subs	r3, #1
    cdf6:	b2db      	uxtb	r3, r3
    cdf8:	7293      	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
    cdfa:	b903      	cbnz	r3, cdfe <AudioConnection::disconnect()+0x66>
		dst->active = false;
    cdfc:	7213      	strb	r3, [r2, #8]
	next_dest = dst->unused;
    cdfe:	4b0a      	ldr	r3, [pc, #40]	; (ce28 <AudioConnection::disconnect()+0x90>)
	isConnected = false;
    ce00:	2000      	movs	r0, #0
	next_dest = dst->unused;
    ce02:	681a      	ldr	r2, [r3, #0]
	isConnected = false;
    ce04:	7420      	strb	r0, [r4, #16]
	dst->unused = this;
    ce06:	601c      	str	r4, [r3, #0]
	next_dest = dst->unused;
    ce08:	60e2      	str	r2, [r4, #12]
	__enable_irq();
    ce0a:	b662      	cpsie	i
}
    ce0c:	bd38      	pop	{r3, r4, r5, pc}
	if (!isConnected) return 1;
    ce0e:	2001      	movs	r0, #1
}
    ce10:	bd38      	pop	{r3, r4, r5, pc}
		__enable_irq();
    ce12:	b662      	cpsie	i
		return 3;
    ce14:	2003      	movs	r0, #3
}
    ce16:	bd38      	pop	{r3, r4, r5, pc}
				p-> next_dest = this->next_dest; // skip parent's link past us
    ce18:	68e3      	ldr	r3, [r4, #12]
    ce1a:	60d3      	str	r3, [r2, #12]
				break;
    ce1c:	e7d3      	b.n	cdc6 <AudioConnection::disconnect()+0x2e>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    ce1e:	2002      	movs	r0, #2
}
    ce20:	bd38      	pop	{r3, r4, r5, pc}
		if (p->next_dest) {
    ce22:	68c3      	ldr	r3, [r0, #12]
			src->destination_list = NULL;
    ce24:	60cb      	str	r3, [r1, #12]
    ce26:	e7ce      	b.n	cdc6 <AudioConnection::disconnect()+0x2e>
    ce28:	20004334 	.word	0x20004334

0000ce2c <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
    ce2c:	b510      	push	{r4, lr}
    ce2e:	4604      	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
    ce30:	f7ff ffb2 	bl	cd98 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
    ce34:	4a09      	ldr	r2, [pc, #36]	; (ce5c <AudioConnection::~AudioConnection()+0x30>)
    ce36:	6813      	ldr	r3, [r2, #0]
	while (*pp && *pp != this)
    ce38:	b143      	cbz	r3, ce4c <AudioConnection::~AudioConnection()+0x20>
    ce3a:	429c      	cmp	r4, r3
    ce3c:	d102      	bne.n	ce44 <AudioConnection::~AudioConnection()+0x18>
    ce3e:	e008      	b.n	ce52 <AudioConnection::~AudioConnection()+0x26>
    ce40:	429c      	cmp	r4, r3
    ce42:	d005      	beq.n	ce50 <AudioConnection::~AudioConnection()+0x24>
		pp = &((*pp)->next_dest);
    ce44:	461a      	mov	r2, r3
    ce46:	68db      	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
    ce48:	2b00      	cmp	r3, #0
    ce4a:	d1f9      	bne.n	ce40 <AudioConnection::~AudioConnection()+0x14>
}
    ce4c:	4620      	mov	r0, r4
    ce4e:	bd10      	pop	{r4, pc}
		pp = &((*pp)->next_dest);
    ce50:	320c      	adds	r2, #12
		*pp = next_dest; // remove ourselves from the unused list
    ce52:	68e3      	ldr	r3, [r4, #12]
}
    ce54:	4620      	mov	r0, r4
		*pp = next_dest; // remove ourselves from the unused list
    ce56:	6013      	str	r3, [r2, #0]
}
    ce58:	bd10      	pop	{r4, pc}
    ce5a:	bf00      	nop
    ce5c:	20004334 	.word	0x20004334

0000ce60 <AudioStream::update_setup()>:
	if (update_scheduled) return false;
    ce60:	4b0c      	ldr	r3, [pc, #48]	; (ce94 <AudioStream::update_setup()+0x34>)
    ce62:	781a      	ldrb	r2, [r3, #0]
    ce64:	b99a      	cbnz	r2, ce8e <AudioStream::update_setup()+0x2e>
    ce66:	4a0c      	ldr	r2, [pc, #48]	; (ce98 <AudioStream::update_setup()+0x38>)
    ce68:	490c      	ldr	r1, [pc, #48]	; (ce9c <AudioStream::update_setup()+0x3c>)
{
    ce6a:	b410      	push	{r4}
    ce6c:	f8c2 1158 	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    ce70:	480b      	ldr	r0, [pc, #44]	; (cea0 <AudioStream::update_setup()+0x40>)
    ce72:	24d0      	movs	r4, #208	; 0xd0
	update_scheduled = true;
    ce74:	2201      	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    ce76:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    ce7a:	f880 4046 	strb.w	r4, [r0, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    ce7e:	2440      	movs	r4, #64	; 0x40
	update_scheduled = true;
    ce80:	4610      	mov	r0, r2
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    ce82:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
}
    ce86:	f85d 4b04 	ldr.w	r4, [sp], #4
	update_scheduled = true;
    ce8a:	701a      	strb	r2, [r3, #0]
}
    ce8c:	4770      	bx	lr
	if (update_scheduled) return false;
    ce8e:	2000      	movs	r0, #0
}
    ce90:	4770      	bx	lr
    ce92:	bf00      	nop
    ce94:	20004d4d 	.word	0x20004d4d
    ce98:	20003800 	.word	0x20003800
    ce9c:	0000cab9 	.word	0x0000cab9
    cea0:	e000e400 	.word	0xe000e400

0000cea4 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    cea4:	b430      	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
    cea6:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    cea8:	b921      	cbnz	r1, ceb4 <DMAChannel::begin(bool)+0x10>
    ceaa:	6803      	ldr	r3, [r0, #0]
    ceac:	b113      	cbz	r3, ceb4 <DMAChannel::begin(bool)+0x10>
    ceae:	7902      	ldrb	r2, [r0, #4]
    ceb0:	2a0f      	cmp	r2, #15
    ceb2:	d93b      	bls.n	cf2c <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    ceb4:	4c24      	ldr	r4, [pc, #144]	; (cf48 <DMAChannel::begin(bool)+0xa4>)
    ceb6:	8821      	ldrh	r1, [r4, #0]
{
    ceb8:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    ceba:	fa41 f203 	asr.w	r2, r1, r3
    cebe:	f012 0201 	ands.w	r2, r2, #1
    cec2:	d008      	beq.n	ced6 <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    cec4:	3301      	adds	r3, #1
    cec6:	2b10      	cmp	r3, #16
    cec8:	d1f7      	bne.n	ceba <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    ceca:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    cecc:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    cece:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    ced0:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    ced2:	bc30      	pop	{r4, r5}
    ced4:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    ced6:	f04f 0c01 	mov.w	ip, #1
    ceda:	fa0c fc03 	lsl.w	ip, ip, r3
    cede:	ea41 010c 	orr.w	r1, r1, ip
    cee2:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    cee4:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    cee6:	4919      	ldr	r1, [pc, #100]	; (cf4c <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    cee8:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    ceec:	4c18      	ldr	r4, [pc, #96]	; (cf50 <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    ceee:	4419      	add	r1, r3
	channel = ch;
    cef0:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    cef4:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    cef6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    cef8:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    cefc:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    cefe:	f240 4482 	movw	r4, #1154	; 0x482
    cf02:	4914      	ldr	r1, [pc, #80]	; (cf54 <DMAChannel::begin(bool)+0xb0>)
    cf04:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    cf06:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    cf0a:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    cf0e:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    cf12:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    cf16:	6003      	str	r3, [r0, #0]
}
    cf18:	bc30      	pop	{r4, r5}
	*p++ = 0;
    cf1a:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    cf1e:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    cf22:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    cf26:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    cf2a:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    cf2c:	4c06      	ldr	r4, [pc, #24]	; (cf48 <DMAChannel::begin(bool)+0xa4>)
    cf2e:	8821      	ldrh	r1, [r4, #0]
    cf30:	fa41 f502 	asr.w	r5, r1, r2
    cf34:	07ed      	lsls	r5, r5, #31
    cf36:	d5bf      	bpl.n	ceb8 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    cf38:	4d04      	ldr	r5, [pc, #16]	; (cf4c <DMAChannel::begin(bool)+0xa8>)
    cf3a:	4415      	add	r5, r2
    cf3c:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    cf40:	d1ba      	bne.n	ceb8 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    cf42:	b662      	cpsie	i
		return;
    cf44:	e7c5      	b.n	ced2 <DMAChannel::begin(bool)+0x2e>
    cf46:	bf00      	nop
    cf48:	20004d40 	.word	0x20004d40
    cf4c:	02007480 	.word	0x02007480
    cf50:	400fc000 	.word	0x400fc000
    cf54:	400e8000 	.word	0x400e8000

0000cf58 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    cf58:	7903      	ldrb	r3, [r0, #4]
    cf5a:	2b0f      	cmp	r3, #15
    cf5c:	d811      	bhi.n	cf82 <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    cf5e:	4a09      	ldr	r2, [pc, #36]	; (cf84 <DMAChannel::release()+0x2c>)
    cf60:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    cf62:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    cf64:	4908      	ldr	r1, [pc, #32]	; (cf88 <DMAChannel::release()+0x30>)
    cf66:	2201      	movs	r2, #1
    cf68:	f890 c004 	ldrb.w	ip, [r0, #4]
    cf6c:	880b      	ldrh	r3, [r1, #0]
    cf6e:	fa02 f20c 	lsl.w	r2, r2, ip
    cf72:	ea23 0302 	bic.w	r3, r3, r2
    cf76:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    cf78:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    cf7a:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    cf7c:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    cf7e:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    cf80:	6003      	str	r3, [r0, #0]
}
    cf82:	4770      	bx	lr
    cf84:	400e8000 	.word	0x400e8000
    cf88:	20004d40 	.word	0x20004d40

0000cf8c <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    cf8c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    cf90:	b672      	cpsid	i
// BUGBUG: See if file name order makes difference?

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    cf92:	7f43      	ldrb	r3, [r0, #29]
    cf94:	b95b      	cbnz	r3, cfae <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    cf96:	7f01      	ldrb	r1, [r0, #28]
    cf98:	2901      	cmp	r1, #1
{
    cf9a:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    cf9c:	d00b      	beq.n	cfb6 <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    cf9e:	2903      	cmp	r1, #3
    cfa0:	d013      	beq.n	cfca <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    cfa2:	2301      	movs	r3, #1
    cfa4:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    cfa6:	b902      	cbnz	r2, cfaa <EventResponder::triggerEventNotImmediate()+0x1e>
    cfa8:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    cfaa:	bc30      	pop	{r4, r5}
    cfac:	4770      	bx	lr
    cfae:	b90a      	cbnz	r2, cfb4 <EventResponder::triggerEventNotImmediate()+0x28>
    cfb0:	b662      	cpsie	i
    cfb2:	4770      	bx	lr
    cfb4:	4770      	bx	lr
			if (firstYield == nullptr) {
    cfb6:	4c12      	ldr	r4, [pc, #72]	; (d000 <EventResponder::triggerEventNotImmediate()+0x74>)
    cfb8:	6821      	ldr	r1, [r4, #0]
    cfba:	b1b1      	cbz	r1, cfea <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    cfbc:	4911      	ldr	r1, [pc, #68]	; (d004 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    cfbe:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    cfc0:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    cfc2:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    cfc4:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    cfc6:	6158      	str	r0, [r3, #20]
				lastYield = this;
    cfc8:	e7eb      	b.n	cfa2 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    cfca:	4d0f      	ldr	r5, [pc, #60]	; (d008 <EventResponder::triggerEventNotImmediate()+0x7c>)
    cfcc:	490f      	ldr	r1, [pc, #60]	; (d00c <EventResponder::triggerEventNotImmediate()+0x80>)
    cfce:	682c      	ldr	r4, [r5, #0]
    cfd0:	b18c      	cbz	r4, cff6 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    cfd2:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    cfd4:	680b      	ldr	r3, [r1, #0]
    cfd6:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    cfd8:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    cfda:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    cfde:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    cfe2:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    cfe4:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    cfe8:	e7db      	b.n	cfa2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    cfea:	4b06      	ldr	r3, [pc, #24]	; (d004 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    cfec:	6020      	str	r0, [r4, #0]
				lastYield = this;
    cfee:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    cff0:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    cff4:	e7d5      	b.n	cfa2 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    cff6:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    cffa:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    cffc:	e7ed      	b.n	cfda <EventResponder::triggerEventNotImmediate()+0x4e>
    cffe:	bf00      	nop
    d000:	200043a4 	.word	0x200043a4
    d004:	200043b0 	.word	0x200043b0
    d008:	200043ac 	.word	0x200043ac
    d00c:	200043a8 	.word	0x200043a8

0000d010 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    d010:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d012:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    d016:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    d018:	4c0c      	ldr	r4, [pc, #48]	; (d04c <EventResponder::runFromInterrupt()+0x3c>)
    d01a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    d01c:	b180      	cbz	r0, d040 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    d01e:	4e0c      	ldr	r6, [pc, #48]	; (d050 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    d020:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    d022:	6943      	ldr	r3, [r0, #20]
    d024:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    d026:	b173      	cbz	r3, d046 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    d028:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    d02a:	b902      	cbnz	r2, d02e <EventResponder::runFromInterrupt()+0x1e>
    d02c:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    d02e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    d030:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    d032:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d034:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    d038:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    d03a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    d03c:	2800      	cmp	r0, #0
    d03e:	d1f0      	bne.n	d022 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    d040:	b902      	cbnz	r2, d044 <EventResponder::runFromInterrupt()+0x34>
    d042:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    d044:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    d046:	6033      	str	r3, [r6, #0]
    d048:	e7ef      	b.n	d02a <EventResponder::runFromInterrupt()+0x1a>
    d04a:	bf00      	nop
    d04c:	200043ac 	.word	0x200043ac
    d050:	200043a8 	.word	0x200043a8

0000d054 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    d054:	f7ff bfdc 	b.w	d010 <EventResponder::runFromInterrupt()>

0000d058 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    d058:	4904      	ldr	r1, [pc, #16]	; (d06c <systick_isr+0x14>)
	systick_millis_count++;
    d05a:	4a05      	ldr	r2, [pc, #20]	; (d070 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    d05c:	6849      	ldr	r1, [r1, #4]
    d05e:	4b05      	ldr	r3, [pc, #20]	; (d074 <systick_isr+0x1c>)
    d060:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    d062:	6813      	ldr	r3, [r2, #0]
    d064:	3301      	adds	r3, #1
    d066:	6013      	str	r3, [r2, #0]
}
    d068:	4770      	bx	lr
    d06a:	bf00      	nop
    d06c:	e0001000 	.word	0xe0001000
    d070:	20004a9c 	.word	0x20004a9c
    d074:	20004a98 	.word	0x20004a98

0000d078 <HardwareSerialIMXRT::operator bool()>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	*/

	operator bool()			{ return true; }
    d078:	2001      	movs	r0, #1
    d07a:	4770      	bx	lr

0000d07c <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    d07c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    d080:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    d084:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    d086:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    d088:	4293      	cmp	r3, r2
    d08a:	d202      	bcs.n	d092 <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
    d08c:	3a01      	subs	r2, #1
    d08e:	1ad0      	subs	r0, r2, r3
}
    d090:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    d092:	6b41      	ldr	r1, [r0, #52]	; 0x34
    d094:	3901      	subs	r1, #1
    d096:	440a      	add	r2, r1
    d098:	1ad0      	subs	r0, r2, r3
    d09a:	4770      	bx	lr

0000d09c <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    d09c:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    d09e:	b672      	cpsid	i
	head = rx_buffer_head_;
    d0a0:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    d0a4:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    d0a8:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    d0aa:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    d0ac:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    d0ae:	bf3c      	itt	cc
    d0b0:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
    d0b2:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
    d0b4:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
    d0b6:	1ad3      	subs	r3, r2, r3
	__enable_irq();
    d0b8:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    d0ba:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    d0be:	4418      	add	r0, r3
    d0c0:	4770      	bx	lr
    d0c2:	bf00      	nop

0000d0c4 <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
    d0c4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    d0c8:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    d0ca:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    d0ce:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    d0d0:	b29b      	uxth	r3, r3
	if (head == tail) {
    d0d2:	4299      	cmp	r1, r3
{
    d0d4:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    d0d6:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    d0d8:	d014      	beq.n	d104 <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d0da:	3301      	adds	r3, #1
    d0dc:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    d0de:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d0e0:	4298      	cmp	r0, r3
    d0e2:	bf98      	it	ls
    d0e4:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    d0e6:	4299      	cmp	r1, r3
    d0e8:	d806      	bhi.n	d0f8 <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    d0ea:	1a5b      	subs	r3, r3, r1
    d0ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
    d0ee:	5cd0      	ldrb	r0, [r2, r3]
    d0f0:	b2c0      	uxtb	r0, r0
	}
}
    d0f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    d0f6:	4770      	bx	lr
		return rx_buffer_[tail];
    d0f8:	6a12      	ldr	r2, [r2, #32]
}
    d0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
    d0fe:	5cd0      	ldrb	r0, [r2, r3]
    d100:	b2c0      	uxtb	r0, r0
}
    d102:	4770      	bx	lr
		__disable_irq();
    d104:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    d106:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    d10a:	b280      	uxth	r0, r0
		if (head == tail) {
    d10c:	4281      	cmp	r1, r0
    d10e:	d001      	beq.n	d114 <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
    d110:	b662      	cpsie	i
    d112:	e7e2      	b.n	d0da <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
    d114:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d116:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    d11a:	d103      	bne.n	d124 <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
    d11c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    d120:	b662      	cpsie	i
			return c;
    d122:	e7e6      	b.n	d0f2 <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    d124:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
    d126:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    d128:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
    d12a:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    d12c:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    d130:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    d134:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    d136:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    d13a:	704b      	strb	r3, [r1, #1]
    d13c:	e7f0      	b.n	d120 <HardwareSerialIMXRT::peek()+0x5c>
    d13e:	bf00      	nop

0000d140 <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    d140:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    d144:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    d146:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    d14a:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    d14c:	b29b      	uxth	r3, r3
	if (head == tail) {
    d14e:	4299      	cmp	r1, r3
{
    d150:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    d152:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    d154:	d025      	beq.n	d1a2 <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d156:	3301      	adds	r3, #1
    d158:	6b94      	ldr	r4, [r2, #56]	; 0x38
    d15a:	429c      	cmp	r4, r3
    d15c:	d916      	bls.n	d18c <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
    d15e:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    d160:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    d164:	4298      	cmp	r0, r3
    d166:	d917      	bls.n	d198 <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
    d168:	6a10      	ldr	r0, [r2, #32]
    d16a:	5cc0      	ldrb	r0, [r0, r3]
    d16c:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    d16e:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    d170:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    d174:	b145      	cbz	r5, d188 <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    d176:	4299      	cmp	r1, r3
    d178:	d31c      	bcc.n	d1b4 <HardwareSerialIMXRT::read()+0x74>
    d17a:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    d17c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    d17e:	4299      	cmp	r1, r3
    d180:	d302      	bcc.n	d188 <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    d182:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    d184:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    d188:	bc30      	pop	{r4, r5}
    d18a:	4770      	bx	lr
    d18c:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    d190:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d192:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    d194:	4298      	cmp	r0, r3
    d196:	d8e7      	bhi.n	d168 <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    d198:	1a18      	subs	r0, r3, r0
    d19a:	6a55      	ldr	r5, [r2, #36]	; 0x24
    d19c:	5c28      	ldrb	r0, [r5, r0]
    d19e:	b2c0      	uxtb	r0, r0
    d1a0:	e7e5      	b.n	d16e <HardwareSerialIMXRT::read()+0x2e>
    d1a2:	4608      	mov	r0, r1
		__disable_irq();
    d1a4:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    d1a6:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    d1aa:	b289      	uxth	r1, r1
		if (head == tail) {
    d1ac:	4288      	cmp	r0, r1
    d1ae:	d004      	beq.n	d1ba <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
    d1b0:	b662      	cpsie	i
    d1b2:	e7d0      	b.n	d156 <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
    d1b4:	440c      	add	r4, r1
    d1b6:	1ae3      	subs	r3, r4, r3
    d1b8:	e7e0      	b.n	d17c <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
    d1ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d1bc:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    d1c0:	d103      	bne.n	d1ca <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
    d1c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    d1c6:	b662      	cpsie	i
			return c;
    d1c8:	e7de      	b.n	d188 <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    d1ca:	69e0      	ldr	r0, [r4, #28]
    d1cc:	f3c0 0009 	ubfx	r0, r0, #0, #10
    d1d0:	e7f9      	b.n	d1c6 <HardwareSerialIMXRT::read()+0x86>
    d1d2:	bf00      	nop

0000d1d4 <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
    d1d4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    d1d8:	b143      	cbz	r3, d1ec <HardwareSerialIMXRT::flush()+0x18>
{
    d1da:	b510      	push	{r4, lr}
    d1dc:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    d1de:	f002 fc7b 	bl	fad8 <yield>
    d1e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    d1e6:	2b00      	cmp	r3, #0
    d1e8:	d1f9      	bne.n	d1de <HardwareSerialIMXRT::flush()+0xa>
}
    d1ea:	bd10      	pop	{r4, pc}
    d1ec:	4770      	bx	lr
    d1ee:	bf00      	nop

0000d1f0 <HardwareSerialIMXRT::end()>:
{
    d1f0:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    d1f2:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
    d1f6:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
    d1fa:	6809      	ldr	r1, [r1, #0]
    d1fc:	4211      	tst	r1, r2
    d1fe:	d028      	beq.n	d252 <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
    d200:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
    d204:	4604      	mov	r4, r0
    d206:	b132      	cbz	r2, d216 <HardwareSerialIMXRT::end()+0x26>
    d208:	f002 fc66 	bl	fad8 <yield>
    d20c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    d210:	2b00      	cmp	r3, #0
    d212:	d1f9      	bne.n	d208 <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    d214:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
    d216:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    d218:	4a0e      	ldr	r2, [pc, #56]	; (d254 <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
    d21a:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    d21c:	7e20      	ldrb	r0, [r4, #24]
    d21e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    d222:	7d00      	ldrb	r0, [r0, #20]
    d224:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    d228:	6845      	ldr	r5, [r0, #4]
    d22a:	2005      	movs	r0, #5
    d22c:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    d22e:	7e65      	ldrb	r5, [r4, #25]
    d230:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    d234:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    d238:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
    d23c:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    d23e:	6852      	ldr	r2, [r2, #4]
    d240:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
    d242:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    d246:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
    d24a:	b113      	cbz	r3, d252 <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    d24c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    d24e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    d252:	bd38      	pop	{r3, r4, r5, pc}
    d254:	20001a68 	.word	0x20001a68

0000d258 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    d258:	ee07 1a90 	vmov	s15, r1
    d25c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; d4c8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
    d260:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    d262:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    d266:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    d26a:	ed9f 6a98 	vldr	s12, [pc, #608]	; d4cc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
    d26e:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    d272:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    d276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
    d27a:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    d27c:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
    d27e:	2401      	movs	r4, #1
		float div = base / (float)osr;
    d280:	ee07 1a90 	vmov	s15, r1
    d284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d288:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    d28c:	ee77 7a05 	vadd.f32	s15, s14, s10
    d290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    d294:	ee17 3a90 	vmov	r3, s15
    d298:	4563      	cmp	r3, ip
    d29a:	bfa8      	it	ge
    d29c:	4663      	movge	r3, ip
    d29e:	2b01      	cmp	r3, #1
    d2a0:	bfb8      	it	lt
    d2a2:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    d2a4:	ee07 3a90 	vmov	s15, r3
    d2a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    d2ac:	ee76 6ac7 	vsub.f32	s13, s13, s14
    d2b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    d2b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d2bc:	bf48      	it	mi
    d2be:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    d2c2:	eef4 7ac6 	vcmpe.f32	s15, s12
    d2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d2ca:	d803      	bhi.n	d2d4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
    d2cc:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    d2d0:	468e      	mov	lr, r1
			bestdiv = divint;
    d2d2:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    d2d4:	3101      	adds	r1, #1
    d2d6:	2921      	cmp	r1, #33	; 0x21
    d2d8:	d1d2      	bne.n	d280 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    d2da:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    d2dc:	6943      	ldr	r3, [r0, #20]
    d2de:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    d2e2:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    d2e6:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    d2ea:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
    d2ec:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    d2f0:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
    d2f4:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    d2f8:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    d2fc:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    d300:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    d302:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    d304:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    d308:	eba1 010c 	sub.w	r1, r1, ip
    d30c:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    d310:	6839      	ldr	r1, [r7, #0]
    d312:	691e      	ldr	r6, [r3, #16]
    d314:	ea41 0106 	orr.w	r1, r1, r6
    d318:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    d31a:	bf14      	ite	ne
    d31c:	2101      	movne	r1, #1
    d31e:	2100      	moveq	r1, #0
    d320:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    d322:	f040 80ac 	bne.w	d47e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d326:	7e01      	ldrb	r1, [r0, #24]
    d328:	4e69      	ldr	r6, [pc, #420]	; (d4d0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    d32a:	eb03 1801 	add.w	r8, r3, r1, lsl #4
    d32e:	f8df 91c0 	ldr.w	r9, [pc, #448]	; d4f0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
    d332:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    d336:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d33a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    d33e:	68b9      	ldr	r1, [r7, #8]
    d340:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    d344:	6879      	ldr	r1, [r7, #4]
    d346:	f8d8 7018 	ldr.w	r7, [r8, #24]
    d34a:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    d34c:	f1ba 0f00 	cmp.w	sl, #0
    d350:	d003      	beq.n	d35a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    d352:	f8d8 1020 	ldr.w	r1, [r8, #32]
    d356:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    d35a:	7e47      	ldrb	r7, [r0, #25]
    d35c:	21d9      	movs	r1, #217	; 0xd9
    d35e:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    d362:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
    d366:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
    d36a:	f8dc 7008 	ldr.w	r7, [ip, #8]
    d36e:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    d370:	f8dc 1004 	ldr.w	r1, [ip, #4]
    d374:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
    d378:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    d37a:	7e41      	ldrb	r1, [r0, #25]
    d37c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    d380:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
    d382:	b10f      	cbz	r7, d388 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    d384:	6c09      	ldr	r1, [r1, #64]	; 0x40
    d386:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    d388:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    d38c:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    d390:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    d394:	bfcc      	ite	gt
    d396:	f04f 0e00 	movgt.w	lr, #0
    d39a:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    d39e:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    d3a2:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
    d3a6:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    d3a8:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    d3aa:	6129      	str	r1, [r5, #16]
    d3ac:	7859      	ldrb	r1, [r3, #1]
    d3ae:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
    d3b2:	2100      	movs	r1, #0
    d3b4:	60e9      	str	r1, [r5, #12]
    d3b6:	4947      	ldr	r1, [pc, #284]	; (d4d4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
    d3b8:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d3bc:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    d3be:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d3c2:	4c45      	ldr	r4, [pc, #276]	; (d4d8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    d3c4:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d3c8:	784f      	ldrb	r7, [r1, #1]
    d3ca:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    d3ce:	4b43      	ldr	r3, [pc, #268]	; (d4dc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d3d0:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    d3d2:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
    d3d6:	6944      	ldr	r4, [r0, #20]
    d3d8:	7861      	ldrb	r1, [r4, #1]
    d3da:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    d3de:	f001 011f 	and.w	r1, r1, #31
    d3e2:	009b      	lsls	r3, r3, #2
    d3e4:	fa0e f101 	lsl.w	r1, lr, r1
    d3e8:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    d3ea:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    d3ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d3ee:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    d3f2:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    d3f4:	0753      	lsls	r3, r2, #29
    d3f6:	d43e      	bmi.n	d476 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    d3f8:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    d3fc:	f002 010f 	and.w	r1, r2, #15
    d400:	2904      	cmp	r1, #4
    d402:	bf08      	it	eq
    d404:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
    d408:	0697      	lsls	r7, r2, #26
    d40a:	d52e      	bpl.n	d46a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    d40c:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
    d40e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    d412:	2900      	cmp	r1, #0
    d414:	d13a      	bne.n	d48c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    d416:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    d418:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    d41a:	d503      	bpl.n	d424 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
    d41c:	692b      	ldr	r3, [r5, #16]
    d41e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d422:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    d424:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    d426:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    d428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    d42c:	bf48      	it	mi
    d42e:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    d432:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    d434:	05d3      	lsls	r3, r2, #23
    d436:	d503      	bpl.n	d440 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
    d438:	692b      	ldr	r3, [r5, #16]
    d43a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    d43e:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
    d440:	68a3      	ldr	r3, [r4, #8]
    d442:	b183      	cbz	r3, d466 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    d444:	4e26      	ldr	r6, [pc, #152]	; (d4e0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
    d446:	7834      	ldrb	r4, [r6, #0]
    d448:	2c00      	cmp	r4, #0
    d44a:	d03a      	beq.n	d4c2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    d44c:	1e61      	subs	r1, r4, #1
    d44e:	4d25      	ldr	r5, [pc, #148]	; (d4e4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    d450:	b2c9      	uxtb	r1, r1
    d452:	1f2b      	subs	r3, r5, #4
    d454:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    d458:	e001      	b.n	d45e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    d45a:	4299      	cmp	r1, r3
    d45c:	d025      	beq.n	d4aa <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    d45e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    d462:	4290      	cmp	r0, r2
    d464:	d1f9      	bne.n	d45a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    d466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    d46a:	7e81      	ldrb	r1, [r0, #26]
    d46c:	2900      	cmp	r1, #0
    d46e:	d0d2      	beq.n	d416 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    d470:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    d474:	e7cf      	b.n	d416 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    d476:	4b1c      	ldr	r3, [pc, #112]	; (d4e8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    d478:	ea4c 0303 	orr.w	r3, ip, r3
    d47c:	e7be      	b.n	d3fc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    d47e:	7e47      	ldrb	r7, [r0, #25]
    d480:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    d484:	4e12      	ldr	r6, [pc, #72]	; (d4d0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    d486:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    d48a:	e76a      	b.n	d362 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    d48c:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    d48e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    d492:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    d496:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    d49a:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    d49e:	68b6      	ldr	r6, [r6, #8]
    d4a0:	6831      	ldr	r1, [r6, #0]
    d4a2:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    d4a6:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    d4a8:	e7b5      	b.n	d416 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    d4aa:	1c63      	adds	r3, r4, #1
    d4ac:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    d4ae:	4a0f      	ldr	r2, [pc, #60]	; (d4ec <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    d4b0:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    d4b2:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    d4b4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    d4b8:	f043 0302 	orr.w	r3, r3, #2
    d4bc:	7013      	strb	r3, [r2, #0]
};
    d4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    d4c2:	2301      	movs	r3, #1
    d4c4:	4d07      	ldr	r5, [pc, #28]	; (d4e4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    d4c6:	e7f2      	b.n	d4ae <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    d4c8:	4bb71b00 	.word	0x4bb71b00
    d4cc:	60ad78ec 	.word	0x60ad78ec
    d4d0:	20001a68 	.word	0x20001a68
    d4d4:	20003800 	.word	0x20003800
    d4d8:	e000e400 	.word	0xe000e400
    d4dc:	38003840 	.word	0x38003840
    d4e0:	20004d50 	.word	0x20004d50
    d4e4:	2000442c 	.word	0x2000442c
    d4e8:	003c0010 	.word	0x003c0010
    d4ec:	20004d62 	.word	0x20004d62
    d4f0:	0001f038 	.word	0x0001f038

0000d4f4 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    d4f4:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    d4f8:	b9b8      	cbnz	r0, d52a <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d4fa:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    d4fe:	b94b      	cbnz	r3, d514 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    d500:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    d504:	b93a      	cbnz	r2, d516 <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    d506:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    d50a:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    d50e:	b150      	cbz	r0, d526 <nvic_execution_priority()+0x32>
    d510:	4298      	cmp	r0, r3
    d512:	d208      	bcs.n	d526 <nvic_execution_priority()+0x32>
}
    d514:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    d516:	2a0f      	cmp	r2, #15
    d518:	d9f7      	bls.n	d50a <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    d51a:	4b05      	ldr	r3, [pc, #20]	; (d530 <nvic_execution_priority()+0x3c>)
    d51c:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    d51e:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    d522:	2800      	cmp	r0, #0
    d524:	d1f4      	bne.n	d510 <nvic_execution_priority()+0x1c>
    d526:	4618      	mov	r0, r3
	return priority;
    d528:	4770      	bx	lr
	if (faultmask) return -1;
    d52a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d52e:	e7f1      	b.n	d514 <nvic_execution_priority()+0x20>
    d530:	e000e3f0 	.word	0xe000e3f0

0000d534 <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d534:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    d536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d53a:	4604      	mov	r4, r0
    d53c:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    d53e:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d540:	b113      	cbz	r3, d548 <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    d542:	6d42      	ldr	r2, [r0, #84]	; 0x54
    d544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    d548:	7ea3      	ldrb	r3, [r4, #26]
    d54a:	b12b      	cbz	r3, d558 <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    d54c:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    d54e:	69b3      	ldr	r3, [r6, #24]
    d550:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d554:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    d556:	b662      	cpsie	i
	head = tx_buffer_head_;
    d558:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    d55c:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    d55e:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    d560:	3501      	adds	r5, #1
    d562:	42ab      	cmp	r3, r5
    d564:	d84c      	bhi.n	d600 <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    d566:	f04f 0800 	mov.w	r8, #0
    d56a:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    d56c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    d570:	b29b      	uxth	r3, r3
    d572:	429d      	cmp	r5, r3
    d574:	d019      	beq.n	d5aa <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    d576:	e028      	b.n	d5ca <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    d578:	6973      	ldr	r3, [r6, #20]
    d57a:	021b      	lsls	r3, r3, #8
    d57c:	d510      	bpl.n	d5a0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    d57e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    d582:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    d584:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    d586:	3301      	adds	r3, #1
    d588:	429a      	cmp	r2, r3
    d58a:	d936      	bls.n	d5fa <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    d58c:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    d58e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    d590:	4299      	cmp	r1, r3
    d592:	d92d      	bls.n	d5f0 <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    d594:	69e1      	ldr	r1, [r4, #28]
    d596:	5ccb      	ldrb	r3, [r1, r3]
    d598:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    d59a:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    d59c:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    d5a0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    d5a4:	b29b      	uxth	r3, r3
    d5a6:	42ab      	cmp	r3, r5
    d5a8:	d10f      	bne.n	d5ca <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    d5aa:	f7ff ffa3 	bl	d4f4 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    d5ae:	6963      	ldr	r3, [r4, #20]
    d5b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    d5b4:	4283      	cmp	r3, r0
    d5b6:	dadf      	bge.n	d578 <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    d5b8:	28ff      	cmp	r0, #255	; 0xff
    d5ba:	ddf1      	ble.n	d5a0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    d5bc:	f002 fa8c 	bl	fad8 <yield>
	while (tx_buffer_tail_ == head) {
    d5c0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    d5c4:	b29b      	uxth	r3, r3
    d5c6:	42ab      	cmp	r3, r5
    d5c8:	d0ef      	beq.n	d5aa <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    d5ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d5cc:	42ab      	cmp	r3, r5
    d5ce:	d91a      	bls.n	d606 <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    d5d0:	b2ff      	uxtb	r7, r7
    d5d2:	69e3      	ldr	r3, [r4, #28]
    d5d4:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    d5d6:	b672      	cpsid	i
	transmitting_ = 1;
    d5d8:	2001      	movs	r0, #1
    d5da:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    d5de:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    d5e2:	69b3      	ldr	r3, [r6, #24]
    d5e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d5e8:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    d5ea:	b662      	cpsie	i
}
    d5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    d5f0:	1a5b      	subs	r3, r3, r1
    d5f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    d5f4:	5ccb      	ldrb	r3, [r1, r3]
    d5f6:	b2db      	uxtb	r3, r3
    d5f8:	e7cf      	b.n	d59a <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    d5fa:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    d5fc:	4613      	mov	r3, r2
    d5fe:	e7c6      	b.n	d58e <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    d600:	fa1f f885 	uxth.w	r8, r5
    d604:	e7b2      	b.n	d56c <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    d606:	1aed      	subs	r5, r5, r3
    d608:	b2ff      	uxtb	r7, r7
    d60a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d60c:	555f      	strb	r7, [r3, r5]
    d60e:	e7e2      	b.n	d5d6 <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

0000d610 <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    d610:	f7ff bf90 	b.w	d534 <HardwareSerialIMXRT::write9bit(unsigned long)>

0000d614 <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    d614:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    d616:	6953      	ldr	r3, [r2, #20]
    d618:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    d61c:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    d61e:	d043      	beq.n	d6a8 <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    d620:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    d622:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    d626:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    d62a:	d03a      	beq.n	d6a2 <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    d62c:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    d630:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    d634:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    d636:	b2b6      	uxth	r6, r6
    d638:	e007      	b.n	d64a <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    d63a:	6a01      	ldr	r1, [r0, #32]
    d63c:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    d640:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    d644:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    d648:	d01d      	beq.n	d686 <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    d64a:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    d64c:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    d64e:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    d650:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    d654:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    d658:	429c      	cmp	r4, r3
    d65a:	bf98      	it	ls
    d65c:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    d65e:	fa1f fc8c 	uxth.w	ip, ip
    d662:	459c      	cmp	ip, r3
    d664:	d0ec      	beq.n	d640 <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    d666:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    d668:	fa5f fc81 	uxtb.w	ip, r1
    d66c:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    d66e:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    d670:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    d674:	d8e1      	bhi.n	d63a <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    d676:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d678:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    d67c:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    d680:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    d684:	d1e1      	bne.n	d64a <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    d686:	b2ab      	uxth	r3, r5
    d688:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    d68c:	6d83      	ldr	r3, [r0, #88]	; 0x58
    d68e:	b143      	cbz	r3, d6a2 <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    d690:	42b5      	cmp	r5, r6
    d692:	d354      	bcc.n	d73e <HardwareSerialIMXRT::IRQHandler()+0x12a>
    d694:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    d696:	6c01      	ldr	r1, [r0, #64]	; 0x40
    d698:	42a9      	cmp	r1, r5
    d69a:	d802      	bhi.n	d6a2 <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    d69c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    d69e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    d6a2:	6953      	ldr	r3, [r2, #20]
    d6a4:	02d9      	lsls	r1, r3, #11
    d6a6:	d445      	bmi.n	d734 <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    d6a8:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    d6aa:	0233      	lsls	r3, r6, #8
    d6ac:	d528      	bpl.n	d700 <HardwareSerialIMXRT::IRQHandler()+0xec>
    d6ae:	6953      	ldr	r3, [r2, #20]
    d6b0:	021d      	lsls	r5, r3, #8
    d6b2:	d525      	bpl.n	d700 <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    d6b4:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    d6b8:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    d6bc:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    d6be:	b29b      	uxth	r3, r3
    d6c0:	e006      	b.n	d6d0 <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    d6c2:	69c1      	ldr	r1, [r0, #28]
    d6c4:	5cc9      	ldrb	r1, [r1, r3]
    d6c6:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    d6c8:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    d6ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    d6cc:	054c      	lsls	r4, r1, #21
    d6ce:	d412      	bmi.n	d6f6 <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    d6d0:	42ab      	cmp	r3, r5
    d6d2:	d038      	beq.n	d746 <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    d6d4:	6b44      	ldr	r4, [r0, #52]	; 0x34
    d6d6:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    d6d8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    d6da:	429c      	cmp	r4, r3
    d6dc:	bf98      	it	ls
    d6de:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    d6e0:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    d6e2:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    d6e6:	d8ec      	bhi.n	d6c2 <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    d6e8:	6a81      	ldr	r1, [r0, #40]	; 0x28
    d6ea:	5d09      	ldrb	r1, [r1, r4]
    d6ec:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    d6ee:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    d6f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    d6f2:	054c      	lsls	r4, r1, #21
    d6f4:	d5ec      	bpl.n	d6d0 <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    d6f6:	b299      	uxth	r1, r3
		if (head == tail) {
    d6f8:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    d6fa:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    d6fe:	d025      	beq.n	d74c <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    d700:	0271      	lsls	r1, r6, #9
    d702:	d516      	bpl.n	d732 <HardwareSerialIMXRT::IRQHandler()+0x11e>
    d704:	6953      	ldr	r3, [r2, #20]
    d706:	025b      	lsls	r3, r3, #9
    d708:	d513      	bpl.n	d732 <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    d70a:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d70c:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    d70e:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d712:	b113      	cbz	r3, d71a <HardwareSerialIMXRT::IRQHandler()+0x106>
    d714:	6d41      	ldr	r1, [r0, #84]	; 0x54
    d716:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    d71a:	7e83      	ldrb	r3, [r0, #26]
    d71c:	b12b      	cbz	r3, d72a <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    d71e:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    d720:	6993      	ldr	r3, [r2, #24]
    d722:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    d726:	6193      	str	r3, [r2, #24]
			__enable_irq();
    d728:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    d72a:	6993      	ldr	r3, [r2, #24]
    d72c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    d730:	6193      	str	r3, [r2, #24]
}
    d732:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    d734:	6953      	ldr	r3, [r2, #20]
    d736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d73a:	6153      	str	r3, [r2, #20]
    d73c:	e7b4      	b.n	d6a8 <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    d73e:	6b81      	ldr	r1, [r0, #56]	; 0x38
    d740:	1b89      	subs	r1, r1, r6
    d742:	440d      	add	r5, r1
    d744:	e7a7      	b.n	d696 <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    d746:	b29b      	uxth	r3, r3
    d748:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    d74c:	6993      	ldr	r3, [r2, #24]
    d74e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    d752:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    d754:	6993      	ldr	r3, [r2, #24]
    d756:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    d75a:	6193      	str	r3, [r2, #24]
    d75c:	e7d0      	b.n	d700 <HardwareSerialIMXRT::IRQHandler()+0xec>
    d75e:	bf00      	nop

0000d760 <IRQHandler_Serial3>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial3()
{
	Serial3.IRQHandler();
    d760:	4801      	ldr	r0, [pc, #4]	; (d768 <IRQHandler_Serial3+0x8>)
    d762:	f7ff bf57 	b.w	d614 <HardwareSerialIMXRT::IRQHandler()>
    d766:	bf00      	nop
    d768:	20002a8c 	.word	0x20002a8c

0000d76c <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t, Args&&...) -> R
    d76c:	4770      	bx	lr
    d76e:	bf00      	nop

0000d770 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
        copy_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
    d770:	4770      	bx	lr
    d772:	bf00      	nop

0000d774 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        relocate_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
    d774:	4770      	bx	lr
    d776:	bf00      	nop

0000d778 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    d778:	4770      	bx	lr
    d77a:	bf00      	nop

0000d77c <pit_isr()>:

//FASTRUN
static void pit_isr()
{
    d77c:	b570      	push	{r4, r5, r6, lr}
        return operator bool();
    }

    explicit constexpr operator bool() const noexcept
    {
        return vtable_ptr_ != std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
    d77e:	4c1a      	ldr	r4, [pc, #104]	; (d7e8 <pit_isr()+0x6c>)

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    d780:	4d1a      	ldr	r5, [pc, #104]	; (d7ec <pit_isr()+0x70>)
    d782:	6823      	ldr	r3, [r4, #0]
    d784:	42ab      	cmp	r3, r5
    d786:	d002      	beq.n	d78e <pit_isr()+0x12>
    d788:	4a19      	ldr	r2, [pc, #100]	; (d7f0 <pit_isr()+0x74>)
    d78a:	68d1      	ldr	r1, [r2, #12]
    d78c:	bb29      	cbnz	r1, d7da <pit_isr()+0x5e>
    d78e:	69a3      	ldr	r3, [r4, #24]
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    d790:	42ab      	cmp	r3, r5
    d792:	d002      	beq.n	d79a <pit_isr()+0x1e>
    d794:	4a16      	ldr	r2, [pc, #88]	; (d7f0 <pit_isr()+0x74>)
    d796:	69d1      	ldr	r1, [r2, #28]
    d798:	b9c9      	cbnz	r1, d7ce <pit_isr()+0x52>
    d79a:	6b23      	ldr	r3, [r4, #48]	; 0x30
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    d79c:	42ab      	cmp	r3, r5
    d79e:	d002      	beq.n	d7a6 <pit_isr()+0x2a>
    d7a0:	4a13      	ldr	r2, [pc, #76]	; (d7f0 <pit_isr()+0x74>)
    d7a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    d7a4:	b969      	cbnz	r1, d7c2 <pit_isr()+0x46>
    d7a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    d7a8:	42ab      	cmp	r3, r5
    d7aa:	d009      	beq.n	d7c0 <pit_isr()+0x44>
    d7ac:	4a10      	ldr	r2, [pc, #64]	; (d7f0 <pit_isr()+0x74>)
    d7ae:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    d7b0:	b131      	cbz	r1, d7c0 <pit_isr()+0x44>
    d7b2:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
    d7b4:	681b      	ldr	r3, [r3, #0]
    d7b6:	480f      	ldr	r0, [pc, #60]	; (d7f4 <pit_isr()+0x78>)
    d7b8:	63d1      	str	r1, [r2, #60]	; 0x3c
#endif
}
    d7ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d7be:	4718      	bx	r3
    d7c0:	bd70      	pop	{r4, r5, r6, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    d7c2:	2101      	movs	r1, #1
    d7c4:	681b      	ldr	r3, [r3, #0]
    d7c6:	480c      	ldr	r0, [pc, #48]	; (d7f8 <pit_isr()+0x7c>)
    d7c8:	62d1      	str	r1, [r2, #44]	; 0x2c
    d7ca:	4798      	blx	r3
        );
    d7cc:	e7eb      	b.n	d7a6 <pit_isr()+0x2a>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    d7ce:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
    d7d0:	681b      	ldr	r3, [r3, #0]
    d7d2:	480a      	ldr	r0, [pc, #40]	; (d7fc <pit_isr()+0x80>)
    d7d4:	61d1      	str	r1, [r2, #28]
    d7d6:	4798      	blx	r3
        );
    d7d8:	e7df      	b.n	d79a <pit_isr()+0x1e>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    d7da:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
    d7dc:	681b      	ldr	r3, [r3, #0]
    d7de:	f104 0008 	add.w	r0, r4, #8
    d7e2:	60d1      	str	r1, [r2, #12]
    d7e4:	4798      	blx	r3
        );
    d7e6:	e7d2      	b.n	d78e <pit_isr()+0x12>
    d7e8:	20003ac0 	.word	0x20003ac0
    d7ec:	200012a8 	.word	0x200012a8
    d7f0:	40084100 	.word	0x40084100
    d7f4:	20003b10 	.word	0x20003b10
    d7f8:	20003af8 	.word	0x20003af8
    d7fc:	20003ae0 	.word	0x20003ae0

0000d800 <__tcf_0>:
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
    d800:	b538      	push	{r3, r4, r5, lr}
    d802:	4c06      	ldr	r4, [pc, #24]	; (d81c <__tcf_0+0x1c>)
    d804:	f1a4 0560 	sub.w	r5, r4, #96	; 0x60
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    d808:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d80c:	4620      	mov	r0, r4
    d80e:	3c18      	subs	r4, #24
    d810:	68db      	ldr	r3, [r3, #12]
    d812:	4798      	blx	r3
    d814:	42ac      	cmp	r4, r5
    d816:	d1f7      	bne.n	d808 <__tcf_0+0x8>
    d818:	bd38      	pop	{r3, r4, r5, pc}
    d81a:	bf00      	nop
    d81c:	20003b10 	.word	0x20003b10

0000d820 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>:
	if (channel) {
    d820:	6803      	ldr	r3, [r0, #0]
{
    d822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d826:	4604      	mov	r4, r0
    d828:	b088      	sub	sp, #32
    d82a:	4617      	mov	r7, r2
	if (channel) {
    d82c:	2b00      	cmp	r3, #0
    d82e:	d04b      	beq.n	d8c8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xa8>
		channel->TCTRL = 0;
    d830:	2200      	movs	r2, #0
    d832:	609a      	str	r2, [r3, #8]
		channel->TFLG = 1;
    d834:	2201      	movs	r2, #1
    d836:	60da      	str	r2, [r3, #12]
	int index = channel - IMXRT_PIT_CHANNELS;
    d838:	4d30      	ldr	r5, [pc, #192]	; (d8fc <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xdc>)
        vtable_ptr_->copy_ptr(
    d83a:	a804      	add	r0, sp, #16
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    d83c:	f8df 80e0 	ldr.w	r8, [pc, #224]	; d920 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x100>
    d840:	441d      	add	r5, r3
        vtable_ptr_{other.vtable_ptr_}
    d842:	f851 3b08 	ldr.w	r3, [r1], #8
    d846:	112d      	asrs	r5, r5, #4
    d848:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
    d84a:	685b      	ldr	r3, [r3, #4]
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    d84c:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        vtable_ptr_->copy_ptr(
    d850:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    d852:	00f6      	lsls	r6, r6, #3
    d854:	f106 0008 	add.w	r0, r6, #8
    d858:	f858 3006 	ldr.w	r3, [r8, r6]
    d85c:	4440      	add	r0, r8
    d85e:	68db      	ldr	r3, [r3, #12]
    d860:	9001      	str	r0, [sp, #4]
    d862:	4798      	blx	r3
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
    d864:	4a26      	ldr	r2, [pc, #152]	; (d900 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe0>)
        vtable_ptr_->relocate_ptr(
    d866:	a904      	add	r1, sp, #16
      _Tp __old_val = std::move(__obj);
    d868:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
      __obj = std::forward<_Up>(__new_val);
    d86c:	9202      	str	r2, [sp, #8]
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
    d86e:	f848 3006 	str.w	r3, [r8, r6]
        vtable_ptr_->relocate_ptr(
    d872:	689b      	ldr	r3, [r3, #8]
    d874:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    d876:	9b02      	ldr	r3, [sp, #8]
    d878:	a804      	add	r0, sp, #16
    d87a:	68db      	ldr	r3, [r3, #12]
    d87c:	4798      	blx	r3
	channel->LDVAL = cycles;
    d87e:	6823      	ldr	r3, [r4, #0]
	channel->TCTRL = 3;
    d880:	2203      	movs	r2, #3
    d882:	4820      	ldr	r0, [pc, #128]	; (d904 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe4>)
	channel->LDVAL = cycles;
    d884:	601f      	str	r7, [r3, #0]
	channel->TCTRL = 3;
    d886:	609a      	str	r2, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    d888:	4a1f      	ldr	r2, [pc, #124]	; (d908 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe8>)
    d88a:	7923      	ldrb	r3, [r4, #4]
    d88c:	4c1f      	ldr	r4, [pc, #124]	; (d90c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xec>)
    d88e:	5553      	strb	r3, [r2, r5]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    d890:	7813      	ldrb	r3, [r2, #0]
    d892:	7851      	ldrb	r1, [r2, #1]
    d894:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
    d898:	428b      	cmp	r3, r1
    d89a:	bf28      	it	cs
    d89c:	460b      	movcs	r3, r1
    d89e:	7891      	ldrb	r1, [r2, #2]
    d8a0:	78d2      	ldrb	r2, [r2, #3]
    d8a2:	428b      	cmp	r3, r1
    d8a4:	bf28      	it	cs
    d8a6:	460b      	movcs	r3, r1
    d8a8:	4293      	cmp	r3, r2
    d8aa:	bf28      	it	cs
    d8ac:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    d8ae:	4c18      	ldr	r4, [pc, #96]	; (d910 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    d8b0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    d8b4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
    d8b8:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    d8ba:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
    d8be:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
    d8c2:	b008      	add	sp, #32
    d8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d8c8:	4a12      	ldr	r2, [pc, #72]	; (d914 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf4>)
    d8ca:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    d8cc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    d8d0:	66d3      	str	r3, [r2, #108]	; 0x6c
		PIT_MCR = 1;
    d8d2:	2201      	movs	r2, #1
    d8d4:	4b10      	ldr	r3, [pc, #64]	; (d918 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf8>)
    d8d6:	601a      	str	r2, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
    d8d8:	4a10      	ldr	r2, [pc, #64]	; (d91c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xfc>)
    d8da:	4613      	mov	r3, r2
    d8dc:	6002      	str	r2, [r0, #0]
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    d8de:	3240      	adds	r2, #64	; 0x40
			if (channel->TCTRL == 0) break;
    d8e0:	6898      	ldr	r0, [r3, #8]
    d8e2:	2800      	cmp	r0, #0
    d8e4:	d0a8      	beq.n	d838 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x18>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    d8e6:	3310      	adds	r3, #16
    d8e8:	4293      	cmp	r3, r2
    d8ea:	6023      	str	r3, [r4, #0]
    d8ec:	d1f8      	bne.n	d8e0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc0>
				channel = NULL;
    d8ee:	2300      	movs	r3, #0
				return false;
    d8f0:	4618      	mov	r0, r3
				channel = NULL;
    d8f2:	6023      	str	r3, [r4, #0]
}
    d8f4:	b008      	add	sp, #32
    d8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d8fa:	bf00      	nop
    d8fc:	bff7bf00 	.word	0xbff7bf00
    d900:	200012a8 	.word	0x200012a8
    d904:	20003800 	.word	0x20003800
    d908:	20002f0c 	.word	0x20002f0c
    d90c:	0000d77d 	.word	0x0000d77d
    d910:	e000e400 	.word	0xe000e400
    d914:	400fc000 	.word	0x400fc000
    d918:	40084000 	.word	0x40084000
    d91c:	40084100 	.word	0x40084100
    d920:	20003ac0 	.word	0x20003ac0

0000d924 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE>:
}
    d924:	b410      	push	{r4}
        vtable_ptr_{std::addressof(inplace_function_detail::empty_vtable<R, Args...>)}
    d926:	4b06      	ldr	r3, [pc, #24]	; (d940 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x1c>)
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
    d928:	2000      	movs	r0, #0
    d92a:	4c06      	ldr	r4, [pc, #24]	; (d944 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x20>)
    d92c:	4a06      	ldr	r2, [pc, #24]	; (d948 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x24>)
    d92e:	601c      	str	r4, [r3, #0]
    d930:	619c      	str	r4, [r3, #24]
    d932:	631c      	str	r4, [r3, #48]	; 0x30
    d934:	649c      	str	r4, [r3, #72]	; 0x48
    d936:	4905      	ldr	r1, [pc, #20]	; (d94c <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x28>)
}
    d938:	f85d 4b04 	ldr.w	r4, [sp], #4
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
    d93c:	f002 b938 	b.w	fbb0 <__aeabi_atexit>
    d940:	20003ac0 	.word	0x20003ac0
    d944:	200012a8 	.word	0x200012a8
    d948:	20002f18 	.word	0x20002f18
    d94c:	0000d801 	.word	0x0000d801

0000d950 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d950:	4608      	mov	r0, r1
    d952:	f002 b82d 	b.w	f9b0 <usb_serial_putchar>
    d956:	bf00      	nop

0000d958 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    d958:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    d95a:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    d95c:	bf08      	it	eq
    d95e:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    d960:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    d962:	b391      	cbz	r1, d9ca <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    d964:	f04f 0e21 	mov.w	lr, #33	; 0x21
    d968:	e001      	b.n	d96e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    d96a:	fa5f fe86 	uxtb.w	lr, r6
    d96e:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
			digit = n % base;
    d972:	fbb1 f5f2 	udiv	r5, r1, r2
    d976:	fb02 1415 	mls	r4, r2, r5, r1
    d97a:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d97e:	2c09      	cmp	r4, #9
    d980:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    d984:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    d988:	bf98      	it	ls
    d98a:	fa5f f48c 	uxtbls.w	r4, ip
    d98e:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    d992:	bf88      	it	hi
    d994:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    d996:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d998:	44ec      	add	ip, sp
			n /= base;
    d99a:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d99c:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    d9a0:	d2e3      	bcs.n	d96a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    d9a2:	b14b      	cbz	r3, d9b8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    d9a4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
		buf[i] = '-';
    d9a8:	222d      	movs	r2, #45	; 0x2d
		i--;
    d9aa:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    d9ae:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    d9b2:	446b      	add	r3, sp
    d9b4:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    d9b8:	6803      	ldr	r3, [r0, #0]
    d9ba:	a901      	add	r1, sp, #4
    d9bc:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    d9c0:	685b      	ldr	r3, [r3, #4]
    d9c2:	4471      	add	r1, lr
    d9c4:	4798      	blx	r3
}
    d9c6:	b00a      	add	sp, #40	; 0x28
    d9c8:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    d9ca:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    d9cc:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    d9d0:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    d9d4:	e7e5      	b.n	d9a2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    d9d6:	bf00      	nop

0000d9d8 <Print::write(unsigned char const*, unsigned int)>:
{
    d9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    d9dc:	460c      	mov	r4, r1
    d9de:	b1d1      	cbz	r1, da16 <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    d9e0:	b1ea      	cbz	r2, da1e <Print::write(unsigned char const*, unsigned int)+0x46>
    d9e2:	4680      	mov	r8, r0
    d9e4:	188e      	adds	r6, r1, r2
	size_t count = 0;
    d9e6:	2500      	movs	r5, #0
    d9e8:	4f0e      	ldr	r7, [pc, #56]	; (da24 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    d9ea:	e004      	b.n	d9f6 <Print::write(unsigned char const*, unsigned int)+0x1e>
    d9ec:	f001 ffe0 	bl	f9b0 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    d9f0:	42b4      	cmp	r4, r6
    d9f2:	4405      	add	r5, r0
    d9f4:	d00c      	beq.n	da10 <Print::write(unsigned char const*, unsigned int)+0x38>
    d9f6:	f8d8 3000 	ldr.w	r3, [r8]
    d9fa:	f814 0b01 	ldrb.w	r0, [r4], #1
    d9fe:	681b      	ldr	r3, [r3, #0]
    da00:	42bb      	cmp	r3, r7
    da02:	d0f3      	beq.n	d9ec <Print::write(unsigned char const*, unsigned int)+0x14>
    da04:	4601      	mov	r1, r0
    da06:	4640      	mov	r0, r8
    da08:	4798      	blx	r3
    da0a:	42b4      	cmp	r4, r6
    da0c:	4405      	add	r5, r0
    da0e:	d1f2      	bne.n	d9f6 <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    da10:	4628      	mov	r0, r5
    da12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    da16:	460d      	mov	r5, r1
}
    da18:	4628      	mov	r0, r5
    da1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    da1e:	4615      	mov	r5, r2
    da20:	e7f6      	b.n	da10 <Print::write(unsigned char const*, unsigned int)+0x38>
    da22:	bf00      	nop
    da24:	0000d951 	.word	0x0000d951

0000da28 <Print::print(String const&)>:
{
    da28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	String(double num, unsigned char digits=2) : String((float)num, digits) {}
	~String(void);

	// memory management
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    da2c:	688c      	ldr	r4, [r1, #8]
    da2e:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    da30:	b1dc      	cbz	r4, da6a <Print::print(String const&)+0x42>
	unsigned int index = 0;
    da32:	2500      	movs	r5, #0
    da34:	4688      	mov	r8, r1
    da36:	4606      	mov	r6, r0
	size_t count = 0;
    da38:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    da3a:	462b      	mov	r3, r5
    da3c:	2221      	movs	r2, #33	; 0x21
    da3e:	a901      	add	r1, sp, #4
    da40:	4640      	mov	r0, r8
    da42:	f000 f9d9 	bl	ddf8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    da46:	2c20      	cmp	r4, #32
    da48:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    da4a:	6833      	ldr	r3, [r6, #0]
    da4c:	bf28      	it	cs
    da4e:	2220      	movcs	r2, #32
    da50:	a901      	add	r1, sp, #4
    da52:	4630      	mov	r0, r6
    da54:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    da56:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    da58:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    da5a:	4798      	blx	r3
    da5c:	4407      	add	r7, r0
	while (len > 0) {
    da5e:	2c00      	cmp	r4, #0
    da60:	d1eb      	bne.n	da3a <Print::print(String const&)+0x12>
}
    da62:	4638      	mov	r0, r7
    da64:	b00a      	add	sp, #40	; 0x28
    da66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    da6a:	4627      	mov	r7, r4
}
    da6c:	4638      	mov	r0, r7
    da6e:	b00a      	add	sp, #40	; 0x28
    da70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000da74 <Print::print(long)>:
	if (n < 0) {
    da74:	2900      	cmp	r1, #0
    da76:	db03      	blt.n	da80 <Print::print(long)+0xc>
	uint8_t sign=0;
    da78:	2300      	movs	r3, #0
	if (base == 0) {
    da7a:	220a      	movs	r2, #10
    da7c:	f7ff bf6c 	b.w	d958 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    da80:	4249      	negs	r1, r1
		sign = '-';
    da82:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    da84:	220a      	movs	r2, #10
    da86:	f7ff bf67 	b.w	d958 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    da8a:	bf00      	nop

0000da8c <Print::println()>:
{
    da8c:	b500      	push	{lr}
	return write(buf, 2);
    da8e:	6803      	ldr	r3, [r0, #0]
{
    da90:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    da92:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    da96:	2202      	movs	r2, #2
    da98:	a901      	add	r1, sp, #4
    da9a:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    da9c:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    daa0:	4798      	blx	r3
}
    daa2:	b003      	add	sp, #12
    daa4:	f85d fb04 	ldr.w	pc, [sp], #4

0000daa8 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    daa8:	4b05      	ldr	r3, [pc, #20]	; (dac0 <_write+0x18>)
    daaa:	2802      	cmp	r0, #2
    daac:	bf88      	it	hi
    daae:	4603      	movhi	r3, r0
{
    dab0:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    dab2:	681c      	ldr	r4, [r3, #0]
    dab4:	4618      	mov	r0, r3
    dab6:	6863      	ldr	r3, [r4, #4]
}
    dab8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    dabc:	4718      	bx	r3
    dabe:	bf00      	nop
    dac0:	20002a7c 	.word	0x20002a7c

0000dac4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    dac4:	b95a      	cbnz	r2, dade <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    dac6:	6803      	ldr	r3, [r0, #0]
    dac8:	b2c9      	uxtb	r1, r1
    daca:	4a07      	ldr	r2, [pc, #28]	; (dae8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    dacc:	681b      	ldr	r3, [r3, #0]
    dace:	4293      	cmp	r3, r2
{
    dad0:	b500      	push	{lr}
    dad2:	d106      	bne.n	dae2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    dad4:	4608      	mov	r0, r1
}
    dad6:	f85d eb04 	ldr.w	lr, [sp], #4
    dada:	f001 bf69 	b.w	f9b0 <usb_serial_putchar>
    dade:	f7ff bf3b 	b.w	d958 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    dae2:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    dae6:	4718      	bx	r3
    dae8:	0000d951 	.word	0x0000d951
    daec:	00000000 	.word	0x00000000

0000daf0 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    daf0:	eeb4 0b40 	vcmp.f64	d0, d0
{
    daf4:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    daf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    dafa:	4605      	mov	r5, r0
    dafc:	ed2d 8b02 	vpush	{d8}
    db00:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    db02:	d67c      	bvs.n	dbfe <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    db04:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    db08:	ed9f 6b47 	vldr	d6, [pc, #284]	; dc28 <Print::printFloat(double, unsigned char)+0x138>
    db0c:	eeb4 7b46 	vcmp.f64	d7, d6
    db10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    db14:	dc6b      	bgt.n	dbee <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    db16:	ed9f 7b46 	vldr	d7, [pc, #280]	; dc30 <Print::printFloat(double, unsigned char)+0x140>
    db1a:	eeb4 0bc7 	vcmpe.f64	d0, d7
    db1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    db22:	dc5a      	bgt.n	dbda <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    db24:	ed9f 7b44 	vldr	d7, [pc, #272]	; dc38 <Print::printFloat(double, unsigned char)+0x148>
    db28:	eeb4 0bc7 	vcmpe.f64	d0, d7
    db2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    db30:	d453      	bmi.n	dbda <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    db32:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    db36:	460c      	mov	r4, r1
    db38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    db3c:	d45b      	bmi.n	dbf6 <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    db3e:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    db40:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    db44:	2c00      	cmp	r4, #0
    db46:	d05e      	beq.n	dc06 <Print::printFloat(double, unsigned char)+0x116>
    db48:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    db4c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; dc40 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    db50:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    db54:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    db58:	fa5f f28c 	uxtb.w	r2, ip
    db5c:	42a2      	cmp	r2, r4
    db5e:	d3f7      	bcc.n	db50 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    db60:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    db64:	220a      	movs	r2, #10
    db66:	4628      	mov	r0, r5
    db68:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    db6c:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    db70:	ee17 1a90 	vmov	r1, s15
    db74:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    db78:	f7ff feee 	bl	d958 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    db7c:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    db7e:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    db82:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    db86:	4606      	mov	r6, r0
		buf[0] = '.';
    db88:	bf28      	it	cs
    db8a:	240f      	movcs	r4, #15
    db8c:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    db90:	f10d 0309 	add.w	r3, sp, #9
    db94:	aa02      	add	r2, sp, #8
    db96:	1e61      	subs	r1, r4, #1
    db98:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    db9c:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    dba0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    dba4:	edcd 7a01 	vstr	s15, [sp, #4]
    dba8:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    dbac:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    dbb0:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    dbb2:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    dbb6:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    dbba:	4291      	cmp	r1, r2
			remainder -= n; 
    dbbc:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    dbc0:	d1ec      	bne.n	db9c <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    dbc2:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    dbc4:	3401      	adds	r4, #1
		count += write(buf, count);
    dbc6:	a902      	add	r1, sp, #8
    dbc8:	4628      	mov	r0, r5
    dbca:	685b      	ldr	r3, [r3, #4]
    dbcc:	b2e2      	uxtb	r2, r4
    dbce:	4798      	blx	r3
	}
	return count;
}
    dbd0:	4630      	mov	r0, r6
    dbd2:	b006      	add	sp, #24
    dbd4:	ecbd 8b02 	vpop	{d8}
    dbd8:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    dbda:	682b      	ldr	r3, [r5, #0]
    dbdc:	2203      	movs	r2, #3
    dbde:	491a      	ldr	r1, [pc, #104]	; (dc48 <Print::printFloat(double, unsigned char)+0x158>)
    dbe0:	685b      	ldr	r3, [r3, #4]
    dbe2:	b006      	add	sp, #24
    dbe4:	ecbd 8b02 	vpop	{d8}
    dbe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dbec:	4718      	bx	r3
    dbee:	6803      	ldr	r3, [r0, #0]
    dbf0:	2203      	movs	r2, #3
    dbf2:	4916      	ldr	r1, [pc, #88]	; (dc4c <Print::printFloat(double, unsigned char)+0x15c>)
    dbf4:	e7f4      	b.n	dbe0 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    dbf6:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    dbfa:	2301      	movs	r3, #1
    dbfc:	e7a0      	b.n	db40 <Print::printFloat(double, unsigned char)+0x50>
    dbfe:	6803      	ldr	r3, [r0, #0]
    dc00:	2203      	movs	r2, #3
    dc02:	4913      	ldr	r1, [pc, #76]	; (dc50 <Print::printFloat(double, unsigned char)+0x160>)
    dc04:	e7ec      	b.n	dbe0 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    dc06:	ee30 0b07 	vadd.f64	d0, d0, d7
    dc0a:	220a      	movs	r2, #10
    dc0c:	4628      	mov	r0, r5
    dc0e:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    dc12:	ee17 1a90 	vmov	r1, s15
}
    dc16:	b006      	add	sp, #24
    dc18:	ecbd 8b02 	vpop	{d8}
    dc1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dc20:	f7ff be9a 	b.w	d958 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    dc24:	f3af 8000 	nop.w
    dc28:	ffffffff 	.word	0xffffffff
    dc2c:	7fefffff 	.word	0x7fefffff
    dc30:	e0000000 	.word	0xe0000000
    dc34:	41efffff 	.word	0x41efffff
    dc38:	e0000000 	.word	0xe0000000
    dc3c:	c1efffff 	.word	0xc1efffff
    dc40:	9999999a 	.word	0x9999999a
    dc44:	3fb99999 	.word	0x3fb99999
    dc48:	200012a4 	.word	0x200012a4
    dc4c:	200012a0 	.word	0x200012a0
    dc50:	2000129c 	.word	0x2000129c

0000dc54 <breakTime(unsigned long, DateTimeFields&)>:

  uint8_t year;
  uint8_t month, monthLength;
  unsigned long days;

  tm.sec = time % 60;
    dc54:	4a4d      	ldr	r2, [pc, #308]	; (dd8c <breakTime(unsigned long, DateTimeFields&)+0x138>)
{
    dc56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.sec = time % 60;
    dc5a:	fba2 4300 	umull	r4, r3, r2, r0
  time /= 24; // now it is days
  tm.wday = ((time + 4) % 7);  // Sunday is day 0

  year = 0;
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    dc5e:	f240 1a6d 	movw	sl, #365	; 0x16d
    dc62:	4f4b      	ldr	r7, [pc, #300]	; (dd90 <breakTime(unsigned long, DateTimeFields&)+0x13c>)
  tm.sec = time % 60;
    dc64:	095b      	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    dc66:	f8df 8138 	ldr.w	r8, [pc, #312]	; dda0 <breakTime(unsigned long, DateTimeFields&)+0x14c>
    dc6a:	f8df 9138 	ldr.w	r9, [pc, #312]	; dda4 <breakTime(unsigned long, DateTimeFields&)+0x150>
  tm.min = time % 60;
    dc6e:	fba2 4203 	umull	r4, r2, r2, r3
  tm.sec = time % 60;
    dc72:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
  tm.min = time % 60;
    dc76:	0952      	lsrs	r2, r2, #5
  tm.sec = time % 60;
    dc78:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
  tm.hour = time % 24;
    dc7c:	4c45      	ldr	r4, [pc, #276]	; (dd94 <breakTime(unsigned long, DateTimeFields&)+0x140>)
  tm.min = time % 60;
    dc7e:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
  tm.sec = time % 60;
    dc82:	7008      	strb	r0, [r1, #0]
  tm.min = time % 60;
    dc84:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
  tm.hour = time % 24;
    dc88:	fba4 5402 	umull	r5, r4, r4, r2
    dc8c:	0924      	lsrs	r4, r4, #4
  tm.min = time % 60;
    dc8e:	704b      	strb	r3, [r1, #1]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    dc90:	4b41      	ldr	r3, [pc, #260]	; (dd98 <breakTime(unsigned long, DateTimeFields&)+0x144>)
    dc92:	1d25      	adds	r5, r4, #4
  tm.hour = time % 24;
    dc94:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    dc98:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    dc9c:	fba3 0305 	umull	r0, r3, r3, r5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    dca0:	2000      	movs	r0, #0
  tm.hour = time % 24;
    dca2:	708a      	strb	r2, [r1, #2]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    dca4:	1aea      	subs	r2, r5, r3
    dca6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  days = 0;
    dcaa:	4602      	mov	r2, r0
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    dcac:	089b      	lsrs	r3, r3, #2
    dcae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    dcb2:	1aed      	subs	r5, r5, r3
    dcb4:	70cd      	strb	r5, [r1, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    dcb6:	fa5f fe80 	uxtb.w	lr, r0
    dcba:	f240 1c6d 	movw	ip, #365	; 0x16d
    dcbe:	f20e 73b2 	addw	r3, lr, #1970	; 0x7b2
    dcc2:	f013 0503 	ands.w	r5, r3, #3
    dcc6:	fb07 f603 	mul.w	r6, r7, r3
    dcca:	d108      	bne.n	dcde <breakTime(unsigned long, DateTimeFields&)+0x8a>
    dccc:	ebb8 0fb6 	cmp.w	r8, r6, ror #2
    dcd0:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    dcd4:	d303      	bcc.n	dcde <breakTime(unsigned long, DateTimeFields&)+0x8a>
    dcd6:	ebb9 1f36 	cmp.w	r9, r6, ror #4
    dcda:	bf38      	it	cc
    dcdc:	46d4      	movcc	ip, sl
    dcde:	4462      	add	r2, ip
    dce0:	3001      	adds	r0, #1
    dce2:	4294      	cmp	r4, r2
    dce4:	d2e7      	bcs.n	dcb6 <breakTime(unsigned long, DateTimeFields&)+0x62>
    year++;
  }
  tm.year = year + 70; // year is offset from 1970
    dce6:	f10e 0e46 	add.w	lr, lr, #70	; 0x46

  days -= LEAP_YEAR(year) ? 366 : 365;
    dcea:	4e2c      	ldr	r6, [pc, #176]	; (dd9c <breakTime(unsigned long, DateTimeFields&)+0x148>)
  tm.year = year + 70; // year is offset from 1970
    dcec:	f881 e006 	strb.w	lr, [r1, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    dcf0:	fba6 0603 	umull	r0, r6, r6, r3
    dcf4:	b385      	cbz	r5, dd58 <breakTime(unsigned long, DateTimeFields&)+0x104>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    dcf6:	0977      	lsrs	r7, r6, #5
    dcf8:	f04f 0c64 	mov.w	ip, #100	; 0x64
    dcfc:	f44f 70c8 	mov.w	r0, #400	; 0x190
    dd00:	09f6      	lsrs	r6, r6, #7
    dd02:	fb0c 3717 	mls	r7, ip, r7, r3
    dd06:	fb00 3616 	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    dd0a:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    dd0e:	1aa4      	subs	r4, r4, r2
    dd10:	2300      	movs	r3, #0
    dd12:	2201      	movs	r2, #1
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    dd14:	f8df e090 	ldr.w	lr, [pc, #144]	; dda8 <breakTime(unsigned long, DateTimeFields&)+0x154>
  time  -= days; // now it is days in this year, starting at 0
    dd18:	4420      	add	r0, r4
  for (month=0; month<12; month++) {
    dd1a:	e00a      	b.n	dd32 <breakTime(unsigned long, DateTimeFields&)+0xde>
    }

    if (time >= monthLength) {
    dd1c:	f813 400e 	ldrb.w	r4, [r3, lr]
    dd20:	4284      	cmp	r4, r0
    dd22:	d80e      	bhi.n	dd42 <breakTime(unsigned long, DateTimeFields&)+0xee>
  for (month=0; month<12; month++) {
    dd24:	2a0c      	cmp	r2, #12
      time -= monthLength;
    dd26:	eba0 0004 	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    dd2a:	d00b      	beq.n	dd44 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    dd2c:	3201      	adds	r2, #1
    dd2e:	3301      	adds	r3, #1
    dd30:	b2d2      	uxtb	r2, r2
    if (month==1) { // february
    dd32:	2b01      	cmp	r3, #1
    dd34:	fa5f fc83 	uxtb.w	ip, r3
    dd38:	d1f0      	bne.n	dd1c <breakTime(unsigned long, DateTimeFields&)+0xc8>
      if (LEAP_YEAR(year)) {
    dd3a:	b945      	cbnz	r5, dd4e <breakTime(unsigned long, DateTimeFields&)+0xfa>
    dd3c:	b1cf      	cbz	r7, dd72 <breakTime(unsigned long, DateTimeFields&)+0x11e>
    dd3e:	241d      	movs	r4, #29
    dd40:	e006      	b.n	dd50 <breakTime(unsigned long, DateTimeFields&)+0xfc>
    dd42:	4662      	mov	r2, ip
    } else {
        break;
    }
  }
  tm.mon = month;  // jan is month 0
  tm.mday = time + 1;     // day of month
    dd44:	3001      	adds	r0, #1
  tm.mon = month;  // jan is month 0
    dd46:	714a      	strb	r2, [r1, #5]
  tm.mday = time + 1;     // day of month
    dd48:	7108      	strb	r0, [r1, #4]
}
    dd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dd4e:	241c      	movs	r4, #28
    if (time >= monthLength) {
    dd50:	42a0      	cmp	r0, r4
    dd52:	d318      	bcc.n	dd86 <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    dd54:	1b00      	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    dd56:	e7e9      	b.n	dd2c <breakTime(unsigned long, DateTimeFields&)+0xd8>
  days -= LEAP_YEAR(year) ? 366 : 365;
    dd58:	2064      	movs	r0, #100	; 0x64
    dd5a:	0977      	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    dd5c:	09f6      	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    dd5e:	fb00 3717 	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    dd62:	f44f 70c8 	mov.w	r0, #400	; 0x190
    dd66:	fb00 3616 	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    dd6a:	b13f      	cbz	r7, dd7c <breakTime(unsigned long, DateTimeFields&)+0x128>
    dd6c:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    dd70:	e7cd      	b.n	dd0e <breakTime(unsigned long, DateTimeFields&)+0xba>
      if (LEAP_YEAR(year)) {
    dd72:	2e00      	cmp	r6, #0
    dd74:	bf14      	ite	ne
    dd76:	241c      	movne	r4, #28
    dd78:	241d      	moveq	r4, #29
    dd7a:	e7e9      	b.n	dd50 <breakTime(unsigned long, DateTimeFields&)+0xfc>
  days -= LEAP_YEAR(year) ? 366 : 365;
    dd7c:	2e00      	cmp	r6, #0
    dd7e:	d1c4      	bne.n	dd0a <breakTime(unsigned long, DateTimeFields&)+0xb6>
    dd80:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    dd84:	e7c3      	b.n	dd0e <breakTime(unsigned long, DateTimeFields&)+0xba>
    if (time >= monthLength) {
    dd86:	2201      	movs	r2, #1
    dd88:	e7dc      	b.n	dd44 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    dd8a:	bf00      	nop
    dd8c:	88888889 	.word	0x88888889
    dd90:	c28f5c29 	.word	0xc28f5c29
    dd94:	aaaaaaab 	.word	0xaaaaaaab
    dd98:	24924925 	.word	0x24924925
    dd9c:	51eb851f 	.word	0x51eb851f
    dda0:	028f5c28 	.word	0x028f5c28
    dda4:	00a3d70a 	.word	0x00a3d70a
    dda8:	200011cc 	.word	0x200011cc

0000ddac <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    ddac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    ddae:	2600      	movs	r6, #0
String::String(const char *cstr)
    ddb0:	4604      	mov	r4, r0
	capacity = 0;
    ddb2:	e9c0 6600 	strd	r6, r6, [r0]
	len = 0;
    ddb6:	6086      	str	r6, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    ddb8:	b129      	cbz	r1, ddc6 <String::String(char const*)+0x1a>
    ddba:	4608      	mov	r0, r1
    ddbc:	460d      	mov	r5, r1
    ddbe:	f004 fbbf 	bl	12540 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    ddc2:	4607      	mov	r7, r0
    ddc4:	b908      	cbnz	r0, ddca <String::String(char const*)+0x1e>
}
    ddc6:	4620      	mov	r0, r4
    ddc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    ddca:	3001      	adds	r0, #1
    ddcc:	f002 f8ba 	bl	ff44 <malloc>
	if (newbuffer) {
    ddd0:	2800      	cmp	r0, #0
    ddd2:	d0f8      	beq.n	ddc6 <String::String(char const*)+0x1a>
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
    ddd4:	4629      	mov	r1, r5
		if (len == 0) buffer[0] = 0;
    ddd6:	7006      	strb	r6, [r0, #0]
		buffer = newbuffer;
    ddd8:	6020      	str	r0, [r4, #0]
	len = length;
    ddda:	e9c4 7701 	strd	r7, r7, [r4, #4]
	strcpy(buffer, cstr);
    ddde:	f004 fabd 	bl	1235c <strcpy>
}
    dde2:	4620      	mov	r0, r4
    dde4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dde6:	bf00      	nop

0000dde8 <String::~String()>:
String::~String()
    dde8:	b510      	push	{r4, lr}
    ddea:	4604      	mov	r4, r0
	free(buffer);
    ddec:	6800      	ldr	r0, [r0, #0]
    ddee:	f002 f8b1 	bl	ff54 <free>
}
    ddf2:	4620      	mov	r0, r4
    ddf4:	bd10      	pop	{r4, pc}
    ddf6:	bf00      	nop

0000ddf8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    ddf8:	b1c2      	cbz	r2, de2c <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    ddfa:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    ddfc:	fab1 f681 	clz	r6, r1
    de00:	460c      	mov	r4, r1
    de02:	0976      	lsrs	r6, r6, #5
    de04:	b119      	cbz	r1, de0e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    de06:	6885      	ldr	r5, [r0, #8]
    de08:	429d      	cmp	r5, r3
    de0a:	d801      	bhi.n	de10 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    de0c:	700e      	strb	r6, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    de0e:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    de10:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    de12:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
	strncpy((char *)buf, buffer + index, n);
    de16:	6801      	ldr	r1, [r0, #0]
    de18:	4620      	mov	r0, r4
    de1a:	4565      	cmp	r5, ip
    de1c:	4419      	add	r1, r3
    de1e:	bf28      	it	cs
    de20:	4665      	movcs	r5, ip
    de22:	462a      	mov	r2, r5
    de24:	f004 f87a 	bl	11f1c <strncpy>
	buf[n] = 0;
    de28:	5566      	strb	r6, [r4, r5]
}
    de2a:	bd70      	pop	{r4, r5, r6, pc}
    de2c:	4770      	bx	lr
    de2e:	bf00      	nop

0000de30 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    de30:	49a2      	ldr	r1, [pc, #648]	; (e0bc <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    de32:	4ba3      	ldr	r3, [pc, #652]	; (e0c0 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    de34:	4288      	cmp	r0, r1
{
    de36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    de3a:	4ca2      	ldr	r4, [pc, #648]	; (e0c4 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    de3c:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    de3e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    de40:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    de44:	d91b      	bls.n	de7e <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    de46:	4ba0      	ldr	r3, [pc, #640]	; (e0c8 <set_arm_clock+0x298>)
    de48:	4298      	cmp	r0, r3
    de4a:	f240 8102 	bls.w	e052 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    de4e:	1ac3      	subs	r3, r0, r3
    de50:	499e      	ldr	r1, [pc, #632]	; (e0cc <set_arm_clock+0x29c>)
    de52:	0a1b      	lsrs	r3, r3, #8
    de54:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    de58:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    de5c:	09db      	lsrs	r3, r3, #7
    de5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    de62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    de66:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    de6a:	428b      	cmp	r3, r1
    de6c:	bf28      	it	cs
    de6e:	460b      	movcs	r3, r1
    de70:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    de74:	4b96      	ldr	r3, [pc, #600]	; (e0d0 <set_arm_clock+0x2a0>)
    de76:	fba3 3707 	umull	r3, r7, r3, r7
    de7a:	08ff      	lsrs	r7, r7, #3
    de7c:	e004      	b.n	de88 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    de7e:	4f95      	ldr	r7, [pc, #596]	; (e0d4 <set_arm_clock+0x2a4>)
    de80:	42b8      	cmp	r0, r7
    de82:	bf8c      	ite	hi
    de84:	270e      	movhi	r7, #14
    de86:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    de88:	498d      	ldr	r1, [pc, #564]	; (e0c0 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    de8a:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    de8e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    de92:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    de94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    de98:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    de9c:	d20c      	bcs.n	deb8 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    de9e:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    dea2:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    dea6:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    deaa:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    deae:	680b      	ldr	r3, [r1, #0]
    deb0:	2b00      	cmp	r3, #0
    deb2:	dafc      	bge.n	deae <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    deb4:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    deb8:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    debc:	d124      	bne.n	df08 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    debe:	4986      	ldr	r1, [pc, #536]	; (e0d8 <set_arm_clock+0x2a8>)
    dec0:	690c      	ldr	r4, [r1, #16]
    dec2:	4986      	ldr	r1, [pc, #536]	; (e0dc <set_arm_clock+0x2ac>)
    dec4:	43a1      	bics	r1, r4
    dec6:	f000 80ea 	beq.w	e09e <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    deca:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    dece:	4634      	mov	r4, r6
    ded0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    ded4:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    ded8:	d004      	beq.n	dee4 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    deda:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    dede:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    dee0:	4b77      	ldr	r3, [pc, #476]	; (e0c0 <set_arm_clock+0x290>)
    dee2:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    dee4:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    dee8:	d007      	beq.n	defa <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    deea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    deee:	4974      	ldr	r1, [pc, #464]	; (e0c0 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    def0:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    def2:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    def4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    def6:	071a      	lsls	r2, r3, #28
    def8:	d4fc      	bmi.n	def4 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    defa:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    defe:	4a70      	ldr	r2, [pc, #448]	; (e0c0 <set_arm_clock+0x290>)
    df00:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    df02:	6c93      	ldr	r3, [r2, #72]	; 0x48
    df04:	069b      	lsls	r3, r3, #26
    df06:	d4fc      	bmi.n	df02 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    df08:	4c75      	ldr	r4, [pc, #468]	; (e0e0 <set_arm_clock+0x2b0>)
    df0a:	42a0      	cmp	r0, r4
    df0c:	f200 80ce 	bhi.w	e0ac <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    df10:	f04f 0c01 	mov.w	ip, #1
    df14:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    df16:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    df18:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    df1c:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    df20:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    df24:	42a2      	cmp	r2, r4
    df26:	d818      	bhi.n	df5a <set_arm_clock+0x12a>
		if (div_arm < 8) {
    df28:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    df2c:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    df30:	f040 808d 	bne.w	e04e <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    df34:	f1bc 0f04 	cmp.w	ip, #4
    df38:	f200 8091 	bhi.w	e05e <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    df3c:	180a      	adds	r2, r1, r0
    df3e:	42a2      	cmp	r2, r4
    df40:	f200 80a4 	bhi.w	e08c <set_arm_clock+0x25c>
    df44:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    df48:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    df4a:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    df4e:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    df52:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    df56:	42a2      	cmp	r2, r4
    df58:	d9e6      	bls.n	df28 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    df5a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    df5e:	028c      	lsls	r4, r1, #10
    df60:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    df64:	485f      	ldr	r0, [pc, #380]	; (e0e4 <set_arm_clock+0x2b4>)
    df66:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    df68:	4a5f      	ldr	r2, [pc, #380]	; (e0e8 <set_arm_clock+0x2b8>)
    df6a:	4290      	cmp	r0, r2
    df6c:	d97f      	bls.n	e06e <set_arm_clock+0x23e>
    df6e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; e114 <set_arm_clock+0x2e4>
    df72:	226c      	movs	r2, #108	; 0x6c
    df74:	485d      	ldr	r0, [pc, #372]	; (e0ec <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    df76:	4d58      	ldr	r5, [pc, #352]	; (e0d8 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    df78:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    df7c:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    df80:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    df84:	f8df c190 	ldr.w	ip, [pc, #400]	; e118 <set_arm_clock+0x2e8>
    df88:	ea0e 0c0c 	and.w	ip, lr, ip
    df8c:	45d4      	cmp	ip, sl
    df8e:	d009      	beq.n	dfa4 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    df90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    df94:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    df98:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    df9c:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    df9e:	682a      	ldr	r2, [r5, #0]
    dfa0:	2a00      	cmp	r2, #0
    dfa2:	dafc      	bge.n	df9e <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    dfa4:	4a46      	ldr	r2, [pc, #280]	; (e0c0 <set_arm_clock+0x290>)
    dfa6:	6915      	ldr	r5, [r2, #16]
    dfa8:	f005 0507 	and.w	r5, r5, #7
    dfac:	429d      	cmp	r5, r3
    dfae:	d003      	beq.n	dfb8 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    dfb0:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    dfb2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dfb4:	03dd      	lsls	r5, r3, #15
    dfb6:	d4fc      	bmi.n	dfb2 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    dfb8:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    dfbc:	d009      	beq.n	dfd2 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    dfbe:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    dfc2:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    dfc6:	4a3e      	ldr	r2, [pc, #248]	; (e0c0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    dfc8:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    dfca:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    dfcc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dfce:	0799      	lsls	r1, r3, #30
    dfd0:	d4fc      	bmi.n	dfcc <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    dfd2:	4947      	ldr	r1, [pc, #284]	; (e0f0 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    dfd4:	4a47      	ldr	r2, [pc, #284]	; (e0f4 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    dfd6:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    dfd8:	4291      	cmp	r1, r2
    dfda:	d83c      	bhi.n	e056 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    dfdc:	4b46      	ldr	r3, [pc, #280]	; (e0f8 <set_arm_clock+0x2c8>)
    dfde:	09c9      	lsrs	r1, r1, #7
    dfe0:	fba3 3101 	umull	r3, r1, r3, r1
    dfe4:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    dfe6:	1e4b      	subs	r3, r1, #1
    dfe8:	021b      	lsls	r3, r3, #8
    dfea:	ea86 0203 	eor.w	r2, r6, r3
    dfee:	f412 7f40 	tst.w	r2, #768	; 0x300
    dff2:	d006      	beq.n	e002 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    dff4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    dff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    dffc:	4a30      	ldr	r2, [pc, #192]	; (e0c0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    dffe:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    e000:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    e002:	4a2f      	ldr	r2, [pc, #188]	; (e0c0 <set_arm_clock+0x290>)
    e004:	6953      	ldr	r3, [r2, #20]
    e006:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    e00a:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    e00c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    e00e:	069b      	lsls	r3, r3, #26
    e010:	d4fc      	bmi.n	e00c <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    e012:	4b3a      	ldr	r3, [pc, #232]	; (e0fc <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    e014:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    e016:	fba3 2300 	umull	r2, r3, r3, r0
    e01a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e01e:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    e022:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    e026:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    e02a:	4a35      	ldr	r2, [pc, #212]	; (e100 <set_arm_clock+0x2d0>)
    e02c:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    e02e:	4a35      	ldr	r2, [pc, #212]	; (e104 <set_arm_clock+0x2d4>)
    e030:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    e032:	4a35      	ldr	r2, [pc, #212]	; (e108 <set_arm_clock+0x2d8>)
    e034:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    e036:	d208      	bcs.n	e04a <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    e038:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    e03c:	4a21      	ldr	r2, [pc, #132]	; (e0c4 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    e03e:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    e042:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    e044:	6813      	ldr	r3, [r2, #0]
    e046:	2b00      	cmp	r3, #0
    e048:	dafc      	bge.n	e044 <set_arm_clock+0x214>
	}

	return frequency;
}
    e04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e04e:	4673      	mov	r3, lr
    e050:	e762      	b.n	df18 <set_arm_clock+0xe8>
    e052:	2712      	movs	r7, #18
    e054:	e718      	b.n	de88 <set_arm_clock+0x58>
    e056:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    e05a:	2104      	movs	r1, #4
    e05c:	e7c5      	b.n	dfea <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    e05e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    e062:	4820      	ldr	r0, [pc, #128]	; (e0e4 <set_arm_clock+0x2b4>)
    e064:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    e066:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    e068:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    e06a:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    e06e:	4a27      	ldr	r2, [pc, #156]	; (e10c <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    e070:	f8df a0a8 	ldr.w	sl, [pc, #168]	; e11c <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    e074:	fba2 2000 	umull	r2, r0, r2, r0
    e078:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    e07a:	4825      	ldr	r0, [pc, #148]	; (e110 <set_arm_clock+0x2e0>)
    e07c:	2a36      	cmp	r2, #54	; 0x36
    e07e:	bf38      	it	cc
    e080:	2236      	movcc	r2, #54	; 0x36
    e082:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    e086:	ea42 0a0a 	orr.w	sl, r2, sl
    e08a:	e774      	b.n	df76 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    e08c:	ea4f 248c 	mov.w	r4, ip, lsl #10
    e090:	2300      	movs	r3, #0
    e092:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    e096:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    e09a:	46ac      	mov	ip, r5
    e09c:	e762      	b.n	df64 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    e09e:	461d      	mov	r5, r3
    e0a0:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    e0a4:	4611      	mov	r1, r2
    e0a6:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    e0aa:	e713      	b.n	ded4 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    e0ac:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    e0ae:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    e0b2:	4602      	mov	r2, r0
    e0b4:	4631      	mov	r1, r6
    e0b6:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    e0b8:	46e6      	mov	lr, ip
    e0ba:	e753      	b.n	df64 <set_arm_clock+0x134>
    e0bc:	1f78a400 	.word	0x1f78a400
    e0c0:	400fc000 	.word	0x400fc000
    e0c4:	40080000 	.word	0x40080000
    e0c8:	23c34600 	.word	0x23c34600
    e0cc:	004cb223 	.word	0x004cb223
    e0d0:	51eb851f 	.word	0x51eb851f
    e0d4:	016e3600 	.word	0x016e3600
    e0d8:	400d8000 	.word	0x400d8000
    e0dc:	80003040 	.word	0x80003040
    e0e0:	269fb1ff 	.word	0x269fb1ff
    e0e4:	005b8d80 	.word	0x005b8d80
    e0e8:	4df67eff 	.word	0x4df67eff
    e0ec:	4d3f6400 	.word	0x4d3f6400
    e0f0:	08f0d17f 	.word	0x08f0d17f
    e0f4:	2cb4177f 	.word	0x2cb4177f
    e0f8:	00e5109f 	.word	0x00e5109f
    e0fc:	431bde83 	.word	0x431bde83
    e100:	20002a28 	.word	0x20002a28
    e104:	20002a24 	.word	0x20002a24
    e108:	20004a84 	.word	0x20004a84
    e10c:	165e9f81 	.word	0x165e9f81
    e110:	00b71b00 	.word	0x00b71b00
    e114:	8000206c 	.word	0x8000206c
    e118:	8001307f 	.word	0x8001307f
    e11c:	80002000 	.word	0x80002000

0000e120 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    e120:	b900      	cbnz	r0, e124 <delay+0x4>
    e122:	4770      	bx	lr
{
    e124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    e128:	2101      	movs	r1, #1
    e12a:	4681      	mov	r9, r0
    e12c:	4c21      	ldr	r4, [pc, #132]	; (e1b4 <delay+0x94>)
    e12e:	4d22      	ldr	r5, [pc, #136]	; (e1b8 <delay+0x98>)
    e130:	4e22      	ldr	r6, [pc, #136]	; (e1bc <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    e132:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    e136:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    e138:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    e13a:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    e13e:	2b00      	cmp	r3, #0
    e140:	d1f7      	bne.n	e132 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    e142:	491f      	ldr	r1, [pc, #124]	; (e1c0 <delay+0xa0>)
    e144:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    e146:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e14a:	f8df a078 	ldr.w	sl, [pc, #120]	; e1c4 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    e14e:	1a1b      	subs	r3, r3, r0
    e150:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    e152:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e156:	f8da 2000 	ldr.w	r2, [sl]
    e15a:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    e15e:	455a      	cmp	r2, fp
    e160:	bf94      	ite	ls
    e162:	4490      	addls	r8, r2
    e164:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    e166:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    e16a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    e16c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    e16e:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    e172:	2b00      	cmp	r3, #0
    e174:	d1f7      	bne.n	e166 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    e176:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e178:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    e17c:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    e17e:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e182:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    e186:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    e18a:	bf94      	ite	ls
    e18c:	4462      	addls	r2, ip
    e18e:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    e192:	eba2 0208 	sub.w	r2, r2, r8
    e196:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    e19a:	d306      	bcc.n	e1aa <delay+0x8a>
			if (--msec == 0) return;
    e19c:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    e1a0:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    e1a4:	d1df      	bne.n	e166 <delay+0x46>
}
    e1a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    e1aa:	f001 fc95 	bl	fad8 <yield>
		while ((micros() - start) >= 1000) {
    e1ae:	4904      	ldr	r1, [pc, #16]	; (e1c0 <delay+0xa0>)
    e1b0:	e7d9      	b.n	e166 <delay+0x46>
    e1b2:	bf00      	nop
    e1b4:	20004aa0 	.word	0x20004aa0
    e1b8:	20004a9c 	.word	0x20004a9c
    e1bc:	20004a98 	.word	0x20004a98
    e1c0:	e0001000 	.word	0xe0001000
    e1c4:	20004a84 	.word	0x20004a84

0000e1c8 <micros>:
{
    e1c8:	b430      	push	{r4, r5}
    e1ca:	4b0f      	ldr	r3, [pc, #60]	; (e208 <micros+0x40>)
    e1cc:	f04f 0c01 	mov.w	ip, #1
    e1d0:	4d0e      	ldr	r5, [pc, #56]	; (e20c <micros+0x44>)
    e1d2:	4c0f      	ldr	r4, [pc, #60]	; (e210 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    e1d4:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    e1d8:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    e1da:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    e1dc:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    e1e0:	2a00      	cmp	r2, #0
    e1e2:	d1f7      	bne.n	e1d4 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    e1e4:	4b0b      	ldr	r3, [pc, #44]	; (e214 <micros+0x4c>)
    e1e6:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e1e8:	4a0b      	ldr	r2, [pc, #44]	; (e218 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    e1ea:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    e1ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e1f0:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    e1f2:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e1f6:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    e1fa:	bc30      	pop	{r4, r5}
    e1fc:	428a      	cmp	r2, r1
    e1fe:	bf94      	ite	ls
    e200:	1880      	addls	r0, r0, r2
    e202:	1840      	addhi	r0, r0, r1
    e204:	4770      	bx	lr
    e206:	bf00      	nop
    e208:	20004aa0 	.word	0x20004aa0
    e20c:	20004a9c 	.word	0x20004a9c
    e210:	20004a98 	.word	0x20004a98
    e214:	e0001000 	.word	0xe0001000
    e218:	20004a84 	.word	0x20004a84

0000e21c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    e21c:	2827      	cmp	r0, #39	; 0x27
    e21e:	d816      	bhi.n	e24e <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    e220:	0102      	lsls	r2, r0, #4
    e222:	4b10      	ldr	r3, [pc, #64]	; (e264 <digitalWrite+0x48>)
    e224:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    e228:	589b      	ldr	r3, [r3, r2]
{
    e22a:	b410      	push	{r4}
	mask = p->mask;
    e22c:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    e22e:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    e230:	4214      	tst	r4, r2
    e232:	d005      	beq.n	e240 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    e234:	b961      	cbnz	r1, e250 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    e236:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    e23a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    e23e:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    e240:	6883      	ldr	r3, [r0, #8]
		if (val) {
    e242:	b151      	cbz	r1, e25a <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    e244:	4a08      	ldr	r2, [pc, #32]	; (e268 <digitalWrite+0x4c>)
}
    e246:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    e24a:	601a      	str	r2, [r3, #0]
}
    e24c:	4770      	bx	lr
    e24e:	4770      	bx	lr
    e250:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    e254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    e258:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    e25a:	4a04      	ldr	r2, [pc, #16]	; (e26c <digitalWrite+0x50>)
}
    e25c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    e260:	601a      	str	r2, [r3, #0]
}
    e262:	4770      	bx	lr
    e264:	20001a68 	.word	0x20001a68
    e268:	0001f038 	.word	0x0001f038
    e26c:	00013038 	.word	0x00013038

0000e270 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    e270:	2827      	cmp	r0, #39	; 0x27
    e272:	d80b      	bhi.n	e28c <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    e274:	4b06      	ldr	r3, [pc, #24]	; (e290 <digitalRead+0x20>)
    e276:	0102      	lsls	r2, r0, #4
    e278:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    e27c:	589a      	ldr	r2, [r3, r2]
    e27e:	68c3      	ldr	r3, [r0, #12]
    e280:	6892      	ldr	r2, [r2, #8]
    e282:	421a      	tst	r2, r3
    e284:	bf14      	ite	ne
    e286:	2001      	movne	r0, #1
    e288:	2000      	moveq	r0, #0
    e28a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    e28c:	2000      	movs	r0, #0
}
    e28e:	4770      	bx	lr
    e290:	20001a68 	.word	0x20001a68

0000e294 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    e294:	2827      	cmp	r0, #39	; 0x27
    e296:	d829      	bhi.n	e2ec <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    e298:	4b16      	ldr	r3, [pc, #88]	; (e2f4 <pinMode+0x60>)
    e29a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    e29c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    e29e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    e2a2:	589a      	ldr	r2, [r3, r2]
{
    e2a4:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    e2a6:	6853      	ldr	r3, [r2, #4]
    e2a8:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    e2aa:	d00e      	beq.n	e2ca <pinMode+0x36>
    e2ac:	2904      	cmp	r1, #4
    e2ae:	d00c      	beq.n	e2ca <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    e2b0:	ea23 0304 	bic.w	r3, r3, r4
    e2b4:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    e2b6:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    e2b8:	b1a9      	cbz	r1, e2e6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    e2ba:	2902      	cmp	r1, #2
    e2bc:	d017      	beq.n	e2ee <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    e2be:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    e2c0:	bf0c      	ite	eq
    e2c2:	4a0d      	ldreq	r2, [pc, #52]	; (e2f8 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    e2c4:	4a0d      	ldrne	r2, [pc, #52]	; (e2fc <pinMode+0x68>)
    e2c6:	601a      	str	r2, [r3, #0]
    e2c8:	e007      	b.n	e2da <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    e2ca:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    e2cc:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    e2ce:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    e2d0:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    e2d2:	d008      	beq.n	e2e6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    e2d4:	f640 0238 	movw	r2, #2104	; 0x838
    e2d8:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    e2da:	6843      	ldr	r3, [r0, #4]
    e2dc:	2215      	movs	r2, #21
}
    e2de:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    e2e2:	601a      	str	r2, [r3, #0]
}
    e2e4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    e2e6:	2238      	movs	r2, #56	; 0x38
    e2e8:	601a      	str	r2, [r3, #0]
    e2ea:	e7f6      	b.n	e2da <pinMode+0x46>
    e2ec:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    e2ee:	4a04      	ldr	r2, [pc, #16]	; (e300 <pinMode+0x6c>)
    e2f0:	601a      	str	r2, [r3, #0]
    e2f2:	e7f2      	b.n	e2da <pinMode+0x46>
    e2f4:	20001a68 	.word	0x20001a68
    e2f8:	00013038 	.word	0x00013038
    e2fc:	00010038 	.word	0x00010038
    e300:	0001f038 	.word	0x0001f038

0000e304 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    e304:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    e306:	f7f4 fa8f 	bl	2828 <setup>
	while (1) {
		loop();
    e30a:	f7f4 fa4d 	bl	27a8 <loop>
		yield();
    e30e:	f001 fbe3 	bl	fad8 <yield>
	while (1) {
    e312:	e7fa      	b.n	e30a <main+0x6>

0000e314 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    e314:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    e316:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    e31a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    e31e:	d16d      	bne.n	e3fc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e320:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    e322:	d341      	bcc.n	e3a8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e324:	f851 3b04 	ldr.w	r3, [r1], #4
    e328:	f840 3b04 	str.w	r3, [r0], #4
    e32c:	f851 3b04 	ldr.w	r3, [r1], #4
    e330:	f840 3b04 	str.w	r3, [r0], #4
    e334:	f851 3b04 	ldr.w	r3, [r1], #4
    e338:	f840 3b04 	str.w	r3, [r0], #4
    e33c:	f851 3b04 	ldr.w	r3, [r1], #4
    e340:	f840 3b04 	str.w	r3, [r0], #4
    e344:	f851 3b04 	ldr.w	r3, [r1], #4
    e348:	f840 3b04 	str.w	r3, [r0], #4
    e34c:	f851 3b04 	ldr.w	r3, [r1], #4
    e350:	f840 3b04 	str.w	r3, [r0], #4
    e354:	f851 3b04 	ldr.w	r3, [r1], #4
    e358:	f840 3b04 	str.w	r3, [r0], #4
    e35c:	f851 3b04 	ldr.w	r3, [r1], #4
    e360:	f840 3b04 	str.w	r3, [r0], #4
    e364:	f851 3b04 	ldr.w	r3, [r1], #4
    e368:	f840 3b04 	str.w	r3, [r0], #4
    e36c:	f851 3b04 	ldr.w	r3, [r1], #4
    e370:	f840 3b04 	str.w	r3, [r0], #4
    e374:	f851 3b04 	ldr.w	r3, [r1], #4
    e378:	f840 3b04 	str.w	r3, [r0], #4
    e37c:	f851 3b04 	ldr.w	r3, [r1], #4
    e380:	f840 3b04 	str.w	r3, [r0], #4
    e384:	f851 3b04 	ldr.w	r3, [r1], #4
    e388:	f840 3b04 	str.w	r3, [r0], #4
    e38c:	f851 3b04 	ldr.w	r3, [r1], #4
    e390:	f840 3b04 	str.w	r3, [r0], #4
    e394:	f851 3b04 	ldr.w	r3, [r1], #4
    e398:	f840 3b04 	str.w	r3, [r0], #4
    e39c:	f851 3b04 	ldr.w	r3, [r1], #4
    e3a0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e3a4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    e3a6:	d2bd      	bcs.n	e324 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    e3a8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    e3aa:	d311      	bcc.n	e3d0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e3ac:	f851 3b04 	ldr.w	r3, [r1], #4
    e3b0:	f840 3b04 	str.w	r3, [r0], #4
    e3b4:	f851 3b04 	ldr.w	r3, [r1], #4
    e3b8:	f840 3b04 	str.w	r3, [r0], #4
    e3bc:	f851 3b04 	ldr.w	r3, [r1], #4
    e3c0:	f840 3b04 	str.w	r3, [r0], #4
    e3c4:	f851 3b04 	ldr.w	r3, [r1], #4
    e3c8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    e3cc:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    e3ce:	d2ed      	bcs.n	e3ac <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    e3d0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    e3d2:	d305      	bcc.n	e3e0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    e3d4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    e3d8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    e3dc:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    e3de:	d2f9      	bcs.n	e3d4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    e3e0:	3204      	adds	r2, #4
	beq	.Ldone
    e3e2:	d008      	beq.n	e3f6 <memcpy+0xe2>

	lsls	r2, r2, #31
    e3e4:	07d2      	lsls	r2, r2, #31
	itt ne
    e3e6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    e3e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e3ec:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    e3f0:	d301      	bcc.n	e3f6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    e3f2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    e3f4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    e3f6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    e3f8:	4770      	bx	lr
    e3fa:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    e3fc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    e3fe:	d313      	bcc.n	e428 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    e400:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    e402:	d08d      	beq.n	e320 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    e404:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    e408:	d08a      	beq.n	e320 <memcpy+0xc>

	rsb	r3, #4
    e40a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    e40e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    e410:	07db      	lsls	r3, r3, #31
	itt ne
    e412:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    e414:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e418:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    e41c:	d380      	bcc.n	e320 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    e41e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    e422:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    e426:	e77b      	b.n	e320 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    e428:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    e42a:	d3d9      	bcc.n	e3e0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    e42c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    e42e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    e432:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    e436:	d2f9      	bcs.n	e42c <memcpy+0x118>

	ldrb	r3, [r1]
    e438:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    e43a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    e43c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    e43e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    e440:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    e442:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    e444:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    e446:	4770      	bx	lr

0000e448 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    e448:	f001 bd7c 	b.w	ff44 <malloc>

0000e44c <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    e44c:	f001 bd82 	b.w	ff54 <free>

0000e450 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    e450:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    e454:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    e456:	4666      	mov	r6, ip
	int i=0, j;
    e458:	2400      	movs	r4, #0
    e45a:	e000      	b.n	e45e <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    e45c:	3401      	adds	r4, #1
		digit = val % radix;
    e45e:	fbb0 f5f2 	udiv	r5, r0, r2
    e462:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e466:	2b09      	cmp	r3, #9
    e468:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    e46c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    e470:	fa5f fe8e 	uxtb.w	lr, lr
    e474:	bf98      	it	ls
    e476:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    e47a:	4290      	cmp	r0, r2
		val /= radix;
    e47c:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e47e:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    e482:	d2eb      	bcs.n	e45c <ultoa+0xc>
	}
	buf[i + 1] = 0;
    e484:	1c63      	adds	r3, r4, #1
    e486:	2200      	movs	r2, #0
    e488:	18c8      	adds	r0, r1, r3
    e48a:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    e48c:	b17c      	cbz	r4, e4ae <ultoa+0x5e>
		t = buf[j];
    e48e:	4662      	mov	r2, ip
    e490:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    e494:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    e498:	eba1 030c 	sub.w	r3, r1, ip
    e49c:	3202      	adds	r2, #2
		buf[j] = buf[i];
    e49e:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    e4a2:	3b01      	subs	r3, #1
    e4a4:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    e4a6:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    e4a8:	4423      	add	r3, r4
    e4aa:	429a      	cmp	r2, r3
    e4ac:	dbef      	blt.n	e48e <ultoa+0x3e>
	}
	return buf;
}
    e4ae:	4608      	mov	r0, r1
    e4b0:	bd70      	pop	{r4, r5, r6, pc}
    e4b2:	bf00      	nop

0000e4b4 <flexpwmWrite>:

#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
    e4b4:	f04f 0c01 	mov.w	ip, #1
    e4b8:	fa0c fc01 	lsl.w	ip, ip, r1
	uint32_t modulo = p->SM[submodule].VAL1;
    e4bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e4c0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
    e4c4:	b570      	push	{r4, r5, r6, lr}
	uint32_t modulo = p->SM[submodule].VAL1;
    e4c6:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
	uint16_t mask = 1 << submodule;
    e4ca:	fa1f f58c 	uxth.w	r5, ip
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    e4ce:	4c25      	ldr	r4, [pc, #148]	; (e564 <flexpwmWrite+0xb0>)
	uint32_t modulo = p->SM[submodule].VAL1;
    e4d0:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    e4d4:	7824      	ldrb	r4, [r4, #0]
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    e4d6:	012e      	lsls	r6, r5, #4
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    e4d8:	fb0e 3303 	mla	r3, lr, r3, r3
    e4dc:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    e4e0:	40e3      	lsrs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    e4e2:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
    e4e6:	4573      	cmp	r3, lr
    e4e8:	b2a4      	uxth	r4, r4
    e4ea:	bf28      	it	cs
    e4ec:	4673      	movcs	r3, lr
    e4ee:	4334      	orrs	r4, r6
	switch (channel) {
    e4f0:	2a01      	cmp	r2, #1
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    e4f2:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
    e4f6:	d00d      	beq.n	e514 <flexpwmWrite+0x60>
    e4f8:	2a02      	cmp	r2, #2
    e4fa:	d028      	beq.n	e54e <flexpwmWrite+0x9a>
    e4fc:	b1c2      	cbz	r2, e530 <flexpwmWrite+0x7c>
    e4fe:	f00c 020f 	and.w	r2, ip, #15
	  case 2: // B
		p->SM[submodule].VAL5 = cval;
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
		//printf(" write channel B\n");
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    e502:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
    e506:	fa1f fc8c 	uxth.w	ip, ip
    e50a:	ea4c 0c02 	orr.w	ip, ip, r2
    e50e:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
    e512:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL3 = cval;
    e514:	b29b      	uxth	r3, r3
    e516:	f00c 020f 	and.w	r2, ip, #15
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    e51a:	022d      	lsls	r5, r5, #8
		p->SM[submodule].VAL3 = cval;
    e51c:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    e51e:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    e522:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    e526:	b29b      	uxth	r3, r3
    e528:	432b      	orrs	r3, r5
    e52a:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    e52e:	e7e8      	b.n	e502 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL0 = modulo - cval;
    e530:	ebae 0e03 	sub.w	lr, lr, r3
    e534:	f00c 020f 	and.w	r2, ip, #15
    e538:	fa1f fe8e 	uxth.w	lr, lr
    e53c:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    e540:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    e544:	b29b      	uxth	r3, r3
    e546:	4313      	orrs	r3, r2
    e548:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    e54c:	e7d9      	b.n	e502 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL5 = cval;
    e54e:	b29b      	uxth	r3, r3
    e550:	f00c 020f 	and.w	r2, ip, #15
    e554:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
    e556:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    e55a:	b29b      	uxth	r3, r3
    e55c:	431e      	orrs	r6, r3
    e55e:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
    e562:	e7ce      	b.n	e502 <flexpwmWrite+0x4e>
    e564:	2000351b 	.word	0x2000351b

0000e568 <analogWrite>:

void analogWrite(uint8_t pin, int val)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
    e568:	2827      	cmp	r0, #39	; 0x27
    e56a:	d84b      	bhi.n	e604 <analogWrite+0x9c>
{
    e56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
    e56e:	4d2a      	ldr	r5, [pc, #168]	; (e618 <analogWrite+0xb0>)
    e570:	4604      	mov	r4, r0
	if (info->type == 1) {
    e572:	f815 2020 	ldrb.w	r2, [r5, r0, lsl #2]
	info = pwm_pin_info + pin;
    e576:	eb05 0580 	add.w	r5, r5, r0, lsl #2
	if (info->type == 1) {
    e57a:	2a01      	cmp	r2, #1
    e57c:	d02d      	beq.n	e5da <analogWrite+0x72>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
    e57e:	2a02      	cmp	r2, #2
    e580:	d13f      	bne.n	e602 <analogWrite+0x9a>
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    e582:	786b      	ldrb	r3, [r5, #1]
    e584:	f3c3 1001 	ubfx	r0, r3, #4, #2
    e588:	2803      	cmp	r0, #3
    e58a:	d03e      	beq.n	e60a <analogWrite+0xa2>
    e58c:	4a23      	ldr	r2, [pc, #140]	; (e61c <analogWrite+0xb4>)
    e58e:	eb02 3280 	add.w	r2, r2, r0, lsl #14
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerWrite(qtimer, info->module & 0x03, val);
    e592:	f003 0c03 	and.w	ip, r3, #3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    e596:	4822      	ldr	r0, [pc, #136]	; (e620 <analogWrite+0xb8>)
    e598:	b289      	uxth	r1, r1
    e59a:	4663      	mov	r3, ip
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    e59c:	eb02 1c4c 	add.w	ip, r2, ip, lsl #5
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    e5a0:	7806      	ldrb	r6, [r0, #0]
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    e5a2:	f8bc e006 	ldrh.w	lr, [ip, #6]
    e5a6:	0158      	lsls	r0, r3, #5
    e5a8:	f8bc 3010 	ldrh.w	r3, [ip, #16]
    e5ac:	fa1f fe8e 	uxth.w	lr, lr
    e5b0:	f1ce 1e01 	rsb	lr, lr, #65537	; 0x10001
    e5b4:	fa1e f383 	uxtah	r3, lr, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    e5b8:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
    e5bc:	fb0e f101 	mul.w	r1, lr, r1
    e5c0:	40f1      	lsrs	r1, r6
	if (high >= modulo - 1) high = modulo - 2;
    e5c2:	458e      	cmp	lr, r1
    e5c4:	d923      	bls.n	e60e <analogWrite+0xa6>
	uint32_t low = modulo - high; // low must 2 or higher
    e5c6:	1a5b      	subs	r3, r3, r1
	p->CH[submodule].LOAD = 65537 - low;
    e5c8:	f1c3 0301 	rsb	r3, r3, #1
    e5cc:	b29b      	uxth	r3, r3
	p->CH[submodule].CMPLD1 = high;
    e5ce:	b289      	uxth	r1, r1
    e5d0:	4402      	add	r2, r0
	p->CH[submodule].LOAD = 65537 - low;
    e5d2:	f8ac 3006 	strh.w	r3, [ip, #6]
	p->CH[submodule].CMPLD1 = high;
    e5d6:	8211      	strh	r1, [r2, #16]
}
    e5d8:	e00d      	b.n	e5f6 <analogWrite+0x8e>
		switch ((info->module >> 4) & 3) {
    e5da:	786a      	ldrb	r2, [r5, #1]
    e5dc:	f3c2 1301 	ubfx	r3, r2, #4, #2
    e5e0:	2b03      	cmp	r3, #3
    e5e2:	d010      	beq.n	e606 <analogWrite+0x9e>
    e5e4:	480f      	ldr	r0, [pc, #60]	; (e624 <analogWrite+0xbc>)
    e5e6:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
    e5ea:	b28b      	uxth	r3, r1
    e5ec:	f002 0103 	and.w	r1, r2, #3
    e5f0:	78aa      	ldrb	r2, [r5, #2]
    e5f2:	f7ff ff5f 	bl	e4b4 <flexpwmWrite>
	} else {
		return;
	}
	*(portConfigRegister(pin)) = info->muxval;
    e5f6:	4b0c      	ldr	r3, [pc, #48]	; (e628 <analogWrite+0xc0>)
    e5f8:	78ea      	ldrb	r2, [r5, #3]
    e5fa:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    e5fe:	685b      	ldr	r3, [r3, #4]
    e600:	601a      	str	r2, [r3, #0]
	// TODO: pad config register
}
    e602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e604:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
    e606:	4809      	ldr	r0, [pc, #36]	; (e62c <analogWrite+0xc4>)
    e608:	e7ef      	b.n	e5ea <analogWrite+0x82>
		switch ((info->module >> 4) & 3) {
    e60a:	4a09      	ldr	r2, [pc, #36]	; (e630 <analogWrite+0xc8>)
    e60c:	e7c1      	b.n	e592 <analogWrite+0x2a>
	if (high >= modulo - 1) high = modulo - 2;
    e60e:	1e99      	subs	r1, r3, #2
    e610:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e614:	e7db      	b.n	e5ce <analogWrite+0x66>
    e616:	bf00      	nop
    e618:	20001d1c 	.word	0x20001d1c
    e61c:	401dc000 	.word	0x401dc000
    e620:	2000351b 	.word	0x2000351b
    e624:	403dc000 	.word	0x403dc000
    e628:	20001a68 	.word	0x20001a68
    e62c:	403e8000 	.word	0x403e8000
    e630:	401e8000 	.word	0x401e8000

0000e634 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    e634:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    e636:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    e638:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    e63c:	4619      	mov	r1, r3
{
    e63e:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e640:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e644:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e648:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e64c:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    e650:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    e654:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    e656:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    e65a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    e65e:	b29b      	uxth	r3, r3
    e660:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    e664:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e668:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    e66c:	3101      	adds	r1, #1
    e66e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    e672:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e674:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e676:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    e67a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    e67c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    e67e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    e680:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    e682:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    e686:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    e688:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    e68a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    e68c:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    e68e:	d1eb      	bne.n	e668 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e690:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    e694:	b29b      	uxth	r3, r3
    e696:	f043 030f 	orr.w	r3, r3, #15
    e69a:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    e69e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    e6a2:	b29b      	uxth	r3, r3
    e6a4:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    e6a8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    e6ac:	bd10      	pop	{r4, pc}
    e6ae:	bf00      	nop

0000e6b0 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    e6b0:	4b37      	ldr	r3, [pc, #220]	; (e790 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    e6b2:	4a38      	ldr	r2, [pc, #224]	; (e794 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    e6b4:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    e6b6:	4838      	ldr	r0, [pc, #224]	; (e798 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    e6b8:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    e6bc:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    e6be:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e6c0:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    e6c4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e6c8:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e6cc:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    e6d0:	430a      	orrs	r2, r1
    e6d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    e6d6:	f7ff ffad 	bl	e634 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    e6da:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    e6de:	f7ff ffa9 	bl	e634 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    e6e2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    e6e6:	f7ff ffa5 	bl	e634 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    e6ea:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    e6ee:	f7ff ffa1 	bl	e634 <flexpwm_init>
	for (i=0; i < 4; i++) {
    e6f2:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    e6f4:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e6f8:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    e6fc:	4611      	mov	r1, r2
    e6fe:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    e702:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    e706:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    e708:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    e70a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    e70c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e70e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e712:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e714:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    e716:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    e71a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e71c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    e71e:	d1ee      	bne.n	e6fe <pwm_init+0x4e>
    e720:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    e722:	481e      	ldr	r0, [pc, #120]	; (e79c <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e724:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e728:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    e72c:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e72e:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e732:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    e736:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    e73a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    e73e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    e740:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    e742:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    e744:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e746:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e74a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e74c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    e74e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    e752:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e754:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    e756:	d1ee      	bne.n	e736 <pwm_init+0x86>
    e758:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    e75a:	4811      	ldr	r0, [pc, #68]	; (e7a0 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e75c:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e75e:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    e762:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e764:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e768:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    e76c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    e770:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    e774:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    e776:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    e778:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    e77a:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e77c:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e77e:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e780:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    e782:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    e786:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e788:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    e78c:	d1ee      	bne.n	e76c <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    e78e:	bd70      	pop	{r4, r5, r6, pc}
    e790:	400fc000 	.word	0x400fc000
    e794:	fc030000 	.word	0xfc030000
    e798:	403dc000 	.word	0x403dc000
    e79c:	401e0000 	.word	0x401e0000
    e7a0:	401e4000 	.word	0x401e4000

0000e7a4 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    e7a4:	4a07      	ldr	r2, [pc, #28]	; (e7c4 <rtc_get+0x20>)
    e7a6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    e7a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    e7aa:	4619      	mov	r1, r3
    e7ac:	4684      	mov	ip, r0
    e7ae:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    e7b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    e7b2:	4299      	cmp	r1, r3
    e7b4:	d1f9      	bne.n	e7aa <rtc_get+0x6>
    e7b6:	4584      	cmp	ip, r0
    e7b8:	d1f7      	bne.n	e7aa <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    e7ba:	0bdb      	lsrs	r3, r3, #15
}
    e7bc:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    e7c0:	4770      	bx	lr
    e7c2:	bf00      	nop
    e7c4:	400d4000 	.word	0x400d4000

0000e7c8 <unused_interrupt_vector>:
	__disable_irq();
    e7c8:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    e7ca:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    e7ce:	4c52      	ldr	r4, [pc, #328]	; (e918 <unused_interrupt_vector+0x150>)
    e7d0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    e7d4:	f01e 0f04 	tst.w	lr, #4
    e7d8:	bf0c      	ite	eq
    e7da:	f3ef 8208 	mrseq	r2, MSP
    e7de:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    e7e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    e7e6:	4e4d      	ldr	r6, [pc, #308]	; (e91c <unused_interrupt_vector+0x154>)
	while (p < end) {
    e7e8:	4d4d      	ldr	r5, [pc, #308]	; (e920 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    e7ea:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    e7ee:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    e7f2:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    e7f6:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    e7fa:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    e7fe:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    e802:	6993      	ldr	r3, [r2, #24]
    e804:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    e808:	69d3      	ldr	r3, [r2, #28]
    e80a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    e80e:	f000 f8d3 	bl	e9b8 <tempmonGetTemp>
    e812:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    e816:	f7ff ffc5 	bl	e7a4 <rtc_get>
	info->len = sizeof(*info) / 4;
    e81a:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    e81c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
    e820:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    e824:	460b      	mov	r3, r1
    e826:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    e82a:	493e      	ldr	r1, [pc, #248]	; (e924 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    e82c:	1d30      	adds	r0, r6, #4
    e82e:	405a      	eors	r2, r3
    e830:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    e832:	f002 0301 	and.w	r3, r2, #1
    e836:	3c01      	subs	r4, #1
    e838:	fb01 f303 	mul.w	r3, r1, r3
    e83c:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    e840:	d1f7      	bne.n	e832 <unused_interrupt_vector+0x6a>
	while (p < end) {
    e842:	42a8      	cmp	r0, r5
    e844:	d002      	beq.n	e84c <unused_interrupt_vector+0x84>
		crc ^= *p++;
    e846:	6873      	ldr	r3, [r6, #4]
    e848:	4606      	mov	r6, r0
    e84a:	e7ef      	b.n	e82c <unused_interrupt_vector+0x64>
	info->crc = crc;
    e84c:	4b32      	ldr	r3, [pc, #200]	; (e918 <unused_interrupt_vector+0x150>)
    e84e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    e852:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e856:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e85a:	4930      	ldr	r1, [pc, #192]	; (e91c <unused_interrupt_vector+0x154>)
    e85c:	4a32      	ldr	r2, [pc, #200]	; (e928 <unused_interrupt_vector+0x160>)
    e85e:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    e862:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    e866:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e86a:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    e86e:	4a2f      	ldr	r2, [pc, #188]	; (e92c <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    e870:	2502      	movs	r5, #2
    e872:	482f      	ldr	r0, [pc, #188]	; (e930 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    e874:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e876:	492f      	ldr	r1, [pc, #188]	; (e934 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    e878:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    e87c:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    e87e:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    e880:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e882:	482d      	ldr	r0, [pc, #180]	; (e938 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    e884:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    e888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e88c:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e88e:	680b      	ldr	r3, [r1, #0]
    e890:	4283      	cmp	r3, r0
    e892:	d83d      	bhi.n	e910 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    e894:	4d26      	ldr	r5, [pc, #152]	; (e930 <unused_interrupt_vector+0x168>)
    e896:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    e898:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e89c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
    e8a0:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    e8a2:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    e8a4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    e8a8:	4924      	ldr	r1, [pc, #144]	; (e93c <unused_interrupt_vector+0x174>)
    e8aa:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    e8ae:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    e8b2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    e8b6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    e8ba:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    e8be:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    e8c2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    e8c6:	e001      	b.n	e8cc <unused_interrupt_vector+0x104>
		usb_isr();
    e8c8:	f000 f968 	bl	eb9c <usb_isr>
		if (PIT_TFLG0) {
    e8cc:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    e8d0:	2b00      	cmp	r3, #0
    e8d2:	d0f9      	beq.n	e8c8 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    e8d4:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    e8d6:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    e8da:	2c4f      	cmp	r4, #79	; 0x4f
    e8dc:	d9f4      	bls.n	e8c8 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    e8de:	4b18      	ldr	r3, [pc, #96]	; (e940 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    e8e0:	2002      	movs	r0, #2
    e8e2:	4918      	ldr	r1, [pc, #96]	; (e944 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    e8e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    e8e8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    e8ec:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e8ee:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    e8f2:	b93b      	cbnz	r3, e904 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    e8f4:	4814      	ldr	r0, [pc, #80]	; (e948 <unused_interrupt_vector+0x180>)
    e8f6:	4915      	ldr	r1, [pc, #84]	; (e94c <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e8f8:	4a0d      	ldr	r2, [pc, #52]	; (e930 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    e8fa:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e8fc:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    e900:	2b00      	cmp	r3, #0
    e902:	d0fa      	beq.n	e8fa <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    e904:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e908:	4a11      	ldr	r2, [pc, #68]	; (e950 <unused_interrupt_vector+0x188>)
    e90a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    e90e:	e7fe      	b.n	e90e <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e910:	f7ff fa8e 	bl	de30 <set_arm_clock>
    e914:	e7be      	b.n	e894 <unused_interrupt_vector+0xcc>
    e916:	bf00      	nop
    e918:	2027ff00 	.word	0x2027ff00
    e91c:	2027ff80 	.word	0x2027ff80
    e920:	2027ffa8 	.word	0x2027ffa8
    e924:	edb88320 	.word	0xedb88320
    e928:	2027ffa0 	.word	0x2027ffa0
    e92c:	400fc000 	.word	0x400fc000
    e930:	40084000 	.word	0x40084000
    e934:	20002a28 	.word	0x20002a28
    e938:	0bcd3d80 	.word	0x0bcd3d80
    e93c:	00249f00 	.word	0x00249f00
    e940:	400d9000 	.word	0x400d9000
    e944:	402e0000 	.word	0x402e0000
    e948:	400f8000 	.word	0x400f8000
    e94c:	0bad00f1 	.word	0x0bad00f1
    e950:	05fa0004 	.word	0x05fa0004

0000e954 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    e954:	490a      	ldr	r1, [pc, #40]	; (e980 <_sbrk+0x2c>)
    e956:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    e958:	b138      	cbz	r0, e96a <_sbrk+0x16>
{
    e95a:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    e95c:	1813      	adds	r3, r2, r0
    e95e:	4809      	ldr	r0, [pc, #36]	; (e984 <_sbrk+0x30>)
    e960:	4283      	cmp	r3, r0
    e962:	d804      	bhi.n	e96e <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    e964:	4610      	mov	r0, r2
                __brkval = prev + incr;
    e966:	600b      	str	r3, [r1, #0]
}
    e968:	bd08      	pop	{r3, pc}
    e96a:	4610      	mov	r0, r2
    e96c:	4770      	bx	lr
                        errno = ENOMEM;
    e96e:	f003 fb75 	bl	1205c <__errno>
    e972:	230c      	movs	r3, #12
                        return (void *)-1;
    e974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
    e978:	6003      	str	r3, [r0, #0]
}
    e97a:	4610      	mov	r0, r2
    e97c:	bd08      	pop	{r3, pc}
    e97e:	bf00      	nop
    e980:	20002f14 	.word	0x20002f14
    e984:	20280000 	.word	0x20280000

0000e988 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    e988:	2000      	movs	r0, #0
    e98a:	4770      	bx	lr

0000e98c <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    e98c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e990:	4770      	bx	lr
    e992:	bf00      	nop

0000e994 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    e994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    e998:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    e99a:	604b      	str	r3, [r1, #4]
}
    e99c:	4770      	bx	lr
    e99e:	bf00      	nop

0000e9a0 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    e9a0:	2001      	movs	r0, #1
    e9a2:	4770      	bx	lr

0000e9a4 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    e9a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e9a8:	4770      	bx	lr
    e9aa:	bf00      	nop

0000e9ac <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    e9ac:	bf30      	wfi
    e9ae:	e7fd      	b.n	e9ac <__cxa_pure_virtual>

0000e9b0 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    e9b0:	bf30      	wfi
    e9b2:	e7fd      	b.n	e9b0 <abort>

0000e9b4 <Panic_Temp_isr>:
  unused_interrupt_vector();
    e9b4:	f7ff bf08 	b.w	e7c8 <unused_interrupt_vector>

0000e9b8 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    e9b8:	4a12      	ldr	r2, [pc, #72]	; (ea04 <tempmonGetTemp+0x4c>)
    e9ba:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    e9be:	075b      	lsls	r3, r3, #29
    e9c0:	d5fb      	bpl.n	e9ba <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    e9c2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    e9c6:	4810      	ldr	r0, [pc, #64]	; (ea08 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    e9c8:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    e9cc:	490f      	ldr	r1, [pc, #60]	; (ea0c <tempmonGetTemp+0x54>)
    e9ce:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    e9d2:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    e9d6:	ed91 6a00 	vldr	s12, [r1]
    e9da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    e9de:	4a0c      	ldr	r2, [pc, #48]	; (ea10 <tempmonGetTemp+0x58>)
    e9e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e9e4:	4b0b      	ldr	r3, [pc, #44]	; (ea14 <tempmonGetTemp+0x5c>)
    e9e6:	edd2 6a00 	vldr	s13, [r2]
    e9ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
    e9ee:	ed93 7a00 	vldr	s14, [r3]
    e9f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    e9f6:	ee67 7a86 	vmul.f32	s15, s15, s12
    e9fa:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    e9fe:	ee37 0a40 	vsub.f32	s0, s14, s0
    ea02:	4770      	bx	lr
    ea04:	400d8100 	.word	0x400d8100
    ea08:	20004a74 	.word	0x20004a74
    ea0c:	20004a7c 	.word	0x20004a7c
    ea10:	20004a80 	.word	0x20004a80
    ea14:	20004a78 	.word	0x20004a78

0000ea18 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    ea18:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    ea1a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    ea1c:	b11b      	cbz	r3, ea26 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    ea1e:	6853      	ldr	r3, [r2, #4]
    ea20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    ea24:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    ea26:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    ea28:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    ea2a:	b33c      	cbz	r4, ea7c <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    ea2c:	4b1a      	ldr	r3, [pc, #104]	; (ea98 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    ea2e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    ea30:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    ea34:	420c      	tst	r4, r1
    ea36:	d11d      	bne.n	ea74 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    ea38:	4e18      	ldr	r6, [pc, #96]	; (ea9c <schedule_transfer+0x84>)
    ea3a:	6877      	ldr	r7, [r6, #4]
    ea3c:	e004      	b.n	ea48 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ea3e:	6874      	ldr	r4, [r6, #4]
    ea40:	1be4      	subs	r4, r4, r7
    ea42:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    ea46:	d20b      	bcs.n	ea60 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    ea48:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    ea4c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    ea50:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    ea54:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ea58:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    ea5c:	0464      	lsls	r4, r4, #17
    ea5e:	d5ee      	bpl.n	ea3e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    ea60:	400d      	ands	r5, r1
    ea62:	d107      	bne.n	ea74 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    ea64:	4c0c      	ldr	r4, [pc, #48]	; (ea98 <schedule_transfer+0x80>)
		endpoint->status = 0;
    ea66:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    ea6a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ea6e:	430b      	orrs	r3, r1
    ea70:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    ea74:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ea76:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    ea78:	bcf0      	pop	{r4, r5, r6, r7}
    ea7a:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    ea7c:	4d06      	ldr	r5, [pc, #24]	; (ea98 <schedule_transfer+0x80>)
	endpoint->status = 0;
    ea7e:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    ea82:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    ea86:	430b      	orrs	r3, r1
    ea88:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    ea8c:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    ea8e:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ea90:	b662      	cpsie	i
}
    ea92:	bcf0      	pop	{r4, r5, r6, r7}
    ea94:	4770      	bx	lr
    ea96:	bf00      	nop
    ea98:	402e0000 	.word	0x402e0000
    ea9c:	e0001000 	.word	0xe0001000

0000eaa0 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    eaa0:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    eaa2:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    eaa4:	b19d      	cbz	r5, eace <run_callbacks+0x2e>
    eaa6:	4606      	mov	r6, r0
    eaa8:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    eaaa:	2400      	movs	r4, #0
    eaac:	e003      	b.n	eab6 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    eaae:	6812      	ldr	r2, [r2, #0]
		count++;
    eab0:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    eab2:	2a01      	cmp	r2, #1
    eab4:	d00c      	beq.n	ead0 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    eab6:	6853      	ldr	r3, [r2, #4]
    eab8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    eabc:	d0f7      	beq.n	eaae <run_callbacks+0xe>
			ep->first_transfer = t;
    eabe:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    eac0:	b12c      	cbz	r4, eace <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    eac2:	4628      	mov	r0, r5
		ep->callback_function(first);
    eac4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    eac6:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    eac8:	4798      	blx	r3
	while (count) {
    eaca:	3c01      	subs	r4, #1
    eacc:	d1f9      	bne.n	eac2 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    eace:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    ead0:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    ead4:	e7f4      	b.n	eac0 <run_callbacks+0x20>
    ead6:	bf00      	nop

0000ead8 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    ead8:	b430      	push	{r4, r5}
	if (len > 0) {
    eada:	b9d9      	cbnz	r1, eb14 <endpoint0_transmit.constprop.0+0x3c>
    eadc:	4c1f      	ldr	r4, [pc, #124]	; (eb5c <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    eade:	4b20      	ldr	r3, [pc, #128]	; (eb60 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    eae0:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eae2:	4a20      	ldr	r2, [pc, #128]	; (eb64 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    eae4:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eae6:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    eaea:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    eaec:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    eaee:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eaf2:	2480      	movs	r4, #128	; 0x80
    eaf4:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eaf6:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    eafa:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    eafe:	481a      	ldr	r0, [pc, #104]	; (eb68 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    eb00:	432b      	orrs	r3, r5
    eb02:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    eb06:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    eb08:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    eb0c:	2b00      	cmp	r3, #0
    eb0e:	d1fb      	bne.n	eb08 <endpoint0_transmit.constprop.0+0x30>
}
    eb10:	bc30      	pop	{r4, r5}
    eb12:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    eb14:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    eb16:	4b15      	ldr	r3, [pc, #84]	; (eb6c <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    eb18:	4c10      	ldr	r4, [pc, #64]	; (eb5c <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    eb1a:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    eb1c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    eb20:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    eb22:	4a10      	ldr	r2, [pc, #64]	; (eb64 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    eb24:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    eb26:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    eb2a:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    eb2c:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    eb2e:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    eb32:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    eb34:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    eb36:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    eb3a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    eb3e:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    eb40:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    eb42:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    eb44:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    eb46:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    eb4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    eb4e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    eb52:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    eb56:	2b00      	cmp	r3, #0
    eb58:	d1fb      	bne.n	eb52 <endpoint0_transmit.constprop.0+0x7a>
    eb5a:	e7c0      	b.n	eade <endpoint0_transmit.constprop.0+0x6>
    eb5c:	20000000 	.word	0x20000000
    eb60:	20003b20 	.word	0x20003b20
    eb64:	402e0000 	.word	0x402e0000
    eb68:	200047d4 	.word	0x200047d4
    eb6c:	20003b40 	.word	0x20003b40

0000eb70 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    eb70:	4908      	ldr	r1, [pc, #32]	; (eb94 <usb_stop_sof_interrupts+0x24>)
    eb72:	2201      	movs	r2, #1
    eb74:	780b      	ldrb	r3, [r1, #0]
    eb76:	fa02 f000 	lsl.w	r0, r2, r0
    eb7a:	ea23 0000 	bic.w	r0, r3, r0
    eb7e:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    eb80:	b930      	cbnz	r0, eb90 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    eb82:	4a05      	ldr	r2, [pc, #20]	; (eb98 <usb_stop_sof_interrupts+0x28>)
    eb84:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    eb88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    eb8c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    eb90:	4770      	bx	lr
    eb92:	bf00      	nop
    eb94:	20004d59 	.word	0x20004d59
    eb98:	402e0000 	.word	0x402e0000

0000eb9c <usb_isr>:
{
    eb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    eba0:	4c97      	ldr	r4, [pc, #604]	; (ee00 <usb_isr+0x264>)
{
    eba2:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    eba4:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    eba8:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    ebaa:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    ebae:	d553      	bpl.n	ec58 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    ebb0:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    ebb4:	2a00      	cmp	r2, #0
    ebb6:	d04a      	beq.n	ec4e <usb_isr+0xb2>
    ebb8:	4e92      	ldr	r6, [pc, #584]	; (ee04 <usb_isr+0x268>)
    ebba:	f8df a260 	ldr.w	sl, [pc, #608]	; ee1c <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    ebbe:	f8df 9274 	ldr.w	r9, [pc, #628]	; ee34 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    ebc2:	f8df b274 	ldr.w	fp, [pc, #628]	; ee38 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    ebc6:	f8df 8274 	ldr.w	r8, [pc, #628]	; ee3c <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    ebca:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    ebce:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    ebd2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ebd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ebda:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    ebde:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ebe2:	049d      	lsls	r5, r3, #18
    ebe4:	d5f5      	bpl.n	ebd2 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    ebe6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ebea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    ebee:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    ebf2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    ebf6:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    ebfa:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    ebfe:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    ec02:	d1fa      	bne.n	ebfa <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    ec04:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    ec06:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    ec08:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    ec0c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    ec10:	f000 81cf 	beq.w	efb2 <usb_isr+0x416>
    ec14:	f200 80db 	bhi.w	edce <usb_isr+0x232>
    ec18:	f240 3102 	movw	r1, #770	; 0x302
    ec1c:	428b      	cmp	r3, r1
    ec1e:	f000 81e7 	beq.w	eff0 <usb_isr+0x454>
    ec22:	f200 809a 	bhi.w	ed5a <usb_isr+0x1be>
    ec26:	2b82      	cmp	r3, #130	; 0x82
    ec28:	f000 81cb 	beq.w	efc2 <usb_isr+0x426>
    ec2c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    ec30:	f040 808a 	bne.w	ed48 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    ec34:	f010 0f78 	tst.w	r0, #120	; 0x78
    ec38:	b283      	uxth	r3, r0
    ec3a:	f000 8203 	beq.w	f044 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    ec3e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    ec42:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    ec46:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    ec4a:	2a00      	cmp	r2, #0
    ec4c:	d1bd      	bne.n	ebca <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    ec4e:	4a6c      	ldr	r2, [pc, #432]	; (ee00 <usb_isr+0x264>)
    ec50:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    ec54:	2b00      	cmp	r3, #0
    ec56:	d142      	bne.n	ecde <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    ec58:	067e      	lsls	r6, r7, #25
    ec5a:	d516      	bpl.n	ec8a <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    ec5c:	4b68      	ldr	r3, [pc, #416]	; (ee00 <usb_isr+0x264>)
    ec5e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    ec62:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    ec66:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    ec6a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    ec6e:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    ec72:	2c00      	cmp	r4, #0
    ec74:	d1fb      	bne.n	ec6e <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    ec76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ec7a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    ec7e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    ec82:	f000 fd2d 	bl	f6e0 <usb_serial_reset>
		endpointN_notify_mask = 0;
    ec86:	4b60      	ldr	r3, [pc, #384]	; (ee08 <usb_isr+0x26c>)
    ec88:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    ec8a:	01fc      	lsls	r4, r7, #7
    ec8c:	d503      	bpl.n	ec96 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    ec8e:	4b5f      	ldr	r3, [pc, #380]	; (ee0c <usb_isr+0x270>)
    ec90:	681b      	ldr	r3, [r3, #0]
    ec92:	b103      	cbz	r3, ec96 <usb_isr+0xfa>
    ec94:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    ec96:	01b8      	lsls	r0, r7, #6
    ec98:	d503      	bpl.n	eca2 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    ec9a:	4b5d      	ldr	r3, [pc, #372]	; (ee10 <usb_isr+0x274>)
    ec9c:	681b      	ldr	r3, [r3, #0]
    ec9e:	b103      	cbz	r3, eca2 <usb_isr+0x106>
    eca0:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    eca2:	0779      	lsls	r1, r7, #29
    eca4:	d508      	bpl.n	ecb8 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    eca6:	4b56      	ldr	r3, [pc, #344]	; (ee00 <usb_isr+0x264>)
    eca8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    ecac:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    ecb0:	d047      	beq.n	ed42 <usb_isr+0x1a6>
			usb_high_speed = 1;
    ecb2:	4b58      	ldr	r3, [pc, #352]	; (ee14 <usb_isr+0x278>)
    ecb4:	2201      	movs	r2, #1
    ecb6:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    ecb8:	4b51      	ldr	r3, [pc, #324]	; (ee00 <usb_isr+0x264>)
    ecba:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    ecbe:	061a      	lsls	r2, r3, #24
    ecc0:	d50a      	bpl.n	ecd8 <usb_isr+0x13c>
    ecc2:	063b      	lsls	r3, r7, #24
    ecc4:	d508      	bpl.n	ecd8 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    ecc6:	4a54      	ldr	r2, [pc, #336]	; (ee18 <usb_isr+0x27c>)
    ecc8:	7813      	ldrb	r3, [r2, #0]
    ecca:	b12b      	cbz	r3, ecd8 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    eccc:	3b01      	subs	r3, #1
    ecce:	b2db      	uxtb	r3, r3
    ecd0:	7013      	strb	r3, [r2, #0]
    ecd2:	2b00      	cmp	r3, #0
    ecd4:	f000 8272 	beq.w	f1bc <usb_isr+0x620>
}
    ecd8:	b003      	add	sp, #12
    ecda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    ecde:	494f      	ldr	r1, [pc, #316]	; (ee1c <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    ece0:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    ece4:	6808      	ldr	r0, [r1, #0]
    ece6:	4203      	tst	r3, r0
    ece8:	f040 81d1 	bne.w	f08e <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    ecec:	4a46      	ldr	r2, [pc, #280]	; (ee08 <usb_isr+0x26c>)
    ecee:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    ecf0:	401c      	ands	r4, r3
    ecf2:	d0b1      	beq.n	ec58 <usb_isr+0xbc>
				while (tx) {
    ecf4:	ea5f 4814 	movs.w	r8, r4, lsr #16
    ecf8:	d010      	beq.n	ed1c <usb_isr+0x180>
    ecfa:	4e42      	ldr	r6, [pc, #264]	; (ee04 <usb_isr+0x268>)
					tx &= ~(1<<p);
    ecfc:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    ed00:	fa98 f5a8 	rbit	r5, r8
    ed04:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    ed08:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    ed0c:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    ed10:	3040      	adds	r0, #64	; 0x40
    ed12:	f7ff fec5 	bl	eaa0 <run_callbacks>
				while (tx) {
    ed16:	ea38 0805 	bics.w	r8, r8, r5
    ed1a:	d1f1      	bne.n	ed00 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    ed1c:	b2a4      	uxth	r4, r4
				while(rx) {
    ed1e:	2c00      	cmp	r4, #0
    ed20:	d09a      	beq.n	ec58 <usb_isr+0xbc>
    ed22:	4e38      	ldr	r6, [pc, #224]	; (ee04 <usb_isr+0x268>)
					rx &= ~(1<<p);
    ed24:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    ed28:	fa94 f5a4 	rbit	r5, r4
    ed2c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    ed30:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    ed34:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    ed38:	f7ff feb2 	bl	eaa0 <run_callbacks>
				while(rx) {
    ed3c:	43ac      	bics	r4, r5
    ed3e:	d1f3      	bne.n	ed28 <usb_isr+0x18c>
    ed40:	e78a      	b.n	ec58 <usb_isr+0xbc>
			usb_high_speed = 0;
    ed42:	4a34      	ldr	r2, [pc, #208]	; (ee14 <usb_isr+0x278>)
    ed44:	7013      	strb	r3, [r2, #0]
    ed46:	e7b7      	b.n	ecb8 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    ed48:	2b80      	cmp	r3, #128	; 0x80
    ed4a:	f47f af78 	bne.w	ec3e <usb_isr+0xa2>
		reply_buffer[0] = 0;
    ed4e:	4834      	ldr	r0, [pc, #208]	; (ee20 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    ed50:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    ed52:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    ed54:	f7ff fec0 	bl	ead8 <endpoint0_transmit.constprop.0>
		return;
    ed58:	e775      	b.n	ec46 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    ed5a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    ed5e:	f000 810b 	beq.w	ef78 <usb_isr+0x3dc>
    ed62:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    ed66:	2b01      	cmp	r3, #1
    ed68:	f63f af69 	bhi.w	ec3e <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    ed6c:	4b2d      	ldr	r3, [pc, #180]	; (ee24 <usb_isr+0x288>)
    ed6e:	685d      	ldr	r5, [r3, #4]
    ed70:	2d00      	cmp	r5, #0
    ed72:	f43f af64 	beq.w	ec3e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ed76:	fa1f fc8c 	uxth.w	ip, ip
    ed7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    ed7e:	e004      	b.n	ed8a <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    ed80:	691d      	ldr	r5, [r3, #16]
    ed82:	330c      	adds	r3, #12
    ed84:	2d00      	cmp	r5, #0
    ed86:	f43f af5a 	beq.w	ec3e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ed8a:	881a      	ldrh	r2, [r3, #0]
    ed8c:	4572      	cmp	r2, lr
    ed8e:	d1f7      	bne.n	ed80 <usb_isr+0x1e4>
    ed90:	885a      	ldrh	r2, [r3, #2]
    ed92:	4562      	cmp	r2, ip
    ed94:	d1f4      	bne.n	ed80 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    ed96:	ea4f 221e 	mov.w	r2, lr, lsr #8
    ed9a:	2a03      	cmp	r2, #3
    ed9c:	f000 81a5 	beq.w	f0ea <usb_isr+0x54e>
					datalen = list->length;
    eda0:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    eda2:	0c00      	lsrs	r0, r0, #16
    eda4:	4282      	cmp	r2, r0
    eda6:	bf28      	it	cs
    eda8:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    edaa:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    edae:	f040 81a1 	bne.w	f0f4 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    edb2:	4b18      	ldr	r3, [pc, #96]	; (ee14 <usb_isr+0x278>)
    edb4:	491c      	ldr	r1, [pc, #112]	; (ee28 <usb_isr+0x28c>)
    edb6:	7818      	ldrb	r0, [r3, #0]
    edb8:	4b1c      	ldr	r3, [pc, #112]	; (ee2c <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    edba:	9201      	str	r2, [sp, #4]
    edbc:	2800      	cmp	r0, #0
    edbe:	bf18      	it	ne
    edc0:	4619      	movne	r1, r3
    edc2:	481b      	ldr	r0, [pc, #108]	; (ee30 <usb_isr+0x294>)
    edc4:	f7ff faa6 	bl	e314 <memcpy>
    edc8:	4d19      	ldr	r5, [pc, #100]	; (ee30 <usb_isr+0x294>)
    edca:	9a01      	ldr	r2, [sp, #4]
    edcc:	e1e1      	b.n	f192 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    edce:	f242 2121 	movw	r1, #8737	; 0x2221
    edd2:	428b      	cmp	r3, r1
    edd4:	d07c      	beq.n	eed0 <usb_isr+0x334>
    edd6:	d933      	bls.n	ee40 <usb_isr+0x2a4>
    edd8:	f242 3121 	movw	r1, #8993	; 0x2321
    eddc:	428b      	cmp	r3, r1
    edde:	f000 8081 	beq.w	eee4 <usb_isr+0x348>
    ede2:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    ede6:	428b      	cmp	r3, r1
    ede8:	f47f af29 	bne.w	ec3e <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    edec:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    edf0:	b283      	uxth	r3, r0
    edf2:	f47f af24 	bne.w	ec3e <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    edf6:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    edfa:	f363 0c0f 	bfi	ip, r3, #0, #16
    edfe:	e7b5      	b.n	ed6c <usb_isr+0x1d0>
    ee00:	402e0000 	.word	0x402e0000
    ee04:	20000000 	.word	0x20000000
    ee08:	200047d8 	.word	0x200047d8
    ee0c:	20004ab4 	.word	0x20004ab4
    ee10:	20004ab8 	.word	0x20004ab8
    ee14:	20004d60 	.word	0x20004d60
    ee18:	20004d61 	.word	0x20004d61
    ee1c:	200047d4 	.word	0x200047d4
    ee20:	20004a38 	.word	0x20004a38
    ee24:	2000285c 	.word	0x2000285c
    ee28:	600027d8 	.word	0x600027d8
    ee2c:	6000283c 	.word	0x6000283c
    ee30:	20204300 	.word	0x20204300
    ee34:	200047cc 	.word	0x200047cc
    ee38:	b8c6cf5d 	.word	0xb8c6cf5d
    ee3c:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    ee40:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    ee44:	d066      	beq.n	ef14 <usb_isr+0x378>
    ee46:	f242 0121 	movw	r1, #8225	; 0x2021
    ee4a:	428b      	cmp	r3, r1
    ee4c:	f47f aef7 	bne.w	ec3e <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    ee50:	0c03      	lsrs	r3, r0, #16
    ee52:	2b07      	cmp	r3, #7
    ee54:	f47f aef3 	bne.w	ec3e <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    ee58:	4bb2      	ldr	r3, [pc, #712]	; (f124 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ee5a:	49b3      	ldr	r1, [pc, #716]	; (f128 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    ee5c:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ee5e:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    ee60:	49b2      	ldr	r1, [pc, #712]	; (f12c <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ee62:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ee64:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    ee68:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    ee6c:	2201      	movs	r2, #1
    ee6e:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ee70:	4aaf      	ldr	r2, [pc, #700]	; (f130 <usb_isr+0x594>)
    ee72:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ee74:	4aaf      	ldr	r2, [pc, #700]	; (f134 <usb_isr+0x598>)
    ee76:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    ee78:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    ee7c:	f041 0101 	orr.w	r1, r1, #1
    ee80:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ee84:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ee88:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ee8c:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ee8e:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    ee90:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ee94:	2b00      	cmp	r3, #0
    ee96:	d1fb      	bne.n	ee90 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    ee98:	4aa7      	ldr	r2, [pc, #668]	; (f138 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    ee9a:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    ee9c:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    ee9e:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    eea0:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    eea2:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eea4:	f248 0380 	movw	r3, #32896	; 0x8080
    eea8:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eeaa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    eeae:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    eeb2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    eeb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    eeba:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    eebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    eec2:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    eec6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    eeca:	2b00      	cmp	r3, #0
    eecc:	d1fb      	bne.n	eec6 <usb_isr+0x32a>
    eece:	e6ba      	b.n	ec46 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    eed0:	b280      	uxth	r0, r0
    eed2:	b938      	cbnz	r0, eee4 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    eed4:	4b99      	ldr	r3, [pc, #612]	; (f13c <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    eed6:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    eeda:	6819      	ldr	r1, [r3, #0]
    eedc:	4b98      	ldr	r3, [pc, #608]	; (f140 <usb_isr+0x5a4>)
    eede:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    eee0:	4b98      	ldr	r3, [pc, #608]	; (f144 <usb_isr+0x5a8>)
    eee2:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    eee4:	4b94      	ldr	r3, [pc, #592]	; (f138 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    eee6:	2200      	movs	r2, #0
    eee8:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    eeea:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    eeec:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    eeee:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    eef0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eef2:	2280      	movs	r2, #128	; 0x80
    eef4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eef6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    eefa:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    eefe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ef02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ef06:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    ef0a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ef0e:	2b00      	cmp	r3, #0
    ef10:	d1fb      	bne.n	ef0a <usb_isr+0x36e>
    ef12:	e698      	b.n	ec46 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    ef14:	f3c2 4207 	ubfx	r2, r2, #16, #8
    ef18:	4b8b      	ldr	r3, [pc, #556]	; (f148 <usb_isr+0x5ac>)
    ef1a:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    ef1c:	4b8b      	ldr	r3, [pc, #556]	; (f14c <usb_isr+0x5b0>)
    ef1e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    ef22:	4b8b      	ldr	r3, [pc, #556]	; (f150 <usb_isr+0x5b4>)
    ef24:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    ef28:	4b8a      	ldr	r3, [pc, #552]	; (f154 <usb_isr+0x5b8>)
    ef2a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    ef2e:	f000 fbd9 	bl	f6e4 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    ef32:	2280      	movs	r2, #128	; 0x80
    ef34:	4629      	mov	r1, r5
    ef36:	4888      	ldr	r0, [pc, #544]	; (f158 <usb_isr+0x5bc>)
    ef38:	f002 ff58 	bl	11dec <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    ef3c:	4b87      	ldr	r3, [pc, #540]	; (f15c <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ef3e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    ef40:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    ef44:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    ef48:	4b7b      	ldr	r3, [pc, #492]	; (f138 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    ef4a:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ef4c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    ef4e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ef50:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    ef52:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    ef54:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ef56:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    ef5a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ef5e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ef62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ef66:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ef6a:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    ef6e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ef72:	2b00      	cmp	r3, #0
    ef74:	d1fb      	bne.n	ef6e <usb_isr+0x3d2>
    ef76:	e666      	b.n	ec46 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    ef78:	4b6f      	ldr	r3, [pc, #444]	; (f138 <usb_isr+0x59c>)
    ef7a:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    ef7c:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    ef7e:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ef80:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    ef82:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ef84:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ef86:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ef88:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    ef8c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ef90:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ef94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ef98:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    ef9c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    efa0:	2b00      	cmp	r3, #0
    efa2:	d1fb      	bne.n	ef9c <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    efa4:	0c13      	lsrs	r3, r2, #16
    efa6:	065b      	lsls	r3, r3, #25
    efa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    efac:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    efb0:	e649      	b.n	ec46 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    efb2:	4b65      	ldr	r3, [pc, #404]	; (f148 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    efb4:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    efb6:	486a      	ldr	r0, [pc, #424]	; (f160 <usb_isr+0x5c4>)
    efb8:	781b      	ldrb	r3, [r3, #0]
    efba:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    efbc:	f7ff fd8c 	bl	ead8 <endpoint0_transmit.constprop.0>
		return;
    efc0:	e641      	b.n	ec46 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    efc2:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    efc4:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    efc8:	f47f ae39 	bne.w	ec3e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    efcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    efd0:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    efd4:	4a62      	ldr	r2, [pc, #392]	; (f160 <usb_isr+0x5c4>)
    efd6:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    efd8:	0618      	lsls	r0, r3, #24
    efda:	f100 809e 	bmi.w	f11a <usb_isr+0x57e>
    efde:	07cb      	lsls	r3, r1, #31
    efe0:	d501      	bpl.n	efe6 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    efe2:	2301      	movs	r3, #1
    efe4:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    efe6:	2102      	movs	r1, #2
    efe8:	485d      	ldr	r0, [pc, #372]	; (f160 <usb_isr+0x5c4>)
    efea:	f7ff fd75 	bl	ead8 <endpoint0_transmit.constprop.0>
		return;
    efee:	e62a      	b.n	ec46 <usb_isr+0xaa>
		if (endpoint > 7) break;
    eff0:	f010 0f78 	tst.w	r0, #120	; 0x78
    eff4:	b283      	uxth	r3, r0
    eff6:	f47f ae22 	bne.w	ec3e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    effa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    effe:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    f002:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    f006:	bf14      	ite	ne
    f008:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    f00c:	f043 0301 	orreq.w	r3, r3, #1
    f010:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    f014:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    f016:	4b48      	ldr	r3, [pc, #288]	; (f138 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    f018:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    f01a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    f01c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f01e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f020:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f022:	2280      	movs	r2, #128	; 0x80
    f024:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f026:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f02a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f02e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f036:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    f03a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f03e:	2b00      	cmp	r3, #0
    f040:	d1fb      	bne.n	f03a <usb_isr+0x49e>
    f042:	e600      	b.n	ec46 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    f044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    f048:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    f04c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    f050:	bf14      	ite	ne
    f052:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    f056:	f023 0301 	biceq.w	r3, r3, #1
    f05a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    f05e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    f060:	4b35      	ldr	r3, [pc, #212]	; (f138 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    f062:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    f064:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    f066:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f068:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f06a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f06c:	2280      	movs	r2, #128	; 0x80
    f06e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f070:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f074:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f078:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f07c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f080:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    f084:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f088:	2b00      	cmp	r3, #0
    f08a:	d1fb      	bne.n	f084 <usb_isr+0x4e8>
    f08c:	e5db      	b.n	ec46 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    f08e:	2000      	movs	r0, #0
    f090:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    f092:	4926      	ldr	r1, [pc, #152]	; (f12c <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    f094:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    f096:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    f098:	f242 0121 	movw	r1, #8225	; 0x2021
    f09c:	428c      	cmp	r4, r1
    f09e:	f47f ae25 	bne.w	ecec <usb_isr+0x150>
    f0a2:	b280      	uxth	r0, r0
    f0a4:	2800      	cmp	r0, #0
    f0a6:	f47f ae21 	bne.w	ecec <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    f0aa:	492e      	ldr	r1, [pc, #184]	; (f164 <usb_isr+0x5c8>)
    f0ac:	4c2e      	ldr	r4, [pc, #184]	; (f168 <usb_isr+0x5cc>)
    f0ae:	c903      	ldmia	r1, {r0, r1}
    f0b0:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    f0b2:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    f0b4:	ea4f 4111 	mov.w	r1, r1, lsr #16
    f0b8:	6020      	str	r0, [r4, #0]
    f0ba:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    f0bc:	f47f ae16 	bne.w	ecec <usb_isr+0x150>
	__disable_irq();
    f0c0:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    f0c2:	482a      	ldr	r0, [pc, #168]	; (f16c <usb_isr+0x5d0>)
    f0c4:	7801      	ldrb	r1, [r0, #0]
    f0c6:	f041 0108 	orr.w	r1, r1, #8
    f0ca:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    f0cc:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    f0d0:	060d      	lsls	r5, r1, #24
    f0d2:	d405      	bmi.n	f0e0 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    f0d4:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    f0d6:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    f0d8:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    f0dc:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    f0e0:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    f0e2:	4a23      	ldr	r2, [pc, #140]	; (f170 <usb_isr+0x5d4>)
    f0e4:	2150      	movs	r1, #80	; 0x50
    f0e6:	7011      	strb	r1, [r2, #0]
    f0e8:	e600      	b.n	ecec <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    f0ea:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    f0ec:	782a      	ldrb	r2, [r5, #0]
    f0ee:	4282      	cmp	r2, r0
    f0f0:	bf28      	it	cs
    f0f2:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    f0f4:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    f0f8:	d144      	bne.n	f184 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    f0fa:	4b1e      	ldr	r3, [pc, #120]	; (f174 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    f0fc:	4d1e      	ldr	r5, [pc, #120]	; (f178 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    f0fe:	7818      	ldrb	r0, [r3, #0]
    f100:	491e      	ldr	r1, [pc, #120]	; (f17c <usb_isr+0x5e0>)
    f102:	4b1f      	ldr	r3, [pc, #124]	; (f180 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    f104:	9201      	str	r2, [sp, #4]
    f106:	2800      	cmp	r0, #0
    f108:	bf18      	it	ne
    f10a:	4619      	movne	r1, r3
    f10c:	4628      	mov	r0, r5
    f10e:	f7ff f901 	bl	e314 <memcpy>
					usb_descriptor_buffer[1] = 7;
    f112:	2307      	movs	r3, #7
    f114:	706b      	strb	r3, [r5, #1]
    f116:	9a01      	ldr	r2, [sp, #4]
    f118:	e03b      	b.n	f192 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    f11a:	03c9      	lsls	r1, r1, #15
    f11c:	f53f af61 	bmi.w	efe2 <usb_isr+0x446>
    f120:	e761      	b.n	efe6 <usb_isr+0x44a>
    f122:	bf00      	nop
    f124:	20003b40 	.word	0x20003b40
    f128:	200057cc 	.word	0x200057cc
    f12c:	20003d10 	.word	0x20003d10
    f130:	00070080 	.word	0x00070080
    f134:	200067cc 	.word	0x200067cc
    f138:	20003b20 	.word	0x20003b20
    f13c:	20004a9c 	.word	0x20004a9c
    f140:	20004ab0 	.word	0x20004ab0
    f144:	20004d5e 	.word	0x20004d5e
    f148:	20004d5f 	.word	0x20004d5f
    f14c:	00cc0002 	.word	0x00cc0002
    f150:	000200c8 	.word	0x000200c8
    f154:	00c80002 	.word	0x00c80002
    f158:	20000080 	.word	0x20000080
    f15c:	74d59319 	.word	0x74d59319
    f160:	20004a38 	.word	0x20004a38
    f164:	200047cc 	.word	0x200047cc
    f168:	20004aa8 	.word	0x20004aa8
    f16c:	20004d59 	.word	0x20004d59
    f170:	20004d61 	.word	0x20004d61
    f174:	20004d60 	.word	0x20004d60
    f178:	20204300 	.word	0x20204300
    f17c:	6000283c 	.word	0x6000283c
    f180:	600027d8 	.word	0x600027d8
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    f184:	4629      	mov	r1, r5
    f186:	4d10      	ldr	r5, [pc, #64]	; (f1c8 <usb_isr+0x62c>)
    f188:	9201      	str	r2, [sp, #4]
    f18a:	4628      	mov	r0, r5
    f18c:	f7ff f8c2 	bl	e314 <memcpy>
    f190:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f192:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    f196:	4415      	add	r5, r2
	asm("dsb");
    f198:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    f19c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f1a0:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    f1a4:	3320      	adds	r3, #32
	} while (location < end_addr);
    f1a6:	429d      	cmp	r5, r3
    f1a8:	d8fa      	bhi.n	f1a0 <usb_isr+0x604>
	asm("dsb");
    f1aa:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f1ae:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    f1b2:	4805      	ldr	r0, [pc, #20]	; (f1c8 <usb_isr+0x62c>)
    f1b4:	4611      	mov	r1, r2
    f1b6:	f7ff fc8f 	bl	ead8 <endpoint0_transmit.constprop.0>
				return;
    f1ba:	e544      	b.n	ec46 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    f1bc:	2003      	movs	r0, #3
    f1be:	f7ff fcd7 	bl	eb70 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    f1c2:	f009 f95d 	bl	18480 <___reboot_Teensyduino__veneer>
    f1c6:	bf00      	nop
    f1c8:	20204300 	.word	0x20204300

0000f1cc <usb_config_rx>:
{
    f1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f1d0:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    f1d2:	1e83      	subs	r3, r0, #2
    f1d4:	2b02      	cmp	r3, #2
    f1d6:	d901      	bls.n	f1dc <usb_config_rx+0x10>
}
    f1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    f1dc:	f8df 904c 	ldr.w	r9, [pc, #76]	; f22c <usb_config_rx+0x60>
    f1e0:	4615      	mov	r5, r2
    f1e2:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    f1e4:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    f1e6:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    f1ea:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    f1ec:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    f1f0:	2100      	movs	r1, #0
    f1f2:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f1f6:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    f1f8:	f002 fdf8 	bl	11dec <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f1fc:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    f200:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f202:	0952      	lsrs	r2, r2, #5
    f204:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    f208:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    f20c:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    f210:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    f214:	2f00      	cmp	r7, #0
    f216:	d0df      	beq.n	f1d8 <usb_config_rx+0xc>
    f218:	4a03      	ldr	r2, [pc, #12]	; (f228 <usb_config_rx+0x5c>)
    f21a:	40b3      	lsls	r3, r6
    f21c:	6811      	ldr	r1, [r2, #0]
    f21e:	430b      	orrs	r3, r1
    f220:	6013      	str	r3, [r2, #0]
}
    f222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f226:	bf00      	nop
    f228:	200047d8 	.word	0x200047d8
    f22c:	20000000 	.word	0x20000000

0000f230 <usb_config_tx>:
{
    f230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f234:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    f236:	1e81      	subs	r1, r0, #2
    f238:	2902      	cmp	r1, #2
    f23a:	d901      	bls.n	f240 <usb_config_tx+0x10>
}
    f23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    f240:	01c7      	lsls	r7, r0, #7
    f242:	f8df 904c 	ldr.w	r9, [pc, #76]	; f290 <usb_config_tx+0x60>
    f246:	4692      	mov	sl, r2
    f248:	4604      	mov	r4, r0
    f24a:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    f24c:	223c      	movs	r2, #60	; 0x3c
    f24e:	2100      	movs	r1, #0
    f250:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    f252:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f256:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    f258:	f108 0004 	add.w	r0, r8, #4
    f25c:	f002 fdc6 	bl	11dec <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f260:	faba f28a 	clz	r2, sl
    f264:	0952      	lsrs	r2, r2, #5
    f266:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    f26a:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    f26e:	2201      	movs	r2, #1
	qh->callback_function = callback;
    f270:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    f274:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    f278:	2e00      	cmp	r6, #0
    f27a:	d0df      	beq.n	f23c <usb_config_tx+0xc>
    f27c:	4b03      	ldr	r3, [pc, #12]	; (f28c <usb_config_tx+0x5c>)
    f27e:	3410      	adds	r4, #16
    f280:	6819      	ldr	r1, [r3, #0]
    f282:	40a2      	lsls	r2, r4
    f284:	430a      	orrs	r2, r1
    f286:	601a      	str	r2, [r3, #0]
}
    f288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f28c:	200047d8 	.word	0x200047d8
    f290:	20000000 	.word	0x20000000

0000f294 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    f294:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    f296:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    f298:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    f29a:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    f29e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    f2a2:	b410      	push	{r4}
	transfer->next = 1;
    f2a4:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    f2a6:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    f2a8:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    f2ac:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    f2ae:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    f2b2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    f2b6:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    f2b8:	6181      	str	r1, [r0, #24]
}
    f2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    f2be:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    f2c2:	4770      	bx	lr

0000f2c4 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f2c4:	1e83      	subs	r3, r0, #2
{
    f2c6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f2c8:	2b02      	cmp	r3, #2
    f2ca:	d900      	bls.n	f2ce <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    f2cc:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    f2ce:	4b06      	ldr	r3, [pc, #24]	; (f2e8 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    f2d0:	f100 0110 	add.w	r1, r0, #16
    f2d4:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    f2d8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    f2dc:	fa0c f101 	lsl.w	r1, ip, r1
    f2e0:	3040      	adds	r0, #64	; 0x40
    f2e2:	f7ff bb99 	b.w	ea18 <schedule_transfer>
    f2e6:	bf00      	nop
    f2e8:	20000000 	.word	0x20000000

0000f2ec <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f2ec:	1e83      	subs	r3, r0, #2
{
    f2ee:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f2f0:	2b02      	cmp	r3, #2
    f2f2:	d900      	bls.n	f2f6 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    f2f4:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    f2f6:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    f2f8:	4b02      	ldr	r3, [pc, #8]	; (f304 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    f2fa:	4081      	lsls	r1, r0
    f2fc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    f300:	f7ff bb8a 	b.w	ea18 <schedule_transfer>
    f304:	20000000 	.word	0x20000000

0000f308 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    f308:	6840      	ldr	r0, [r0, #4]
#endif
}
    f30a:	4770      	bx	lr

0000f30c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    f30c:	4a12      	ldr	r2, [pc, #72]	; (f358 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    f30e:	4b13      	ldr	r3, [pc, #76]	; (f35c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    f310:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    f314:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    f318:	4298      	cmp	r0, r3
{
    f31a:	b510      	push	{r4, lr}
    f31c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    f31e:	d202      	bcs.n	f326 <usb_init_serialnumber+0x1a>
    f320:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f324:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    f326:	4c0e      	ldr	r4, [pc, #56]	; (f360 <usb_init_serialnumber+0x54>)
    f328:	a901      	add	r1, sp, #4
    f32a:	220a      	movs	r2, #10
    f32c:	f7ff f890 	bl	e450 <ultoa>
	for (i=0; i<10; i++) {
    f330:	a901      	add	r1, sp, #4
    f332:	2300      	movs	r3, #0
    f334:	4620      	mov	r0, r4
		char c = buf[i];
    f336:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    f33a:	3301      	adds	r3, #1
		if (!c) break;
    f33c:	b13a      	cbz	r2, f34e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    f33e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    f340:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    f344:	d1f7      	bne.n	f336 <usb_init_serialnumber+0x2a>
    f346:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    f348:	7023      	strb	r3, [r4, #0]
}
    f34a:	b004      	add	sp, #16
    f34c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    f34e:	005b      	lsls	r3, r3, #1
    f350:	b2db      	uxtb	r3, r3
    f352:	7023      	strb	r3, [r4, #0]
}
    f354:	b004      	add	sp, #16
    f356:	bd10      	pop	{r4, pc}
    f358:	401f4400 	.word	0x401f4400
    f35c:	00989680 	.word	0x00989680
    f360:	20003504 	.word	0x20003504

0000f364 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    f364:	f000 badc 	b.w	f920 <usb_serial_flush_input>

0000f368 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    f368:	f000 baac 	b.w	f8c4 <usb_serial_peekchar>

0000f36c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    f36c:	f000 bb10 	b.w	f990 <usb_serial_getchar>

0000f370 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    f370:	f000 baca 	b.w	f908 <usb_serial_available>

0000f374 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    f374:	f000 bb66 	b.w	fa44 <usb_serial_flush_output>

0000f378 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    f378:	f000 bb3c 	b.w	f9f4 <usb_serial_write_buffer_free>

0000f37c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    f37c:	4608      	mov	r0, r1
    f37e:	4611      	mov	r1, r2
    f380:	f000 bb2c 	b.w	f9dc <usb_serial_write>

0000f384 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    f384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    f386:	4c14      	ldr	r4, [pc, #80]	; (f3d8 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f388:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f38c:	4e13      	ldr	r6, [pc, #76]	; (f3dc <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f38e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    f392:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f396:	4f12      	ldr	r7, [pc, #72]	; (f3e0 <rx_queue_transfer+0x5c>)
    f398:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    f39c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f39e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f3a2:	4621      	mov	r1, r4
    f3a4:	883a      	ldrh	r2, [r7, #0]
    f3a6:	4630      	mov	r0, r6
    f3a8:	f7ff ff74 	bl	f294 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    f3ac:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    f3ae:	4423      	add	r3, r4
	asm("dsb");
    f3b0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    f3b4:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    f3b8:	3420      	adds	r4, #32
	} while (location < end_addr);
    f3ba:	42a3      	cmp	r3, r4
    f3bc:	d8fa      	bhi.n	f3b4 <rx_queue_transfer+0x30>
	asm("dsb");
    f3be:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f3c2:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    f3c6:	2003      	movs	r0, #3
    f3c8:	4631      	mov	r1, r6
    f3ca:	f7ff ff8f 	bl	f2ec <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    f3ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    f3d2:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    f3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3d8:	20204380 	.word	0x20204380
    f3dc:	20003b60 	.word	0x20003b60
    f3e0:	20004d42 	.word	0x20004d42

0000f3e4 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f3e4:	4b24      	ldr	r3, [pc, #144]	; (f478 <rx_event+0x94>)
{
    f3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f3ea:	881c      	ldrh	r4, [r3, #0]
    f3ec:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    f3ee:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f3f0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    f3f4:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    f3f6:	2c00      	cmp	r4, #0
    f3f8:	dd24      	ble.n	f444 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    f3fa:	4920      	ldr	r1, [pc, #128]	; (f47c <rx_event+0x98>)
		if (head != rx_tail) {
    f3fc:	4820      	ldr	r0, [pc, #128]	; (f480 <rx_event+0x9c>)
		uint32_t head = rx_head;
    f3fe:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    f400:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    f402:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    f404:	4e1f      	ldr	r6, [pc, #124]	; (f484 <rx_event+0xa0>)
		if (head != rx_tail) {
    f406:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    f408:	481f      	ldr	r0, [pc, #124]	; (f488 <rx_event+0xa4>)
		if (head != rx_tail) {
    f40a:	d007      	beq.n	f41c <rx_event+0x38>
			uint32_t ii = rx_list[head];
    f40c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    f410:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    f414:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    f418:	4294      	cmp	r4, r2
    f41a:	d918      	bls.n	f44e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    f41c:	3301      	adds	r3, #1
		rx_index[i] = 0;
    f41e:	2200      	movs	r2, #0
		rx_count[i] = len;
    f420:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    f424:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    f426:	4e19      	ldr	r6, [pc, #100]	; (f48c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    f428:	bf88      	it	hi
    f42a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    f42c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    f430:	bf98      	it	ls
    f432:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    f434:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    f436:	4b16      	ldr	r3, [pc, #88]	; (f490 <rx_event+0xac>)
		rx_head = head;
    f438:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    f43a:	681a      	ldr	r2, [r3, #0]
    f43c:	4414      	add	r4, r2
    f43e:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    f440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    f444:	4628      	mov	r0, r5
}
    f446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    f44a:	f7ff bf9b 	b.w	f384 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    f44e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    f452:	4910      	ldr	r1, [pc, #64]	; (f494 <rx_event+0xb0>)
    f454:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    f456:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    f458:	4408      	add	r0, r1
    f45a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    f45e:	f7fe ff59 	bl	e314 <memcpy>
				rx_available += len;
    f462:	4a0b      	ldr	r2, [pc, #44]	; (f490 <rx_event+0xac>)
				rx_queue_transfer(i);
    f464:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    f466:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    f46a:	6813      	ldr	r3, [r2, #0]
    f46c:	4423      	add	r3, r4
}
    f46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    f472:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    f474:	f7ff bf86 	b.w	f384 <rx_queue_transfer>
    f478:	20004d42 	.word	0x20004d42
    f47c:	20004d57 	.word	0x20004d57
    f480:	20004d58 	.word	0x20004d58
    f484:	20004a48 	.word	0x20004a48
    f488:	20004a68 	.word	0x20004a68
    f48c:	20004a58 	.word	0x20004a58
    f490:	20004a44 	.word	0x20004a44
    f494:	20204380 	.word	0x20204380

0000f498 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    f498:	4b1d      	ldr	r3, [pc, #116]	; (f510 <usb_serial_flush_callback+0x78>)
    f49a:	781a      	ldrb	r2, [r3, #0]
    f49c:	2a00      	cmp	r2, #0
    f49e:	d136      	bne.n	f50e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    f4a0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    f4a4:	4a1b      	ldr	r2, [pc, #108]	; (f514 <usb_serial_flush_callback+0x7c>)
    f4a6:	7812      	ldrb	r2, [r2, #0]
    f4a8:	b38a      	cbz	r2, f50e <usb_serial_flush_callback+0x76>
{
    f4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    f4ae:	4d1a      	ldr	r5, [pc, #104]	; (f518 <usb_serial_flush_callback+0x80>)
    f4b0:	882a      	ldrh	r2, [r5, #0]
    f4b2:	b352      	cbz	r2, f50a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    f4b4:	4e19      	ldr	r6, [pc, #100]	; (f51c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    f4b6:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    f4ba:	4f19      	ldr	r7, [pc, #100]	; (f520 <usb_serial_flush_callback+0x88>)
    f4bc:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f4be:	4c19      	ldr	r4, [pc, #100]	; (f524 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    f4c0:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f4c4:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    f4c8:	4642      	mov	r2, r8
    f4ca:	4638      	mov	r0, r7
    f4cc:	4621      	mov	r1, r4
    f4ce:	f7ff fee1 	bl	f294 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    f4d2:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    f4d6:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    f4da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f4de:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    f4e2:	3420      	adds	r4, #32
	} while (location < end_addr);
    f4e4:	42a2      	cmp	r2, r4
    f4e6:	d8fa      	bhi.n	f4de <usb_serial_flush_callback+0x46>
	asm("dsb");
    f4e8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f4ec:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    f4f0:	2004      	movs	r0, #4
    f4f2:	4639      	mov	r1, r7
    f4f4:	f7ff fee6 	bl	f2c4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    f4f8:	7833      	ldrb	r3, [r6, #0]
    f4fa:	3301      	adds	r3, #1
    f4fc:	b2db      	uxtb	r3, r3
    f4fe:	2b03      	cmp	r3, #3
    f500:	bf88      	it	hi
    f502:	2300      	movhi	r3, #0
    f504:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    f506:	2300      	movs	r3, #0
    f508:	802b      	strh	r3, [r5, #0]
}
    f50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f50e:	4770      	bx	lr
    f510:	20004d5d 	.word	0x20004d5d
    f514:	20004d5f 	.word	0x20004d5f
    f518:	20004d44 	.word	0x20004d44
    f51c:	20004d5c 	.word	0x20004d5c
    f520:	20003c60 	.word	0x20003c60
    f524:	20205380 	.word	0x20205380

0000f528 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f52c:	b085      	sub	sp, #20
	while (size > 0) {
    f52e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    f532:	2900      	cmp	r1, #0
    f534:	f000 80bf 	beq.w	f6b6 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    f538:	2300      	movs	r3, #0
    f53a:	4c60      	ldr	r4, [pc, #384]	; (f6bc <usb_serial_write.part.0+0x194>)
    f53c:	f8df 8198 	ldr.w	r8, [pc, #408]	; f6d8 <usb_serial_write.part.0+0x1b0>
    f540:	f8df a198 	ldr.w	sl, [pc, #408]	; f6dc <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    f544:	4f5e      	ldr	r7, [pc, #376]	; (f6c0 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    f546:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    f548:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    f54a:	4a5e      	ldr	r2, [pc, #376]	; (f6c4 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    f54c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    f54e:	4b5e      	ldr	r3, [pc, #376]	; (f6c8 <usb_serial_write.part.0+0x1a0>)
    f550:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    f552:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    f556:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    f55a:	2b00      	cmp	r3, #0
    f55c:	f040 80a7 	bne.w	f6ae <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    f560:	461e      	mov	r6, r3
		int waiting=0;
    f562:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    f564:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    f566:	4648      	mov	r0, r9
    f568:	f7ff fece 	bl	f308 <usb_transfer_status>
			if (!(status & 0x80)) {
    f56c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    f570:	f000 808c 	beq.w	f68c <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    f574:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    f578:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    f57c:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    f580:	b905      	cbnz	r5, f584 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    f582:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    f584:	2b00      	cmp	r3, #0
    f586:	d17d      	bne.n	f684 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    f588:	683b      	ldr	r3, [r7, #0]
    f58a:	1b9b      	subs	r3, r3, r6
    f58c:	2b78      	cmp	r3, #120	; 0x78
    f58e:	f200 8087 	bhi.w	f6a0 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    f592:	4b4e      	ldr	r3, [pc, #312]	; (f6cc <usb_serial_write.part.0+0x1a4>)
    f594:	781b      	ldrb	r3, [r3, #0]
    f596:	2b00      	cmp	r3, #0
    f598:	d074      	beq.n	f684 <usb_serial_write.part.0+0x15c>
			yield();
    f59a:	f000 fa9d 	bl	fad8 <yield>
			tx_noautoflush = 1;
    f59e:	2201      	movs	r2, #1
		while (!tx_available) {
    f5a0:	f8b8 3000 	ldrh.w	r3, [r8]
    f5a4:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    f5a6:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    f5a8:	2b00      	cmp	r3, #0
    f5aa:	d0dc      	beq.n	f566 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    f5ac:	4a46      	ldr	r2, [pc, #280]	; (f6c8 <usb_serial_write.part.0+0x1a0>)
    f5ae:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    f5b2:	7811      	ldrb	r1, [r2, #0]
    f5b4:	461a      	mov	r2, r3
    f5b6:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    f5ba:	4d45      	ldr	r5, [pc, #276]	; (f6d0 <usb_serial_write.part.0+0x1a8>)
    f5bc:	02c9      	lsls	r1, r1, #11
    f5be:	4428      	add	r0, r5
		if (size >= tx_available) {
    f5c0:	9d01      	ldr	r5, [sp, #4]
    f5c2:	4295      	cmp	r5, r2
    f5c4:	d217      	bcs.n	f5f6 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    f5c6:	9303      	str	r3, [sp, #12]
    f5c8:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    f5cc:	462a      	mov	r2, r5
    f5ce:	f7fe fea1 	bl	e314 <memcpy>
			tx_available -= size;
    f5d2:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    f5d4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    f5d8:	1b5b      	subs	r3, r3, r5
    f5da:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    f5de:	4b3d      	ldr	r3, [pc, #244]	; (f6d4 <usb_serial_write.part.0+0x1ac>)
    f5e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    f5e4:	f3bf 8f4f 	dsb	sy
			sent += size;
    f5e8:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    f5ea:	2300      	movs	r3, #0
			sent += size;
    f5ec:	4428      	add	r0, r5
		tx_noautoflush = 0;
    f5ee:	7023      	strb	r3, [r4, #0]
}
    f5f0:	b005      	add	sp, #20
    f5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f5f6:	4b36      	ldr	r3, [pc, #216]	; (f6d0 <usb_serial_write.part.0+0x1a8>)
    f5f8:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    f5fa:	9902      	ldr	r1, [sp, #8]
    f5fc:	f7fe fe8a 	bl	e314 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    f600:	2300      	movs	r3, #0
    f602:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f606:	4629      	mov	r1, r5
    f608:	4648      	mov	r0, r9
    f60a:	f7ff fe43 	bl	f294 <usb_prepare_transfer>
	asm("dsb");
    f60e:	f3bf 8f4f 	dsb	sy
    f612:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    f616:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    f61a:	4293      	cmp	r3, r2
    f61c:	bf34      	ite	cc
    f61e:	2301      	movcc	r3, #1
    f620:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    f622:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    f626:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    f62a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    f62e:	3520      	adds	r5, #32
	} while (location < end_addr);
    f630:	42ab      	cmp	r3, r5
    f632:	d1fa      	bne.n	f62a <usb_serial_write.part.0+0x102>
	asm("dsb");
    f634:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f638:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    f63c:	2004      	movs	r0, #4
    f63e:	4649      	mov	r1, r9
    f640:	f7ff fe40 	bl	f2c4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    f644:	4a20      	ldr	r2, [pc, #128]	; (f6c8 <usb_serial_write.part.0+0x1a0>)
    f646:	7813      	ldrb	r3, [r2, #0]
    f648:	3301      	adds	r3, #1
    f64a:	b2db      	uxtb	r3, r3
    f64c:	2b03      	cmp	r3, #3
    f64e:	bf84      	itt	hi
    f650:	2300      	movhi	r3, #0
    f652:	4a1d      	ldrhi	r2, [pc, #116]	; (f6c8 <usb_serial_write.part.0+0x1a0>)
    f654:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    f656:	f8b8 3000 	ldrh.w	r3, [r8]
    f65a:	9a01      	ldr	r2, [sp, #4]
    f65c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    f65e:	9a00      	ldr	r2, [sp, #0]
    f660:	441a      	add	r2, r3
			size -= tx_available;
    f662:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    f664:	9200      	str	r2, [sp, #0]
			data += tx_available;
    f666:	9a02      	ldr	r2, [sp, #8]
    f668:	441a      	add	r2, r3
			tx_available = 0;
    f66a:	2300      	movs	r3, #0
			data += tx_available;
    f66c:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    f66e:	4a19      	ldr	r2, [pc, #100]	; (f6d4 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    f670:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    f674:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    f678:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    f67c:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    f67e:	2900      	cmp	r1, #0
    f680:	f47f af62 	bne.w	f548 <usb_serial_write.part.0+0x20>
	return sent;
    f684:	9800      	ldr	r0, [sp, #0]
}
    f686:	b005      	add	sp, #20
    f688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    f68c:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    f690:	4b0d      	ldr	r3, [pc, #52]	; (f6c8 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    f692:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    f696:	7819      	ldrb	r1, [r3, #0]
				break;
    f698:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    f69a:	f8a8 2000 	strh.w	r2, [r8]
				break;
    f69e:	e78a      	b.n	f5b6 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    f6a0:	2301      	movs	r3, #1
				return sent;
    f6a2:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    f6a4:	f88a 3000 	strb.w	r3, [sl]
}
    f6a8:	b005      	add	sp, #20
    f6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    f6ae:	461a      	mov	r2, r3
    f6b0:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    f6b4:	e77f      	b.n	f5b6 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    f6b6:	9801      	ldr	r0, [sp, #4]
	return sent;
    f6b8:	e7e5      	b.n	f686 <usb_serial_write.part.0+0x15e>
    f6ba:	bf00      	nop
    f6bc:	20004d5d 	.word	0x20004d5d
    f6c0:	20004a9c 	.word	0x20004a9c
    f6c4:	20003c60 	.word	0x20003c60
    f6c8:	20004d5c 	.word	0x20004d5c
    f6cc:	20004d5f 	.word	0x20004d5f
    f6d0:	20205380 	.word	0x20205380
    f6d4:	402e0000 	.word	0x402e0000
    f6d8:	20004d44 	.word	0x20004d44
    f6dc:	20004d5b 	.word	0x20004d5b

0000f6e0 <usb_serial_reset>:
}
    f6e0:	4770      	bx	lr
    f6e2:	bf00      	nop

0000f6e4 <usb_serial_configure>:
	if (usb_high_speed) {
    f6e4:	4b2d      	ldr	r3, [pc, #180]	; (f79c <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f6e6:	2100      	movs	r1, #0
    f6e8:	2280      	movs	r2, #128	; 0x80
    f6ea:	482d      	ldr	r0, [pc, #180]	; (f7a0 <usb_serial_configure+0xbc>)
{
    f6ec:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    f6ee:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    f6f0:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    f6f2:	4d2c      	ldr	r5, [pc, #176]	; (f7a4 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    f6f4:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    f6f6:	4e2c      	ldr	r6, [pc, #176]	; (f7a8 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    f6f8:	bf0c      	ite	eq
    f6fa:	2340      	moveq	r3, #64	; 0x40
    f6fc:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    f700:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    f702:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f704:	f002 fb72 	bl	11dec <memset>
	tx_head = 0;
    f708:	4a28      	ldr	r2, [pc, #160]	; (f7ac <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    f70a:	4621      	mov	r1, r4
	tx_available = 0;
    f70c:	4b28      	ldr	r3, [pc, #160]	; (f7b0 <usb_serial_configure+0xcc>)
	tx_head = 0;
    f70e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    f710:	f44f 7280 	mov.w	r2, #256	; 0x100
    f714:	4827      	ldr	r0, [pc, #156]	; (f7b4 <usb_serial_configure+0xd0>)
	tx_available = 0;
    f716:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    f718:	f002 fb68 	bl	11dec <memset>
	memset(rx_count, 0, sizeof(rx_count));
    f71c:	4a26      	ldr	r2, [pc, #152]	; (f7b8 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    f71e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    f720:	4b26      	ldr	r3, [pc, #152]	; (f7bc <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    f722:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    f724:	e9c2 4400 	strd	r4, r4, [r2]
    f728:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    f72c:	4a24      	ldr	r2, [pc, #144]	; (f7c0 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    f72e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    f732:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    f734:	4a23      	ldr	r2, [pc, #140]	; (f7c4 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    f736:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    f73a:	4b23      	ldr	r3, [pc, #140]	; (f7c8 <usb_serial_configure+0xe4>)
    f73c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    f73e:	4623      	mov	r3, r4
	rx_available = 0;
    f740:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    f742:	4622      	mov	r2, r4
    f744:	f7ff fd74 	bl	f230 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    f748:	4622      	mov	r2, r4
    f74a:	8831      	ldrh	r1, [r6, #0]
    f74c:	2003      	movs	r0, #3
    f74e:	4b1f      	ldr	r3, [pc, #124]	; (f7cc <usb_serial_configure+0xe8>)
    f750:	f7ff fd3c 	bl	f1cc <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    f754:	4623      	mov	r3, r4
    f756:	2201      	movs	r2, #1
    f758:	8829      	ldrh	r1, [r5, #0]
    f75a:	2004      	movs	r0, #4
    f75c:	f7ff fd68 	bl	f230 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    f760:	4620      	mov	r0, r4
    f762:	3401      	adds	r4, #1
    f764:	f7ff fe0e 	bl	f384 <rx_queue_transfer>
    f768:	2c08      	cmp	r4, #8
    f76a:	d1f9      	bne.n	f760 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    f76c:	4b18      	ldr	r3, [pc, #96]	; (f7d0 <usb_serial_configure+0xec>)
    f76e:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    f770:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    f772:	4818      	ldr	r0, [pc, #96]	; (f7d4 <usb_serial_configure+0xf0>)
    f774:	4c18      	ldr	r4, [pc, #96]	; (f7d8 <usb_serial_configure+0xf4>)
    f776:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    f778:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    f77c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    f780:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    f784:	4915      	ldr	r1, [pc, #84]	; (f7dc <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    f786:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    f78a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    f78e:	b121      	cbz	r1, f79a <usb_serial_configure+0xb6>
    f790:	4a13      	ldr	r2, [pc, #76]	; (f7e0 <usb_serial_configure+0xfc>)
    f792:	7813      	ldrb	r3, [r2, #0]
    f794:	f043 0301 	orr.w	r3, r3, #1
    f798:	7013      	strb	r3, [r2, #0]
}
    f79a:	bd70      	pop	{r4, r5, r6, pc}
    f79c:	20004d60 	.word	0x20004d60
    f7a0:	20003c60 	.word	0x20003c60
    f7a4:	20004d46 	.word	0x20004d46
    f7a8:	20004d42 	.word	0x20004d42
    f7ac:	20004d5c 	.word	0x20004d5c
    f7b0:	20004d44 	.word	0x20004d44
    f7b4:	20003b60 	.word	0x20003b60
    f7b8:	20004a48 	.word	0x20004a48
    f7bc:	20004a58 	.word	0x20004a58
    f7c0:	20004d57 	.word	0x20004d57
    f7c4:	20004a44 	.word	0x20004a44
    f7c8:	20004d58 	.word	0x20004d58
    f7cc:	0000f3e5 	.word	0x0000f3e5
    f7d0:	402e0000 	.word	0x402e0000
    f7d4:	20004ab4 	.word	0x20004ab4
    f7d8:	0000f499 	.word	0x0000f499
    f7dc:	00000000 	.word	0x00000000
    f7e0:	20004d62 	.word	0x20004d62

0000f7e4 <usb_serial_read>:
{
    f7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f7e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f7ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    f7f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; f8bc <usb_serial_read+0xd8>
{
    f7f4:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f7f6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    f7fa:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    f7fc:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    f800:	2900      	cmp	r1, #0
    f802:	d04f      	beq.n	f8a4 <usb_serial_read+0xc0>
    f804:	4680      	mov	r8, r0
    f806:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    f808:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    f80a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; f8c0 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    f80e:	4b26      	ldr	r3, [pc, #152]	; (f8a8 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    f810:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f814:	4925      	ldr	r1, [pc, #148]	; (f8ac <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    f816:	781b      	ldrb	r3, [r3, #0]
    f818:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    f81a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    f81e:	d03f      	beq.n	f8a0 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    f820:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    f822:	4b23      	ldr	r3, [pc, #140]	; (f8b0 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f824:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    f826:	bf28      	it	cs
    f828:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    f82a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    f82c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f830:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    f834:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    f836:	4b1f      	ldr	r3, [pc, #124]	; (f8b4 <usb_serial_read+0xd0>)
    f838:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    f83c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    f840:	42aa      	cmp	r2, r5
    f842:	d21c      	bcs.n	f87e <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    f844:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    f848:	4918      	ldr	r1, [pc, #96]	; (f8ac <usb_serial_read+0xc8>)
			rx_available -= len;
    f84a:	4c1b      	ldr	r4, [pc, #108]	; (f8b8 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    f84c:	4461      	add	r1, ip
    f84e:	9201      	str	r2, [sp, #4]
    f850:	f7fe fd60 	bl	e314 <memcpy>
			rx_available -= len;
    f854:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    f856:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    f85a:	4658      	mov	r0, fp
			rx_index[i] += len;
    f85c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    f85e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    f862:	442a      	add	r2, r5
			rx_available -= len;
    f864:	4439      	add	r1, r7
			rx_index[i] += len;
    f866:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    f86a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    f86c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f870:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    f874:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    f878:	b003      	add	sp, #12
    f87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f87e:	462a      	mov	r2, r5
			count += avail;
    f880:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f882:	f7fe fd47 	bl	e314 <memcpy>
			rx_available -= avail;
    f886:	490c      	ldr	r1, [pc, #48]	; (f8b8 <usb_serial_read+0xd4>)
			rx_tail = tail;
    f888:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    f88a:	4630      	mov	r0, r6
			rx_available -= avail;
    f88c:	680a      	ldr	r2, [r1, #0]
			p += avail;
    f88e:	44a8      	add	r8, r5
			rx_available -= avail;
    f890:	1b52      	subs	r2, r2, r5
    f892:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    f894:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    f898:	f7ff fd74 	bl	f384 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    f89c:	45bb      	cmp	fp, r7
    f89e:	d8b6      	bhi.n	f80e <usb_serial_read+0x2a>
	return count;
    f8a0:	4638      	mov	r0, r7
    f8a2:	e7e3      	b.n	f86c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    f8a4:	4608      	mov	r0, r1
    f8a6:	e7e1      	b.n	f86c <usb_serial_read+0x88>
    f8a8:	20004d57 	.word	0x20004d57
    f8ac:	20204380 	.word	0x20204380
    f8b0:	20004a68 	.word	0x20004a68
    f8b4:	20004a48 	.word	0x20004a48
    f8b8:	20004a44 	.word	0x20004a44
    f8bc:	20004d58 	.word	0x20004d58
    f8c0:	20004a58 	.word	0x20004a58

0000f8c4 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    f8c4:	4b0b      	ldr	r3, [pc, #44]	; (f8f4 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    f8c6:	4a0c      	ldr	r2, [pc, #48]	; (f8f8 <usb_serial_peekchar+0x34>)
    f8c8:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    f8ca:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    f8cc:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    f8ce:	428a      	cmp	r2, r1
    f8d0:	d00d      	beq.n	f8ee <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    f8d2:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    f8d4:	4809      	ldr	r0, [pc, #36]	; (f8fc <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    f8d6:	4a0a      	ldr	r2, [pc, #40]	; (f900 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    f8d8:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    f8da:	490a      	ldr	r1, [pc, #40]	; (f904 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    f8dc:	bf28      	it	cs
    f8de:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    f8e0:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    f8e2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    f8e6:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    f8ea:	5c58      	ldrb	r0, [r3, r1]
    f8ec:	4770      	bx	lr
	if (tail == rx_head) return -1;
    f8ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    f8f2:	4770      	bx	lr
    f8f4:	20004d57 	.word	0x20004d57
    f8f8:	20004d58 	.word	0x20004d58
    f8fc:	20004a68 	.word	0x20004a68
    f900:	20204380 	.word	0x20204380
    f904:	20004a58 	.word	0x20004a58

0000f908 <usb_serial_available>:
	uint32_t n = rx_available;
    f908:	4b04      	ldr	r3, [pc, #16]	; (f91c <usb_serial_available+0x14>)
{
    f90a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    f90c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    f90e:	b10c      	cbz	r4, f914 <usb_serial_available+0xc>
}
    f910:	4620      	mov	r0, r4
    f912:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    f914:	f000 f8e0 	bl	fad8 <yield>
}
    f918:	4620      	mov	r0, r4
    f91a:	bd10      	pop	{r4, pc}
    f91c:	20004a44 	.word	0x20004a44

0000f920 <usb_serial_flush_input>:
{
    f920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    f924:	4e14      	ldr	r6, [pc, #80]	; (f978 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    f926:	4d15      	ldr	r5, [pc, #84]	; (f97c <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    f928:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    f92a:	782a      	ldrb	r2, [r5, #0]
    f92c:	4293      	cmp	r3, r2
    f92e:	d021      	beq.n	f974 <usb_serial_flush_input+0x54>
    f930:	b2dc      	uxtb	r4, r3
    f932:	f8df 9050 	ldr.w	r9, [pc, #80]	; f984 <usb_serial_flush_input+0x64>
    f936:	f8df b050 	ldr.w	fp, [pc, #80]	; f988 <usb_serial_flush_input+0x68>
    f93a:	f8df 8050 	ldr.w	r8, [pc, #80]	; f98c <usb_serial_flush_input+0x6c>
    f93e:	4f10      	ldr	r7, [pc, #64]	; (f980 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    f940:	3401      	adds	r4, #1
    f942:	2c08      	cmp	r4, #8
		rx_tail = tail;
    f944:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    f948:	d901      	bls.n	f94e <usb_serial_flush_input+0x2e>
    f94a:	2400      	movs	r4, #0
    f94c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    f94e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    f952:	f8db 3000 	ldr.w	r3, [fp]
    f956:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    f95a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    f95e:	1a52      	subs	r2, r2, r1
    f960:	1a9b      	subs	r3, r3, r2
    f962:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    f966:	f7ff fd0d 	bl	f384 <rx_queue_transfer>
		rx_tail = tail;
    f96a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    f96e:	782b      	ldrb	r3, [r5, #0]
    f970:	42a3      	cmp	r3, r4
    f972:	d1e5      	bne.n	f940 <usb_serial_flush_input+0x20>
}
    f974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f978:	20004d58 	.word	0x20004d58
    f97c:	20004d57 	.word	0x20004d57
    f980:	20004a58 	.word	0x20004a58
    f984:	20004a68 	.word	0x20004a68
    f988:	20004a44 	.word	0x20004a44
    f98c:	20004a48 	.word	0x20004a48

0000f990 <usb_serial_getchar>:
{
    f990:	b500      	push	{lr}
    f992:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    f994:	2101      	movs	r1, #1
    f996:	f10d 0007 	add.w	r0, sp, #7
    f99a:	f7ff ff23 	bl	f7e4 <usb_serial_read>
    f99e:	b120      	cbz	r0, f9aa <usb_serial_getchar+0x1a>
    f9a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    f9a4:	b003      	add	sp, #12
    f9a6:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    f9aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f9ae:	e7f9      	b.n	f9a4 <usb_serial_getchar+0x14>

0000f9b0 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    f9b0:	4b09      	ldr	r3, [pc, #36]	; (f9d8 <usb_serial_putchar+0x28>)
{
    f9b2:	b500      	push	{lr}
    f9b4:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    f9b6:	781b      	ldrb	r3, [r3, #0]
{
    f9b8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    f9bc:	b13b      	cbz	r3, f9ce <usb_serial_putchar+0x1e>
    f9be:	2101      	movs	r1, #1
    f9c0:	f10d 0007 	add.w	r0, sp, #7
    f9c4:	f7ff fdb0 	bl	f528 <usb_serial_write.part.0>
}
    f9c8:	b003      	add	sp, #12
    f9ca:	f85d fb04 	ldr.w	pc, [sp], #4
    f9ce:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    f9d2:	b003      	add	sp, #12
    f9d4:	f85d fb04 	ldr.w	pc, [sp], #4
    f9d8:	20004d5f 	.word	0x20004d5f

0000f9dc <usb_serial_write>:
	if (!usb_configuration) return 0;
    f9dc:	4b04      	ldr	r3, [pc, #16]	; (f9f0 <usb_serial_write+0x14>)
    f9de:	781b      	ldrb	r3, [r3, #0]
    f9e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    f9e4:	b10b      	cbz	r3, f9ea <usb_serial_write+0xe>
    f9e6:	f7ff bd9f 	b.w	f528 <usb_serial_write.part.0>
}
    f9ea:	4610      	mov	r0, r2
    f9ec:	4770      	bx	lr
    f9ee:	bf00      	nop
    f9f0:	20004d5f 	.word	0x20004d5f

0000f9f4 <usb_serial_write_buffer_free>:
{
    f9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    f9f8:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    f9fa:	f8df 8044 	ldr.w	r8, [pc, #68]	; fa40 <usb_serial_write_buffer_free+0x4c>
    f9fe:	2301      	movs	r3, #1
    fa00:	4d0d      	ldr	r5, [pc, #52]	; (fa38 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    fa02:	4627      	mov	r7, r4
    fa04:	4e0d      	ldr	r6, [pc, #52]	; (fa3c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    fa06:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    fa0a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    fa0c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    fa0e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    fa10:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    fa12:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    fa16:	d005      	beq.n	fa24 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    fa18:	f7ff fc76 	bl	f308 <usb_transfer_status>
    fa1c:	0603      	lsls	r3, r0, #24
    fa1e:	bf58      	it	pl
    fa20:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    fa24:	2c04      	cmp	r4, #4
    fa26:	d1f0      	bne.n	fa0a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    fa28:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    fa2c:	2300      	movs	r3, #0
}
    fa2e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    fa30:	f888 3000 	strb.w	r3, [r8]
}
    fa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa38:	20003c60 	.word	0x20003c60
    fa3c:	20004d5c 	.word	0x20004d5c
    fa40:	20004d5d 	.word	0x20004d5d

0000fa44 <usb_serial_flush_output>:
{
    fa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    fa48:	4b1d      	ldr	r3, [pc, #116]	; (fac0 <usb_serial_flush_output+0x7c>)
    fa4a:	781b      	ldrb	r3, [r3, #0]
    fa4c:	b113      	cbz	r3, fa54 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    fa4e:	4d1d      	ldr	r5, [pc, #116]	; (fac4 <usb_serial_flush_output+0x80>)
    fa50:	882a      	ldrh	r2, [r5, #0]
    fa52:	b90a      	cbnz	r2, fa58 <usb_serial_flush_output+0x14>
}
    fa54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    fa58:	4e1b      	ldr	r6, [pc, #108]	; (fac8 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    fa5a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    fa5e:	491b      	ldr	r1, [pc, #108]	; (facc <usb_serial_flush_output+0x88>)
    fa60:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    fa62:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    fa64:	4c1a      	ldr	r4, [pc, #104]	; (fad0 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    fa66:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    fa6a:	4f1a      	ldr	r7, [pc, #104]	; (fad4 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    fa6c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    fa70:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    fa72:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    fa74:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    fa76:	4621      	mov	r1, r4
    fa78:	2300      	movs	r3, #0
    fa7a:	f7ff fc0b 	bl	f294 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    fa7e:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    fa82:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    fa86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    fa8a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    fa8e:	3420      	adds	r4, #32
	} while (location < end_addr);
    fa90:	42a2      	cmp	r2, r4
    fa92:	d8fa      	bhi.n	fa8a <usb_serial_flush_output+0x46>
	asm("dsb");
    fa94:	f3bf 8f4f 	dsb	sy
	asm("isb");
    fa98:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    fa9c:	2004      	movs	r0, #4
    fa9e:	4641      	mov	r1, r8
    faa0:	f7ff fc10 	bl	f2c4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    faa4:	7833      	ldrb	r3, [r6, #0]
    faa6:	3301      	adds	r3, #1
    faa8:	b2db      	uxtb	r3, r3
    faaa:	2b03      	cmp	r3, #3
    faac:	bf88      	it	hi
    faae:	2300      	movhi	r3, #0
    fab0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    fab2:	2300      	movs	r3, #0
    fab4:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    fab6:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    faba:	703b      	strb	r3, [r7, #0]
}
    fabc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fac0:	20004d5f 	.word	0x20004d5f
    fac4:	20004d44 	.word	0x20004d44
    fac8:	20004d5c 	.word	0x20004d5c
    facc:	20003c60 	.word	0x20003c60
    fad0:	20205380 	.word	0x20205380
    fad4:	20004d5d 	.word	0x20004d5d

0000fad8 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    fad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    fadc:	4b2d      	ldr	r3, [pc, #180]	; (fb94 <yield+0xbc>)
    fade:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    fae0:	b166      	cbz	r6, fafc <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    fae2:	4f2d      	ldr	r7, [pc, #180]	; (fb98 <yield+0xc0>)
    fae4:	783b      	ldrb	r3, [r7, #0]
    fae6:	b94b      	cbnz	r3, fafc <yield+0x24>
	running = 1;
    fae8:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    faea:	07f1      	lsls	r1, r6, #31
	running = 1;
    faec:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    faee:	d443      	bmi.n	fb78 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    faf0:	07b2      	lsls	r2, r6, #30
    faf2:	d426      	bmi.n	fb42 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    faf4:	2300      	movs	r3, #0
    faf6:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    faf8:	0773      	lsls	r3, r6, #29
    fafa:	d401      	bmi.n	fb00 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    fafc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    fb00:	4b26      	ldr	r3, [pc, #152]	; (fb9c <yield+0xc4>)
    fb02:	681a      	ldr	r2, [r3, #0]
    fb04:	2a00      	cmp	r2, #0
    fb06:	d0f9      	beq.n	fafc <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    fb08:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    fb0c:	2a00      	cmp	r2, #0
    fb0e:	d1f5      	bne.n	fafc <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    fb10:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    fb14:	b672      	cpsid	i
		EventResponder *first = firstYield;
    fb16:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    fb18:	2800      	cmp	r0, #0
    fb1a:	d034      	beq.n	fb86 <yield+0xae>
		if (runningFromYield) {
    fb1c:	4c20      	ldr	r4, [pc, #128]	; (fba0 <yield+0xc8>)
    fb1e:	7821      	ldrb	r1, [r4, #0]
    fb20:	2900      	cmp	r1, #0
    fb22:	d130      	bne.n	fb86 <yield+0xae>
		runningFromYield = true;
    fb24:	2201      	movs	r2, #1
    fb26:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    fb28:	6942      	ldr	r2, [r0, #20]
    fb2a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    fb2c:	2a00      	cmp	r2, #0
    fb2e:	d02e      	beq.n	fb8e <yield+0xb6>
			firstYield->_prev = nullptr;
    fb30:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    fb32:	b905      	cbnz	r5, fb36 <yield+0x5e>
    fb34:	b662      	cpsie	i
		first->_triggered = false;
    fb36:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    fb38:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    fb3a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    fb3c:	4798      	blx	r3
		runningFromYield = false;
    fb3e:	7025      	strb	r5, [r4, #0]
    fb40:	e7dc      	b.n	fafc <yield+0x24>

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    fb42:	f8df 8064 	ldr.w	r8, [pc, #100]	; fba8 <yield+0xd0>
    fb46:	f898 3000 	ldrb.w	r3, [r8]
    fb4a:	2b00      	cmp	r3, #0
    fb4c:	d0d2      	beq.n	faf4 <yield+0x1c>
    fb4e:	2500      	movs	r5, #0
    fb50:	f8df 9058 	ldr.w	r9, [pc, #88]	; fbac <yield+0xd4>
    fb54:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    fb56:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    fb5a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    fb5c:	6823      	ldr	r3, [r4, #0]
    fb5e:	4620      	mov	r0, r4
    fb60:	691b      	ldr	r3, [r3, #16]
    fb62:	4798      	blx	r3
    fb64:	b110      	cbz	r0, fb6c <yield+0x94>
    fb66:	6963      	ldr	r3, [r4, #20]
    fb68:	689b      	ldr	r3, [r3, #8]
    fb6a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    fb6c:	f898 2000 	ldrb.w	r2, [r8]
    fb70:	b2eb      	uxtb	r3, r5
    fb72:	429a      	cmp	r2, r3
    fb74:	d8ef      	bhi.n	fb56 <yield+0x7e>
    fb76:	e7bd      	b.n	faf4 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    fb78:	f7ff fec6 	bl	f908 <usb_serial_available>
		if (Serial.available()) serialEvent();
    fb7c:	2800      	cmp	r0, #0
    fb7e:	d0b7      	beq.n	faf0 <yield+0x18>
    fb80:	f3af 8000 	nop.w
    fb84:	e7b4      	b.n	faf0 <yield+0x18>
		if (doit) __enable_irq();
    fb86:	2d00      	cmp	r5, #0
    fb88:	d1b8      	bne.n	fafc <yield+0x24>
    fb8a:	b662      	cpsie	i
    fb8c:	e7b6      	b.n	fafc <yield+0x24>
			lastYield = nullptr;
    fb8e:	4b05      	ldr	r3, [pc, #20]	; (fba4 <yield+0xcc>)
    fb90:	601a      	str	r2, [r3, #0]
    fb92:	e7ce      	b.n	fb32 <yield+0x5a>
    fb94:	20004d62 	.word	0x20004d62
    fb98:	20004d53 	.word	0x20004d53
    fb9c:	200043a4 	.word	0x200043a4
    fba0:	20004d4f 	.word	0x20004d4f
    fba4:	200043b0 	.word	0x200043b0
    fba8:	20004d50 	.word	0x20004d50
    fbac:	2000442c 	.word	0x2000442c

0000fbb0 <__aeabi_atexit>:
    fbb0:	4603      	mov	r3, r0
    fbb2:	4608      	mov	r0, r1
    fbb4:	4619      	mov	r1, r3
    fbb6:	f002 ba23 	b.w	12000 <__cxa_atexit>
    fbba:	bf00      	nop

0000fbbc <__aeabi_drsub>:
    fbbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    fbc0:	e002      	b.n	fbc8 <__adddf3>
    fbc2:	bf00      	nop

0000fbc4 <__aeabi_dsub>:
    fbc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000fbc8 <__adddf3>:
    fbc8:	b530      	push	{r4, r5, lr}
    fbca:	ea4f 0441 	mov.w	r4, r1, lsl #1
    fbce:	ea4f 0543 	mov.w	r5, r3, lsl #1
    fbd2:	ea94 0f05 	teq	r4, r5
    fbd6:	bf08      	it	eq
    fbd8:	ea90 0f02 	teqeq	r0, r2
    fbdc:	bf1f      	itttt	ne
    fbde:	ea54 0c00 	orrsne.w	ip, r4, r0
    fbe2:	ea55 0c02 	orrsne.w	ip, r5, r2
    fbe6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    fbea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    fbee:	f000 80e2 	beq.w	fdb6 <__adddf3+0x1ee>
    fbf2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    fbf6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    fbfa:	bfb8      	it	lt
    fbfc:	426d      	neglt	r5, r5
    fbfe:	dd0c      	ble.n	fc1a <__adddf3+0x52>
    fc00:	442c      	add	r4, r5
    fc02:	ea80 0202 	eor.w	r2, r0, r2
    fc06:	ea81 0303 	eor.w	r3, r1, r3
    fc0a:	ea82 0000 	eor.w	r0, r2, r0
    fc0e:	ea83 0101 	eor.w	r1, r3, r1
    fc12:	ea80 0202 	eor.w	r2, r0, r2
    fc16:	ea81 0303 	eor.w	r3, r1, r3
    fc1a:	2d36      	cmp	r5, #54	; 0x36
    fc1c:	bf88      	it	hi
    fc1e:	bd30      	pophi	{r4, r5, pc}
    fc20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    fc24:	ea4f 3101 	mov.w	r1, r1, lsl #12
    fc28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    fc2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    fc30:	d002      	beq.n	fc38 <__adddf3+0x70>
    fc32:	4240      	negs	r0, r0
    fc34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    fc38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    fc3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    fc40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    fc44:	d002      	beq.n	fc4c <__adddf3+0x84>
    fc46:	4252      	negs	r2, r2
    fc48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    fc4c:	ea94 0f05 	teq	r4, r5
    fc50:	f000 80a7 	beq.w	fda2 <__adddf3+0x1da>
    fc54:	f1a4 0401 	sub.w	r4, r4, #1
    fc58:	f1d5 0e20 	rsbs	lr, r5, #32
    fc5c:	db0d      	blt.n	fc7a <__adddf3+0xb2>
    fc5e:	fa02 fc0e 	lsl.w	ip, r2, lr
    fc62:	fa22 f205 	lsr.w	r2, r2, r5
    fc66:	1880      	adds	r0, r0, r2
    fc68:	f141 0100 	adc.w	r1, r1, #0
    fc6c:	fa03 f20e 	lsl.w	r2, r3, lr
    fc70:	1880      	adds	r0, r0, r2
    fc72:	fa43 f305 	asr.w	r3, r3, r5
    fc76:	4159      	adcs	r1, r3
    fc78:	e00e      	b.n	fc98 <__adddf3+0xd0>
    fc7a:	f1a5 0520 	sub.w	r5, r5, #32
    fc7e:	f10e 0e20 	add.w	lr, lr, #32
    fc82:	2a01      	cmp	r2, #1
    fc84:	fa03 fc0e 	lsl.w	ip, r3, lr
    fc88:	bf28      	it	cs
    fc8a:	f04c 0c02 	orrcs.w	ip, ip, #2
    fc8e:	fa43 f305 	asr.w	r3, r3, r5
    fc92:	18c0      	adds	r0, r0, r3
    fc94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    fc98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    fc9c:	d507      	bpl.n	fcae <__adddf3+0xe6>
    fc9e:	f04f 0e00 	mov.w	lr, #0
    fca2:	f1dc 0c00 	rsbs	ip, ip, #0
    fca6:	eb7e 0000 	sbcs.w	r0, lr, r0
    fcaa:	eb6e 0101 	sbc.w	r1, lr, r1
    fcae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    fcb2:	d31b      	bcc.n	fcec <__adddf3+0x124>
    fcb4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    fcb8:	d30c      	bcc.n	fcd4 <__adddf3+0x10c>
    fcba:	0849      	lsrs	r1, r1, #1
    fcbc:	ea5f 0030 	movs.w	r0, r0, rrx
    fcc0:	ea4f 0c3c 	mov.w	ip, ip, rrx
    fcc4:	f104 0401 	add.w	r4, r4, #1
    fcc8:	ea4f 5244 	mov.w	r2, r4, lsl #21
    fccc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    fcd0:	f080 809a 	bcs.w	fe08 <__adddf3+0x240>
    fcd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    fcd8:	bf08      	it	eq
    fcda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    fcde:	f150 0000 	adcs.w	r0, r0, #0
    fce2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    fce6:	ea41 0105 	orr.w	r1, r1, r5
    fcea:	bd30      	pop	{r4, r5, pc}
    fcec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    fcf0:	4140      	adcs	r0, r0
    fcf2:	eb41 0101 	adc.w	r1, r1, r1
    fcf6:	3c01      	subs	r4, #1
    fcf8:	bf28      	it	cs
    fcfa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    fcfe:	d2e9      	bcs.n	fcd4 <__adddf3+0x10c>
    fd00:	f091 0f00 	teq	r1, #0
    fd04:	bf04      	itt	eq
    fd06:	4601      	moveq	r1, r0
    fd08:	2000      	moveq	r0, #0
    fd0a:	fab1 f381 	clz	r3, r1
    fd0e:	bf08      	it	eq
    fd10:	3320      	addeq	r3, #32
    fd12:	f1a3 030b 	sub.w	r3, r3, #11
    fd16:	f1b3 0220 	subs.w	r2, r3, #32
    fd1a:	da0c      	bge.n	fd36 <__adddf3+0x16e>
    fd1c:	320c      	adds	r2, #12
    fd1e:	dd08      	ble.n	fd32 <__adddf3+0x16a>
    fd20:	f102 0c14 	add.w	ip, r2, #20
    fd24:	f1c2 020c 	rsb	r2, r2, #12
    fd28:	fa01 f00c 	lsl.w	r0, r1, ip
    fd2c:	fa21 f102 	lsr.w	r1, r1, r2
    fd30:	e00c      	b.n	fd4c <__adddf3+0x184>
    fd32:	f102 0214 	add.w	r2, r2, #20
    fd36:	bfd8      	it	le
    fd38:	f1c2 0c20 	rsble	ip, r2, #32
    fd3c:	fa01 f102 	lsl.w	r1, r1, r2
    fd40:	fa20 fc0c 	lsr.w	ip, r0, ip
    fd44:	bfdc      	itt	le
    fd46:	ea41 010c 	orrle.w	r1, r1, ip
    fd4a:	4090      	lslle	r0, r2
    fd4c:	1ae4      	subs	r4, r4, r3
    fd4e:	bfa2      	ittt	ge
    fd50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    fd54:	4329      	orrge	r1, r5
    fd56:	bd30      	popge	{r4, r5, pc}
    fd58:	ea6f 0404 	mvn.w	r4, r4
    fd5c:	3c1f      	subs	r4, #31
    fd5e:	da1c      	bge.n	fd9a <__adddf3+0x1d2>
    fd60:	340c      	adds	r4, #12
    fd62:	dc0e      	bgt.n	fd82 <__adddf3+0x1ba>
    fd64:	f104 0414 	add.w	r4, r4, #20
    fd68:	f1c4 0220 	rsb	r2, r4, #32
    fd6c:	fa20 f004 	lsr.w	r0, r0, r4
    fd70:	fa01 f302 	lsl.w	r3, r1, r2
    fd74:	ea40 0003 	orr.w	r0, r0, r3
    fd78:	fa21 f304 	lsr.w	r3, r1, r4
    fd7c:	ea45 0103 	orr.w	r1, r5, r3
    fd80:	bd30      	pop	{r4, r5, pc}
    fd82:	f1c4 040c 	rsb	r4, r4, #12
    fd86:	f1c4 0220 	rsb	r2, r4, #32
    fd8a:	fa20 f002 	lsr.w	r0, r0, r2
    fd8e:	fa01 f304 	lsl.w	r3, r1, r4
    fd92:	ea40 0003 	orr.w	r0, r0, r3
    fd96:	4629      	mov	r1, r5
    fd98:	bd30      	pop	{r4, r5, pc}
    fd9a:	fa21 f004 	lsr.w	r0, r1, r4
    fd9e:	4629      	mov	r1, r5
    fda0:	bd30      	pop	{r4, r5, pc}
    fda2:	f094 0f00 	teq	r4, #0
    fda6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    fdaa:	bf06      	itte	eq
    fdac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    fdb0:	3401      	addeq	r4, #1
    fdb2:	3d01      	subne	r5, #1
    fdb4:	e74e      	b.n	fc54 <__adddf3+0x8c>
    fdb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    fdba:	bf18      	it	ne
    fdbc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    fdc0:	d029      	beq.n	fe16 <__adddf3+0x24e>
    fdc2:	ea94 0f05 	teq	r4, r5
    fdc6:	bf08      	it	eq
    fdc8:	ea90 0f02 	teqeq	r0, r2
    fdcc:	d005      	beq.n	fdda <__adddf3+0x212>
    fdce:	ea54 0c00 	orrs.w	ip, r4, r0
    fdd2:	bf04      	itt	eq
    fdd4:	4619      	moveq	r1, r3
    fdd6:	4610      	moveq	r0, r2
    fdd8:	bd30      	pop	{r4, r5, pc}
    fdda:	ea91 0f03 	teq	r1, r3
    fdde:	bf1e      	ittt	ne
    fde0:	2100      	movne	r1, #0
    fde2:	2000      	movne	r0, #0
    fde4:	bd30      	popne	{r4, r5, pc}
    fde6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    fdea:	d105      	bne.n	fdf8 <__adddf3+0x230>
    fdec:	0040      	lsls	r0, r0, #1
    fdee:	4149      	adcs	r1, r1
    fdf0:	bf28      	it	cs
    fdf2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    fdf6:	bd30      	pop	{r4, r5, pc}
    fdf8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    fdfc:	bf3c      	itt	cc
    fdfe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    fe02:	bd30      	popcc	{r4, r5, pc}
    fe04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    fe08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    fe0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    fe10:	f04f 0000 	mov.w	r0, #0
    fe14:	bd30      	pop	{r4, r5, pc}
    fe16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    fe1a:	bf1a      	itte	ne
    fe1c:	4619      	movne	r1, r3
    fe1e:	4610      	movne	r0, r2
    fe20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    fe24:	bf1c      	itt	ne
    fe26:	460b      	movne	r3, r1
    fe28:	4602      	movne	r2, r0
    fe2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    fe2e:	bf06      	itte	eq
    fe30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    fe34:	ea91 0f03 	teqeq	r1, r3
    fe38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    fe3c:	bd30      	pop	{r4, r5, pc}
    fe3e:	bf00      	nop

0000fe40 <__aeabi_ui2d>:
    fe40:	f090 0f00 	teq	r0, #0
    fe44:	bf04      	itt	eq
    fe46:	2100      	moveq	r1, #0
    fe48:	4770      	bxeq	lr
    fe4a:	b530      	push	{r4, r5, lr}
    fe4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    fe50:	f104 0432 	add.w	r4, r4, #50	; 0x32
    fe54:	f04f 0500 	mov.w	r5, #0
    fe58:	f04f 0100 	mov.w	r1, #0
    fe5c:	e750      	b.n	fd00 <__adddf3+0x138>
    fe5e:	bf00      	nop

0000fe60 <__aeabi_i2d>:
    fe60:	f090 0f00 	teq	r0, #0
    fe64:	bf04      	itt	eq
    fe66:	2100      	moveq	r1, #0
    fe68:	4770      	bxeq	lr
    fe6a:	b530      	push	{r4, r5, lr}
    fe6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    fe70:	f104 0432 	add.w	r4, r4, #50	; 0x32
    fe74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    fe78:	bf48      	it	mi
    fe7a:	4240      	negmi	r0, r0
    fe7c:	f04f 0100 	mov.w	r1, #0
    fe80:	e73e      	b.n	fd00 <__adddf3+0x138>
    fe82:	bf00      	nop

0000fe84 <__aeabi_f2d>:
    fe84:	0042      	lsls	r2, r0, #1
    fe86:	ea4f 01e2 	mov.w	r1, r2, asr #3
    fe8a:	ea4f 0131 	mov.w	r1, r1, rrx
    fe8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    fe92:	bf1f      	itttt	ne
    fe94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    fe98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    fe9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    fea0:	4770      	bxne	lr
    fea2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    fea6:	bf08      	it	eq
    fea8:	4770      	bxeq	lr
    feaa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    feae:	bf04      	itt	eq
    feb0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    feb4:	4770      	bxeq	lr
    feb6:	b530      	push	{r4, r5, lr}
    feb8:	f44f 7460 	mov.w	r4, #896	; 0x380
    febc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    fec0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    fec4:	e71c      	b.n	fd00 <__adddf3+0x138>
    fec6:	bf00      	nop

0000fec8 <__aeabi_ul2d>:
    fec8:	ea50 0201 	orrs.w	r2, r0, r1
    fecc:	bf08      	it	eq
    fece:	4770      	bxeq	lr
    fed0:	b530      	push	{r4, r5, lr}
    fed2:	f04f 0500 	mov.w	r5, #0
    fed6:	e00a      	b.n	feee <__aeabi_l2d+0x16>

0000fed8 <__aeabi_l2d>:
    fed8:	ea50 0201 	orrs.w	r2, r0, r1
    fedc:	bf08      	it	eq
    fede:	4770      	bxeq	lr
    fee0:	b530      	push	{r4, r5, lr}
    fee2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    fee6:	d502      	bpl.n	feee <__aeabi_l2d+0x16>
    fee8:	4240      	negs	r0, r0
    feea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    feee:	f44f 6480 	mov.w	r4, #1024	; 0x400
    fef2:	f104 0432 	add.w	r4, r4, #50	; 0x32
    fef6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    fefa:	f43f aed8 	beq.w	fcae <__adddf3+0xe6>
    fefe:	f04f 0203 	mov.w	r2, #3
    ff02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    ff06:	bf18      	it	ne
    ff08:	3203      	addne	r2, #3
    ff0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    ff0e:	bf18      	it	ne
    ff10:	3203      	addne	r2, #3
    ff12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    ff16:	f1c2 0320 	rsb	r3, r2, #32
    ff1a:	fa00 fc03 	lsl.w	ip, r0, r3
    ff1e:	fa20 f002 	lsr.w	r0, r0, r2
    ff22:	fa01 fe03 	lsl.w	lr, r1, r3
    ff26:	ea40 000e 	orr.w	r0, r0, lr
    ff2a:	fa21 f102 	lsr.w	r1, r1, r2
    ff2e:	4414      	add	r4, r2
    ff30:	e6bd      	b.n	fcae <__adddf3+0xe6>
    ff32:	bf00      	nop

0000ff34 <atof>:
    ff34:	2100      	movs	r1, #0
    ff36:	f001 bc3b 	b.w	117b0 <strtod>
    ff3a:	bf00      	nop

0000ff3c <atoi>:
    ff3c:	220a      	movs	r2, #10
    ff3e:	2100      	movs	r1, #0
    ff40:	f001 bce8 	b.w	11914 <strtol>

0000ff44 <malloc>:
    ff44:	4b02      	ldr	r3, [pc, #8]	; (ff50 <malloc+0xc>)
    ff46:	4601      	mov	r1, r0
    ff48:	6818      	ldr	r0, [r3, #0]
    ff4a:	f000 b80b 	b.w	ff64 <_malloc_r>
    ff4e:	bf00      	nop
    ff50:	200034a4 	.word	0x200034a4

0000ff54 <free>:
    ff54:	4b02      	ldr	r3, [pc, #8]	; (ff60 <free+0xc>)
    ff56:	4601      	mov	r1, r0
    ff58:	6818      	ldr	r0, [r3, #0]
    ff5a:	f002 bbfd 	b.w	12758 <_free_r>
    ff5e:	bf00      	nop
    ff60:	200034a4 	.word	0x200034a4

0000ff64 <_malloc_r>:
    ff64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff68:	f101 060b 	add.w	r6, r1, #11
    ff6c:	2e16      	cmp	r6, #22
    ff6e:	b083      	sub	sp, #12
    ff70:	4604      	mov	r4, r0
    ff72:	d824      	bhi.n	ffbe <_malloc_r+0x5a>
    ff74:	2910      	cmp	r1, #16
    ff76:	f200 80ba 	bhi.w	100ee <_malloc_r+0x18a>
    ff7a:	f000 faa3 	bl	104c4 <__malloc_lock>
    ff7e:	2610      	movs	r6, #16
    ff80:	2218      	movs	r2, #24
    ff82:	2002      	movs	r0, #2
    ff84:	4fb5      	ldr	r7, [pc, #724]	; (1025c <_malloc_r+0x2f8>)
    ff86:	443a      	add	r2, r7
    ff88:	f1a2 0108 	sub.w	r1, r2, #8
    ff8c:	6853      	ldr	r3, [r2, #4]
    ff8e:	428b      	cmp	r3, r1
    ff90:	f000 80ba 	beq.w	10108 <_malloc_r+0x1a4>
    ff94:	685a      	ldr	r2, [r3, #4]
    ff96:	68d9      	ldr	r1, [r3, #12]
    ff98:	f022 0203 	bic.w	r2, r2, #3
    ff9c:	441a      	add	r2, r3
    ff9e:	689d      	ldr	r5, [r3, #8]
    ffa0:	60e9      	str	r1, [r5, #12]
    ffa2:	608d      	str	r5, [r1, #8]
    ffa4:	6851      	ldr	r1, [r2, #4]
    ffa6:	f041 0101 	orr.w	r1, r1, #1
    ffaa:	4620      	mov	r0, r4
    ffac:	6051      	str	r1, [r2, #4]
    ffae:	f103 0508 	add.w	r5, r3, #8
    ffb2:	f000 fa8d 	bl	104d0 <__malloc_unlock>
    ffb6:	4628      	mov	r0, r5
    ffb8:	b003      	add	sp, #12
    ffba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ffbe:	f036 0607 	bics.w	r6, r6, #7
    ffc2:	f100 8094 	bmi.w	100ee <_malloc_r+0x18a>
    ffc6:	42b1      	cmp	r1, r6
    ffc8:	f200 8091 	bhi.w	100ee <_malloc_r+0x18a>
    ffcc:	f000 fa7a 	bl	104c4 <__malloc_lock>
    ffd0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    ffd4:	f0c0 819a 	bcc.w	1030c <_malloc_r+0x3a8>
    ffd8:	0a73      	lsrs	r3, r6, #9
    ffda:	f000 808f 	beq.w	100fc <_malloc_r+0x198>
    ffde:	2b04      	cmp	r3, #4
    ffe0:	f200 816f 	bhi.w	102c2 <_malloc_r+0x35e>
    ffe4:	09b3      	lsrs	r3, r6, #6
    ffe6:	f103 0039 	add.w	r0, r3, #57	; 0x39
    ffea:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    ffee:	00c3      	lsls	r3, r0, #3
    fff0:	4f9a      	ldr	r7, [pc, #616]	; (1025c <_malloc_r+0x2f8>)
    fff2:	443b      	add	r3, r7
    fff4:	f1a3 0508 	sub.w	r5, r3, #8
    fff8:	685b      	ldr	r3, [r3, #4]
    fffa:	429d      	cmp	r5, r3
    fffc:	d106      	bne.n	1000c <_malloc_r+0xa8>
    fffe:	e00c      	b.n	1001a <_malloc_r+0xb6>
   10000:	2900      	cmp	r1, #0
   10002:	f280 8127 	bge.w	10254 <_malloc_r+0x2f0>
   10006:	68db      	ldr	r3, [r3, #12]
   10008:	429d      	cmp	r5, r3
   1000a:	d006      	beq.n	1001a <_malloc_r+0xb6>
   1000c:	685a      	ldr	r2, [r3, #4]
   1000e:	f022 0203 	bic.w	r2, r2, #3
   10012:	1b91      	subs	r1, r2, r6
   10014:	290f      	cmp	r1, #15
   10016:	ddf3      	ble.n	10000 <_malloc_r+0x9c>
   10018:	4660      	mov	r0, ip
   1001a:	693d      	ldr	r5, [r7, #16]
   1001c:	f8df c250 	ldr.w	ip, [pc, #592]	; 10270 <_malloc_r+0x30c>
   10020:	4565      	cmp	r5, ip
   10022:	d07c      	beq.n	1011e <_malloc_r+0x1ba>
   10024:	686a      	ldr	r2, [r5, #4]
   10026:	f022 0203 	bic.w	r2, r2, #3
   1002a:	1b93      	subs	r3, r2, r6
   1002c:	2b0f      	cmp	r3, #15
   1002e:	f300 817b 	bgt.w	10328 <_malloc_r+0x3c4>
   10032:	2b00      	cmp	r3, #0
   10034:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   10038:	f280 816c 	bge.w	10314 <_malloc_r+0x3b0>
   1003c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   10040:	f080 811a 	bcs.w	10278 <_malloc_r+0x314>
   10044:	08d3      	lsrs	r3, r2, #3
   10046:	6879      	ldr	r1, [r7, #4]
   10048:	3301      	adds	r3, #1
   1004a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   1004e:	2201      	movs	r2, #1
   10050:	fa02 f20e 	lsl.w	r2, r2, lr
   10054:	430a      	orrs	r2, r1
   10056:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   1005a:	f8c5 e008 	str.w	lr, [r5, #8]
   1005e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   10062:	3908      	subs	r1, #8
   10064:	60e9      	str	r1, [r5, #12]
   10066:	607a      	str	r2, [r7, #4]
   10068:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   1006c:	f8ce 500c 	str.w	r5, [lr, #12]
   10070:	1083      	asrs	r3, r0, #2
   10072:	2101      	movs	r1, #1
   10074:	4099      	lsls	r1, r3
   10076:	4291      	cmp	r1, r2
   10078:	d857      	bhi.n	1012a <_malloc_r+0x1c6>
   1007a:	4211      	tst	r1, r2
   1007c:	d106      	bne.n	1008c <_malloc_r+0x128>
   1007e:	f020 0003 	bic.w	r0, r0, #3
   10082:	0049      	lsls	r1, r1, #1
   10084:	4211      	tst	r1, r2
   10086:	f100 0004 	add.w	r0, r0, #4
   1008a:	d0fa      	beq.n	10082 <_malloc_r+0x11e>
   1008c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   10090:	464d      	mov	r5, r9
   10092:	4686      	mov	lr, r0
   10094:	f8d5 800c 	ldr.w	r8, [r5, #12]
   10098:	4545      	cmp	r5, r8
   1009a:	d108      	bne.n	100ae <_malloc_r+0x14a>
   1009c:	e11d      	b.n	102da <_malloc_r+0x376>
   1009e:	2b00      	cmp	r3, #0
   100a0:	f280 8124 	bge.w	102ec <_malloc_r+0x388>
   100a4:	f8d8 800c 	ldr.w	r8, [r8, #12]
   100a8:	4545      	cmp	r5, r8
   100aa:	f000 8116 	beq.w	102da <_malloc_r+0x376>
   100ae:	f8d8 2004 	ldr.w	r2, [r8, #4]
   100b2:	f022 0203 	bic.w	r2, r2, #3
   100b6:	1b93      	subs	r3, r2, r6
   100b8:	2b0f      	cmp	r3, #15
   100ba:	ddf0      	ble.n	1009e <_malloc_r+0x13a>
   100bc:	4620      	mov	r0, r4
   100be:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   100c2:	eb08 0106 	add.w	r1, r8, r6
   100c6:	f046 0601 	orr.w	r6, r6, #1
   100ca:	f8c8 6004 	str.w	r6, [r8, #4]
   100ce:	60ec      	str	r4, [r5, #12]
   100d0:	60a5      	str	r5, [r4, #8]
   100d2:	f043 0401 	orr.w	r4, r3, #1
   100d6:	e9c7 1104 	strd	r1, r1, [r7, #16]
   100da:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   100de:	604c      	str	r4, [r1, #4]
   100e0:	f848 3002 	str.w	r3, [r8, r2]
   100e4:	f000 f9f4 	bl	104d0 <__malloc_unlock>
   100e8:	f108 0508 	add.w	r5, r8, #8
   100ec:	e002      	b.n	100f4 <_malloc_r+0x190>
   100ee:	230c      	movs	r3, #12
   100f0:	6023      	str	r3, [r4, #0]
   100f2:	2500      	movs	r5, #0
   100f4:	4628      	mov	r0, r5
   100f6:	b003      	add	sp, #12
   100f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100fc:	f44f 7300 	mov.w	r3, #512	; 0x200
   10100:	2040      	movs	r0, #64	; 0x40
   10102:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   10106:	e773      	b.n	fff0 <_malloc_r+0x8c>
   10108:	68d3      	ldr	r3, [r2, #12]
   1010a:	429a      	cmp	r2, r3
   1010c:	bf08      	it	eq
   1010e:	3002      	addeq	r0, #2
   10110:	f47f af40 	bne.w	ff94 <_malloc_r+0x30>
   10114:	693d      	ldr	r5, [r7, #16]
   10116:	f8df c158 	ldr.w	ip, [pc, #344]	; 10270 <_malloc_r+0x30c>
   1011a:	4565      	cmp	r5, ip
   1011c:	d182      	bne.n	10024 <_malloc_r+0xc0>
   1011e:	687a      	ldr	r2, [r7, #4]
   10120:	1083      	asrs	r3, r0, #2
   10122:	2101      	movs	r1, #1
   10124:	4099      	lsls	r1, r3
   10126:	4291      	cmp	r1, r2
   10128:	d9a7      	bls.n	1007a <_malloc_r+0x116>
   1012a:	68bd      	ldr	r5, [r7, #8]
   1012c:	686b      	ldr	r3, [r5, #4]
   1012e:	f023 0903 	bic.w	r9, r3, #3
   10132:	454e      	cmp	r6, r9
   10134:	d803      	bhi.n	1013e <_malloc_r+0x1da>
   10136:	eba9 0306 	sub.w	r3, r9, r6
   1013a:	2b0f      	cmp	r3, #15
   1013c:	dc7a      	bgt.n	10234 <_malloc_r+0x2d0>
   1013e:	f8df b134 	ldr.w	fp, [pc, #308]	; 10274 <_malloc_r+0x310>
   10142:	4b47      	ldr	r3, [pc, #284]	; (10260 <_malloc_r+0x2fc>)
   10144:	f8db 2000 	ldr.w	r2, [fp]
   10148:	681b      	ldr	r3, [r3, #0]
   1014a:	3201      	adds	r2, #1
   1014c:	4433      	add	r3, r6
   1014e:	eb05 0a09 	add.w	sl, r5, r9
   10152:	f000 8133 	beq.w	103bc <_malloc_r+0x458>
   10156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1015a:	330f      	adds	r3, #15
   1015c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   10160:	f028 080f 	bic.w	r8, r8, #15
   10164:	4641      	mov	r1, r8
   10166:	4620      	mov	r0, r4
   10168:	f001 ff50 	bl	1200c <_sbrk_r>
   1016c:	1c41      	adds	r1, r0, #1
   1016e:	4602      	mov	r2, r0
   10170:	f000 80f3 	beq.w	1035a <_malloc_r+0x3f6>
   10174:	4582      	cmp	sl, r0
   10176:	f200 80ee 	bhi.w	10356 <_malloc_r+0x3f2>
   1017a:	4b3a      	ldr	r3, [pc, #232]	; (10264 <_malloc_r+0x300>)
   1017c:	6819      	ldr	r1, [r3, #0]
   1017e:	4441      	add	r1, r8
   10180:	6019      	str	r1, [r3, #0]
   10182:	4608      	mov	r0, r1
   10184:	f000 814e 	beq.w	10424 <_malloc_r+0x4c0>
   10188:	f8db 1000 	ldr.w	r1, [fp]
   1018c:	9301      	str	r3, [sp, #4]
   1018e:	3101      	adds	r1, #1
   10190:	bf1b      	ittet	ne
   10192:	eba2 010a 	subne.w	r1, r2, sl
   10196:	1809      	addne	r1, r1, r0
   10198:	f8cb 2000 	streq.w	r2, [fp]
   1019c:	6019      	strne	r1, [r3, #0]
   1019e:	f012 0b07 	ands.w	fp, r2, #7
   101a2:	f000 8117 	beq.w	103d4 <_malloc_r+0x470>
   101a6:	f1cb 0108 	rsb	r1, fp, #8
   101aa:	440a      	add	r2, r1
   101ac:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   101b0:	4490      	add	r8, r2
   101b2:	3108      	adds	r1, #8
   101b4:	eba1 0108 	sub.w	r1, r1, r8
   101b8:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   101bc:	4651      	mov	r1, sl
   101be:	4620      	mov	r0, r4
   101c0:	9200      	str	r2, [sp, #0]
   101c2:	f001 ff23 	bl	1200c <_sbrk_r>
   101c6:	1c42      	adds	r2, r0, #1
   101c8:	e9dd 2300 	ldrd	r2, r3, [sp]
   101cc:	f000 814f 	beq.w	1046e <_malloc_r+0x50a>
   101d0:	1a80      	subs	r0, r0, r2
   101d2:	eb00 080a 	add.w	r8, r0, sl
   101d6:	6819      	ldr	r1, [r3, #0]
   101d8:	60ba      	str	r2, [r7, #8]
   101da:	f048 0001 	orr.w	r0, r8, #1
   101de:	4451      	add	r1, sl
   101e0:	42bd      	cmp	r5, r7
   101e2:	6050      	str	r0, [r2, #4]
   101e4:	6019      	str	r1, [r3, #0]
   101e6:	f000 8129 	beq.w	1043c <_malloc_r+0x4d8>
   101ea:	f1b9 0f0f 	cmp.w	r9, #15
   101ee:	f240 8127 	bls.w	10440 <_malloc_r+0x4dc>
   101f2:	6868      	ldr	r0, [r5, #4]
   101f4:	f1a9 0c0c 	sub.w	ip, r9, #12
   101f8:	f02c 0c07 	bic.w	ip, ip, #7
   101fc:	f000 0001 	and.w	r0, r0, #1
   10200:	ea40 000c 	orr.w	r0, r0, ip
   10204:	6068      	str	r0, [r5, #4]
   10206:	f04f 0e05 	mov.w	lr, #5
   1020a:	eb05 000c 	add.w	r0, r5, ip
   1020e:	f1bc 0f0f 	cmp.w	ip, #15
   10212:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   10216:	f200 8132 	bhi.w	1047e <_malloc_r+0x51a>
   1021a:	6850      	ldr	r0, [r2, #4]
   1021c:	4615      	mov	r5, r2
   1021e:	4b12      	ldr	r3, [pc, #72]	; (10268 <_malloc_r+0x304>)
   10220:	681a      	ldr	r2, [r3, #0]
   10222:	428a      	cmp	r2, r1
   10224:	bf38      	it	cc
   10226:	6019      	strcc	r1, [r3, #0]
   10228:	4b10      	ldr	r3, [pc, #64]	; (1026c <_malloc_r+0x308>)
   1022a:	681a      	ldr	r2, [r3, #0]
   1022c:	428a      	cmp	r2, r1
   1022e:	bf38      	it	cc
   10230:	6019      	strcc	r1, [r3, #0]
   10232:	e094      	b.n	1035e <_malloc_r+0x3fa>
   10234:	19aa      	adds	r2, r5, r6
   10236:	f043 0301 	orr.w	r3, r3, #1
   1023a:	f046 0601 	orr.w	r6, r6, #1
   1023e:	606e      	str	r6, [r5, #4]
   10240:	4620      	mov	r0, r4
   10242:	60ba      	str	r2, [r7, #8]
   10244:	6053      	str	r3, [r2, #4]
   10246:	f000 f943 	bl	104d0 <__malloc_unlock>
   1024a:	3508      	adds	r5, #8
   1024c:	4628      	mov	r0, r5
   1024e:	b003      	add	sp, #12
   10250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10254:	68d9      	ldr	r1, [r3, #12]
   10256:	441a      	add	r2, r3
   10258:	e6a1      	b.n	ff9e <_malloc_r+0x3a>
   1025a:	bf00      	nop
   1025c:	20003088 	.word	0x20003088
   10260:	20004640 	.word	0x20004640
   10264:	20004610 	.word	0x20004610
   10268:	20004638 	.word	0x20004638
   1026c:	2000463c 	.word	0x2000463c
   10270:	20003090 	.word	0x20003090
   10274:	20003490 	.word	0x20003490
   10278:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   1027c:	ea4f 2352 	mov.w	r3, r2, lsr #9
   10280:	d363      	bcc.n	1034a <_malloc_r+0x3e6>
   10282:	2b14      	cmp	r3, #20
   10284:	f200 80b7 	bhi.w	103f6 <_malloc_r+0x492>
   10288:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   1028c:	00c9      	lsls	r1, r1, #3
   1028e:	335b      	adds	r3, #91	; 0x5b
   10290:	eb07 0e01 	add.w	lr, r7, r1
   10294:	5879      	ldr	r1, [r7, r1]
   10296:	f1ae 0e08 	sub.w	lr, lr, #8
   1029a:	458e      	cmp	lr, r1
   1029c:	f000 8091 	beq.w	103c2 <_malloc_r+0x45e>
   102a0:	684b      	ldr	r3, [r1, #4]
   102a2:	f023 0303 	bic.w	r3, r3, #3
   102a6:	4293      	cmp	r3, r2
   102a8:	d902      	bls.n	102b0 <_malloc_r+0x34c>
   102aa:	6889      	ldr	r1, [r1, #8]
   102ac:	458e      	cmp	lr, r1
   102ae:	d1f7      	bne.n	102a0 <_malloc_r+0x33c>
   102b0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   102b4:	687a      	ldr	r2, [r7, #4]
   102b6:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   102ba:	f8ce 5008 	str.w	r5, [lr, #8]
   102be:	60cd      	str	r5, [r1, #12]
   102c0:	e6d6      	b.n	10070 <_malloc_r+0x10c>
   102c2:	2b14      	cmp	r3, #20
   102c4:	d959      	bls.n	1037a <_malloc_r+0x416>
   102c6:	2b54      	cmp	r3, #84	; 0x54
   102c8:	f200 809d 	bhi.w	10406 <_malloc_r+0x4a2>
   102cc:	0b33      	lsrs	r3, r6, #12
   102ce:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   102d2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   102d6:	00c3      	lsls	r3, r0, #3
   102d8:	e68a      	b.n	fff0 <_malloc_r+0x8c>
   102da:	f10e 0e01 	add.w	lr, lr, #1
   102de:	f01e 0f03 	tst.w	lr, #3
   102e2:	f105 0508 	add.w	r5, r5, #8
   102e6:	f47f aed5 	bne.w	10094 <_malloc_r+0x130>
   102ea:	e051      	b.n	10390 <_malloc_r+0x42c>
   102ec:	4442      	add	r2, r8
   102ee:	4645      	mov	r5, r8
   102f0:	6853      	ldr	r3, [r2, #4]
   102f2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   102f6:	f043 0301 	orr.w	r3, r3, #1
   102fa:	6053      	str	r3, [r2, #4]
   102fc:	f855 3f08 	ldr.w	r3, [r5, #8]!
   10300:	4620      	mov	r0, r4
   10302:	60d9      	str	r1, [r3, #12]
   10304:	608b      	str	r3, [r1, #8]
   10306:	f000 f8e3 	bl	104d0 <__malloc_unlock>
   1030a:	e6f3      	b.n	100f4 <_malloc_r+0x190>
   1030c:	08f0      	lsrs	r0, r6, #3
   1030e:	f106 0208 	add.w	r2, r6, #8
   10312:	e637      	b.n	ff84 <_malloc_r+0x20>
   10314:	442a      	add	r2, r5
   10316:	4620      	mov	r0, r4
   10318:	6853      	ldr	r3, [r2, #4]
   1031a:	f043 0301 	orr.w	r3, r3, #1
   1031e:	6053      	str	r3, [r2, #4]
   10320:	3508      	adds	r5, #8
   10322:	f000 f8d5 	bl	104d0 <__malloc_unlock>
   10326:	e6e5      	b.n	100f4 <_malloc_r+0x190>
   10328:	19a9      	adds	r1, r5, r6
   1032a:	4620      	mov	r0, r4
   1032c:	f046 0601 	orr.w	r6, r6, #1
   10330:	f043 0401 	orr.w	r4, r3, #1
   10334:	606e      	str	r6, [r5, #4]
   10336:	e9c7 1104 	strd	r1, r1, [r7, #16]
   1033a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   1033e:	604c      	str	r4, [r1, #4]
   10340:	50ab      	str	r3, [r5, r2]
   10342:	f000 f8c5 	bl	104d0 <__malloc_unlock>
   10346:	3508      	adds	r5, #8
   10348:	e6d4      	b.n	100f4 <_malloc_r+0x190>
   1034a:	0993      	lsrs	r3, r2, #6
   1034c:	f103 0139 	add.w	r1, r3, #57	; 0x39
   10350:	00c9      	lsls	r1, r1, #3
   10352:	3338      	adds	r3, #56	; 0x38
   10354:	e79c      	b.n	10290 <_malloc_r+0x32c>
   10356:	42bd      	cmp	r5, r7
   10358:	d05f      	beq.n	1041a <_malloc_r+0x4b6>
   1035a:	68bd      	ldr	r5, [r7, #8]
   1035c:	6868      	ldr	r0, [r5, #4]
   1035e:	f020 0803 	bic.w	r8, r0, #3
   10362:	4546      	cmp	r6, r8
   10364:	eba8 0306 	sub.w	r3, r8, r6
   10368:	d802      	bhi.n	10370 <_malloc_r+0x40c>
   1036a:	2b0f      	cmp	r3, #15
   1036c:	f73f af62 	bgt.w	10234 <_malloc_r+0x2d0>
   10370:	4620      	mov	r0, r4
   10372:	f000 f8ad 	bl	104d0 <__malloc_unlock>
   10376:	2500      	movs	r5, #0
   10378:	e6bc      	b.n	100f4 <_malloc_r+0x190>
   1037a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1037e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   10382:	00c3      	lsls	r3, r0, #3
   10384:	e634      	b.n	fff0 <_malloc_r+0x8c>
   10386:	f859 3908 	ldr.w	r3, [r9], #-8
   1038a:	454b      	cmp	r3, r9
   1038c:	f040 8096 	bne.w	104bc <_malloc_r+0x558>
   10390:	f010 0f03 	tst.w	r0, #3
   10394:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   10398:	d1f5      	bne.n	10386 <_malloc_r+0x422>
   1039a:	687b      	ldr	r3, [r7, #4]
   1039c:	ea23 0301 	bic.w	r3, r3, r1
   103a0:	607b      	str	r3, [r7, #4]
   103a2:	0049      	lsls	r1, r1, #1
   103a4:	4299      	cmp	r1, r3
   103a6:	f63f aec0 	bhi.w	1012a <_malloc_r+0x1c6>
   103aa:	b919      	cbnz	r1, 103b4 <_malloc_r+0x450>
   103ac:	e6bd      	b.n	1012a <_malloc_r+0x1c6>
   103ae:	0049      	lsls	r1, r1, #1
   103b0:	f10e 0e04 	add.w	lr, lr, #4
   103b4:	4219      	tst	r1, r3
   103b6:	d0fa      	beq.n	103ae <_malloc_r+0x44a>
   103b8:	4670      	mov	r0, lr
   103ba:	e667      	b.n	1008c <_malloc_r+0x128>
   103bc:	f103 0810 	add.w	r8, r3, #16
   103c0:	e6d0      	b.n	10164 <_malloc_r+0x200>
   103c2:	109a      	asrs	r2, r3, #2
   103c4:	f04f 0801 	mov.w	r8, #1
   103c8:	687b      	ldr	r3, [r7, #4]
   103ca:	fa08 f202 	lsl.w	r2, r8, r2
   103ce:	431a      	orrs	r2, r3
   103d0:	607a      	str	r2, [r7, #4]
   103d2:	e770      	b.n	102b6 <_malloc_r+0x352>
   103d4:	eb02 0108 	add.w	r1, r2, r8
   103d8:	4249      	negs	r1, r1
   103da:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   103de:	4651      	mov	r1, sl
   103e0:	4620      	mov	r0, r4
   103e2:	9200      	str	r2, [sp, #0]
   103e4:	f001 fe12 	bl	1200c <_sbrk_r>
   103e8:	1c43      	adds	r3, r0, #1
   103ea:	e9dd 2300 	ldrd	r2, r3, [sp]
   103ee:	f47f aeef 	bne.w	101d0 <_malloc_r+0x26c>
   103f2:	46da      	mov	sl, fp
   103f4:	e6ef      	b.n	101d6 <_malloc_r+0x272>
   103f6:	2b54      	cmp	r3, #84	; 0x54
   103f8:	d825      	bhi.n	10446 <_malloc_r+0x4e2>
   103fa:	0b13      	lsrs	r3, r2, #12
   103fc:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   10400:	00c9      	lsls	r1, r1, #3
   10402:	336e      	adds	r3, #110	; 0x6e
   10404:	e744      	b.n	10290 <_malloc_r+0x32c>
   10406:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1040a:	d825      	bhi.n	10458 <_malloc_r+0x4f4>
   1040c:	0bf3      	lsrs	r3, r6, #15
   1040e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   10412:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   10416:	00c3      	lsls	r3, r0, #3
   10418:	e5ea      	b.n	fff0 <_malloc_r+0x8c>
   1041a:	4b29      	ldr	r3, [pc, #164]	; (104c0 <_malloc_r+0x55c>)
   1041c:	6818      	ldr	r0, [r3, #0]
   1041e:	4440      	add	r0, r8
   10420:	6018      	str	r0, [r3, #0]
   10422:	e6b1      	b.n	10188 <_malloc_r+0x224>
   10424:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   10428:	f1bc 0f00 	cmp.w	ip, #0
   1042c:	f47f aeac 	bne.w	10188 <_malloc_r+0x224>
   10430:	68bd      	ldr	r5, [r7, #8]
   10432:	44c8      	add	r8, r9
   10434:	f048 0001 	orr.w	r0, r8, #1
   10438:	6068      	str	r0, [r5, #4]
   1043a:	e6f0      	b.n	1021e <_malloc_r+0x2ba>
   1043c:	4615      	mov	r5, r2
   1043e:	e6ee      	b.n	1021e <_malloc_r+0x2ba>
   10440:	2301      	movs	r3, #1
   10442:	6053      	str	r3, [r2, #4]
   10444:	e794      	b.n	10370 <_malloc_r+0x40c>
   10446:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1044a:	d823      	bhi.n	10494 <_malloc_r+0x530>
   1044c:	0bd3      	lsrs	r3, r2, #15
   1044e:	f103 0178 	add.w	r1, r3, #120	; 0x78
   10452:	00c9      	lsls	r1, r1, #3
   10454:	3377      	adds	r3, #119	; 0x77
   10456:	e71b      	b.n	10290 <_malloc_r+0x32c>
   10458:	f240 5254 	movw	r2, #1364	; 0x554
   1045c:	4293      	cmp	r3, r2
   1045e:	d823      	bhi.n	104a8 <_malloc_r+0x544>
   10460:	0cb3      	lsrs	r3, r6, #18
   10462:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   10466:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   1046a:	00c3      	lsls	r3, r0, #3
   1046c:	e5c0      	b.n	fff0 <_malloc_r+0x8c>
   1046e:	f1ab 0b08 	sub.w	fp, fp, #8
   10472:	44d8      	add	r8, fp
   10474:	eba8 0802 	sub.w	r8, r8, r2
   10478:	f04f 0a00 	mov.w	sl, #0
   1047c:	e6ab      	b.n	101d6 <_malloc_r+0x272>
   1047e:	f105 0108 	add.w	r1, r5, #8
   10482:	4620      	mov	r0, r4
   10484:	9300      	str	r3, [sp, #0]
   10486:	f002 f967 	bl	12758 <_free_r>
   1048a:	68bd      	ldr	r5, [r7, #8]
   1048c:	9b00      	ldr	r3, [sp, #0]
   1048e:	6868      	ldr	r0, [r5, #4]
   10490:	6819      	ldr	r1, [r3, #0]
   10492:	e6c4      	b.n	1021e <_malloc_r+0x2ba>
   10494:	f240 5154 	movw	r1, #1364	; 0x554
   10498:	428b      	cmp	r3, r1
   1049a:	d80b      	bhi.n	104b4 <_malloc_r+0x550>
   1049c:	0c93      	lsrs	r3, r2, #18
   1049e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   104a2:	00c9      	lsls	r1, r1, #3
   104a4:	337c      	adds	r3, #124	; 0x7c
   104a6:	e6f3      	b.n	10290 <_malloc_r+0x32c>
   104a8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   104ac:	207f      	movs	r0, #127	; 0x7f
   104ae:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   104b2:	e59d      	b.n	fff0 <_malloc_r+0x8c>
   104b4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   104b8:	237e      	movs	r3, #126	; 0x7e
   104ba:	e6e9      	b.n	10290 <_malloc_r+0x32c>
   104bc:	687b      	ldr	r3, [r7, #4]
   104be:	e770      	b.n	103a2 <_malloc_r+0x43e>
   104c0:	20004610 	.word	0x20004610

000104c4 <__malloc_lock>:
   104c4:	4801      	ldr	r0, [pc, #4]	; (104cc <__malloc_lock+0x8>)
   104c6:	f001 bfcf 	b.w	12468 <__retarget_lock_acquire_recursive>
   104ca:	bf00      	nop
   104cc:	20004608 	.word	0x20004608

000104d0 <__malloc_unlock>:
   104d0:	4801      	ldr	r0, [pc, #4]	; (104d8 <__malloc_unlock+0x8>)
   104d2:	f001 bfcb 	b.w	1246c <__retarget_lock_release_recursive>
   104d6:	bf00      	nop
   104d8:	20004608 	.word	0x20004608

000104dc <_realloc_r>:
   104dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104e0:	4617      	mov	r7, r2
   104e2:	2900      	cmp	r1, #0
   104e4:	f000 8098 	beq.w	10618 <_realloc_r+0x13c>
   104e8:	460c      	mov	r4, r1
   104ea:	f107 050b 	add.w	r5, r7, #11
   104ee:	4680      	mov	r8, r0
   104f0:	f7ff ffe8 	bl	104c4 <__malloc_lock>
   104f4:	2d16      	cmp	r5, #22
   104f6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   104fa:	d85b      	bhi.n	105b4 <_realloc_r+0xd8>
   104fc:	2510      	movs	r5, #16
   104fe:	462a      	mov	r2, r5
   10500:	42af      	cmp	r7, r5
   10502:	d85c      	bhi.n	105be <_realloc_r+0xe2>
   10504:	f021 0603 	bic.w	r6, r1, #3
   10508:	4296      	cmp	r6, r2
   1050a:	f1a4 0908 	sub.w	r9, r4, #8
   1050e:	da62      	bge.n	105d6 <_realloc_r+0xfa>
   10510:	4bbc      	ldr	r3, [pc, #752]	; (10804 <_realloc_r+0x328>)
   10512:	f8d3 c008 	ldr.w	ip, [r3, #8]
   10516:	eb09 0006 	add.w	r0, r9, r6
   1051a:	4584      	cmp	ip, r0
   1051c:	f000 8097 	beq.w	1064e <_realloc_r+0x172>
   10520:	f8d0 c004 	ldr.w	ip, [r0, #4]
   10524:	f02c 0301 	bic.w	r3, ip, #1
   10528:	4403      	add	r3, r0
   1052a:	685b      	ldr	r3, [r3, #4]
   1052c:	07db      	lsls	r3, r3, #31
   1052e:	d468      	bmi.n	10602 <_realloc_r+0x126>
   10530:	f02c 0c03 	bic.w	ip, ip, #3
   10534:	eb06 030c 	add.w	r3, r6, ip
   10538:	4293      	cmp	r3, r2
   1053a:	da47      	bge.n	105cc <_realloc_r+0xf0>
   1053c:	07cb      	lsls	r3, r1, #31
   1053e:	d410      	bmi.n	10562 <_realloc_r+0x86>
   10540:	f854 3c08 	ldr.w	r3, [r4, #-8]
   10544:	eba9 0a03 	sub.w	sl, r9, r3
   10548:	f8da 3004 	ldr.w	r3, [sl, #4]
   1054c:	f023 0103 	bic.w	r1, r3, #3
   10550:	448c      	add	ip, r1
   10552:	44b4      	add	ip, r6
   10554:	4594      	cmp	ip, r2
   10556:	f280 8111 	bge.w	1077c <_realloc_r+0x2a0>
   1055a:	1873      	adds	r3, r6, r1
   1055c:	4293      	cmp	r3, r2
   1055e:	f280 80e8 	bge.w	10732 <_realloc_r+0x256>
   10562:	4639      	mov	r1, r7
   10564:	4640      	mov	r0, r8
   10566:	f7ff fcfd 	bl	ff64 <_malloc_r>
   1056a:	4607      	mov	r7, r0
   1056c:	b1e0      	cbz	r0, 105a8 <_realloc_r+0xcc>
   1056e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10572:	f023 0301 	bic.w	r3, r3, #1
   10576:	444b      	add	r3, r9
   10578:	f1a0 0208 	sub.w	r2, r0, #8
   1057c:	4293      	cmp	r3, r2
   1057e:	f000 80d2 	beq.w	10726 <_realloc_r+0x24a>
   10582:	1f32      	subs	r2, r6, #4
   10584:	2a24      	cmp	r2, #36	; 0x24
   10586:	f200 80f5 	bhi.w	10774 <_realloc_r+0x298>
   1058a:	2a13      	cmp	r2, #19
   1058c:	f200 80ac 	bhi.w	106e8 <_realloc_r+0x20c>
   10590:	4603      	mov	r3, r0
   10592:	4622      	mov	r2, r4
   10594:	6811      	ldr	r1, [r2, #0]
   10596:	6019      	str	r1, [r3, #0]
   10598:	6851      	ldr	r1, [r2, #4]
   1059a:	6059      	str	r1, [r3, #4]
   1059c:	6892      	ldr	r2, [r2, #8]
   1059e:	609a      	str	r2, [r3, #8]
   105a0:	4621      	mov	r1, r4
   105a2:	4640      	mov	r0, r8
   105a4:	f002 f8d8 	bl	12758 <_free_r>
   105a8:	4640      	mov	r0, r8
   105aa:	f7ff ff91 	bl	104d0 <__malloc_unlock>
   105ae:	4638      	mov	r0, r7
   105b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105b4:	f025 0507 	bic.w	r5, r5, #7
   105b8:	2d00      	cmp	r5, #0
   105ba:	462a      	mov	r2, r5
   105bc:	daa0      	bge.n	10500 <_realloc_r+0x24>
   105be:	230c      	movs	r3, #12
   105c0:	f8c8 3000 	str.w	r3, [r8]
   105c4:	2700      	movs	r7, #0
   105c6:	4638      	mov	r0, r7
   105c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105cc:	461e      	mov	r6, r3
   105ce:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   105d2:	60d3      	str	r3, [r2, #12]
   105d4:	609a      	str	r2, [r3, #8]
   105d6:	1b73      	subs	r3, r6, r5
   105d8:	2b0f      	cmp	r3, #15
   105da:	d822      	bhi.n	10622 <_realloc_r+0x146>
   105dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   105e0:	f003 0301 	and.w	r3, r3, #1
   105e4:	4333      	orrs	r3, r6
   105e6:	444e      	add	r6, r9
   105e8:	f8c9 3004 	str.w	r3, [r9, #4]
   105ec:	6873      	ldr	r3, [r6, #4]
   105ee:	f043 0301 	orr.w	r3, r3, #1
   105f2:	6073      	str	r3, [r6, #4]
   105f4:	4640      	mov	r0, r8
   105f6:	4627      	mov	r7, r4
   105f8:	f7ff ff6a 	bl	104d0 <__malloc_unlock>
   105fc:	4638      	mov	r0, r7
   105fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10602:	07c9      	lsls	r1, r1, #31
   10604:	d4ad      	bmi.n	10562 <_realloc_r+0x86>
   10606:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1060a:	eba9 0a03 	sub.w	sl, r9, r3
   1060e:	f8da 1004 	ldr.w	r1, [sl, #4]
   10612:	f021 0103 	bic.w	r1, r1, #3
   10616:	e7a0      	b.n	1055a <_realloc_r+0x7e>
   10618:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1061c:	4611      	mov	r1, r2
   1061e:	f7ff bca1 	b.w	ff64 <_malloc_r>
   10622:	f8d9 2004 	ldr.w	r2, [r9, #4]
   10626:	eb09 0105 	add.w	r1, r9, r5
   1062a:	f002 0201 	and.w	r2, r2, #1
   1062e:	444e      	add	r6, r9
   10630:	f043 0301 	orr.w	r3, r3, #1
   10634:	432a      	orrs	r2, r5
   10636:	f8c9 2004 	str.w	r2, [r9, #4]
   1063a:	604b      	str	r3, [r1, #4]
   1063c:	6873      	ldr	r3, [r6, #4]
   1063e:	f043 0301 	orr.w	r3, r3, #1
   10642:	3108      	adds	r1, #8
   10644:	6073      	str	r3, [r6, #4]
   10646:	4640      	mov	r0, r8
   10648:	f002 f886 	bl	12758 <_free_r>
   1064c:	e7d2      	b.n	105f4 <_realloc_r+0x118>
   1064e:	f8dc 0004 	ldr.w	r0, [ip, #4]
   10652:	f020 0b03 	bic.w	fp, r0, #3
   10656:	eb06 0c0b 	add.w	ip, r6, fp
   1065a:	f105 0010 	add.w	r0, r5, #16
   1065e:	4584      	cmp	ip, r0
   10660:	da4d      	bge.n	106fe <_realloc_r+0x222>
   10662:	07c9      	lsls	r1, r1, #31
   10664:	f53f af7d 	bmi.w	10562 <_realloc_r+0x86>
   10668:	f854 1c08 	ldr.w	r1, [r4, #-8]
   1066c:	eba9 0a01 	sub.w	sl, r9, r1
   10670:	f8da 1004 	ldr.w	r1, [sl, #4]
   10674:	f021 0103 	bic.w	r1, r1, #3
   10678:	448b      	add	fp, r1
   1067a:	44b3      	add	fp, r6
   1067c:	4558      	cmp	r0, fp
   1067e:	f73f af6c 	bgt.w	1055a <_realloc_r+0x7e>
   10682:	4657      	mov	r7, sl
   10684:	f8da 100c 	ldr.w	r1, [sl, #12]
   10688:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1068c:	1f32      	subs	r2, r6, #4
   1068e:	2a24      	cmp	r2, #36	; 0x24
   10690:	60c1      	str	r1, [r0, #12]
   10692:	6088      	str	r0, [r1, #8]
   10694:	f200 80db 	bhi.w	1084e <_realloc_r+0x372>
   10698:	2a13      	cmp	r2, #19
   1069a:	f240 80d6 	bls.w	1084a <_realloc_r+0x36e>
   1069e:	6821      	ldr	r1, [r4, #0]
   106a0:	f8ca 1008 	str.w	r1, [sl, #8]
   106a4:	6861      	ldr	r1, [r4, #4]
   106a6:	f8ca 100c 	str.w	r1, [sl, #12]
   106aa:	2a1b      	cmp	r2, #27
   106ac:	f200 80df 	bhi.w	1086e <_realloc_r+0x392>
   106b0:	3408      	adds	r4, #8
   106b2:	f10a 0210 	add.w	r2, sl, #16
   106b6:	6821      	ldr	r1, [r4, #0]
   106b8:	6011      	str	r1, [r2, #0]
   106ba:	6861      	ldr	r1, [r4, #4]
   106bc:	6051      	str	r1, [r2, #4]
   106be:	68a1      	ldr	r1, [r4, #8]
   106c0:	6091      	str	r1, [r2, #8]
   106c2:	eb0a 0105 	add.w	r1, sl, r5
   106c6:	ebab 0205 	sub.w	r2, fp, r5
   106ca:	f042 0201 	orr.w	r2, r2, #1
   106ce:	6099      	str	r1, [r3, #8]
   106d0:	604a      	str	r2, [r1, #4]
   106d2:	f8da 3004 	ldr.w	r3, [sl, #4]
   106d6:	f003 0301 	and.w	r3, r3, #1
   106da:	432b      	orrs	r3, r5
   106dc:	4640      	mov	r0, r8
   106de:	f8ca 3004 	str.w	r3, [sl, #4]
   106e2:	f7ff fef5 	bl	104d0 <__malloc_unlock>
   106e6:	e76e      	b.n	105c6 <_realloc_r+0xea>
   106e8:	6823      	ldr	r3, [r4, #0]
   106ea:	6003      	str	r3, [r0, #0]
   106ec:	6863      	ldr	r3, [r4, #4]
   106ee:	6043      	str	r3, [r0, #4]
   106f0:	2a1b      	cmp	r2, #27
   106f2:	d868      	bhi.n	107c6 <_realloc_r+0x2ea>
   106f4:	f104 0208 	add.w	r2, r4, #8
   106f8:	f100 0308 	add.w	r3, r0, #8
   106fc:	e74a      	b.n	10594 <_realloc_r+0xb8>
   106fe:	eb09 0205 	add.w	r2, r9, r5
   10702:	609a      	str	r2, [r3, #8]
   10704:	ebac 0305 	sub.w	r3, ip, r5
   10708:	f043 0301 	orr.w	r3, r3, #1
   1070c:	6053      	str	r3, [r2, #4]
   1070e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10712:	f003 0301 	and.w	r3, r3, #1
   10716:	432b      	orrs	r3, r5
   10718:	4640      	mov	r0, r8
   1071a:	f844 3c04 	str.w	r3, [r4, #-4]
   1071e:	f7ff fed7 	bl	104d0 <__malloc_unlock>
   10722:	4627      	mov	r7, r4
   10724:	e74f      	b.n	105c6 <_realloc_r+0xea>
   10726:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1072a:	f023 0303 	bic.w	r3, r3, #3
   1072e:	441e      	add	r6, r3
   10730:	e751      	b.n	105d6 <_realloc_r+0xfa>
   10732:	4657      	mov	r7, sl
   10734:	f8da 100c 	ldr.w	r1, [sl, #12]
   10738:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1073c:	1f32      	subs	r2, r6, #4
   1073e:	2a24      	cmp	r2, #36	; 0x24
   10740:	60c1      	str	r1, [r0, #12]
   10742:	6088      	str	r0, [r1, #8]
   10744:	d84c      	bhi.n	107e0 <_realloc_r+0x304>
   10746:	2a13      	cmp	r2, #19
   10748:	d948      	bls.n	107dc <_realloc_r+0x300>
   1074a:	6821      	ldr	r1, [r4, #0]
   1074c:	f8ca 1008 	str.w	r1, [sl, #8]
   10750:	6861      	ldr	r1, [r4, #4]
   10752:	f8ca 100c 	str.w	r1, [sl, #12]
   10756:	2a1b      	cmp	r2, #27
   10758:	d856      	bhi.n	10808 <_realloc_r+0x32c>
   1075a:	3408      	adds	r4, #8
   1075c:	f10a 0210 	add.w	r2, sl, #16
   10760:	461e      	mov	r6, r3
   10762:	6823      	ldr	r3, [r4, #0]
   10764:	6013      	str	r3, [r2, #0]
   10766:	6863      	ldr	r3, [r4, #4]
   10768:	6053      	str	r3, [r2, #4]
   1076a:	68a3      	ldr	r3, [r4, #8]
   1076c:	6093      	str	r3, [r2, #8]
   1076e:	46d1      	mov	r9, sl
   10770:	463c      	mov	r4, r7
   10772:	e730      	b.n	105d6 <_realloc_r+0xfa>
   10774:	4621      	mov	r1, r4
   10776:	f001 fabd 	bl	11cf4 <memmove>
   1077a:	e711      	b.n	105a0 <_realloc_r+0xc4>
   1077c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   10780:	4657      	mov	r7, sl
   10782:	60cb      	str	r3, [r1, #12]
   10784:	6099      	str	r1, [r3, #8]
   10786:	f857 1f08 	ldr.w	r1, [r7, #8]!
   1078a:	f8da 300c 	ldr.w	r3, [sl, #12]
   1078e:	60cb      	str	r3, [r1, #12]
   10790:	1f32      	subs	r2, r6, #4
   10792:	2a24      	cmp	r2, #36	; 0x24
   10794:	6099      	str	r1, [r3, #8]
   10796:	d82d      	bhi.n	107f4 <_realloc_r+0x318>
   10798:	2a13      	cmp	r2, #19
   1079a:	d929      	bls.n	107f0 <_realloc_r+0x314>
   1079c:	6823      	ldr	r3, [r4, #0]
   1079e:	f8ca 3008 	str.w	r3, [sl, #8]
   107a2:	6863      	ldr	r3, [r4, #4]
   107a4:	f8ca 300c 	str.w	r3, [sl, #12]
   107a8:	2a1b      	cmp	r2, #27
   107aa:	d842      	bhi.n	10832 <_realloc_r+0x356>
   107ac:	3408      	adds	r4, #8
   107ae:	f10a 0310 	add.w	r3, sl, #16
   107b2:	6822      	ldr	r2, [r4, #0]
   107b4:	601a      	str	r2, [r3, #0]
   107b6:	6862      	ldr	r2, [r4, #4]
   107b8:	605a      	str	r2, [r3, #4]
   107ba:	68a2      	ldr	r2, [r4, #8]
   107bc:	609a      	str	r2, [r3, #8]
   107be:	4666      	mov	r6, ip
   107c0:	46d1      	mov	r9, sl
   107c2:	463c      	mov	r4, r7
   107c4:	e707      	b.n	105d6 <_realloc_r+0xfa>
   107c6:	68a3      	ldr	r3, [r4, #8]
   107c8:	6083      	str	r3, [r0, #8]
   107ca:	68e3      	ldr	r3, [r4, #12]
   107cc:	60c3      	str	r3, [r0, #12]
   107ce:	2a24      	cmp	r2, #36	; 0x24
   107d0:	d026      	beq.n	10820 <_realloc_r+0x344>
   107d2:	f104 0210 	add.w	r2, r4, #16
   107d6:	f100 0310 	add.w	r3, r0, #16
   107da:	e6db      	b.n	10594 <_realloc_r+0xb8>
   107dc:	463a      	mov	r2, r7
   107de:	e7bf      	b.n	10760 <_realloc_r+0x284>
   107e0:	4621      	mov	r1, r4
   107e2:	4638      	mov	r0, r7
   107e4:	461e      	mov	r6, r3
   107e6:	46d1      	mov	r9, sl
   107e8:	f001 fa84 	bl	11cf4 <memmove>
   107ec:	463c      	mov	r4, r7
   107ee:	e6f2      	b.n	105d6 <_realloc_r+0xfa>
   107f0:	463b      	mov	r3, r7
   107f2:	e7de      	b.n	107b2 <_realloc_r+0x2d6>
   107f4:	4621      	mov	r1, r4
   107f6:	4638      	mov	r0, r7
   107f8:	4666      	mov	r6, ip
   107fa:	46d1      	mov	r9, sl
   107fc:	f001 fa7a 	bl	11cf4 <memmove>
   10800:	463c      	mov	r4, r7
   10802:	e6e8      	b.n	105d6 <_realloc_r+0xfa>
   10804:	20003088 	.word	0x20003088
   10808:	68a1      	ldr	r1, [r4, #8]
   1080a:	f8ca 1010 	str.w	r1, [sl, #16]
   1080e:	68e1      	ldr	r1, [r4, #12]
   10810:	f8ca 1014 	str.w	r1, [sl, #20]
   10814:	2a24      	cmp	r2, #36	; 0x24
   10816:	d020      	beq.n	1085a <_realloc_r+0x37e>
   10818:	3410      	adds	r4, #16
   1081a:	f10a 0218 	add.w	r2, sl, #24
   1081e:	e79f      	b.n	10760 <_realloc_r+0x284>
   10820:	6923      	ldr	r3, [r4, #16]
   10822:	6103      	str	r3, [r0, #16]
   10824:	6961      	ldr	r1, [r4, #20]
   10826:	6141      	str	r1, [r0, #20]
   10828:	f104 0218 	add.w	r2, r4, #24
   1082c:	f100 0318 	add.w	r3, r0, #24
   10830:	e6b0      	b.n	10594 <_realloc_r+0xb8>
   10832:	68a3      	ldr	r3, [r4, #8]
   10834:	f8ca 3010 	str.w	r3, [sl, #16]
   10838:	68e3      	ldr	r3, [r4, #12]
   1083a:	f8ca 3014 	str.w	r3, [sl, #20]
   1083e:	2a24      	cmp	r2, #36	; 0x24
   10840:	d021      	beq.n	10886 <_realloc_r+0x3aa>
   10842:	3410      	adds	r4, #16
   10844:	f10a 0318 	add.w	r3, sl, #24
   10848:	e7b3      	b.n	107b2 <_realloc_r+0x2d6>
   1084a:	463a      	mov	r2, r7
   1084c:	e733      	b.n	106b6 <_realloc_r+0x1da>
   1084e:	4621      	mov	r1, r4
   10850:	4638      	mov	r0, r7
   10852:	f001 fa4f 	bl	11cf4 <memmove>
   10856:	4b16      	ldr	r3, [pc, #88]	; (108b0 <_realloc_r+0x3d4>)
   10858:	e733      	b.n	106c2 <_realloc_r+0x1e6>
   1085a:	6922      	ldr	r2, [r4, #16]
   1085c:	f8ca 2018 	str.w	r2, [sl, #24]
   10860:	6962      	ldr	r2, [r4, #20]
   10862:	f8ca 201c 	str.w	r2, [sl, #28]
   10866:	3418      	adds	r4, #24
   10868:	f10a 0220 	add.w	r2, sl, #32
   1086c:	e778      	b.n	10760 <_realloc_r+0x284>
   1086e:	68a1      	ldr	r1, [r4, #8]
   10870:	f8ca 1010 	str.w	r1, [sl, #16]
   10874:	68e1      	ldr	r1, [r4, #12]
   10876:	f8ca 1014 	str.w	r1, [sl, #20]
   1087a:	2a24      	cmp	r2, #36	; 0x24
   1087c:	d00d      	beq.n	1089a <_realloc_r+0x3be>
   1087e:	3410      	adds	r4, #16
   10880:	f10a 0218 	add.w	r2, sl, #24
   10884:	e717      	b.n	106b6 <_realloc_r+0x1da>
   10886:	6923      	ldr	r3, [r4, #16]
   10888:	f8ca 3018 	str.w	r3, [sl, #24]
   1088c:	6963      	ldr	r3, [r4, #20]
   1088e:	f8ca 301c 	str.w	r3, [sl, #28]
   10892:	3418      	adds	r4, #24
   10894:	f10a 0320 	add.w	r3, sl, #32
   10898:	e78b      	b.n	107b2 <_realloc_r+0x2d6>
   1089a:	6922      	ldr	r2, [r4, #16]
   1089c:	f8ca 2018 	str.w	r2, [sl, #24]
   108a0:	6962      	ldr	r2, [r4, #20]
   108a2:	f8ca 201c 	str.w	r2, [sl, #28]
   108a6:	3418      	adds	r4, #24
   108a8:	f10a 0220 	add.w	r2, sl, #32
   108ac:	e703      	b.n	106b6 <_realloc_r+0x1da>
   108ae:	bf00      	nop
   108b0:	20003088 	.word	0x20003088

000108b4 <snprintf>:
   108b4:	b40c      	push	{r2, r3}
   108b6:	b510      	push	{r4, lr}
   108b8:	4b1f      	ldr	r3, [pc, #124]	; (10938 <snprintf+0x84>)
   108ba:	2900      	cmp	r1, #0
   108bc:	681c      	ldr	r4, [r3, #0]
   108be:	b09c      	sub	sp, #112	; 0x70
   108c0:	db35      	blt.n	1092e <snprintf+0x7a>
   108c2:	f44f 7302 	mov.w	r3, #520	; 0x208
   108c6:	f8ad 3014 	strh.w	r3, [sp, #20]
   108ca:	9002      	str	r0, [sp, #8]
   108cc:	9006      	str	r0, [sp, #24]
   108ce:	ab1f      	add	r3, sp, #124	; 0x7c
   108d0:	d018      	beq.n	10904 <snprintf+0x50>
   108d2:	3901      	subs	r1, #1
   108d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   108d8:	9104      	str	r1, [sp, #16]
   108da:	9107      	str	r1, [sp, #28]
   108dc:	f8ad 2016 	strh.w	r2, [sp, #22]
   108e0:	a902      	add	r1, sp, #8
   108e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   108e4:	9301      	str	r3, [sp, #4]
   108e6:	4620      	mov	r0, r4
   108e8:	f002 fc62 	bl	131b0 <_svfprintf_r>
   108ec:	1c42      	adds	r2, r0, #1
   108ee:	da01      	bge.n	108f4 <snprintf+0x40>
   108f0:	238b      	movs	r3, #139	; 0x8b
   108f2:	6023      	str	r3, [r4, #0]
   108f4:	9b02      	ldr	r3, [sp, #8]
   108f6:	2200      	movs	r2, #0
   108f8:	701a      	strb	r2, [r3, #0]
   108fa:	b01c      	add	sp, #112	; 0x70
   108fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10900:	b002      	add	sp, #8
   10902:	4770      	bx	lr
   10904:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10908:	9104      	str	r1, [sp, #16]
   1090a:	9107      	str	r1, [sp, #28]
   1090c:	f8ad 2016 	strh.w	r2, [sp, #22]
   10910:	a902      	add	r1, sp, #8
   10912:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   10914:	9301      	str	r3, [sp, #4]
   10916:	4620      	mov	r0, r4
   10918:	f002 fc4a 	bl	131b0 <_svfprintf_r>
   1091c:	1c43      	adds	r3, r0, #1
   1091e:	da01      	bge.n	10924 <snprintf+0x70>
   10920:	238b      	movs	r3, #139	; 0x8b
   10922:	6023      	str	r3, [r4, #0]
   10924:	b01c      	add	sp, #112	; 0x70
   10926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1092a:	b002      	add	sp, #8
   1092c:	4770      	bx	lr
   1092e:	238b      	movs	r3, #139	; 0x8b
   10930:	6023      	str	r3, [r4, #0]
   10932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10936:	e7f5      	b.n	10924 <snprintf+0x70>
   10938:	200034a4 	.word	0x200034a4
   1093c:	00000000 	.word	0x00000000

00010940 <_strtod_l>:
   10940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10944:	ed2d 8b10 	vpush	{d8-d15}
   10948:	b097      	sub	sp, #92	; 0x5c
   1094a:	468a      	mov	sl, r1
   1094c:	2100      	movs	r1, #0
   1094e:	9207      	str	r2, [sp, #28]
   10950:	9112      	str	r1, [sp, #72]	; 0x48
   10952:	2200      	movs	r2, #0
   10954:	2100      	movs	r1, #0
   10956:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1095a:	4680      	mov	r8, r0
   1095c:	4651      	mov	r1, sl
   1095e:	9111      	str	r1, [sp, #68]	; 0x44
   10960:	460f      	mov	r7, r1
   10962:	f811 2b01 	ldrb.w	r2, [r1], #1
   10966:	2a2d      	cmp	r2, #45	; 0x2d
   10968:	d85e      	bhi.n	10a28 <_strtod_l+0xe8>
   1096a:	a001      	add	r0, pc, #4	; (adr r0, 10970 <_strtod_l+0x30>)
   1096c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   10970:	00010b11 	.word	0x00010b11
   10974:	00010a29 	.word	0x00010a29
   10978:	00010a29 	.word	0x00010a29
   1097c:	00010a29 	.word	0x00010a29
   10980:	00010a29 	.word	0x00010a29
   10984:	00010a29 	.word	0x00010a29
   10988:	00010a29 	.word	0x00010a29
   1098c:	00010a29 	.word	0x00010a29
   10990:	00010a29 	.word	0x00010a29
   10994:	0001095f 	.word	0x0001095f
   10998:	0001095f 	.word	0x0001095f
   1099c:	0001095f 	.word	0x0001095f
   109a0:	0001095f 	.word	0x0001095f
   109a4:	0001095f 	.word	0x0001095f
   109a8:	00010a29 	.word	0x00010a29
   109ac:	00010a29 	.word	0x00010a29
   109b0:	00010a29 	.word	0x00010a29
   109b4:	00010a29 	.word	0x00010a29
   109b8:	00010a29 	.word	0x00010a29
   109bc:	00010a29 	.word	0x00010a29
   109c0:	00010a29 	.word	0x00010a29
   109c4:	00010a29 	.word	0x00010a29
   109c8:	00010a29 	.word	0x00010a29
   109cc:	00010a29 	.word	0x00010a29
   109d0:	00010a29 	.word	0x00010a29
   109d4:	00010a29 	.word	0x00010a29
   109d8:	00010a29 	.word	0x00010a29
   109dc:	00010a29 	.word	0x00010a29
   109e0:	00010a29 	.word	0x00010a29
   109e4:	00010a29 	.word	0x00010a29
   109e8:	00010a29 	.word	0x00010a29
   109ec:	00010a29 	.word	0x00010a29
   109f0:	0001095f 	.word	0x0001095f
   109f4:	00010a29 	.word	0x00010a29
   109f8:	00010a29 	.word	0x00010a29
   109fc:	00010a29 	.word	0x00010a29
   10a00:	00010a29 	.word	0x00010a29
   10a04:	00010a29 	.word	0x00010a29
   10a08:	00010a29 	.word	0x00010a29
   10a0c:	00010a29 	.word	0x00010a29
   10a10:	00010a29 	.word	0x00010a29
   10a14:	00010a29 	.word	0x00010a29
   10a18:	00010a29 	.word	0x00010a29
   10a1c:	0001114b 	.word	0x0001114b
   10a20:	00010a29 	.word	0x00010a29
   10a24:	00011137 	.word	0x00011137
   10a28:	2100      	movs	r1, #0
   10a2a:	9109      	str	r1, [sp, #36]	; 0x24
   10a2c:	2a30      	cmp	r2, #48	; 0x30
   10a2e:	d07d      	beq.n	10b2c <_strtod_l+0x1ec>
   10a30:	2300      	movs	r3, #0
   10a32:	9308      	str	r3, [sp, #32]
   10a34:	2a2f      	cmp	r2, #47	; 0x2f
   10a36:	4614      	mov	r4, r2
   10a38:	f240 84cd 	bls.w	113d6 <_strtod_l+0xa96>
   10a3c:	f04f 0900 	mov.w	r9, #0
   10a40:	4638      	mov	r0, r7
   10a42:	464e      	mov	r6, r9
   10a44:	464d      	mov	r5, r9
   10a46:	e012      	b.n	10a6e <_strtod_l+0x12e>
   10a48:	3001      	adds	r0, #1
   10a4a:	2d08      	cmp	r5, #8
   10a4c:	9011      	str	r0, [sp, #68]	; 0x44
   10a4e:	bfc8      	it	gt
   10a50:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
   10a54:	7804      	ldrb	r4, [r0, #0]
   10a56:	bfc6      	itte	gt
   10a58:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
   10a5c:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
   10a60:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
   10a64:	2c2f      	cmp	r4, #47	; 0x2f
   10a66:	f105 0501 	add.w	r5, r5, #1
   10a6a:	4622      	mov	r2, r4
   10a6c:	dd6f      	ble.n	10b4e <_strtod_l+0x20e>
   10a6e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   10a72:	2c39      	cmp	r4, #57	; 0x39
   10a74:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   10a78:	dde6      	ble.n	10a48 <_strtod_l+0x108>
   10a7a:	499f      	ldr	r1, [pc, #636]	; (10cf8 <_strtod_l+0x3b8>)
   10a7c:	2201      	movs	r2, #1
   10a7e:	f001 fa07 	bl	11e90 <strncmp>
   10a82:	2800      	cmp	r0, #0
   10a84:	d137      	bne.n	10af6 <_strtod_l+0x1b6>
   10a86:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10a88:	461a      	mov	r2, r3
   10a8a:	3301      	adds	r3, #1
   10a8c:	9311      	str	r3, [sp, #68]	; 0x44
   10a8e:	7854      	ldrb	r4, [r2, #1]
   10a90:	2d00      	cmp	r5, #0
   10a92:	f040 8543 	bne.w	1151c <_strtod_l+0xbdc>
   10a96:	2c30      	cmp	r4, #48	; 0x30
   10a98:	f040 8524 	bne.w	114e4 <_strtod_l+0xba4>
   10a9c:	f1c3 0201 	rsb	r2, r3, #1
   10aa0:	1898      	adds	r0, r3, r2
   10aa2:	3301      	adds	r3, #1
   10aa4:	9311      	str	r3, [sp, #68]	; 0x44
   10aa6:	781c      	ldrb	r4, [r3, #0]
   10aa8:	2c30      	cmp	r4, #48	; 0x30
   10aaa:	d0f9      	beq.n	10aa0 <_strtod_l+0x160>
   10aac:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   10ab0:	2b08      	cmp	r3, #8
   10ab2:	f200 8301 	bhi.w	110b8 <_strtod_l+0x778>
   10ab6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   10ab8:	1c43      	adds	r3, r0, #1
   10aba:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   10abe:	930b      	str	r3, [sp, #44]	; 0x2c
   10ac0:	2501      	movs	r5, #1
   10ac2:	46bc      	mov	ip, r7
   10ac4:	f04f 0e00 	mov.w	lr, #0
   10ac8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   10acc:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
   10ad0:	2000      	movs	r0, #0
   10ad2:	f10c 0301 	add.w	r3, ip, #1
   10ad6:	9311      	str	r3, [sp, #68]	; 0x44
   10ad8:	f89c 4001 	ldrb.w	r4, [ip, #1]
   10adc:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   10ae0:	2909      	cmp	r1, #9
   10ae2:	f200 82bb 	bhi.w	1105c <_strtod_l+0x71c>
   10ae6:	3001      	adds	r0, #1
   10ae8:	468b      	mov	fp, r1
   10aea:	2900      	cmp	r1, #0
   10aec:	f040 844f 	bne.w	1138e <_strtod_l+0xa4e>
   10af0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   10af4:	e7ed      	b.n	10ad2 <_strtod_l+0x192>
   10af6:	2000      	movs	r0, #0
   10af8:	2c65      	cmp	r4, #101	; 0x65
   10afa:	46ae      	mov	lr, r5
   10afc:	900b      	str	r0, [sp, #44]	; 0x2c
   10afe:	4684      	mov	ip, r0
   10b00:	d001      	beq.n	10b06 <_strtod_l+0x1c6>
   10b02:	2c45      	cmp	r4, #69	; 0x45
   10b04:	d130      	bne.n	10b68 <_strtod_l+0x228>
   10b06:	2d00      	cmp	r5, #0
   10b08:	d16b      	bne.n	10be2 <_strtod_l+0x2a2>
   10b0a:	9b08      	ldr	r3, [sp, #32]
   10b0c:	4303      	orrs	r3, r0
   10b0e:	d167      	bne.n	10be0 <_strtod_l+0x2a0>
   10b10:	9b07      	ldr	r3, [sp, #28]
   10b12:	ed9f 8b77 	vldr	d8, [pc, #476]	; 10cf0 <_strtod_l+0x3b0>
   10b16:	b113      	cbz	r3, 10b1e <_strtod_l+0x1de>
   10b18:	9b07      	ldr	r3, [sp, #28]
   10b1a:	f8c3 a000 	str.w	sl, [r3]
   10b1e:	eeb0 0b48 	vmov.f64	d0, d8
   10b22:	b017      	add	sp, #92	; 0x5c
   10b24:	ecbd 8b10 	vpop	{d8-d15}
   10b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b2c:	787a      	ldrb	r2, [r7, #1]
   10b2e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   10b32:	2a58      	cmp	r2, #88	; 0x58
   10b34:	f000 840c 	beq.w	11350 <_strtod_l+0xa10>
   10b38:	3701      	adds	r7, #1
   10b3a:	9711      	str	r7, [sp, #68]	; 0x44
   10b3c:	783a      	ldrb	r2, [r7, #0]
   10b3e:	2a30      	cmp	r2, #48	; 0x30
   10b40:	d0fa      	beq.n	10b38 <_strtod_l+0x1f8>
   10b42:	2a00      	cmp	r2, #0
   10b44:	f000 80b7 	beq.w	10cb6 <_strtod_l+0x376>
   10b48:	2301      	movs	r3, #1
   10b4a:	9308      	str	r3, [sp, #32]
   10b4c:	e772      	b.n	10a34 <_strtod_l+0xf4>
   10b4e:	496a      	ldr	r1, [pc, #424]	; (10cf8 <_strtod_l+0x3b8>)
   10b50:	2201      	movs	r2, #1
   10b52:	f001 f99d 	bl	11e90 <strncmp>
   10b56:	2800      	cmp	r0, #0
   10b58:	f000 80c0 	beq.w	10cdc <_strtod_l+0x39c>
   10b5c:	46ae      	mov	lr, r5
   10b5e:	f04f 0c00 	mov.w	ip, #0
   10b62:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   10b66:	4660      	mov	r0, ip
   10b68:	f04f 0b00 	mov.w	fp, #0
   10b6c:	2d00      	cmp	r5, #0
   10b6e:	d07e      	beq.n	10c6e <_strtod_l+0x32e>
   10b70:	ee07 6a90 	vmov	s15, r6
   10b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10b76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   10b7a:	ebab 0303 	sub.w	r3, fp, r3
   10b7e:	f1be 0f00 	cmp.w	lr, #0
   10b82:	bf08      	it	eq
   10b84:	46ae      	moveq	lr, r5
   10b86:	2d10      	cmp	r5, #16
   10b88:	930a      	str	r3, [sp, #40]	; 0x28
   10b8a:	462b      	mov	r3, r5
   10b8c:	bfa8      	it	ge
   10b8e:	2310      	movge	r3, #16
   10b90:	2d09      	cmp	r5, #9
   10b92:	ed8d 7b04 	vstr	d7, [sp, #16]
   10b96:	dd0c      	ble.n	10bb2 <_strtod_l+0x272>
   10b98:	4a58      	ldr	r2, [pc, #352]	; (10cfc <_strtod_l+0x3bc>)
   10b9a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   10b9e:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
   10ba2:	ee06 9a90 	vmov	s13, r9
   10ba6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
   10baa:	eea7 6b05 	vfma.f64	d6, d7, d5
   10bae:	ed8d 6b04 	vstr	d6, [sp, #16]
   10bb2:	2d0f      	cmp	r5, #15
   10bb4:	f300 80a8 	bgt.w	10d08 <_strtod_l+0x3c8>
   10bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10bba:	2a00      	cmp	r2, #0
   10bbc:	f000 83e4 	beq.w	11388 <_strtod_l+0xa48>
   10bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10bc2:	f340 833c 	ble.w	1123e <_strtod_l+0x8fe>
   10bc6:	2a16      	cmp	r2, #22
   10bc8:	f340 8498 	ble.w	114fc <_strtod_l+0xbbc>
   10bcc:	990a      	ldr	r1, [sp, #40]	; 0x28
   10bce:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   10bd2:	428a      	cmp	r2, r1
   10bd4:	f280 84a6 	bge.w	11524 <_strtod_l+0xbe4>
   10bd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10bda:	1aeb      	subs	r3, r5, r3
   10bdc:	4413      	add	r3, r2
   10bde:	e099      	b.n	10d14 <_strtod_l+0x3d4>
   10be0:	2500      	movs	r5, #0
   10be2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   10be6:	f10a 0301 	add.w	r3, sl, #1
   10bea:	9311      	str	r3, [sp, #68]	; 0x44
   10bec:	f89a 4001 	ldrb.w	r4, [sl, #1]
   10bf0:	2c2b      	cmp	r4, #43	; 0x2b
   10bf2:	f000 825e 	beq.w	110b2 <_strtod_l+0x772>
   10bf6:	2c2d      	cmp	r4, #45	; 0x2d
   10bf8:	f000 81f7 	beq.w	10fea <_strtod_l+0x6aa>
   10bfc:	2300      	movs	r3, #0
   10bfe:	930a      	str	r3, [sp, #40]	; 0x28
   10c00:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10c04:	2b09      	cmp	r3, #9
   10c06:	f200 81eb 	bhi.w	10fe0 <_strtod_l+0x6a0>
   10c0a:	2c30      	cmp	r4, #48	; 0x30
   10c0c:	d105      	bne.n	10c1a <_strtod_l+0x2da>
   10c0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10c10:	3301      	adds	r3, #1
   10c12:	9311      	str	r3, [sp, #68]	; 0x44
   10c14:	781c      	ldrb	r4, [r3, #0]
   10c16:	2c30      	cmp	r4, #48	; 0x30
   10c18:	d0fa      	beq.n	10c10 <_strtod_l+0x2d0>
   10c1a:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   10c1e:	2b08      	cmp	r3, #8
   10c20:	d8a2      	bhi.n	10b68 <_strtod_l+0x228>
   10c22:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10c24:	920c      	str	r2, [sp, #48]	; 0x30
   10c26:	1c53      	adds	r3, r2, #1
   10c28:	9311      	str	r3, [sp, #68]	; 0x44
   10c2a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   10c2e:	7854      	ldrb	r4, [r2, #1]
   10c30:	2c2f      	cmp	r4, #47	; 0x2f
   10c32:	dc07      	bgt.n	10c44 <_strtod_l+0x304>
   10c34:	e3de      	b.n	113f4 <_strtod_l+0xab4>
   10c36:	3301      	adds	r3, #1
   10c38:	9311      	str	r3, [sp, #68]	; 0x44
   10c3a:	784c      	ldrb	r4, [r1, #1]
   10c3c:	2c2f      	cmp	r4, #47	; 0x2f
   10c3e:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
   10c42:	dd06      	ble.n	10c52 <_strtod_l+0x312>
   10c44:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   10c48:	2c39      	cmp	r4, #57	; 0x39
   10c4a:	4619      	mov	r1, r3
   10c4c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   10c50:	ddf1      	ble.n	10c36 <_strtod_l+0x2f6>
   10c52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10c54:	1a9b      	subs	r3, r3, r2
   10c56:	2b08      	cmp	r3, #8
   10c58:	f340 83cc 	ble.w	113f4 <_strtod_l+0xab4>
   10c5c:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
   10c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10c62:	2b00      	cmp	r3, #0
   10c64:	d082      	beq.n	10b6c <_strtod_l+0x22c>
   10c66:	f1cb 0b00 	rsb	fp, fp, #0
   10c6a:	2d00      	cmp	r5, #0
   10c6c:	d180      	bne.n	10b70 <_strtod_l+0x230>
   10c6e:	9b08      	ldr	r3, [sp, #32]
   10c70:	4303      	orrs	r3, r0
   10c72:	d120      	bne.n	10cb6 <_strtod_l+0x376>
   10c74:	f1bc 0f00 	cmp.w	ip, #0
   10c78:	f47f af4a 	bne.w	10b10 <_strtod_l+0x1d0>
   10c7c:	2c69      	cmp	r4, #105	; 0x69
   10c7e:	f000 83cf 	beq.w	11420 <_strtod_l+0xae0>
   10c82:	f300 82f3 	bgt.w	1126c <_strtod_l+0x92c>
   10c86:	2c49      	cmp	r4, #73	; 0x49
   10c88:	f000 83ca 	beq.w	11420 <_strtod_l+0xae0>
   10c8c:	2c4e      	cmp	r4, #78	; 0x4e
   10c8e:	f47f af3f 	bne.w	10b10 <_strtod_l+0x1d0>
   10c92:	491b      	ldr	r1, [pc, #108]	; (10d00 <_strtod_l+0x3c0>)
   10c94:	a811      	add	r0, sp, #68	; 0x44
   10c96:	f002 f981 	bl	12f9c <__match>
   10c9a:	2800      	cmp	r0, #0
   10c9c:	f43f af38 	beq.w	10b10 <_strtod_l+0x1d0>
   10ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10ca2:	781b      	ldrb	r3, [r3, #0]
   10ca4:	2b28      	cmp	r3, #40	; 0x28
   10ca6:	f000 84f2 	beq.w	1168e <_strtod_l+0xd4e>
   10caa:	4816      	ldr	r0, [pc, #88]	; (10d04 <_strtod_l+0x3c4>)
   10cac:	f001 fcfc 	bl	126a8 <nan>
   10cb0:	eeb0 8b40 	vmov.f64	d8, d0
   10cb4:	e001      	b.n	10cba <_strtod_l+0x37a>
   10cb6:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 10cf0 <_strtod_l+0x3b0>
   10cba:	9a07      	ldr	r2, [sp, #28]
   10cbc:	b10a      	cbz	r2, 10cc2 <_strtod_l+0x382>
   10cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10cc0:	6013      	str	r3, [r2, #0]
   10cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10cc4:	2b00      	cmp	r3, #0
   10cc6:	f43f af2a 	beq.w	10b1e <_strtod_l+0x1de>
   10cca:	eeb1 8b48 	vneg.f64	d8, d8
   10cce:	eeb0 0b48 	vmov.f64	d0, d8
   10cd2:	b017      	add	sp, #92	; 0x5c
   10cd4:	ecbd 8b10 	vpop	{d8-d15}
   10cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10cdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10cde:	900b      	str	r0, [sp, #44]	; 0x2c
   10ce0:	1c5a      	adds	r2, r3, #1
   10ce2:	9211      	str	r2, [sp, #68]	; 0x44
   10ce4:	785c      	ldrb	r4, [r3, #1]
   10ce6:	46ae      	mov	lr, r5
   10ce8:	e6f8      	b.n	10adc <_strtod_l+0x19c>
   10cea:	bf00      	nop
   10cec:	f3af 8000 	nop.w
	...
   10cf8:	20000fc8 	.word	0x20000fc8
   10cfc:	200002a8 	.word	0x200002a8
   10d00:	200019b4 	.word	0x200019b4
   10d04:	200011ec 	.word	0x200011ec
   10d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10d0a:	1aeb      	subs	r3, r5, r3
   10d0c:	4413      	add	r3, r2
   10d0e:	2b00      	cmp	r3, #0
   10d10:	f340 82b0 	ble.w	11274 <_strtod_l+0x934>
   10d14:	f013 010f 	ands.w	r1, r3, #15
   10d18:	d00a      	beq.n	10d30 <_strtod_l+0x3f0>
   10d1a:	4ac3      	ldr	r2, [pc, #780]	; (11028 <_strtod_l+0x6e8>)
   10d1c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   10d20:	ed9d 6b04 	vldr	d6, [sp, #16]
   10d24:	ed92 7b00 	vldr	d7, [r2]
   10d28:	ee27 7b06 	vmul.f64	d7, d7, d6
   10d2c:	ed8d 7b04 	vstr	d7, [sp, #16]
   10d30:	f033 020f 	bics.w	r2, r3, #15
   10d34:	f040 8238 	bne.w	111a8 <_strtod_l+0x868>
   10d38:	2300      	movs	r3, #0
   10d3a:	9308      	str	r3, [sp, #32]
   10d3c:	9600      	str	r6, [sp, #0]
   10d3e:	462b      	mov	r3, r5
   10d40:	4672      	mov	r2, lr
   10d42:	4639      	mov	r1, r7
   10d44:	4640      	mov	r0, r8
   10d46:	f004 f857 	bl	14df8 <__s2b>
   10d4a:	4681      	mov	r9, r0
   10d4c:	2800      	cmp	r0, #0
   10d4e:	f000 82e1 	beq.w	11314 <_strtod_l+0x9d4>
   10d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d54:	eba3 0b0b 	sub.w	fp, r3, fp
   10d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10d5a:	ed9f eba9 	vldr	d14, [pc, #676]	; 11000 <_strtod_l+0x6c0>
   10d5e:	2b00      	cmp	r3, #0
   10d60:	ed9f cba9 	vldr	d12, [pc, #676]	; 11008 <_strtod_l+0x6c8>
   10d64:	ed9f dbaa 	vldr	d13, [pc, #680]	; 11010 <_strtod_l+0x6d0>
   10d68:	ed9f bbab 	vldr	d11, [pc, #684]	; 11018 <_strtod_l+0x6d8>
   10d6c:	bfb4      	ite	lt
   10d6e:	465a      	movlt	r2, fp
   10d70:	2200      	movge	r2, #0
   10d72:	f04f 0a00 	mov.w	sl, #0
   10d76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10d7a:	920b      	str	r2, [sp, #44]	; 0x2c
   10d7c:	930c      	str	r3, [sp, #48]	; 0x30
   10d7e:	4654      	mov	r4, sl
   10d80:	f8d9 1004 	ldr.w	r1, [r9, #4]
   10d84:	4640      	mov	r0, r8
   10d86:	f003 ffb5 	bl	14cf4 <_Balloc>
   10d8a:	4606      	mov	r6, r0
   10d8c:	2800      	cmp	r0, #0
   10d8e:	f000 810e 	beq.w	10fae <_strtod_l+0x66e>
   10d92:	f8d9 2010 	ldr.w	r2, [r9, #16]
   10d96:	ed9d 8b04 	vldr	d8, [sp, #16]
   10d9a:	3202      	adds	r2, #2
   10d9c:	0092      	lsls	r2, r2, #2
   10d9e:	f109 010c 	add.w	r1, r9, #12
   10da2:	300c      	adds	r0, #12
   10da4:	f7fd fab6 	bl	e314 <memcpy>
   10da8:	eeb0 0b48 	vmov.f64	d0, d8
   10dac:	aa14      	add	r2, sp, #80	; 0x50
   10dae:	a913      	add	r1, sp, #76	; 0x4c
   10db0:	4640      	mov	r0, r8
   10db2:	f004 fbdd 	bl	15570 <__d2b>
   10db6:	9012      	str	r0, [sp, #72]	; 0x48
   10db8:	2800      	cmp	r0, #0
   10dba:	f000 80e4 	beq.w	10f86 <_strtod_l+0x646>
   10dbe:	2101      	movs	r1, #1
   10dc0:	4640      	mov	r0, r8
   10dc2:	f004 f8c1 	bl	14f48 <__i2b>
   10dc6:	4604      	mov	r4, r0
   10dc8:	2800      	cmp	r0, #0
   10dca:	f000 80f0 	beq.w	10fae <_strtod_l+0x66e>
   10dce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10dd0:	2a00      	cmp	r2, #0
   10dd2:	f2c0 80de 	blt.w	10f92 <_strtod_l+0x652>
   10dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10dd8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   10dda:	eb02 0b03 	add.w	fp, r2, r3
   10dde:	9b08      	ldr	r3, [sp, #32]
   10de0:	9d14      	ldr	r5, [sp, #80]	; 0x50
   10de2:	1ad2      	subs	r2, r2, r3
   10de4:	442a      	add	r2, r5
   10de6:	4b91      	ldr	r3, [pc, #580]	; (1102c <_strtod_l+0x6ec>)
   10de8:	3a01      	subs	r2, #1
   10dea:	429a      	cmp	r2, r3
   10dec:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
   10df0:	f280 8098 	bge.w	10f24 <_strtod_l+0x5e4>
   10df4:	1a99      	subs	r1, r3, r2
   10df6:	291f      	cmp	r1, #31
   10df8:	eba5 0501 	sub.w	r5, r5, r1
   10dfc:	f300 80e3 	bgt.w	10fc6 <_strtod_l+0x686>
   10e00:	2201      	movs	r2, #1
   10e02:	fa02 f301 	lsl.w	r3, r2, r1
   10e06:	930d      	str	r3, [sp, #52]	; 0x34
   10e08:	2300      	movs	r3, #0
   10e0a:	930e      	str	r3, [sp, #56]	; 0x38
   10e0c:	442f      	add	r7, r5
   10e0e:	9b08      	ldr	r3, [sp, #32]
   10e10:	445d      	add	r5, fp
   10e12:	45ab      	cmp	fp, r5
   10e14:	465a      	mov	r2, fp
   10e16:	441f      	add	r7, r3
   10e18:	bfa8      	it	ge
   10e1a:	462a      	movge	r2, r5
   10e1c:	42ba      	cmp	r2, r7
   10e1e:	bfa8      	it	ge
   10e20:	463a      	movge	r2, r7
   10e22:	2a00      	cmp	r2, #0
   10e24:	dd03      	ble.n	10e2e <_strtod_l+0x4ee>
   10e26:	1aad      	subs	r5, r5, r2
   10e28:	1abf      	subs	r7, r7, r2
   10e2a:	ebab 0b02 	sub.w	fp, fp, r2
   10e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10e30:	2b00      	cmp	r3, #0
   10e32:	f300 8088 	bgt.w	10f46 <_strtod_l+0x606>
   10e36:	2d00      	cmp	r5, #0
   10e38:	f300 809c 	bgt.w	10f74 <_strtod_l+0x634>
   10e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10e3e:	2b00      	cmp	r3, #0
   10e40:	f300 80b7 	bgt.w	10fb2 <_strtod_l+0x672>
   10e44:	2f00      	cmp	r7, #0
   10e46:	f300 80a9 	bgt.w	10f9c <_strtod_l+0x65c>
   10e4a:	f1bb 0f00 	cmp.w	fp, #0
   10e4e:	dd08      	ble.n	10e62 <_strtod_l+0x522>
   10e50:	4621      	mov	r1, r4
   10e52:	465a      	mov	r2, fp
   10e54:	4640      	mov	r0, r8
   10e56:	f004 f9b3 	bl	151c0 <__lshift>
   10e5a:	4604      	mov	r4, r0
   10e5c:	2800      	cmp	r0, #0
   10e5e:	f000 80a6 	beq.w	10fae <_strtod_l+0x66e>
   10e62:	9912      	ldr	r1, [sp, #72]	; 0x48
   10e64:	4632      	mov	r2, r6
   10e66:	4640      	mov	r0, r8
   10e68:	f004 fa44 	bl	152f4 <__mdiff>
   10e6c:	4682      	mov	sl, r0
   10e6e:	2800      	cmp	r0, #0
   10e70:	f000 809d 	beq.w	10fae <_strtod_l+0x66e>
   10e74:	2300      	movs	r3, #0
   10e76:	68c5      	ldr	r5, [r0, #12]
   10e78:	60c3      	str	r3, [r0, #12]
   10e7a:	4621      	mov	r1, r4
   10e7c:	f004 fa18 	bl	152b0 <__mcmp>
   10e80:	2800      	cmp	r0, #0
   10e82:	f2c0 83c7 	blt.w	11614 <_strtod_l+0xcd4>
   10e86:	f000 8361 	beq.w	1154c <_strtod_l+0xc0c>
   10e8a:	4621      	mov	r1, r4
   10e8c:	4650      	mov	r0, sl
   10e8e:	f004 fbd9 	bl	15644 <__ratio>
   10e92:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
   10e96:	eeb4 0bc7 	vcmpe.f64	d0, d7
   10e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e9e:	d846      	bhi.n	10f2e <_strtod_l+0x5ee>
   10ea0:	2d00      	cmp	r5, #0
   10ea2:	f000 80cb 	beq.w	1103c <_strtod_l+0x6fc>
   10ea6:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   10eaa:	9805      	ldr	r0, [sp, #20]
   10eac:	4b60      	ldr	r3, [pc, #384]	; (11030 <_strtod_l+0x6f0>)
   10eae:	2200      	movs	r2, #0
   10eb0:	4960      	ldr	r1, [pc, #384]	; (11034 <_strtod_l+0x6f4>)
   10eb2:	f8df c184 	ldr.w	ip, [pc, #388]	; 11038 <_strtod_l+0x6f8>
   10eb6:	ea00 0701 	and.w	r7, r0, r1
   10eba:	4567      	cmp	r7, ip
   10ebc:	f000 80d4 	beq.w	11068 <_strtod_l+0x728>
   10ec0:	9908      	ldr	r1, [sp, #32]
   10ec2:	b159      	cbz	r1, 10edc <_strtod_l+0x59c>
   10ec4:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
   10ec8:	d808      	bhi.n	10edc <_strtod_l+0x59c>
   10eca:	eeb4 9bcb 	vcmpe.f64	d9, d11
   10ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10ed2:	f240 8156 	bls.w	11182 <_strtod_l+0x842>
   10ed6:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
   10eda:	1bcb      	subs	r3, r1, r7
   10edc:	eeb0 0b48 	vmov.f64	d0, d8
   10ee0:	ec43 2b1a 	vmov	d10, r2, r3
   10ee4:	f004 fab0 	bl	15448 <__ulp>
   10ee8:	eeaa 8b00 	vfma.f64	d8, d10, d0
   10eec:	ed8d 8b04 	vstr	d8, [sp, #16]
   10ef0:	ee18 3a90 	vmov	r3, s17
   10ef4:	9a08      	ldr	r2, [sp, #32]
   10ef6:	b922      	cbnz	r2, 10f02 <_strtod_l+0x5c2>
   10ef8:	4a4e      	ldr	r2, [pc, #312]	; (11034 <_strtod_l+0x6f4>)
   10efa:	401a      	ands	r2, r3
   10efc:	4297      	cmp	r7, r2
   10efe:	f000 80e4 	beq.w	110ca <_strtod_l+0x78a>
   10f02:	9912      	ldr	r1, [sp, #72]	; 0x48
   10f04:	4640      	mov	r0, r8
   10f06:	f003 ff1b 	bl	14d40 <_Bfree>
   10f0a:	4631      	mov	r1, r6
   10f0c:	4640      	mov	r0, r8
   10f0e:	f003 ff17 	bl	14d40 <_Bfree>
   10f12:	4621      	mov	r1, r4
   10f14:	4640      	mov	r0, r8
   10f16:	f003 ff13 	bl	14d40 <_Bfree>
   10f1a:	4651      	mov	r1, sl
   10f1c:	4640      	mov	r0, r8
   10f1e:	f003 ff0f 	bl	14d40 <_Bfree>
   10f22:	e72d      	b.n	10d80 <_strtod_l+0x440>
   10f24:	2301      	movs	r3, #1
   10f26:	2100      	movs	r1, #0
   10f28:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
   10f2c:	e76e      	b.n	10e0c <_strtod_l+0x4cc>
   10f2e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   10f32:	ee20 9b09 	vmul.f64	d9, d0, d9
   10f36:	2d00      	cmp	r5, #0
   10f38:	d15f      	bne.n	10ffa <_strtod_l+0x6ba>
   10f3a:	eeb1 7b49 	vneg.f64	d7, d9
   10f3e:	9805      	ldr	r0, [sp, #20]
   10f40:	ec53 2b17 	vmov	r2, r3, d7
   10f44:	e7b4      	b.n	10eb0 <_strtod_l+0x570>
   10f46:	4621      	mov	r1, r4
   10f48:	461a      	mov	r2, r3
   10f4a:	4640      	mov	r0, r8
   10f4c:	f004 f8d8 	bl	15100 <__pow5mult>
   10f50:	4604      	mov	r4, r0
   10f52:	b360      	cbz	r0, 10fae <_strtod_l+0x66e>
   10f54:	4601      	mov	r1, r0
   10f56:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10f58:	4640      	mov	r0, r8
   10f5a:	f004 f823 	bl	14fa4 <__multiply>
   10f5e:	b330      	cbz	r0, 10fae <_strtod_l+0x66e>
   10f60:	900f      	str	r0, [sp, #60]	; 0x3c
   10f62:	9912      	ldr	r1, [sp, #72]	; 0x48
   10f64:	4640      	mov	r0, r8
   10f66:	f003 feeb 	bl	14d40 <_Bfree>
   10f6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10f6c:	9212      	str	r2, [sp, #72]	; 0x48
   10f6e:	2d00      	cmp	r5, #0
   10f70:	f77f af64 	ble.w	10e3c <_strtod_l+0x4fc>
   10f74:	9912      	ldr	r1, [sp, #72]	; 0x48
   10f76:	462a      	mov	r2, r5
   10f78:	4640      	mov	r0, r8
   10f7a:	f004 f921 	bl	151c0 <__lshift>
   10f7e:	9012      	str	r0, [sp, #72]	; 0x48
   10f80:	2800      	cmp	r0, #0
   10f82:	f47f af5b 	bne.w	10e3c <_strtod_l+0x4fc>
   10f86:	2322      	movs	r3, #34	; 0x22
   10f88:	ed9f 8b25 	vldr	d8, [pc, #148]	; 11020 <_strtod_l+0x6e0>
   10f8c:	f8c8 3000 	str.w	r3, [r8]
   10f90:	e0bc      	b.n	1110c <_strtod_l+0x7cc>
   10f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10f94:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   10f98:	1a9f      	subs	r7, r3, r2
   10f9a:	e720      	b.n	10dde <_strtod_l+0x49e>
   10f9c:	4631      	mov	r1, r6
   10f9e:	463a      	mov	r2, r7
   10fa0:	4640      	mov	r0, r8
   10fa2:	f004 f90d 	bl	151c0 <__lshift>
   10fa6:	4606      	mov	r6, r0
   10fa8:	2800      	cmp	r0, #0
   10faa:	f47f af4e 	bne.w	10e4a <_strtod_l+0x50a>
   10fae:	9812      	ldr	r0, [sp, #72]	; 0x48
   10fb0:	e7e9      	b.n	10f86 <_strtod_l+0x646>
   10fb2:	4631      	mov	r1, r6
   10fb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10fb6:	4640      	mov	r0, r8
   10fb8:	f004 f8a2 	bl	15100 <__pow5mult>
   10fbc:	4606      	mov	r6, r0
   10fbe:	2800      	cmp	r0, #0
   10fc0:	f47f af40 	bne.w	10e44 <_strtod_l+0x504>
   10fc4:	e7f3      	b.n	10fae <_strtod_l+0x66e>
   10fc6:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
   10fca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   10fce:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
   10fd2:	2101      	movs	r1, #1
   10fd4:	32e2      	adds	r2, #226	; 0xe2
   10fd6:	fa01 f302 	lsl.w	r3, r1, r2
   10fda:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   10fde:	e715      	b.n	10e0c <_strtod_l+0x4cc>
   10fe0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   10fe4:	f04f 0b00 	mov.w	fp, #0
   10fe8:	e5c0      	b.n	10b6c <_strtod_l+0x22c>
   10fea:	2301      	movs	r3, #1
   10fec:	930a      	str	r3, [sp, #40]	; 0x28
   10fee:	f10a 0302 	add.w	r3, sl, #2
   10ff2:	9311      	str	r3, [sp, #68]	; 0x44
   10ff4:	f89a 4002 	ldrb.w	r4, [sl, #2]
   10ff8:	e602      	b.n	10c00 <_strtod_l+0x2c0>
   10ffa:	eeb0 7b49 	vmov.f64	d7, d9
   10ffe:	e79e      	b.n	10f3e <_strtod_l+0x5fe>
   11000:	94a03595 	.word	0x94a03595
   11004:	3fcfffff 	.word	0x3fcfffff
   11008:	94a03595 	.word	0x94a03595
   1100c:	3fdfffff 	.word	0x3fdfffff
   11010:	35afe535 	.word	0x35afe535
   11014:	3fe00000 	.word	0x3fe00000
   11018:	ffc00000 	.word	0xffc00000
   1101c:	41dfffff 	.word	0x41dfffff
   11020:	00000000 	.word	0x00000000
   11024:	7ff00000 	.word	0x7ff00000
   11028:	200002a8 	.word	0x200002a8
   1102c:	fffffc02 	.word	0xfffffc02
   11030:	3ff00000 	.word	0x3ff00000
   11034:	7ff00000 	.word	0x7ff00000
   11038:	7fe00000 	.word	0x7fe00000
   1103c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11040:	2900      	cmp	r1, #0
   11042:	f000 8085 	beq.w	11150 <_strtod_l+0x810>
   11046:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1104a:	2901      	cmp	r1, #1
   1104c:	f000 81d8 	beq.w	11400 <_strtod_l+0xac0>
   11050:	4610      	mov	r0, r2
   11052:	4bb7      	ldr	r3, [pc, #732]	; (11330 <_strtod_l+0x9f0>)
   11054:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   11058:	2200      	movs	r2, #0
   1105a:	e729      	b.n	10eb0 <_strtod_l+0x570>
   1105c:	2c65      	cmp	r4, #101	; 0x65
   1105e:	f04f 0c01 	mov.w	ip, #1
   11062:	f43f adbe 	beq.w	10be2 <_strtod_l+0x2a2>
   11066:	e54c      	b.n	10b02 <_strtod_l+0x1c2>
   11068:	ec43 2b1a 	vmov	d10, r2, r3
   1106c:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
   11070:	9305      	str	r3, [sp, #20]
   11072:	ed9d fb04 	vldr	d15, [sp, #16]
   11076:	eeb0 0b4f 	vmov.f64	d0, d15
   1107a:	f004 f9e5 	bl	15448 <__ulp>
   1107e:	49ad      	ldr	r1, [pc, #692]	; (11334 <_strtod_l+0x9f4>)
   11080:	eeaa fb00 	vfma.f64	d15, d10, d0
   11084:	ee1f 3a90 	vmov	r3, s31
   11088:	4aab      	ldr	r2, [pc, #684]	; (11338 <_strtod_l+0x9f8>)
   1108a:	4019      	ands	r1, r3
   1108c:	4291      	cmp	r1, r2
   1108e:	ed8d fb04 	vstr	d15, [sp, #16]
   11092:	d972      	bls.n	1117a <_strtod_l+0x83a>
   11094:	4ba9      	ldr	r3, [pc, #676]	; (1133c <_strtod_l+0x9fc>)
   11096:	ee18 2a90 	vmov	r2, s17
   1109a:	429a      	cmp	r2, r3
   1109c:	d103      	bne.n	110a6 <_strtod_l+0x766>
   1109e:	ee18 3a10 	vmov	r3, s16
   110a2:	3301      	adds	r3, #1
   110a4:	d083      	beq.n	10fae <_strtod_l+0x66e>
   110a6:	4aa5      	ldr	r2, [pc, #660]	; (1133c <_strtod_l+0x9fc>)
   110a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   110ac:	e9cd 3204 	strd	r3, r2, [sp, #16]
   110b0:	e727      	b.n	10f02 <_strtod_l+0x5c2>
   110b2:	2300      	movs	r3, #0
   110b4:	930a      	str	r3, [sp, #40]	; 0x28
   110b6:	e79a      	b.n	10fee <_strtod_l+0x6ae>
   110b8:	2c65      	cmp	r4, #101	; 0x65
   110ba:	f000 80d0 	beq.w	1125e <_strtod_l+0x91e>
   110be:	2c45      	cmp	r4, #69	; 0x45
   110c0:	f000 80cd 	beq.w	1125e <_strtod_l+0x91e>
   110c4:	f04f 0c01 	mov.w	ip, #1
   110c8:	e5d1      	b.n	10c6e <_strtod_l+0x32e>
   110ca:	ec51 0b19 	vmov	r0, r1, d9
   110ce:	930d      	str	r3, [sp, #52]	; 0x34
   110d0:	f007 f99e 	bl	18410 <__aeabi_d2lz>
   110d4:	f7fe ff00 	bl	fed8 <__aeabi_l2d>
   110d8:	9b04      	ldr	r3, [sp, #16]
   110da:	431d      	orrs	r5, r3
   110dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   110de:	ec41 0b17 	vmov	d7, r0, r1
   110e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   110e6:	431d      	orrs	r5, r3
   110e8:	ee39 9b47 	vsub.f64	d9, d9, d7
   110ec:	f000 80a0 	beq.w	11230 <_strtod_l+0x8f0>
   110f0:	eeb4 9bcc 	vcmpe.f64	d9, d12
   110f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   110f8:	d405      	bmi.n	11106 <_strtod_l+0x7c6>
   110fa:	eeb4 9bcd 	vcmpe.f64	d9, d13
   110fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11102:	f77f aefe 	ble.w	10f02 <_strtod_l+0x5c2>
   11106:	ed9d 8b04 	vldr	d8, [sp, #16]
   1110a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1110c:	4601      	mov	r1, r0
   1110e:	4640      	mov	r0, r8
   11110:	f003 fe16 	bl	14d40 <_Bfree>
   11114:	4631      	mov	r1, r6
   11116:	4640      	mov	r0, r8
   11118:	f003 fe12 	bl	14d40 <_Bfree>
   1111c:	4621      	mov	r1, r4
   1111e:	4640      	mov	r0, r8
   11120:	f003 fe0e 	bl	14d40 <_Bfree>
   11124:	4649      	mov	r1, r9
   11126:	4640      	mov	r0, r8
   11128:	f003 fe0a 	bl	14d40 <_Bfree>
   1112c:	4651      	mov	r1, sl
   1112e:	4640      	mov	r0, r8
   11130:	f003 fe06 	bl	14d40 <_Bfree>
   11134:	e5c1      	b.n	10cba <_strtod_l+0x37a>
   11136:	2201      	movs	r2, #1
   11138:	9209      	str	r2, [sp, #36]	; 0x24
   1113a:	1c79      	adds	r1, r7, #1
   1113c:	9111      	str	r1, [sp, #68]	; 0x44
   1113e:	787a      	ldrb	r2, [r7, #1]
   11140:	2a00      	cmp	r2, #0
   11142:	f43f ace5 	beq.w	10b10 <_strtod_l+0x1d0>
   11146:	460f      	mov	r7, r1
   11148:	e470      	b.n	10a2c <_strtod_l+0xec>
   1114a:	2200      	movs	r2, #0
   1114c:	9209      	str	r2, [sp, #36]	; 0x24
   1114e:	e7f4      	b.n	1113a <_strtod_l+0x7fa>
   11150:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11154:	4610      	mov	r0, r2
   11156:	2b00      	cmp	r3, #0
   11158:	f47f af7b 	bne.w	11052 <_strtod_l+0x712>
   1115c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   11160:	eeb4 0bc7 	vcmpe.f64	d0, d7
   11164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11168:	f100 81d3 	bmi.w	11512 <_strtod_l+0xbd2>
   1116c:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   11170:	ee20 9b09 	vmul.f64	d9, d0, d9
   11174:	eeb1 7b49 	vneg.f64	d7, d9
   11178:	e6e2      	b.n	10f40 <_strtod_l+0x600>
   1117a:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
   1117e:	9305      	str	r3, [sp, #20]
   11180:	e6b8      	b.n	10ef4 <_strtod_l+0x5b4>
   11182:	eebc 9bc9 	vcvt.u32.f64	s18, d9
   11186:	ee19 3a10 	vmov	r3, s18
   1118a:	2b01      	cmp	r3, #1
   1118c:	bf38      	it	cc
   1118e:	2301      	movcc	r3, #1
   11190:	ee09 3a10 	vmov	s18, r3
   11194:	eeb8 9b49 	vcvt.f64.u32	d9, s18
   11198:	2d00      	cmp	r5, #0
   1119a:	f040 813e 	bne.w	1141a <_strtod_l+0xada>
   1119e:	eeb1 7b49 	vneg.f64	d7, d9
   111a2:	ec53 2b17 	vmov	r2, r3, d7
   111a6:	e696      	b.n	10ed6 <_strtod_l+0x596>
   111a8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   111ac:	f300 80b2 	bgt.w	11314 <_strtod_l+0x9d4>
   111b0:	2a10      	cmp	r2, #16
   111b2:	ea4f 1322 	mov.w	r3, r2, asr #4
   111b6:	f340 8286 	ble.w	116c6 <_strtod_l+0xd86>
   111ba:	4c61      	ldr	r4, [pc, #388]	; (11340 <_strtod_l+0xa00>)
   111bc:	ed9d 7b04 	vldr	d7, [sp, #16]
   111c0:	2000      	movs	r0, #0
   111c2:	4622      	mov	r2, r4
   111c4:	4601      	mov	r1, r0
   111c6:	f013 0f01 	tst.w	r3, #1
   111ca:	f101 0101 	add.w	r1, r1, #1
   111ce:	ea4f 0363 	mov.w	r3, r3, asr #1
   111d2:	d004      	beq.n	111de <_strtod_l+0x89e>
   111d4:	ed92 6b00 	vldr	d6, [r2]
   111d8:	2001      	movs	r0, #1
   111da:	ee27 7b06 	vmul.f64	d7, d7, d6
   111de:	2b01      	cmp	r3, #1
   111e0:	f102 0208 	add.w	r2, r2, #8
   111e4:	d1ef      	bne.n	111c6 <_strtod_l+0x886>
   111e6:	b108      	cbz	r0, 111ec <_strtod_l+0x8ac>
   111e8:	ed8d 7b04 	vstr	d7, [sp, #16]
   111ec:	9b05      	ldr	r3, [sp, #20]
   111ee:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   111f2:	9305      	str	r3, [sp, #20]
   111f4:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   111f8:	ed9d 6b04 	vldr	d6, [sp, #16]
   111fc:	ed94 7b00 	vldr	d7, [r4]
   11200:	4b4c      	ldr	r3, [pc, #304]	; (11334 <_strtod_l+0x9f4>)
   11202:	ee27 7b06 	vmul.f64	d7, d7, d6
   11206:	ee17 2a90 	vmov	r2, s15
   1120a:	494e      	ldr	r1, [pc, #312]	; (11344 <_strtod_l+0xa04>)
   1120c:	4013      	ands	r3, r2
   1120e:	428b      	cmp	r3, r1
   11210:	ed8d 7b04 	vstr	d7, [sp, #16]
   11214:	d87e      	bhi.n	11314 <_strtod_l+0x9d4>
   11216:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1121a:	428b      	cmp	r3, r1
   1121c:	f240 81d6 	bls.w	115cc <_strtod_l+0xc8c>
   11220:	4c46      	ldr	r4, [pc, #280]	; (1133c <_strtod_l+0x9fc>)
   11222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11226:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1122a:	2300      	movs	r3, #0
   1122c:	9308      	str	r3, [sp, #32]
   1122e:	e585      	b.n	10d3c <_strtod_l+0x3fc>
   11230:	eeb4 9bce 	vcmpe.f64	d9, d14
   11234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11238:	f57f ae63 	bpl.w	10f02 <_strtod_l+0x5c2>
   1123c:	e763      	b.n	11106 <_strtod_l+0x7c6>
   1123e:	3216      	adds	r2, #22
   11240:	f6ff ad62 	blt.w	10d08 <_strtod_l+0x3c8>
   11244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11246:	eba3 0b0b 	sub.w	fp, r3, fp
   1124a:	4b3f      	ldr	r3, [pc, #252]	; (11348 <_strtod_l+0xa08>)
   1124c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   11250:	ed93 7b00 	vldr	d7, [r3]
   11254:	ed9d 6b04 	vldr	d6, [sp, #16]
   11258:	ee86 8b07 	vdiv.f64	d8, d6, d7
   1125c:	e52d      	b.n	10cba <_strtod_l+0x37a>
   1125e:	f04f 0e00 	mov.w	lr, #0
   11262:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   11266:	f04f 0c01 	mov.w	ip, #1
   1126a:	e44e      	b.n	10b0a <_strtod_l+0x1ca>
   1126c:	2c6e      	cmp	r4, #110	; 0x6e
   1126e:	f43f ad10 	beq.w	10c92 <_strtod_l+0x352>
   11272:	e44d      	b.n	10b10 <_strtod_l+0x1d0>
   11274:	f43f ad60 	beq.w	10d38 <_strtod_l+0x3f8>
   11278:	425b      	negs	r3, r3
   1127a:	f013 010f 	ands.w	r1, r3, #15
   1127e:	d00a      	beq.n	11296 <_strtod_l+0x956>
   11280:	4a31      	ldr	r2, [pc, #196]	; (11348 <_strtod_l+0xa08>)
   11282:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   11286:	ed9d 6b04 	vldr	d6, [sp, #16]
   1128a:	ed92 7b00 	vldr	d7, [r2]
   1128e:	ee86 7b07 	vdiv.f64	d7, d6, d7
   11292:	ed8d 7b04 	vstr	d7, [sp, #16]
   11296:	111b      	asrs	r3, r3, #4
   11298:	f43f ad4e 	beq.w	10d38 <_strtod_l+0x3f8>
   1129c:	2b1f      	cmp	r3, #31
   1129e:	dc33      	bgt.n	11308 <_strtod_l+0x9c8>
   112a0:	f013 0210 	ands.w	r2, r3, #16
   112a4:	bf18      	it	ne
   112a6:	226a      	movne	r2, #106	; 0x6a
   112a8:	ed9d 7b04 	vldr	d7, [sp, #16]
   112ac:	9208      	str	r2, [sp, #32]
   112ae:	4a27      	ldr	r2, [pc, #156]	; (1134c <_strtod_l+0xa0c>)
   112b0:	2100      	movs	r1, #0
   112b2:	07d8      	lsls	r0, r3, #31
   112b4:	d504      	bpl.n	112c0 <_strtod_l+0x980>
   112b6:	ed92 6b00 	vldr	d6, [r2]
   112ba:	2101      	movs	r1, #1
   112bc:	ee27 7b06 	vmul.f64	d7, d7, d6
   112c0:	105b      	asrs	r3, r3, #1
   112c2:	f102 0208 	add.w	r2, r2, #8
   112c6:	d1f4      	bne.n	112b2 <_strtod_l+0x972>
   112c8:	b109      	cbz	r1, 112ce <_strtod_l+0x98e>
   112ca:	ed8d 7b04 	vstr	d7, [sp, #16]
   112ce:	9b08      	ldr	r3, [sp, #32]
   112d0:	b193      	cbz	r3, 112f8 <_strtod_l+0x9b8>
   112d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   112d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
   112da:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   112de:	2b00      	cmp	r3, #0
   112e0:	dd0a      	ble.n	112f8 <_strtod_l+0x9b8>
   112e2:	2b1f      	cmp	r3, #31
   112e4:	f340 822f 	ble.w	11746 <_strtod_l+0xe06>
   112e8:	2000      	movs	r0, #0
   112ea:	2b34      	cmp	r3, #52	; 0x34
   112ec:	9004      	str	r0, [sp, #16]
   112ee:	f340 8240 	ble.w	11772 <_strtod_l+0xe32>
   112f2:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   112f6:	9305      	str	r3, [sp, #20]
   112f8:	ed9d 7b04 	vldr	d7, [sp, #16]
   112fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
   11300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11304:	f47f ad1a 	bne.w	10d3c <_strtod_l+0x3fc>
   11308:	2322      	movs	r3, #34	; 0x22
   1130a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 11320 <_strtod_l+0x9e0>
   1130e:	f8c8 3000 	str.w	r3, [r8]
   11312:	e4d2      	b.n	10cba <_strtod_l+0x37a>
   11314:	2322      	movs	r3, #34	; 0x22
   11316:	ed9f 8b04 	vldr	d8, [pc, #16]	; 11328 <_strtod_l+0x9e8>
   1131a:	f8c8 3000 	str.w	r3, [r8]
   1131e:	e4cc      	b.n	10cba <_strtod_l+0x37a>
	...
   1132c:	7ff00000 	.word	0x7ff00000
   11330:	bff00000 	.word	0xbff00000
   11334:	7ff00000 	.word	0x7ff00000
   11338:	7c9fffff 	.word	0x7c9fffff
   1133c:	7fefffff 	.word	0x7fefffff
   11340:	20000280 	.word	0x20000280
   11344:	7ca00000 	.word	0x7ca00000
   11348:	200002a8 	.word	0x200002a8
   1134c:	20000370 	.word	0x20000370
   11350:	9302      	str	r3, [sp, #8]
   11352:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11354:	9301      	str	r3, [sp, #4]
   11356:	ab12      	add	r3, sp, #72	; 0x48
   11358:	9300      	str	r3, [sp, #0]
   1135a:	4aa7      	ldr	r2, [pc, #668]	; (115f8 <_strtod_l+0xcb8>)
   1135c:	ab13      	add	r3, sp, #76	; 0x4c
   1135e:	a911      	add	r1, sp, #68	; 0x44
   11360:	4640      	mov	r0, r8
   11362:	f001 fb51 	bl	12a08 <__gethex>
   11366:	f010 050f 	ands.w	r5, r0, #15
   1136a:	4604      	mov	r4, r0
   1136c:	f43f aca3 	beq.w	10cb6 <_strtod_l+0x376>
   11370:	2d06      	cmp	r5, #6
   11372:	d174      	bne.n	1145e <_strtod_l+0xb1e>
   11374:	9b07      	ldr	r3, [sp, #28]
   11376:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 115e0 <_strtod_l+0xca0>
   1137a:	3701      	adds	r7, #1
   1137c:	2b00      	cmp	r3, #0
   1137e:	f43f abce 	beq.w	10b1e <_strtod_l+0x1de>
   11382:	601f      	str	r7, [r3, #0]
   11384:	f7ff bbcb 	b.w	10b1e <_strtod_l+0x1de>
   11388:	ed9d 8b04 	vldr	d8, [sp, #16]
   1138c:	e495      	b.n	10cba <_strtod_l+0x37a>
   1138e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11390:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   11394:	4403      	add	r3, r0
   11396:	930b      	str	r3, [sp, #44]	; 0x2c
   11398:	2801      	cmp	r0, #1
   1139a:	f105 0301 	add.w	r3, r5, #1
   1139e:	461a      	mov	r2, r3
   113a0:	d014      	beq.n	113cc <_strtod_l+0xa8c>
   113a2:	4428      	add	r0, r5
   113a4:	1e44      	subs	r4, r0, #1
   113a6:	e003      	b.n	113b0 <_strtod_l+0xa70>
   113a8:	0046      	lsls	r6, r0, #1
   113aa:	429c      	cmp	r4, r3
   113ac:	d00d      	beq.n	113ca <_strtod_l+0xa8a>
   113ae:	3301      	adds	r3, #1
   113b0:	462a      	mov	r2, r5
   113b2:	2a08      	cmp	r2, #8
   113b4:	461d      	mov	r5, r3
   113b6:	eb06 0086 	add.w	r0, r6, r6, lsl #2
   113ba:	d9f5      	bls.n	113a8 <_strtod_l+0xa68>
   113bc:	2b10      	cmp	r3, #16
   113be:	bfdc      	itt	le
   113c0:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   113c4:	ea4f 0949 	movle.w	r9, r9, lsl #1
   113c8:	e7ef      	b.n	113aa <_strtod_l+0xa6a>
   113ca:	3202      	adds	r2, #2
   113cc:	2d08      	cmp	r5, #8
   113ce:	dc3c      	bgt.n	1144a <_strtod_l+0xb0a>
   113d0:	4615      	mov	r5, r2
   113d2:	f7ff bb79 	b.w	10ac8 <_strtod_l+0x188>
   113d6:	4989      	ldr	r1, [pc, #548]	; (115fc <_strtod_l+0xcbc>)
   113d8:	2201      	movs	r2, #1
   113da:	4638      	mov	r0, r7
   113dc:	f000 fd58 	bl	11e90 <strncmp>
   113e0:	2800      	cmp	r0, #0
   113e2:	f000 8082 	beq.w	114ea <_strtod_l+0xbaa>
   113e6:	f04f 0e00 	mov.w	lr, #0
   113ea:	46f1      	mov	r9, lr
   113ec:	4676      	mov	r6, lr
   113ee:	4675      	mov	r5, lr
   113f0:	f7ff bbb5 	b.w	10b5e <_strtod_l+0x21e>
   113f4:	f644 631f 	movw	r3, #19999	; 0x4e1f
   113f8:	459b      	cmp	fp, r3
   113fa:	bfa8      	it	ge
   113fc:	469b      	movge	fp, r3
   113fe:	e42f      	b.n	10c60 <_strtod_l+0x320>
   11400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11404:	4618      	mov	r0, r3
   11406:	2b00      	cmp	r3, #0
   11408:	f47f ae23 	bne.w	11052 <_strtod_l+0x712>
   1140c:	2322      	movs	r3, #34	; 0x22
   1140e:	ed9f 8b74 	vldr	d8, [pc, #464]	; 115e0 <_strtod_l+0xca0>
   11412:	9812      	ldr	r0, [sp, #72]	; 0x48
   11414:	f8c8 3000 	str.w	r3, [r8]
   11418:	e678      	b.n	1110c <_strtod_l+0x7cc>
   1141a:	eeb0 7b49 	vmov.f64	d7, d9
   1141e:	e6c0      	b.n	111a2 <_strtod_l+0x862>
   11420:	4977      	ldr	r1, [pc, #476]	; (11600 <_strtod_l+0xcc0>)
   11422:	a811      	add	r0, sp, #68	; 0x44
   11424:	f001 fdba 	bl	12f9c <__match>
   11428:	2800      	cmp	r0, #0
   1142a:	f43f ab71 	beq.w	10b10 <_strtod_l+0x1d0>
   1142e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11430:	4974      	ldr	r1, [pc, #464]	; (11604 <_strtod_l+0xcc4>)
   11432:	3b01      	subs	r3, #1
   11434:	a811      	add	r0, sp, #68	; 0x44
   11436:	9311      	str	r3, [sp, #68]	; 0x44
   11438:	f001 fdb0 	bl	12f9c <__match>
   1143c:	b910      	cbnz	r0, 11444 <_strtod_l+0xb04>
   1143e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11440:	3301      	adds	r3, #1
   11442:	9311      	str	r3, [sp, #68]	; 0x44
   11444:	ed9f 8b68 	vldr	d8, [pc, #416]	; 115e8 <_strtod_l+0xca8>
   11448:	e437      	b.n	10cba <_strtod_l+0x37a>
   1144a:	2a10      	cmp	r2, #16
   1144c:	bfdc      	itt	le
   1144e:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   11452:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
   11456:	4615      	mov	r5, r2
   11458:	2000      	movs	r0, #0
   1145a:	f7ff bb3a 	b.w	10ad2 <_strtod_l+0x192>
   1145e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11460:	b13a      	cbz	r2, 11472 <_strtod_l+0xb32>
   11462:	2135      	movs	r1, #53	; 0x35
   11464:	a814      	add	r0, sp, #80	; 0x50
   11466:	f004 f91f 	bl	156a8 <__copybits>
   1146a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1146c:	4640      	mov	r0, r8
   1146e:	f003 fc67 	bl	14d40 <_Bfree>
   11472:	3d01      	subs	r5, #1
   11474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11476:	2d04      	cmp	r5, #4
   11478:	f200 818f 	bhi.w	1179a <_strtod_l+0xe5a>
   1147c:	e8df f005 	tbb	[pc, r5]
   11480:	1f2a2d03 	.word	0x1f2a2d03
   11484:	03          	.byte	0x03
   11485:	00          	.byte	0x00
   11486:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11488:	9204      	str	r2, [sp, #16]
   1148a:	f203 4233 	addw	r2, r3, #1075	; 0x433
   1148e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11490:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   11494:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   11498:	9305      	str	r3, [sp, #20]
   1149a:	05e5      	lsls	r5, r4, #23
   1149c:	d502      	bpl.n	114a4 <_strtod_l+0xb64>
   1149e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   114a2:	9305      	str	r3, [sp, #20]
   114a4:	4a58      	ldr	r2, [pc, #352]	; (11608 <_strtod_l+0xcc8>)
   114a6:	401a      	ands	r2, r3
   114a8:	ed9d 8b04 	vldr	d8, [sp, #16]
   114ac:	2a00      	cmp	r2, #0
   114ae:	f47f ac04 	bne.w	10cba <_strtod_l+0x37a>
   114b2:	f000 fdd3 	bl	1205c <__errno>
   114b6:	2322      	movs	r3, #34	; 0x22
   114b8:	6003      	str	r3, [r0, #0]
   114ba:	f7ff bbfe 	b.w	10cba <_strtod_l+0x37a>
   114be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   114c2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   114c6:	e9cd 3604 	strd	r3, r6, [sp, #16]
   114ca:	05e3      	lsls	r3, r4, #23
   114cc:	f57f af5c 	bpl.w	11388 <_strtod_l+0xa48>
   114d0:	9b05      	ldr	r3, [sp, #20]
   114d2:	e7e4      	b.n	1149e <_strtod_l+0xb5e>
   114d4:	4b4c      	ldr	r3, [pc, #304]	; (11608 <_strtod_l+0xcc8>)
   114d6:	9305      	str	r3, [sp, #20]
   114d8:	e7f7      	b.n	114ca <_strtod_l+0xb8a>
   114da:	9b14      	ldr	r3, [sp, #80]	; 0x50
   114dc:	9304      	str	r3, [sp, #16]
   114de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   114e0:	9305      	str	r3, [sp, #20]
   114e2:	e7da      	b.n	1149a <_strtod_l+0xb5a>
   114e4:	2000      	movs	r0, #0
   114e6:	f7ff bae1 	b.w	10aac <_strtod_l+0x16c>
   114ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   114ec:	461a      	mov	r2, r3
   114ee:	3301      	adds	r3, #1
   114f0:	9311      	str	r3, [sp, #68]	; 0x44
   114f2:	7854      	ldrb	r4, [r2, #1]
   114f4:	4606      	mov	r6, r0
   114f6:	4681      	mov	r9, r0
   114f8:	f7ff bacd 	b.w	10a96 <_strtod_l+0x156>
   114fc:	4b43      	ldr	r3, [pc, #268]	; (1160c <_strtod_l+0xccc>)
   114fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11502:	ed93 8b00 	vldr	d8, [r3]
   11506:	ed9d 7b04 	vldr	d7, [sp, #16]
   1150a:	ee28 8b07 	vmul.f64	d8, d8, d7
   1150e:	f7ff bbd4 	b.w	10cba <_strtod_l+0x37a>
   11512:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
   11516:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   1151a:	e511      	b.n	10f40 <_strtod_l+0x600>
   1151c:	46ae      	mov	lr, r5
   1151e:	900b      	str	r0, [sp, #44]	; 0x2c
   11520:	f7ff badc 	b.w	10adc <_strtod_l+0x19c>
   11524:	4b39      	ldr	r3, [pc, #228]	; (1160c <_strtod_l+0xccc>)
   11526:	f1c5 050f 	rsb	r5, r5, #15
   1152a:	1b4a      	subs	r2, r1, r5
   1152c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   11530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11534:	ed95 8b00 	vldr	d8, [r5]
   11538:	ed93 7b00 	vldr	d7, [r3]
   1153c:	ed9d 6b04 	vldr	d6, [sp, #16]
   11540:	ee28 8b06 	vmul.f64	d8, d8, d6
   11544:	ee28 8b07 	vmul.f64	d8, d8, d7
   11548:	f7ff bbb7 	b.w	10cba <_strtod_l+0x37a>
   1154c:	2d00      	cmp	r5, #0
   1154e:	f000 8095 	beq.w	1167c <_strtod_l+0xd3c>
   11552:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
   11556:	4b2e      	ldr	r3, [pc, #184]	; (11610 <_strtod_l+0xcd0>)
   11558:	f3cc 0113 	ubfx	r1, ip, #0, #20
   1155c:	4299      	cmp	r1, r3
   1155e:	4662      	mov	r2, ip
   11560:	f000 80d2 	beq.w	11708 <_strtod_l+0xdc8>
   11564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11566:	2b00      	cmp	r3, #0
   11568:	f000 80a5 	beq.w	116b6 <_strtod_l+0xd76>
   1156c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11570:	4213      	tst	r3, r2
   11572:	4617      	mov	r7, r2
   11574:	d01a      	beq.n	115ac <_strtod_l+0xc6c>
   11576:	eeb0 0b48 	vmov.f64	d0, d8
   1157a:	2d00      	cmp	r5, #0
   1157c:	f000 80a6 	beq.w	116cc <_strtod_l+0xd8c>
   11580:	f003 ff62 	bl	15448 <__ulp>
   11584:	9b08      	ldr	r3, [sp, #32]
   11586:	b17b      	cbz	r3, 115a8 <_strtod_l+0xc68>
   11588:	f3c7 530a 	ubfx	r3, r7, #20, #11
   1158c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   11590:	2b00      	cmp	r3, #0
   11592:	dd09      	ble.n	115a8 <_strtod_l+0xc68>
   11594:	051b      	lsls	r3, r3, #20
   11596:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   1159a:	2000      	movs	r0, #0
   1159c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   115a0:	ec41 0b17 	vmov	d7, r0, r1
   115a4:	ee20 0b07 	vmul.f64	d0, d0, d7
   115a8:	ee38 8b00 	vadd.f64	d8, d8, d0
   115ac:	9b08      	ldr	r3, [sp, #32]
   115ae:	b15b      	cbz	r3, 115c8 <_strtod_l+0xc88>
   115b0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 115f0 <_strtod_l+0xcb0>
   115b4:	4b14      	ldr	r3, [pc, #80]	; (11608 <_strtod_l+0xcc8>)
   115b6:	ee28 8b07 	vmul.f64	d8, d8, d7
   115ba:	ee18 2a90 	vmov	r2, s17
   115be:	4013      	ands	r3, r2
   115c0:	b913      	cbnz	r3, 115c8 <_strtod_l+0xc88>
   115c2:	2322      	movs	r3, #34	; 0x22
   115c4:	f8c8 3000 	str.w	r3, [r8]
   115c8:	9812      	ldr	r0, [sp, #72]	; 0x48
   115ca:	e59f      	b.n	1110c <_strtod_l+0x7cc>
   115cc:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
   115d0:	9305      	str	r3, [sp, #20]
   115d2:	2300      	movs	r3, #0
   115d4:	9308      	str	r3, [sp, #32]
   115d6:	f7ff bbb1 	b.w	10d3c <_strtod_l+0x3fc>
   115da:	bf00      	nop
   115dc:	f3af 8000 	nop.w
	...
   115ec:	7ff00000 	.word	0x7ff00000
   115f0:	00000000 	.word	0x00000000
   115f4:	39500000 	.word	0x39500000
   115f8:	20001ce8 	.word	0x20001ce8
   115fc:	20000fc8 	.word	0x20000fc8
   11600:	200019a8 	.word	0x200019a8
   11604:	200019ac 	.word	0x200019ac
   11608:	7ff00000 	.word	0x7ff00000
   1160c:	200002a8 	.word	0x200002a8
   11610:	000fffff 	.word	0x000fffff
   11614:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11618:	430d      	orrs	r5, r1
   1161a:	d1c7      	bne.n	115ac <_strtod_l+0xc6c>
   1161c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11620:	4617      	mov	r7, r2
   11622:	2b00      	cmp	r3, #0
   11624:	d1c2      	bne.n	115ac <_strtod_l+0xc6c>
   11626:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1162a:	0d1b      	lsrs	r3, r3, #20
   1162c:	051b      	lsls	r3, r3, #20
   1162e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   11632:	d9bb      	bls.n	115ac <_strtod_l+0xc6c>
   11634:	f8da 3014 	ldr.w	r3, [sl, #20]
   11638:	b91b      	cbnz	r3, 11642 <_strtod_l+0xd02>
   1163a:	f8da 3010 	ldr.w	r3, [sl, #16]
   1163e:	2b01      	cmp	r3, #1
   11640:	ddb4      	ble.n	115ac <_strtod_l+0xc6c>
   11642:	4651      	mov	r1, sl
   11644:	2201      	movs	r2, #1
   11646:	4640      	mov	r0, r8
   11648:	f003 fdba 	bl	151c0 <__lshift>
   1164c:	4621      	mov	r1, r4
   1164e:	4682      	mov	sl, r0
   11650:	f003 fe2e 	bl	152b0 <__mcmp>
   11654:	2800      	cmp	r0, #0
   11656:	dda9      	ble.n	115ac <_strtod_l+0xc6c>
   11658:	9b08      	ldr	r3, [sp, #32]
   1165a:	2b00      	cmp	r3, #0
   1165c:	d17e      	bne.n	1175c <_strtod_l+0xe1c>
   1165e:	4b50      	ldr	r3, [pc, #320]	; (117a0 <_strtod_l+0xe60>)
   11660:	403b      	ands	r3, r7
   11662:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   11666:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   1166a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   1166e:	9305      	str	r3, [sp, #20]
   11670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11674:	9304      	str	r3, [sp, #16]
   11676:	ed9d 8b04 	vldr	d8, [sp, #16]
   1167a:	e797      	b.n	115ac <_strtod_l+0xc6c>
   1167c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11680:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11684:	430b      	orrs	r3, r1
   11686:	4617      	mov	r7, r2
   11688:	f47f af6c 	bne.w	11564 <_strtod_l+0xc24>
   1168c:	e7e4      	b.n	11658 <_strtod_l+0xd18>
   1168e:	4945      	ldr	r1, [pc, #276]	; (117a4 <_strtod_l+0xe64>)
   11690:	a811      	add	r0, sp, #68	; 0x44
   11692:	aa14      	add	r2, sp, #80	; 0x50
   11694:	f001 fc9e 	bl	12fd4 <__hexnan>
   11698:	2805      	cmp	r0, #5
   1169a:	f47f ab06 	bne.w	10caa <_strtod_l+0x36a>
   1169e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   116a0:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   116a4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   116a8:	9305      	str	r3, [sp, #20]
   116aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   116ac:	9304      	str	r3, [sp, #16]
   116ae:	ed9d 8b04 	vldr	d8, [sp, #16]
   116b2:	f7ff bb02 	b.w	10cba <_strtod_l+0x37a>
   116b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   116ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   116bc:	4203      	tst	r3, r0
   116be:	f43f af75 	beq.w	115ac <_strtod_l+0xc6c>
   116c2:	460f      	mov	r7, r1
   116c4:	e757      	b.n	11576 <_strtod_l+0xc36>
   116c6:	4c38      	ldr	r4, [pc, #224]	; (117a8 <_strtod_l+0xe68>)
   116c8:	2100      	movs	r1, #0
   116ca:	e58f      	b.n	111ec <_strtod_l+0x8ac>
   116cc:	f003 febc 	bl	15448 <__ulp>
   116d0:	9b08      	ldr	r3, [sp, #32]
   116d2:	2b00      	cmp	r3, #0
   116d4:	d055      	beq.n	11782 <_strtod_l+0xe42>
   116d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
   116da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   116de:	2b00      	cmp	r3, #0
   116e0:	dd09      	ble.n	116f6 <_strtod_l+0xdb6>
   116e2:	051b      	lsls	r3, r3, #20
   116e4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   116e8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   116ec:	4628      	mov	r0, r5
   116ee:	ec41 0b17 	vmov	d7, r0, r1
   116f2:	ee20 0b07 	vmul.f64	d0, d0, d7
   116f6:	ee38 8b40 	vsub.f64	d8, d8, d0
   116fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
   116fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11702:	f47f af55 	bne.w	115b0 <_strtod_l+0xc70>
   11706:	e681      	b.n	1140c <_strtod_l+0xacc>
   11708:	9b08      	ldr	r3, [sp, #32]
   1170a:	9904      	ldr	r1, [sp, #16]
   1170c:	b31b      	cbz	r3, 11756 <_strtod_l+0xe16>
   1170e:	4b24      	ldr	r3, [pc, #144]	; (117a0 <_strtod_l+0xe60>)
   11710:	4013      	ands	r3, r2
   11712:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   11716:	d81e      	bhi.n	11756 <_strtod_l+0xe16>
   11718:	0d1b      	lsrs	r3, r3, #20
   1171a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1171e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11722:	fa00 f303 	lsl.w	r3, r0, r3
   11726:	4299      	cmp	r1, r3
   11728:	f47f af1c 	bne.w	11564 <_strtod_l+0xc24>
   1172c:	4b1f      	ldr	r3, [pc, #124]	; (117ac <_strtod_l+0xe6c>)
   1172e:	429a      	cmp	r2, r3
   11730:	d030      	beq.n	11794 <_strtod_l+0xe54>
   11732:	4b1b      	ldr	r3, [pc, #108]	; (117a0 <_strtod_l+0xe60>)
   11734:	4013      	ands	r3, r2
   11736:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1173a:	9305      	str	r3, [sp, #20]
   1173c:	2300      	movs	r3, #0
   1173e:	9304      	str	r3, [sp, #16]
   11740:	ed9d 8b04 	vldr	d8, [sp, #16]
   11744:	e732      	b.n	115ac <_strtod_l+0xc6c>
   11746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1174a:	fa02 f303 	lsl.w	r3, r2, r3
   1174e:	9a04      	ldr	r2, [sp, #16]
   11750:	401a      	ands	r2, r3
   11752:	9204      	str	r2, [sp, #16]
   11754:	e5d0      	b.n	112f8 <_strtod_l+0x9b8>
   11756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1175a:	e7e4      	b.n	11726 <_strtod_l+0xde6>
   1175c:	4b10      	ldr	r3, [pc, #64]	; (117a0 <_strtod_l+0xe60>)
   1175e:	403b      	ands	r3, r7
   11760:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   11764:	f73f af7d 	bgt.w	11662 <_strtod_l+0xd22>
   11768:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   1176c:	f73f af20 	bgt.w	115b0 <_strtod_l+0xc70>
   11770:	e64c      	b.n	1140c <_strtod_l+0xacc>
   11772:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
   11776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1177a:	4093      	lsls	r3, r2
   1177c:	400b      	ands	r3, r1
   1177e:	9305      	str	r3, [sp, #20]
   11780:	e5ba      	b.n	112f8 <_strtod_l+0x9b8>
   11782:	ee38 8b40 	vsub.f64	d8, d8, d0
   11786:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1178e:	f47f af1b 	bne.w	115c8 <_strtod_l+0xc88>
   11792:	e63b      	b.n	1140c <_strtod_l+0xacc>
   11794:	3101      	adds	r1, #1
   11796:	d1cc      	bne.n	11732 <_strtod_l+0xdf2>
   11798:	e409      	b.n	10fae <_strtod_l+0x66e>
   1179a:	2300      	movs	r3, #0
   1179c:	e67d      	b.n	1149a <_strtod_l+0xb5a>
   1179e:	bf00      	nop
   117a0:	7ff00000 	.word	0x7ff00000
   117a4:	20001cfc 	.word	0x20001cfc
   117a8:	20000280 	.word	0x20000280
   117ac:	7fefffff 	.word	0x7fefffff

000117b0 <strtod>:
   117b0:	b410      	push	{r4}
   117b2:	4c05      	ldr	r4, [pc, #20]	; (117c8 <strtod+0x18>)
   117b4:	4b05      	ldr	r3, [pc, #20]	; (117cc <strtod+0x1c>)
   117b6:	4684      	mov	ip, r0
   117b8:	460a      	mov	r2, r1
   117ba:	6820      	ldr	r0, [r4, #0]
   117bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   117c0:	4661      	mov	r1, ip
   117c2:	f7ff b8bd 	b.w	10940 <_strtod_l>
   117c6:	bf00      	nop
   117c8:	200034a4 	.word	0x200034a4
   117cc:	20002f1c 	.word	0x20002f1c

000117d0 <_strtol_l.constprop.0>:
   117d0:	2b01      	cmp	r3, #1
   117d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117d6:	d040      	beq.n	1185a <_strtol_l.constprop.0+0x8a>
   117d8:	2b24      	cmp	r3, #36	; 0x24
   117da:	4698      	mov	r8, r3
   117dc:	d83d      	bhi.n	1185a <_strtol_l.constprop.0+0x8a>
   117de:	4d4c      	ldr	r5, [pc, #304]	; (11910 <_strtol_l.constprop.0+0x140>)
   117e0:	468e      	mov	lr, r1
   117e2:	4676      	mov	r6, lr
   117e4:	f81e bb01 	ldrb.w	fp, [lr], #1
   117e8:	f815 400b 	ldrb.w	r4, [r5, fp]
   117ec:	f014 0408 	ands.w	r4, r4, #8
   117f0:	d1f7      	bne.n	117e2 <_strtol_l.constprop.0+0x12>
   117f2:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   117f6:	d072      	beq.n	118de <_strtol_l.constprop.0+0x10e>
   117f8:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   117fc:	bf08      	it	eq
   117fe:	f89e b000 	ldrbeq.w	fp, [lr]
   11802:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   11806:	bf08      	it	eq
   11808:	f106 0e02 	addeq.w	lr, r6, #2
   1180c:	2b00      	cmp	r3, #0
   1180e:	d042      	beq.n	11896 <_strtol_l.constprop.0+0xc6>
   11810:	2b10      	cmp	r3, #16
   11812:	d057      	beq.n	118c4 <_strtol_l.constprop.0+0xf4>
   11814:	fbb9 f7f8 	udiv	r7, r9, r8
   11818:	2500      	movs	r5, #0
   1181a:	462e      	mov	r6, r5
   1181c:	fb08 9a17 	mls	sl, r8, r7, r9
   11820:	e005      	b.n	1182e <_strtol_l.constprop.0+0x5e>
   11822:	d033      	beq.n	1188c <_strtol_l.constprop.0+0xbc>
   11824:	fb08 c606 	mla	r6, r8, r6, ip
   11828:	2501      	movs	r5, #1
   1182a:	f81e bb01 	ldrb.w	fp, [lr], #1
   1182e:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
   11832:	f1bc 0f09 	cmp.w	ip, #9
   11836:	d906      	bls.n	11846 <_strtol_l.constprop.0+0x76>
   11838:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
   1183c:	f1bc 0f19 	cmp.w	ip, #25
   11840:	d812      	bhi.n	11868 <_strtol_l.constprop.0+0x98>
   11842:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
   11846:	4563      	cmp	r3, ip
   11848:	dd17      	ble.n	1187a <_strtol_l.constprop.0+0xaa>
   1184a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1184e:	d0ec      	beq.n	1182a <_strtol_l.constprop.0+0x5a>
   11850:	42b7      	cmp	r7, r6
   11852:	d2e6      	bcs.n	11822 <_strtol_l.constprop.0+0x52>
   11854:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11858:	e7e7      	b.n	1182a <_strtol_l.constprop.0+0x5a>
   1185a:	f000 fbff 	bl	1205c <__errno>
   1185e:	2316      	movs	r3, #22
   11860:	6003      	str	r3, [r0, #0]
   11862:	2000      	movs	r0, #0
   11864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11868:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
   1186c:	f1bc 0f19 	cmp.w	ip, #25
   11870:	d803      	bhi.n	1187a <_strtol_l.constprop.0+0xaa>
   11872:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
   11876:	4563      	cmp	r3, ip
   11878:	dce7      	bgt.n	1184a <_strtol_l.constprop.0+0x7a>
   1187a:	1c6b      	adds	r3, r5, #1
   1187c:	d027      	beq.n	118ce <_strtol_l.constprop.0+0xfe>
   1187e:	b98c      	cbnz	r4, 118a4 <_strtol_l.constprop.0+0xd4>
   11880:	b10a      	cbz	r2, 11886 <_strtol_l.constprop.0+0xb6>
   11882:	bba5      	cbnz	r5, 118ee <_strtol_l.constprop.0+0x11e>
   11884:	6011      	str	r1, [r2, #0]
   11886:	4630      	mov	r0, r6
   11888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1188c:	45e2      	cmp	sl, ip
   1188e:	dac9      	bge.n	11824 <_strtol_l.constprop.0+0x54>
   11890:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11894:	e7c9      	b.n	1182a <_strtol_l.constprop.0+0x5a>
   11896:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1189a:	d005      	beq.n	118a8 <_strtol_l.constprop.0+0xd8>
   1189c:	f04f 080a 	mov.w	r8, #10
   118a0:	4643      	mov	r3, r8
   118a2:	e7b7      	b.n	11814 <_strtol_l.constprop.0+0x44>
   118a4:	4276      	negs	r6, r6
   118a6:	e7eb      	b.n	11880 <_strtol_l.constprop.0+0xb0>
   118a8:	f89e 3000 	ldrb.w	r3, [lr]
   118ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   118b0:	2b58      	cmp	r3, #88	; 0x58
   118b2:	d121      	bne.n	118f8 <_strtol_l.constprop.0+0x128>
   118b4:	f04f 0810 	mov.w	r8, #16
   118b8:	f89e b001 	ldrb.w	fp, [lr, #1]
   118bc:	4643      	mov	r3, r8
   118be:	f10e 0e02 	add.w	lr, lr, #2
   118c2:	e7a7      	b.n	11814 <_strtol_l.constprop.0+0x44>
   118c4:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   118c8:	d01a      	beq.n	11900 <_strtol_l.constprop.0+0x130>
   118ca:	4698      	mov	r8, r3
   118cc:	e7a2      	b.n	11814 <_strtol_l.constprop.0+0x44>
   118ce:	2322      	movs	r3, #34	; 0x22
   118d0:	6003      	str	r3, [r0, #0]
   118d2:	b172      	cbz	r2, 118f2 <_strtol_l.constprop.0+0x122>
   118d4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   118d8:	464e      	mov	r6, r9
   118da:	6011      	str	r1, [r2, #0]
   118dc:	e7d3      	b.n	11886 <_strtol_l.constprop.0+0xb6>
   118de:	f89e b000 	ldrb.w	fp, [lr]
   118e2:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   118e6:	f106 0e02 	add.w	lr, r6, #2
   118ea:	2401      	movs	r4, #1
   118ec:	e78e      	b.n	1180c <_strtol_l.constprop.0+0x3c>
   118ee:	46b1      	mov	r9, r6
   118f0:	e7f0      	b.n	118d4 <_strtol_l.constprop.0+0x104>
   118f2:	464e      	mov	r6, r9
   118f4:	4630      	mov	r0, r6
   118f6:	e7c7      	b.n	11888 <_strtol_l.constprop.0+0xb8>
   118f8:	f04f 0808 	mov.w	r8, #8
   118fc:	4643      	mov	r3, r8
   118fe:	e789      	b.n	11814 <_strtol_l.constprop.0+0x44>
   11900:	f89e 5000 	ldrb.w	r5, [lr]
   11904:	f005 05df 	and.w	r5, r5, #223	; 0xdf
   11908:	2d58      	cmp	r5, #88	; 0x58
   1190a:	d0d3      	beq.n	118b4 <_strtol_l.constprop.0+0xe4>
   1190c:	4698      	mov	r8, r3
   1190e:	e781      	b.n	11814 <_strtol_l.constprop.0+0x44>
   11910:	20001831 	.word	0x20001831

00011914 <strtol>:
   11914:	b410      	push	{r4}
   11916:	4c05      	ldr	r4, [pc, #20]	; (1192c <strtol+0x18>)
   11918:	4684      	mov	ip, r0
   1191a:	4613      	mov	r3, r2
   1191c:	6820      	ldr	r0, [r4, #0]
   1191e:	f85d 4b04 	ldr.w	r4, [sp], #4
   11922:	460a      	mov	r2, r1
   11924:	4661      	mov	r1, ip
   11926:	f7ff bf53 	b.w	117d0 <_strtol_l.constprop.0>
   1192a:	bf00      	nop
   1192c:	200034a4 	.word	0x200034a4

00011930 <_strtoul_l.constprop.0>:
   11930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11934:	4607      	mov	r7, r0
   11936:	484c      	ldr	r0, [pc, #304]	; (11a68 <_strtoul_l.constprop.0+0x138>)
   11938:	460e      	mov	r6, r1
   1193a:	4635      	mov	r5, r6
   1193c:	f816 eb01 	ldrb.w	lr, [r6], #1
   11940:	f810 c00e 	ldrb.w	ip, [r0, lr]
   11944:	f01c 0c08 	ands.w	ip, ip, #8
   11948:	d1f7      	bne.n	1193a <_strtoul_l.constprop.0+0xa>
   1194a:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   1194e:	d05a      	beq.n	11a06 <_strtoul_l.constprop.0+0xd6>
   11950:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   11954:	bf03      	ittte	eq
   11956:	f896 e000 	ldrbeq.w	lr, [r6]
   1195a:	4664      	moveq	r4, ip
   1195c:	1cae      	addeq	r6, r5, #2
   1195e:	4664      	movne	r4, ip
   11960:	b15b      	cbz	r3, 1197a <_strtoul_l.constprop.0+0x4a>
   11962:	2b10      	cmp	r3, #16
   11964:	d054      	beq.n	11a10 <_strtoul_l.constprop.0+0xe0>
   11966:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1196a:	fbb8 f8f3 	udiv	r8, r8, r3
   1196e:	fb03 fa08 	mul.w	sl, r3, r8
   11972:	ea6f 0a0a 	mvn.w	sl, sl
   11976:	4699      	mov	r9, r3
   11978:	e008      	b.n	1198c <_strtoul_l.constprop.0+0x5c>
   1197a:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   1197e:	d05a      	beq.n	11a36 <_strtoul_l.constprop.0+0x106>
   11980:	230a      	movs	r3, #10
   11982:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 11a6c <_strtoul_l.constprop.0+0x13c>
   11986:	f04f 0a05 	mov.w	sl, #5
   1198a:	4699      	mov	r9, r3
   1198c:	2500      	movs	r5, #0
   1198e:	4628      	mov	r0, r5
   11990:	e005      	b.n	1199e <_strtoul_l.constprop.0+0x6e>
   11992:	d02c      	beq.n	119ee <_strtoul_l.constprop.0+0xbe>
   11994:	fb09 c000 	mla	r0, r9, r0, ip
   11998:	2501      	movs	r5, #1
   1199a:	f816 eb01 	ldrb.w	lr, [r6], #1
   1199e:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   119a2:	f1bc 0f09 	cmp.w	ip, #9
   119a6:	d906      	bls.n	119b6 <_strtoul_l.constprop.0+0x86>
   119a8:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   119ac:	f1bc 0f19 	cmp.w	ip, #25
   119b0:	d80b      	bhi.n	119ca <_strtoul_l.constprop.0+0x9a>
   119b2:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   119b6:	4563      	cmp	r3, ip
   119b8:	dd10      	ble.n	119dc <_strtoul_l.constprop.0+0xac>
   119ba:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   119be:	d0ec      	beq.n	1199a <_strtoul_l.constprop.0+0x6a>
   119c0:	4540      	cmp	r0, r8
   119c2:	d9e6      	bls.n	11992 <_strtoul_l.constprop.0+0x62>
   119c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   119c8:	e7e7      	b.n	1199a <_strtoul_l.constprop.0+0x6a>
   119ca:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   119ce:	f1bc 0f19 	cmp.w	ip, #25
   119d2:	d803      	bhi.n	119dc <_strtoul_l.constprop.0+0xac>
   119d4:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   119d8:	4563      	cmp	r3, ip
   119da:	dcee      	bgt.n	119ba <_strtoul_l.constprop.0+0x8a>
   119dc:	1c6b      	adds	r3, r5, #1
   119de:	d00b      	beq.n	119f8 <_strtoul_l.constprop.0+0xc8>
   119e0:	b104      	cbz	r4, 119e4 <_strtoul_l.constprop.0+0xb4>
   119e2:	4240      	negs	r0, r0
   119e4:	b10a      	cbz	r2, 119ea <_strtoul_l.constprop.0+0xba>
   119e6:	b965      	cbnz	r5, 11a02 <_strtoul_l.constprop.0+0xd2>
   119e8:	6011      	str	r1, [r2, #0]
   119ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   119ee:	45d4      	cmp	ip, sl
   119f0:	ddd0      	ble.n	11994 <_strtoul_l.constprop.0+0x64>
   119f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   119f6:	e7d0      	b.n	1199a <_strtoul_l.constprop.0+0x6a>
   119f8:	2322      	movs	r3, #34	; 0x22
   119fa:	603b      	str	r3, [r7, #0]
   119fc:	4628      	mov	r0, r5
   119fe:	2a00      	cmp	r2, #0
   11a00:	d0f3      	beq.n	119ea <_strtoul_l.constprop.0+0xba>
   11a02:	1e71      	subs	r1, r6, #1
   11a04:	e7f0      	b.n	119e8 <_strtoul_l.constprop.0+0xb8>
   11a06:	f896 e000 	ldrb.w	lr, [r6]
   11a0a:	2401      	movs	r4, #1
   11a0c:	1cae      	adds	r6, r5, #2
   11a0e:	e7a7      	b.n	11960 <_strtoul_l.constprop.0+0x30>
   11a10:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11a14:	d121      	bne.n	11a5a <_strtoul_l.constprop.0+0x12a>
   11a16:	7830      	ldrb	r0, [r6, #0]
   11a18:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   11a1c:	2858      	cmp	r0, #88	; 0x58
   11a1e:	d116      	bne.n	11a4e <_strtoul_l.constprop.0+0x11e>
   11a20:	f04f 0910 	mov.w	r9, #16
   11a24:	f896 e001 	ldrb.w	lr, [r6, #1]
   11a28:	f04f 0a0f 	mov.w	sl, #15
   11a2c:	3602      	adds	r6, #2
   11a2e:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11a32:	464b      	mov	r3, r9
   11a34:	e7aa      	b.n	1198c <_strtoul_l.constprop.0+0x5c>
   11a36:	7833      	ldrb	r3, [r6, #0]
   11a38:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11a3c:	2b58      	cmp	r3, #88	; 0x58
   11a3e:	d0ef      	beq.n	11a20 <_strtoul_l.constprop.0+0xf0>
   11a40:	2308      	movs	r3, #8
   11a42:	f04f 0a07 	mov.w	sl, #7
   11a46:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   11a4a:	4699      	mov	r9, r3
   11a4c:	e79e      	b.n	1198c <_strtoul_l.constprop.0+0x5c>
   11a4e:	4699      	mov	r9, r3
   11a50:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11a54:	f04f 0a0f 	mov.w	sl, #15
   11a58:	e798      	b.n	1198c <_strtoul_l.constprop.0+0x5c>
   11a5a:	f04f 0a0f 	mov.w	sl, #15
   11a5e:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11a62:	4699      	mov	r9, r3
   11a64:	e792      	b.n	1198c <_strtoul_l.constprop.0+0x5c>
   11a66:	bf00      	nop
   11a68:	20001831 	.word	0x20001831
   11a6c:	19999999 	.word	0x19999999

00011a70 <strtoul>:
   11a70:	b410      	push	{r4}
   11a72:	4c05      	ldr	r4, [pc, #20]	; (11a88 <strtoul+0x18>)
   11a74:	4684      	mov	ip, r0
   11a76:	4613      	mov	r3, r2
   11a78:	6820      	ldr	r0, [r4, #0]
   11a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
   11a7e:	460a      	mov	r2, r1
   11a80:	4661      	mov	r1, ip
   11a82:	f7ff bf55 	b.w	11930 <_strtoul_l.constprop.0>
   11a86:	bf00      	nop
   11a88:	200034a4 	.word	0x200034a4

00011a8c <sprintf>:
   11a8c:	b40e      	push	{r1, r2, r3}
   11a8e:	b510      	push	{r4, lr}
   11a90:	b09d      	sub	sp, #116	; 0x74
   11a92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11a96:	ab1f      	add	r3, sp, #124	; 0x7c
   11a98:	e9cd 0106 	strd	r0, r1, [sp, #24]
   11a9c:	9104      	str	r1, [sp, #16]
   11a9e:	4909      	ldr	r1, [pc, #36]	; (11ac4 <sprintf+0x38>)
   11aa0:	f853 2b04 	ldr.w	r2, [r3], #4
   11aa4:	9002      	str	r0, [sp, #8]
   11aa6:	4c08      	ldr	r4, [pc, #32]	; (11ac8 <sprintf+0x3c>)
   11aa8:	6808      	ldr	r0, [r1, #0]
   11aaa:	9301      	str	r3, [sp, #4]
   11aac:	a902      	add	r1, sp, #8
   11aae:	9405      	str	r4, [sp, #20]
   11ab0:	f001 fb7e 	bl	131b0 <_svfprintf_r>
   11ab4:	9b02      	ldr	r3, [sp, #8]
   11ab6:	2200      	movs	r2, #0
   11ab8:	701a      	strb	r2, [r3, #0]
   11aba:	b01d      	add	sp, #116	; 0x74
   11abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11ac0:	b003      	add	sp, #12
   11ac2:	4770      	bx	lr
   11ac4:	200034a4 	.word	0x200034a4
   11ac8:	ffff0208 	.word	0xffff0208

00011acc <stdio_exit_handler>:
   11acc:	4a02      	ldr	r2, [pc, #8]	; (11ad8 <stdio_exit_handler+0xc>)
   11ace:	4903      	ldr	r1, [pc, #12]	; (11adc <stdio_exit_handler+0x10>)
   11ad0:	4803      	ldr	r0, [pc, #12]	; (11ae0 <stdio_exit_handler+0x14>)
   11ad2:	f000 b8bb 	b.w	11c4c <_fwalk_sglue>
   11ad6:	bf00      	nop
   11ad8:	20003498 	.word	0x20003498
   11adc:	00015769 	.word	0x00015769
   11ae0:	20002900 	.word	0x20002900

00011ae4 <cleanup_stdio>:
   11ae4:	4b0c      	ldr	r3, [pc, #48]	; (11b18 <cleanup_stdio+0x34>)
   11ae6:	6841      	ldr	r1, [r0, #4]
   11ae8:	4299      	cmp	r1, r3
   11aea:	b510      	push	{r4, lr}
   11aec:	4604      	mov	r4, r0
   11aee:	d001      	beq.n	11af4 <cleanup_stdio+0x10>
   11af0:	f003 fe3a 	bl	15768 <_fclose_r>
   11af4:	68a1      	ldr	r1, [r4, #8]
   11af6:	4b09      	ldr	r3, [pc, #36]	; (11b1c <cleanup_stdio+0x38>)
   11af8:	4299      	cmp	r1, r3
   11afa:	d002      	beq.n	11b02 <cleanup_stdio+0x1e>
   11afc:	4620      	mov	r0, r4
   11afe:	f003 fe33 	bl	15768 <_fclose_r>
   11b02:	68e1      	ldr	r1, [r4, #12]
   11b04:	4b06      	ldr	r3, [pc, #24]	; (11b20 <cleanup_stdio+0x3c>)
   11b06:	4299      	cmp	r1, r3
   11b08:	d004      	beq.n	11b14 <cleanup_stdio+0x30>
   11b0a:	4620      	mov	r0, r4
   11b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11b10:	f003 be2a 	b.w	15768 <_fclose_r>
   11b14:	bd10      	pop	{r4, pc}
   11b16:	bf00      	nop
   11b18:	20004644 	.word	0x20004644
   11b1c:	200046ac 	.word	0x200046ac
   11b20:	20004714 	.word	0x20004714

00011b24 <global_stdio_init.part.0>:
   11b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11b28:	4c2a      	ldr	r4, [pc, #168]	; (11bd4 <global_stdio_init.part.0+0xb0>)
   11b2a:	4b2b      	ldr	r3, [pc, #172]	; (11bd8 <global_stdio_init.part.0+0xb4>)
   11b2c:	482b      	ldr	r0, [pc, #172]	; (11bdc <global_stdio_init.part.0+0xb8>)
   11b2e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 11bf0 <global_stdio_init.part.0+0xcc>
   11b32:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 11bf4 <global_stdio_init.part.0+0xd0>
   11b36:	4f2a      	ldr	r7, [pc, #168]	; (11be0 <global_stdio_init.part.0+0xbc>)
   11b38:	6018      	str	r0, [r3, #0]
   11b3a:	2500      	movs	r5, #0
   11b3c:	2304      	movs	r3, #4
   11b3e:	2208      	movs	r2, #8
   11b40:	4629      	mov	r1, r5
   11b42:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   11b46:	4e27      	ldr	r6, [pc, #156]	; (11be4 <global_stdio_init.part.0+0xc0>)
   11b48:	6665      	str	r5, [r4, #100]	; 0x64
   11b4a:	e9c4 5302 	strd	r5, r3, [r4, #8]
   11b4e:	e9c4 5500 	strd	r5, r5, [r4]
   11b52:	e9c4 5504 	strd	r5, r5, [r4, #16]
   11b56:	61a5      	str	r5, [r4, #24]
   11b58:	f000 f948 	bl	11dec <memset>
   11b5c:	4b22      	ldr	r3, [pc, #136]	; (11be8 <global_stdio_init.part.0+0xc4>)
   11b5e:	6763      	str	r3, [r4, #116]	; 0x74
   11b60:	2208      	movs	r2, #8
   11b62:	4629      	mov	r1, r5
   11b64:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   11b68:	e9c4 4907 	strd	r4, r9, [r4, #28]
   11b6c:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   11b70:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   11b74:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   11b78:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   11b7c:	6725      	str	r5, [r4, #112]	; 0x70
   11b7e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   11b82:	62e6      	str	r6, [r4, #44]	; 0x2c
   11b84:	f000 f932 	bl	11dec <memset>
   11b88:	4b18      	ldr	r3, [pc, #96]	; (11bec <global_stdio_init.part.0+0xc8>)
   11b8a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   11b8e:	4629      	mov	r1, r5
   11b90:	f104 0368 	add.w	r3, r4, #104	; 0x68
   11b94:	2208      	movs	r2, #8
   11b96:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   11b9a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   11b9e:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   11ba2:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   11ba6:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   11baa:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   11bae:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   11bb2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   11bb6:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   11bba:	f000 f917 	bl	11dec <memset>
   11bbe:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   11bc2:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   11bc6:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   11bca:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   11bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11bd2:	bf00      	nop
   11bd4:	20004644 	.word	0x20004644
   11bd8:	2000477c 	.word	0x2000477c
   11bdc:	00011acd 	.word	0x00011acd
   11be0:	00015a19 	.word	0x00015a19
   11be4:	00015a39 	.word	0x00015a39
   11be8:	00010009 	.word	0x00010009
   11bec:	00020012 	.word	0x00020012
   11bf0:	000159b5 	.word	0x000159b5
   11bf4:	000159d9 	.word	0x000159d9

00011bf8 <__sinit>:
   11bf8:	b510      	push	{r4, lr}
   11bfa:	4604      	mov	r4, r0
   11bfc:	480a      	ldr	r0, [pc, #40]	; (11c28 <__sinit+0x30>)
   11bfe:	f000 fc33 	bl	12468 <__retarget_lock_acquire_recursive>
   11c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11c04:	b923      	cbnz	r3, 11c10 <__sinit+0x18>
   11c06:	4b09      	ldr	r3, [pc, #36]	; (11c2c <__sinit+0x34>)
   11c08:	4a09      	ldr	r2, [pc, #36]	; (11c30 <__sinit+0x38>)
   11c0a:	681b      	ldr	r3, [r3, #0]
   11c0c:	6362      	str	r2, [r4, #52]	; 0x34
   11c0e:	b123      	cbz	r3, 11c1a <__sinit+0x22>
   11c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11c14:	4804      	ldr	r0, [pc, #16]	; (11c28 <__sinit+0x30>)
   11c16:	f000 bc29 	b.w	1246c <__retarget_lock_release_recursive>
   11c1a:	f7ff ff83 	bl	11b24 <global_stdio_init.part.0>
   11c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11c22:	4801      	ldr	r0, [pc, #4]	; (11c28 <__sinit+0x30>)
   11c24:	f000 bc22 	b.w	1246c <__retarget_lock_release_recursive>
   11c28:	2000460c 	.word	0x2000460c
   11c2c:	2000477c 	.word	0x2000477c
   11c30:	00011ae5 	.word	0x00011ae5

00011c34 <__sfp_lock_acquire>:
   11c34:	4801      	ldr	r0, [pc, #4]	; (11c3c <__sfp_lock_acquire+0x8>)
   11c36:	f000 bc17 	b.w	12468 <__retarget_lock_acquire_recursive>
   11c3a:	bf00      	nop
   11c3c:	2000460c 	.word	0x2000460c

00011c40 <__sfp_lock_release>:
   11c40:	4801      	ldr	r0, [pc, #4]	; (11c48 <__sfp_lock_release+0x8>)
   11c42:	f000 bc13 	b.w	1246c <__retarget_lock_release_recursive>
   11c46:	bf00      	nop
   11c48:	2000460c 	.word	0x2000460c

00011c4c <_fwalk_sglue>:
   11c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11c50:	4680      	mov	r8, r0
   11c52:	460f      	mov	r7, r1
   11c54:	4616      	mov	r6, r2
   11c56:	f04f 0900 	mov.w	r9, #0
   11c5a:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   11c5e:	3d01      	subs	r5, #1
   11c60:	d411      	bmi.n	11c86 <_fwalk_sglue+0x3a>
   11c62:	89a3      	ldrh	r3, [r4, #12]
   11c64:	2b01      	cmp	r3, #1
   11c66:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   11c6a:	d908      	bls.n	11c7e <_fwalk_sglue+0x32>
   11c6c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   11c70:	3301      	adds	r3, #1
   11c72:	4621      	mov	r1, r4
   11c74:	d003      	beq.n	11c7e <_fwalk_sglue+0x32>
   11c76:	4640      	mov	r0, r8
   11c78:	47b8      	blx	r7
   11c7a:	ea49 0900 	orr.w	r9, r9, r0
   11c7e:	1c6b      	adds	r3, r5, #1
   11c80:	f104 0468 	add.w	r4, r4, #104	; 0x68
   11c84:	d1ed      	bne.n	11c62 <_fwalk_sglue+0x16>
   11c86:	6836      	ldr	r6, [r6, #0]
   11c88:	2e00      	cmp	r6, #0
   11c8a:	d1e6      	bne.n	11c5a <_fwalk_sglue+0xe>
   11c8c:	4648      	mov	r0, r9
   11c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11c92:	bf00      	nop

00011c94 <memcmp>:
   11c94:	2a03      	cmp	r2, #3
   11c96:	b570      	push	{r4, r5, r6, lr}
   11c98:	d914      	bls.n	11cc4 <memcmp+0x30>
   11c9a:	ea40 0301 	orr.w	r3, r0, r1
   11c9e:	079b      	lsls	r3, r3, #30
   11ca0:	d122      	bne.n	11ce8 <memcmp+0x54>
   11ca2:	4604      	mov	r4, r0
   11ca4:	460b      	mov	r3, r1
   11ca6:	4619      	mov	r1, r3
   11ca8:	4620      	mov	r0, r4
   11caa:	680e      	ldr	r6, [r1, #0]
   11cac:	6805      	ldr	r5, [r0, #0]
   11cae:	42b5      	cmp	r5, r6
   11cb0:	f104 0404 	add.w	r4, r4, #4
   11cb4:	f103 0304 	add.w	r3, r3, #4
   11cb8:	d116      	bne.n	11ce8 <memcmp+0x54>
   11cba:	3a04      	subs	r2, #4
   11cbc:	2a03      	cmp	r2, #3
   11cbe:	4620      	mov	r0, r4
   11cc0:	4619      	mov	r1, r3
   11cc2:	d8f0      	bhi.n	11ca6 <memcmp+0x12>
   11cc4:	1e54      	subs	r4, r2, #1
   11cc6:	b19a      	cbz	r2, 11cf0 <memcmp+0x5c>
   11cc8:	1e42      	subs	r2, r0, #1
   11cca:	3901      	subs	r1, #1
   11ccc:	e001      	b.n	11cd2 <memcmp+0x3e>
   11cce:	18c3      	adds	r3, r0, r3
   11cd0:	d00c      	beq.n	11cec <memcmp+0x58>
   11cd2:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   11cd6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   11cda:	45e6      	cmp	lr, ip
   11cdc:	eba4 0302 	sub.w	r3, r4, r2
   11ce0:	d0f5      	beq.n	11cce <memcmp+0x3a>
   11ce2:	ebae 000c 	sub.w	r0, lr, ip
   11ce6:	bd70      	pop	{r4, r5, r6, pc}
   11ce8:	1e54      	subs	r4, r2, #1
   11cea:	e7ed      	b.n	11cc8 <memcmp+0x34>
   11cec:	4618      	mov	r0, r3
   11cee:	bd70      	pop	{r4, r5, r6, pc}
   11cf0:	4610      	mov	r0, r2
   11cf2:	bd70      	pop	{r4, r5, r6, pc}

00011cf4 <memmove>:
   11cf4:	4288      	cmp	r0, r1
   11cf6:	d90d      	bls.n	11d14 <memmove+0x20>
   11cf8:	188b      	adds	r3, r1, r2
   11cfa:	4283      	cmp	r3, r0
   11cfc:	d90a      	bls.n	11d14 <memmove+0x20>
   11cfe:	eb00 0c02 	add.w	ip, r0, r2
   11d02:	b1ba      	cbz	r2, 11d34 <memmove+0x40>
   11d04:	4662      	mov	r2, ip
   11d06:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   11d0a:	f802 cd01 	strb.w	ip, [r2, #-1]!
   11d0e:	4299      	cmp	r1, r3
   11d10:	d1f9      	bne.n	11d06 <memmove+0x12>
   11d12:	4770      	bx	lr
   11d14:	2a0f      	cmp	r2, #15
   11d16:	d80e      	bhi.n	11d36 <memmove+0x42>
   11d18:	4603      	mov	r3, r0
   11d1a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   11d1e:	b14a      	cbz	r2, 11d34 <memmove+0x40>
   11d20:	f10c 0c01 	add.w	ip, ip, #1
   11d24:	3b01      	subs	r3, #1
   11d26:	448c      	add	ip, r1
   11d28:	f811 2b01 	ldrb.w	r2, [r1], #1
   11d2c:	f803 2f01 	strb.w	r2, [r3, #1]!
   11d30:	4561      	cmp	r1, ip
   11d32:	d1f9      	bne.n	11d28 <memmove+0x34>
   11d34:	4770      	bx	lr
   11d36:	ea40 0301 	orr.w	r3, r0, r1
   11d3a:	079b      	lsls	r3, r3, #30
   11d3c:	d150      	bne.n	11de0 <memmove+0xec>
   11d3e:	f1a2 0310 	sub.w	r3, r2, #16
   11d42:	b570      	push	{r4, r5, r6, lr}
   11d44:	f101 0c20 	add.w	ip, r1, #32
   11d48:	f023 050f 	bic.w	r5, r3, #15
   11d4c:	f101 0e10 	add.w	lr, r1, #16
   11d50:	f100 0410 	add.w	r4, r0, #16
   11d54:	44ac      	add	ip, r5
   11d56:	091b      	lsrs	r3, r3, #4
   11d58:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   11d5c:	f844 5c10 	str.w	r5, [r4, #-16]
   11d60:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   11d64:	f844 5c0c 	str.w	r5, [r4, #-12]
   11d68:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   11d6c:	f844 5c08 	str.w	r5, [r4, #-8]
   11d70:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   11d74:	f844 5c04 	str.w	r5, [r4, #-4]
   11d78:	f10e 0e10 	add.w	lr, lr, #16
   11d7c:	45e6      	cmp	lr, ip
   11d7e:	f104 0410 	add.w	r4, r4, #16
   11d82:	d1e9      	bne.n	11d58 <memmove+0x64>
   11d84:	3301      	adds	r3, #1
   11d86:	f012 0f0c 	tst.w	r2, #12
   11d8a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   11d8e:	f002 040f 	and.w	r4, r2, #15
   11d92:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   11d96:	d027      	beq.n	11de8 <memmove+0xf4>
   11d98:	3c04      	subs	r4, #4
   11d9a:	f024 0603 	bic.w	r6, r4, #3
   11d9e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   11da2:	441e      	add	r6, r3
   11da4:	1f1c      	subs	r4, r3, #4
   11da6:	468e      	mov	lr, r1
   11da8:	f85e 5b04 	ldr.w	r5, [lr], #4
   11dac:	f844 5f04 	str.w	r5, [r4, #4]!
   11db0:	42b4      	cmp	r4, r6
   11db2:	d1f9      	bne.n	11da8 <memmove+0xb4>
   11db4:	f10c 0401 	add.w	r4, ip, #1
   11db8:	f002 0203 	and.w	r2, r2, #3
   11dbc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   11dc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   11dc4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   11dc8:	b14a      	cbz	r2, 11dde <memmove+0xea>
   11dca:	f10c 0c01 	add.w	ip, ip, #1
   11dce:	3b01      	subs	r3, #1
   11dd0:	448c      	add	ip, r1
   11dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
   11dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
   11dda:	4561      	cmp	r1, ip
   11ddc:	d1f9      	bne.n	11dd2 <memmove+0xde>
   11dde:	bd70      	pop	{r4, r5, r6, pc}
   11de0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   11de4:	4603      	mov	r3, r0
   11de6:	e79b      	b.n	11d20 <memmove+0x2c>
   11de8:	4622      	mov	r2, r4
   11dea:	e7eb      	b.n	11dc4 <memmove+0xd0>

00011dec <memset>:
   11dec:	0783      	lsls	r3, r0, #30
   11dee:	b530      	push	{r4, r5, lr}
   11df0:	d048      	beq.n	11e84 <memset+0x98>
   11df2:	1e54      	subs	r4, r2, #1
   11df4:	2a00      	cmp	r2, #0
   11df6:	d03f      	beq.n	11e78 <memset+0x8c>
   11df8:	b2ca      	uxtb	r2, r1
   11dfa:	4603      	mov	r3, r0
   11dfc:	e001      	b.n	11e02 <memset+0x16>
   11dfe:	3c01      	subs	r4, #1
   11e00:	d33a      	bcc.n	11e78 <memset+0x8c>
   11e02:	f803 2b01 	strb.w	r2, [r3], #1
   11e06:	079d      	lsls	r5, r3, #30
   11e08:	d1f9      	bne.n	11dfe <memset+0x12>
   11e0a:	2c03      	cmp	r4, #3
   11e0c:	d92d      	bls.n	11e6a <memset+0x7e>
   11e0e:	b2cd      	uxtb	r5, r1
   11e10:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   11e14:	2c0f      	cmp	r4, #15
   11e16:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   11e1a:	d936      	bls.n	11e8a <memset+0x9e>
   11e1c:	f1a4 0210 	sub.w	r2, r4, #16
   11e20:	f022 0c0f 	bic.w	ip, r2, #15
   11e24:	f103 0e20 	add.w	lr, r3, #32
   11e28:	44e6      	add	lr, ip
   11e2a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   11e2e:	f103 0210 	add.w	r2, r3, #16
   11e32:	e942 5504 	strd	r5, r5, [r2, #-16]
   11e36:	e942 5502 	strd	r5, r5, [r2, #-8]
   11e3a:	3210      	adds	r2, #16
   11e3c:	4572      	cmp	r2, lr
   11e3e:	d1f8      	bne.n	11e32 <memset+0x46>
   11e40:	f10c 0201 	add.w	r2, ip, #1
   11e44:	f014 0f0c 	tst.w	r4, #12
   11e48:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   11e4c:	f004 0c0f 	and.w	ip, r4, #15
   11e50:	d013      	beq.n	11e7a <memset+0x8e>
   11e52:	f1ac 0304 	sub.w	r3, ip, #4
   11e56:	f023 0303 	bic.w	r3, r3, #3
   11e5a:	3304      	adds	r3, #4
   11e5c:	4413      	add	r3, r2
   11e5e:	f842 5b04 	str.w	r5, [r2], #4
   11e62:	4293      	cmp	r3, r2
   11e64:	d1fb      	bne.n	11e5e <memset+0x72>
   11e66:	f00c 0403 	and.w	r4, ip, #3
   11e6a:	b12c      	cbz	r4, 11e78 <memset+0x8c>
   11e6c:	b2c9      	uxtb	r1, r1
   11e6e:	441c      	add	r4, r3
   11e70:	f803 1b01 	strb.w	r1, [r3], #1
   11e74:	429c      	cmp	r4, r3
   11e76:	d1fb      	bne.n	11e70 <memset+0x84>
   11e78:	bd30      	pop	{r4, r5, pc}
   11e7a:	4664      	mov	r4, ip
   11e7c:	4613      	mov	r3, r2
   11e7e:	2c00      	cmp	r4, #0
   11e80:	d1f4      	bne.n	11e6c <memset+0x80>
   11e82:	e7f9      	b.n	11e78 <memset+0x8c>
   11e84:	4603      	mov	r3, r0
   11e86:	4614      	mov	r4, r2
   11e88:	e7bf      	b.n	11e0a <memset+0x1e>
   11e8a:	461a      	mov	r2, r3
   11e8c:	46a4      	mov	ip, r4
   11e8e:	e7e0      	b.n	11e52 <memset+0x66>

00011e90 <strncmp>:
   11e90:	2a00      	cmp	r2, #0
   11e92:	d03e      	beq.n	11f12 <strncmp+0x82>
   11e94:	ea40 0301 	orr.w	r3, r0, r1
   11e98:	079b      	lsls	r3, r3, #30
   11e9a:	b530      	push	{r4, r5, lr}
   11e9c:	4684      	mov	ip, r0
   11e9e:	d12f      	bne.n	11f00 <strncmp+0x70>
   11ea0:	2a03      	cmp	r2, #3
   11ea2:	d92d      	bls.n	11f00 <strncmp+0x70>
   11ea4:	460b      	mov	r3, r1
   11ea6:	e008      	b.n	11eba <strncmp+0x2a>
   11ea8:	3a04      	subs	r2, #4
   11eaa:	4684      	mov	ip, r0
   11eac:	4619      	mov	r1, r3
   11eae:	d025      	beq.n	11efc <strncmp+0x6c>
   11eb0:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   11eb4:	d122      	bne.n	11efc <strncmp+0x6c>
   11eb6:	2a03      	cmp	r2, #3
   11eb8:	d922      	bls.n	11f00 <strncmp+0x70>
   11eba:	6804      	ldr	r4, [r0, #0]
   11ebc:	4619      	mov	r1, r3
   11ebe:	f853 5b04 	ldr.w	r5, [r3], #4
   11ec2:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   11ec6:	42ac      	cmp	r4, r5
   11ec8:	4684      	mov	ip, r0
   11eca:	ea2e 0e04 	bic.w	lr, lr, r4
   11ece:	f100 0004 	add.w	r0, r0, #4
   11ed2:	d0e9      	beq.n	11ea8 <strncmp+0x18>
   11ed4:	f89c 0000 	ldrb.w	r0, [ip]
   11ed8:	780c      	ldrb	r4, [r1, #0]
   11eda:	42a0      	cmp	r0, r4
   11edc:	d11b      	bne.n	11f16 <strncmp+0x86>
   11ede:	46e6      	mov	lr, ip
   11ee0:	b168      	cbz	r0, 11efe <strncmp+0x6e>
   11ee2:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   11ee6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   11eea:	eba2 030e 	sub.w	r3, r2, lr
   11eee:	42a0      	cmp	r0, r4
   11ef0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11ef4:	d10f      	bne.n	11f16 <strncmp+0x86>
   11ef6:	eb1c 0303 	adds.w	r3, ip, r3
   11efa:	d1f1      	bne.n	11ee0 <strncmp+0x50>
   11efc:	2000      	movs	r0, #0
   11efe:	bd30      	pop	{r4, r5, pc}
   11f00:	f89c 0000 	ldrb.w	r0, [ip]
   11f04:	780c      	ldrb	r4, [r1, #0]
   11f06:	4284      	cmp	r4, r0
   11f08:	d105      	bne.n	11f16 <strncmp+0x86>
   11f0a:	2a01      	cmp	r2, #1
   11f0c:	d0f6      	beq.n	11efc <strncmp+0x6c>
   11f0e:	46e6      	mov	lr, ip
   11f10:	e7e6      	b.n	11ee0 <strncmp+0x50>
   11f12:	4610      	mov	r0, r2
   11f14:	4770      	bx	lr
   11f16:	1b00      	subs	r0, r0, r4
   11f18:	bd30      	pop	{r4, r5, pc}
   11f1a:	bf00      	nop

00011f1c <strncpy>:
   11f1c:	ea40 0301 	orr.w	r3, r0, r1
   11f20:	079b      	lsls	r3, r3, #30
   11f22:	b530      	push	{r4, r5, lr}
   11f24:	d101      	bne.n	11f2a <strncpy+0xe>
   11f26:	2a03      	cmp	r2, #3
   11f28:	d80f      	bhi.n	11f4a <strncpy+0x2e>
   11f2a:	4684      	mov	ip, r0
   11f2c:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   11f30:	e007      	b.n	11f42 <strncpy+0x26>
   11f32:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   11f36:	f803 1b01 	strb.w	r1, [r3], #1
   11f3a:	1e54      	subs	r4, r2, #1
   11f3c:	b1c1      	cbz	r1, 11f70 <strncpy+0x54>
   11f3e:	469c      	mov	ip, r3
   11f40:	4622      	mov	r2, r4
   11f42:	4663      	mov	r3, ip
   11f44:	2a00      	cmp	r2, #0
   11f46:	d1f4      	bne.n	11f32 <strncpy+0x16>
   11f48:	bd30      	pop	{r4, r5, pc}
   11f4a:	460b      	mov	r3, r1
   11f4c:	4684      	mov	ip, r0
   11f4e:	4619      	mov	r1, r3
   11f50:	f853 5b04 	ldr.w	r5, [r3], #4
   11f54:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   11f58:	ea24 0405 	bic.w	r4, r4, r5
   11f5c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   11f60:	d1e4      	bne.n	11f2c <strncpy+0x10>
   11f62:	3a04      	subs	r2, #4
   11f64:	2a03      	cmp	r2, #3
   11f66:	f84c 5b04 	str.w	r5, [ip], #4
   11f6a:	4619      	mov	r1, r3
   11f6c:	d8ef      	bhi.n	11f4e <strncpy+0x32>
   11f6e:	e7dd      	b.n	11f2c <strncpy+0x10>
   11f70:	4494      	add	ip, r2
   11f72:	2c00      	cmp	r4, #0
   11f74:	d0e8      	beq.n	11f48 <strncpy+0x2c>
   11f76:	f803 1b01 	strb.w	r1, [r3], #1
   11f7a:	4563      	cmp	r3, ip
   11f7c:	d1fb      	bne.n	11f76 <strncpy+0x5a>
   11f7e:	bd30      	pop	{r4, r5, pc}

00011f80 <strtok>:
   11f80:	4a02      	ldr	r2, [pc, #8]	; (11f8c <strtok+0xc>)
   11f82:	6812      	ldr	r2, [r2, #0]
   11f84:	2301      	movs	r3, #1
   11f86:	3250      	adds	r2, #80	; 0x50
   11f88:	f000 b802 	b.w	11f90 <__strtok_r>
   11f8c:	200034a4 	.word	0x200034a4

00011f90 <__strtok_r>:
   11f90:	b4f0      	push	{r4, r5, r6, r7}
   11f92:	4607      	mov	r7, r0
   11f94:	b310      	cbz	r0, 11fdc <__strtok_r+0x4c>
   11f96:	463e      	mov	r6, r7
   11f98:	468c      	mov	ip, r1
   11f9a:	f816 0b01 	ldrb.w	r0, [r6], #1
   11f9e:	e001      	b.n	11fa4 <__strtok_r+0x14>
   11fa0:	42a0      	cmp	r0, r4
   11fa2:	d016      	beq.n	11fd2 <__strtok_r+0x42>
   11fa4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   11fa8:	2c00      	cmp	r4, #0
   11faa:	d1f9      	bne.n	11fa0 <__strtok_r+0x10>
   11fac:	b1d8      	cbz	r0, 11fe6 <__strtok_r+0x56>
   11fae:	f816 5b01 	ldrb.w	r5, [r6], #1
   11fb2:	460c      	mov	r4, r1
   11fb4:	e001      	b.n	11fba <__strtok_r+0x2a>
   11fb6:	2b00      	cmp	r3, #0
   11fb8:	d0f9      	beq.n	11fae <__strtok_r+0x1e>
   11fba:	f814 3b01 	ldrb.w	r3, [r4], #1
   11fbe:	429d      	cmp	r5, r3
   11fc0:	d1f9      	bne.n	11fb6 <__strtok_r+0x26>
   11fc2:	b14d      	cbz	r5, 11fd8 <__strtok_r+0x48>
   11fc4:	2300      	movs	r3, #0
   11fc6:	f806 3c01 	strb.w	r3, [r6, #-1]
   11fca:	6016      	str	r6, [r2, #0]
   11fcc:	4638      	mov	r0, r7
   11fce:	bcf0      	pop	{r4, r5, r6, r7}
   11fd0:	4770      	bx	lr
   11fd2:	b15b      	cbz	r3, 11fec <__strtok_r+0x5c>
   11fd4:	4637      	mov	r7, r6
   11fd6:	e7de      	b.n	11f96 <__strtok_r+0x6>
   11fd8:	462e      	mov	r6, r5
   11fda:	e7f6      	b.n	11fca <__strtok_r+0x3a>
   11fdc:	6817      	ldr	r7, [r2, #0]
   11fde:	2f00      	cmp	r7, #0
   11fe0:	d1d9      	bne.n	11f96 <__strtok_r+0x6>
   11fe2:	4638      	mov	r0, r7
   11fe4:	e7f3      	b.n	11fce <__strtok_r+0x3e>
   11fe6:	bcf0      	pop	{r4, r5, r6, r7}
   11fe8:	6010      	str	r0, [r2, #0]
   11fea:	4770      	bx	lr
   11fec:	6016      	str	r6, [r2, #0]
   11fee:	4638      	mov	r0, r7
   11ff0:	703b      	strb	r3, [r7, #0]
   11ff2:	e7ec      	b.n	11fce <__strtok_r+0x3e>

00011ff4 <__locale_mb_cur_max>:
   11ff4:	4b01      	ldr	r3, [pc, #4]	; (11ffc <__locale_mb_cur_max+0x8>)
   11ff6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   11ffa:	4770      	bx	lr
   11ffc:	20002f1c 	.word	0x20002f1c

00012000 <__cxa_atexit>:
   12000:	4613      	mov	r3, r2
   12002:	460a      	mov	r2, r1
   12004:	4601      	mov	r1, r0
   12006:	2002      	movs	r0, #2
   12008:	f000 bb08 	b.w	1261c <__register_exitproc>

0001200c <_sbrk_r>:
   1200c:	b538      	push	{r3, r4, r5, lr}
   1200e:	4d07      	ldr	r5, [pc, #28]	; (1202c <_sbrk_r+0x20>)
   12010:	2200      	movs	r2, #0
   12012:	4604      	mov	r4, r0
   12014:	4608      	mov	r0, r1
   12016:	602a      	str	r2, [r5, #0]
   12018:	f7fc fc9c 	bl	e954 <_sbrk>
   1201c:	1c43      	adds	r3, r0, #1
   1201e:	d000      	beq.n	12022 <_sbrk_r+0x16>
   12020:	bd38      	pop	{r3, r4, r5, pc}
   12022:	682b      	ldr	r3, [r5, #0]
   12024:	2b00      	cmp	r3, #0
   12026:	d0fb      	beq.n	12020 <_sbrk_r+0x14>
   12028:	6023      	str	r3, [r4, #0]
   1202a:	bd38      	pop	{r3, r4, r5, pc}
   1202c:	200047dc 	.word	0x200047dc

00012030 <_write_r>:
   12030:	b538      	push	{r3, r4, r5, lr}
   12032:	460c      	mov	r4, r1
   12034:	4d08      	ldr	r5, [pc, #32]	; (12058 <_write_r+0x28>)
   12036:	4684      	mov	ip, r0
   12038:	4611      	mov	r1, r2
   1203a:	4620      	mov	r0, r4
   1203c:	461a      	mov	r2, r3
   1203e:	2300      	movs	r3, #0
   12040:	602b      	str	r3, [r5, #0]
   12042:	4664      	mov	r4, ip
   12044:	f7fb fd30 	bl	daa8 <_write>
   12048:	1c43      	adds	r3, r0, #1
   1204a:	d000      	beq.n	1204e <_write_r+0x1e>
   1204c:	bd38      	pop	{r3, r4, r5, pc}
   1204e:	682b      	ldr	r3, [r5, #0]
   12050:	2b00      	cmp	r3, #0
   12052:	d0fb      	beq.n	1204c <_write_r+0x1c>
   12054:	6023      	str	r3, [r4, #0]
   12056:	bd38      	pop	{r3, r4, r5, pc}
   12058:	200047dc 	.word	0x200047dc

0001205c <__errno>:
   1205c:	4b01      	ldr	r3, [pc, #4]	; (12064 <__errno+0x8>)
   1205e:	6818      	ldr	r0, [r3, #0]
   12060:	4770      	bx	lr
   12062:	bf00      	nop
   12064:	200034a4 	.word	0x200034a4
	...
   12080:	eba2 0003 	sub.w	r0, r2, r3
   12084:	4770      	bx	lr
   12086:	bf00      	nop

00012088 <strcmp>:
   12088:	7802      	ldrb	r2, [r0, #0]
   1208a:	780b      	ldrb	r3, [r1, #0]
   1208c:	2a01      	cmp	r2, #1
   1208e:	bf28      	it	cs
   12090:	429a      	cmpcs	r2, r3
   12092:	d1f5      	bne.n	12080 <__errno+0x24>
   12094:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   12098:	ea40 0401 	orr.w	r4, r0, r1
   1209c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   120a0:	f06f 0c00 	mvn.w	ip, #0
   120a4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   120a8:	b312      	cbz	r2, 120f0 <strcmp+0x68>
   120aa:	ea80 0401 	eor.w	r4, r0, r1
   120ae:	f014 0f07 	tst.w	r4, #7
   120b2:	d16a      	bne.n	1218a <strcmp+0x102>
   120b4:	f000 0407 	and.w	r4, r0, #7
   120b8:	f020 0007 	bic.w	r0, r0, #7
   120bc:	f004 0503 	and.w	r5, r4, #3
   120c0:	f021 0107 	bic.w	r1, r1, #7
   120c4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   120c8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   120cc:	f014 0f04 	tst.w	r4, #4
   120d0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   120d4:	fa0c f405 	lsl.w	r4, ip, r5
   120d8:	ea62 0204 	orn	r2, r2, r4
   120dc:	ea66 0604 	orn	r6, r6, r4
   120e0:	d00a      	beq.n	120f8 <strcmp+0x70>
   120e2:	ea63 0304 	orn	r3, r3, r4
   120e6:	4662      	mov	r2, ip
   120e8:	ea67 0704 	orn	r7, r7, r4
   120ec:	4666      	mov	r6, ip
   120ee:	e003      	b.n	120f8 <strcmp+0x70>
   120f0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   120f4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   120f8:	fa82 f54c 	uadd8	r5, r2, ip
   120fc:	ea82 0406 	eor.w	r4, r2, r6
   12100:	faa4 f48c 	sel	r4, r4, ip
   12104:	bb6c      	cbnz	r4, 12162 <strcmp+0xda>
   12106:	fa83 f54c 	uadd8	r5, r3, ip
   1210a:	ea83 0507 	eor.w	r5, r3, r7
   1210e:	faa5 f58c 	sel	r5, r5, ip
   12112:	b995      	cbnz	r5, 1213a <strcmp+0xb2>
   12114:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   12118:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1211c:	fa82 f54c 	uadd8	r5, r2, ip
   12120:	ea82 0406 	eor.w	r4, r2, r6
   12124:	faa4 f48c 	sel	r4, r4, ip
   12128:	fa83 f54c 	uadd8	r5, r3, ip
   1212c:	ea83 0507 	eor.w	r5, r3, r7
   12130:	faa5 f58c 	sel	r5, r5, ip
   12134:	4325      	orrs	r5, r4
   12136:	d0db      	beq.n	120f0 <strcmp+0x68>
   12138:	b99c      	cbnz	r4, 12162 <strcmp+0xda>
   1213a:	ba2d      	rev	r5, r5
   1213c:	fab5 f485 	clz	r4, r5
   12140:	f024 0407 	bic.w	r4, r4, #7
   12144:	fa27 f104 	lsr.w	r1, r7, r4
   12148:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1214c:	fa23 f304 	lsr.w	r3, r3, r4
   12150:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   12154:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12158:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1215c:	eba0 0001 	sub.w	r0, r0, r1
   12160:	4770      	bx	lr
   12162:	ba24      	rev	r4, r4
   12164:	fab4 f484 	clz	r4, r4
   12168:	f024 0407 	bic.w	r4, r4, #7
   1216c:	fa26 f104 	lsr.w	r1, r6, r4
   12170:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   12174:	fa22 f204 	lsr.w	r2, r2, r4
   12178:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1217c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12180:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12184:	eba0 0001 	sub.w	r0, r0, r1
   12188:	4770      	bx	lr
   1218a:	f014 0f03 	tst.w	r4, #3
   1218e:	d13c      	bne.n	1220a <strcmp+0x182>
   12190:	f010 0403 	ands.w	r4, r0, #3
   12194:	d128      	bne.n	121e8 <strcmp+0x160>
   12196:	f850 2b08 	ldr.w	r2, [r0], #8
   1219a:	f851 3b08 	ldr.w	r3, [r1], #8
   1219e:	fa82 f54c 	uadd8	r5, r2, ip
   121a2:	ea82 0503 	eor.w	r5, r2, r3
   121a6:	faa5 f58c 	sel	r5, r5, ip
   121aa:	b95d      	cbnz	r5, 121c4 <strcmp+0x13c>
   121ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
   121b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   121b4:	fa82 f54c 	uadd8	r5, r2, ip
   121b8:	ea82 0503 	eor.w	r5, r2, r3
   121bc:	faa5 f58c 	sel	r5, r5, ip
   121c0:	2d00      	cmp	r5, #0
   121c2:	d0e8      	beq.n	12196 <strcmp+0x10e>
   121c4:	ba2d      	rev	r5, r5
   121c6:	fab5 f485 	clz	r4, r5
   121ca:	f024 0407 	bic.w	r4, r4, #7
   121ce:	fa23 f104 	lsr.w	r1, r3, r4
   121d2:	fa22 f204 	lsr.w	r2, r2, r4
   121d6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   121da:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   121de:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   121e2:	eba0 0001 	sub.w	r0, r0, r1
   121e6:	4770      	bx	lr
   121e8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   121ec:	f020 0003 	bic.w	r0, r0, #3
   121f0:	f850 2b08 	ldr.w	r2, [r0], #8
   121f4:	f021 0103 	bic.w	r1, r1, #3
   121f8:	f851 3b08 	ldr.w	r3, [r1], #8
   121fc:	fa0c f404 	lsl.w	r4, ip, r4
   12200:	ea62 0204 	orn	r2, r2, r4
   12204:	ea63 0304 	orn	r3, r3, r4
   12208:	e7c9      	b.n	1219e <strcmp+0x116>
   1220a:	f010 0403 	ands.w	r4, r0, #3
   1220e:	d01a      	beq.n	12246 <strcmp+0x1be>
   12210:	eba1 0104 	sub.w	r1, r1, r4
   12214:	f020 0003 	bic.w	r0, r0, #3
   12218:	07e4      	lsls	r4, r4, #31
   1221a:	f850 2b04 	ldr.w	r2, [r0], #4
   1221e:	d006      	beq.n	1222e <strcmp+0x1a6>
   12220:	d20f      	bcs.n	12242 <strcmp+0x1ba>
   12222:	788b      	ldrb	r3, [r1, #2]
   12224:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   12228:	1ae4      	subs	r4, r4, r3
   1222a:	d106      	bne.n	1223a <strcmp+0x1b2>
   1222c:	b12b      	cbz	r3, 1223a <strcmp+0x1b2>
   1222e:	78cb      	ldrb	r3, [r1, #3]
   12230:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   12234:	1ae4      	subs	r4, r4, r3
   12236:	d100      	bne.n	1223a <strcmp+0x1b2>
   12238:	b91b      	cbnz	r3, 12242 <strcmp+0x1ba>
   1223a:	4620      	mov	r0, r4
   1223c:	f85d 4b10 	ldr.w	r4, [sp], #16
   12240:	4770      	bx	lr
   12242:	f101 0104 	add.w	r1, r1, #4
   12246:	f850 2b04 	ldr.w	r2, [r0], #4
   1224a:	07cc      	lsls	r4, r1, #31
   1224c:	f021 0103 	bic.w	r1, r1, #3
   12250:	f851 3b04 	ldr.w	r3, [r1], #4
   12254:	d848      	bhi.n	122e8 <strcmp+0x260>
   12256:	d224      	bcs.n	122a2 <strcmp+0x21a>
   12258:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1225c:	fa82 f54c 	uadd8	r5, r2, ip
   12260:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   12264:	faa5 f58c 	sel	r5, r5, ip
   12268:	d10a      	bne.n	12280 <strcmp+0x1f8>
   1226a:	b965      	cbnz	r5, 12286 <strcmp+0x1fe>
   1226c:	f851 3b04 	ldr.w	r3, [r1], #4
   12270:	ea84 0402 	eor.w	r4, r4, r2
   12274:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   12278:	d10e      	bne.n	12298 <strcmp+0x210>
   1227a:	f850 2b04 	ldr.w	r2, [r0], #4
   1227e:	e7eb      	b.n	12258 <strcmp+0x1d0>
   12280:	ea4f 2313 	mov.w	r3, r3, lsr #8
   12284:	e055      	b.n	12332 <strcmp+0x2aa>
   12286:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1228a:	d14d      	bne.n	12328 <strcmp+0x2a0>
   1228c:	7808      	ldrb	r0, [r1, #0]
   1228e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12292:	f1c0 0000 	rsb	r0, r0, #0
   12296:	4770      	bx	lr
   12298:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1229c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   122a0:	e047      	b.n	12332 <strcmp+0x2aa>
   122a2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   122a6:	fa82 f54c 	uadd8	r5, r2, ip
   122aa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   122ae:	faa5 f58c 	sel	r5, r5, ip
   122b2:	d10a      	bne.n	122ca <strcmp+0x242>
   122b4:	b965      	cbnz	r5, 122d0 <strcmp+0x248>
   122b6:	f851 3b04 	ldr.w	r3, [r1], #4
   122ba:	ea84 0402 	eor.w	r4, r4, r2
   122be:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   122c2:	d10c      	bne.n	122de <strcmp+0x256>
   122c4:	f850 2b04 	ldr.w	r2, [r0], #4
   122c8:	e7eb      	b.n	122a2 <strcmp+0x21a>
   122ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
   122ce:	e030      	b.n	12332 <strcmp+0x2aa>
   122d0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   122d4:	d128      	bne.n	12328 <strcmp+0x2a0>
   122d6:	880b      	ldrh	r3, [r1, #0]
   122d8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   122dc:	e029      	b.n	12332 <strcmp+0x2aa>
   122de:	ea4f 4212 	mov.w	r2, r2, lsr #16
   122e2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   122e6:	e024      	b.n	12332 <strcmp+0x2aa>
   122e8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   122ec:	fa82 f54c 	uadd8	r5, r2, ip
   122f0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   122f4:	faa5 f58c 	sel	r5, r5, ip
   122f8:	d10a      	bne.n	12310 <strcmp+0x288>
   122fa:	b965      	cbnz	r5, 12316 <strcmp+0x28e>
   122fc:	f851 3b04 	ldr.w	r3, [r1], #4
   12300:	ea84 0402 	eor.w	r4, r4, r2
   12304:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   12308:	d109      	bne.n	1231e <strcmp+0x296>
   1230a:	f850 2b04 	ldr.w	r2, [r0], #4
   1230e:	e7eb      	b.n	122e8 <strcmp+0x260>
   12310:	ea4f 6313 	mov.w	r3, r3, lsr #24
   12314:	e00d      	b.n	12332 <strcmp+0x2aa>
   12316:	f015 0fff 	tst.w	r5, #255	; 0xff
   1231a:	d105      	bne.n	12328 <strcmp+0x2a0>
   1231c:	680b      	ldr	r3, [r1, #0]
   1231e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   12322:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   12326:	e004      	b.n	12332 <strcmp+0x2aa>
   12328:	f04f 0000 	mov.w	r0, #0
   1232c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12330:	4770      	bx	lr
   12332:	ba12      	rev	r2, r2
   12334:	ba1b      	rev	r3, r3
   12336:	fa82 f44c 	uadd8	r4, r2, ip
   1233a:	ea82 0403 	eor.w	r4, r2, r3
   1233e:	faa4 f58c 	sel	r5, r4, ip
   12342:	fab5 f485 	clz	r4, r5
   12346:	fa02 f204 	lsl.w	r2, r2, r4
   1234a:	fa03 f304 	lsl.w	r3, r3, r4
   1234e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   12352:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12356:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1235a:	4770      	bx	lr

0001235c <strcpy>:
   1235c:	ea80 0201 	eor.w	r2, r0, r1
   12360:	4684      	mov	ip, r0
   12362:	f012 0f03 	tst.w	r2, #3
   12366:	d14f      	bne.n	12408 <strcpy+0xac>
   12368:	f011 0f03 	tst.w	r1, #3
   1236c:	d132      	bne.n	123d4 <strcpy+0x78>
   1236e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   12372:	f011 0f04 	tst.w	r1, #4
   12376:	f851 3b04 	ldr.w	r3, [r1], #4
   1237a:	d00b      	beq.n	12394 <strcpy+0x38>
   1237c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   12380:	439a      	bics	r2, r3
   12382:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12386:	bf04      	itt	eq
   12388:	f84c 3b04 	streq.w	r3, [ip], #4
   1238c:	f851 3b04 	ldreq.w	r3, [r1], #4
   12390:	d116      	bne.n	123c0 <strcpy+0x64>
   12392:	bf00      	nop
   12394:	f851 4b04 	ldr.w	r4, [r1], #4
   12398:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1239c:	439a      	bics	r2, r3
   1239e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   123a2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   123a6:	d10b      	bne.n	123c0 <strcpy+0x64>
   123a8:	f84c 3b04 	str.w	r3, [ip], #4
   123ac:	43a2      	bics	r2, r4
   123ae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   123b2:	bf04      	itt	eq
   123b4:	f851 3b04 	ldreq.w	r3, [r1], #4
   123b8:	f84c 4b04 	streq.w	r4, [ip], #4
   123bc:	d0ea      	beq.n	12394 <strcpy+0x38>
   123be:	4623      	mov	r3, r4
   123c0:	f80c 3b01 	strb.w	r3, [ip], #1
   123c4:	f013 0fff 	tst.w	r3, #255	; 0xff
   123c8:	ea4f 2333 	mov.w	r3, r3, ror #8
   123cc:	d1f8      	bne.n	123c0 <strcpy+0x64>
   123ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   123d2:	4770      	bx	lr
   123d4:	f011 0f01 	tst.w	r1, #1
   123d8:	d006      	beq.n	123e8 <strcpy+0x8c>
   123da:	f811 2b01 	ldrb.w	r2, [r1], #1
   123de:	f80c 2b01 	strb.w	r2, [ip], #1
   123e2:	2a00      	cmp	r2, #0
   123e4:	bf08      	it	eq
   123e6:	4770      	bxeq	lr
   123e8:	f011 0f02 	tst.w	r1, #2
   123ec:	d0bf      	beq.n	1236e <strcpy+0x12>
   123ee:	f831 2b02 	ldrh.w	r2, [r1], #2
   123f2:	f012 0fff 	tst.w	r2, #255	; 0xff
   123f6:	bf16      	itet	ne
   123f8:	f82c 2b02 	strhne.w	r2, [ip], #2
   123fc:	f88c 2000 	strbeq.w	r2, [ip]
   12400:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   12404:	d1b3      	bne.n	1236e <strcpy+0x12>
   12406:	4770      	bx	lr
   12408:	f811 2b01 	ldrb.w	r2, [r1], #1
   1240c:	f80c 2b01 	strb.w	r2, [ip], #1
   12410:	2a00      	cmp	r2, #0
   12412:	d1f9      	bne.n	12408 <strcpy+0xac>
   12414:	4770      	bx	lr
   12416:	bf00      	nop

00012418 <__libc_init_array>:
   12418:	b570      	push	{r4, r5, r6, lr}
   1241a:	4e0d      	ldr	r6, [pc, #52]	; (12450 <__libc_init_array+0x38>)
   1241c:	4d0d      	ldr	r5, [pc, #52]	; (12454 <__libc_init_array+0x3c>)
   1241e:	1b76      	subs	r6, r6, r5
   12420:	10b6      	asrs	r6, r6, #2
   12422:	d006      	beq.n	12432 <__libc_init_array+0x1a>
   12424:	2400      	movs	r4, #0
   12426:	f855 3b04 	ldr.w	r3, [r5], #4
   1242a:	3401      	adds	r4, #1
   1242c:	4798      	blx	r3
   1242e:	42a6      	cmp	r6, r4
   12430:	d1f9      	bne.n	12426 <__libc_init_array+0xe>
   12432:	4e09      	ldr	r6, [pc, #36]	; (12458 <__libc_init_array+0x40>)
   12434:	4d09      	ldr	r5, [pc, #36]	; (1245c <__libc_init_array+0x44>)
   12436:	1b76      	subs	r6, r6, r5
   12438:	f006 f832 	bl	184a0 <___init_veneer>
   1243c:	10b6      	asrs	r6, r6, #2
   1243e:	d006      	beq.n	1244e <__libc_init_array+0x36>
   12440:	2400      	movs	r4, #0
   12442:	f855 3b04 	ldr.w	r3, [r5], #4
   12446:	3401      	adds	r4, #1
   12448:	4798      	blx	r3
   1244a:	42a6      	cmp	r6, r4
   1244c:	d1f9      	bne.n	12442 <__libc_init_array+0x2a>
   1244e:	bd70      	pop	{r4, r5, r6, pc}
   12450:	600025f0 	.word	0x600025f0
   12454:	600025f0 	.word	0x600025f0
   12458:	60002668 	.word	0x60002668
   1245c:	600025f0 	.word	0x600025f0

00012460 <__retarget_lock_init_recursive>:
   12460:	4770      	bx	lr
   12462:	bf00      	nop

00012464 <__retarget_lock_close_recursive>:
   12464:	4770      	bx	lr
   12466:	bf00      	nop

00012468 <__retarget_lock_acquire_recursive>:
   12468:	4770      	bx	lr
   1246a:	bf00      	nop

0001246c <__retarget_lock_release_recursive>:
   1246c:	4770      	bx	lr
   1246e:	bf00      	nop

00012470 <memchr>:
   12470:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12474:	2a10      	cmp	r2, #16
   12476:	db2b      	blt.n	124d0 <memchr+0x60>
   12478:	f010 0f07 	tst.w	r0, #7
   1247c:	d008      	beq.n	12490 <memchr+0x20>
   1247e:	f810 3b01 	ldrb.w	r3, [r0], #1
   12482:	3a01      	subs	r2, #1
   12484:	428b      	cmp	r3, r1
   12486:	d02d      	beq.n	124e4 <memchr+0x74>
   12488:	f010 0f07 	tst.w	r0, #7
   1248c:	b342      	cbz	r2, 124e0 <memchr+0x70>
   1248e:	d1f6      	bne.n	1247e <memchr+0xe>
   12490:	b4f0      	push	{r4, r5, r6, r7}
   12492:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   12496:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1249a:	f022 0407 	bic.w	r4, r2, #7
   1249e:	f07f 0700 	mvns.w	r7, #0
   124a2:	2300      	movs	r3, #0
   124a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   124a8:	3c08      	subs	r4, #8
   124aa:	ea85 0501 	eor.w	r5, r5, r1
   124ae:	ea86 0601 	eor.w	r6, r6, r1
   124b2:	fa85 f547 	uadd8	r5, r5, r7
   124b6:	faa3 f587 	sel	r5, r3, r7
   124ba:	fa86 f647 	uadd8	r6, r6, r7
   124be:	faa5 f687 	sel	r6, r5, r7
   124c2:	b98e      	cbnz	r6, 124e8 <memchr+0x78>
   124c4:	d1ee      	bne.n	124a4 <memchr+0x34>
   124c6:	bcf0      	pop	{r4, r5, r6, r7}
   124c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   124cc:	f002 0207 	and.w	r2, r2, #7
   124d0:	b132      	cbz	r2, 124e0 <memchr+0x70>
   124d2:	f810 3b01 	ldrb.w	r3, [r0], #1
   124d6:	3a01      	subs	r2, #1
   124d8:	ea83 0301 	eor.w	r3, r3, r1
   124dc:	b113      	cbz	r3, 124e4 <memchr+0x74>
   124de:	d1f8      	bne.n	124d2 <memchr+0x62>
   124e0:	2000      	movs	r0, #0
   124e2:	4770      	bx	lr
   124e4:	3801      	subs	r0, #1
   124e6:	4770      	bx	lr
   124e8:	2d00      	cmp	r5, #0
   124ea:	bf06      	itte	eq
   124ec:	4635      	moveq	r5, r6
   124ee:	3803      	subeq	r0, #3
   124f0:	3807      	subne	r0, #7
   124f2:	f015 0f01 	tst.w	r5, #1
   124f6:	d107      	bne.n	12508 <memchr+0x98>
   124f8:	3001      	adds	r0, #1
   124fa:	f415 7f80 	tst.w	r5, #256	; 0x100
   124fe:	bf02      	ittt	eq
   12500:	3001      	addeq	r0, #1
   12502:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   12506:	3001      	addeq	r0, #1
   12508:	bcf0      	pop	{r4, r5, r6, r7}
   1250a:	3801      	subs	r0, #1
   1250c:	4770      	bx	lr
   1250e:	bf00      	nop
	...

00012540 <strlen>:
   12540:	f890 f000 	pld	[r0]
   12544:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12548:	f020 0107 	bic.w	r1, r0, #7
   1254c:	f06f 0c00 	mvn.w	ip, #0
   12550:	f010 0407 	ands.w	r4, r0, #7
   12554:	f891 f020 	pld	[r1, #32]
   12558:	f040 8049 	bne.w	125ee <strlen+0xae>
   1255c:	f04f 0400 	mov.w	r4, #0
   12560:	f06f 0007 	mvn.w	r0, #7
   12564:	e9d1 2300 	ldrd	r2, r3, [r1]
   12568:	f891 f040 	pld	[r1, #64]	; 0x40
   1256c:	f100 0008 	add.w	r0, r0, #8
   12570:	fa82 f24c 	uadd8	r2, r2, ip
   12574:	faa4 f28c 	sel	r2, r4, ip
   12578:	fa83 f34c 	uadd8	r3, r3, ip
   1257c:	faa2 f38c 	sel	r3, r2, ip
   12580:	bb4b      	cbnz	r3, 125d6 <strlen+0x96>
   12582:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   12586:	fa82 f24c 	uadd8	r2, r2, ip
   1258a:	f100 0008 	add.w	r0, r0, #8
   1258e:	faa4 f28c 	sel	r2, r4, ip
   12592:	fa83 f34c 	uadd8	r3, r3, ip
   12596:	faa2 f38c 	sel	r3, r2, ip
   1259a:	b9e3      	cbnz	r3, 125d6 <strlen+0x96>
   1259c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   125a0:	fa82 f24c 	uadd8	r2, r2, ip
   125a4:	f100 0008 	add.w	r0, r0, #8
   125a8:	faa4 f28c 	sel	r2, r4, ip
   125ac:	fa83 f34c 	uadd8	r3, r3, ip
   125b0:	faa2 f38c 	sel	r3, r2, ip
   125b4:	b97b      	cbnz	r3, 125d6 <strlen+0x96>
   125b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   125ba:	f101 0120 	add.w	r1, r1, #32
   125be:	fa82 f24c 	uadd8	r2, r2, ip
   125c2:	f100 0008 	add.w	r0, r0, #8
   125c6:	faa4 f28c 	sel	r2, r4, ip
   125ca:	fa83 f34c 	uadd8	r3, r3, ip
   125ce:	faa2 f38c 	sel	r3, r2, ip
   125d2:	2b00      	cmp	r3, #0
   125d4:	d0c6      	beq.n	12564 <strlen+0x24>
   125d6:	2a00      	cmp	r2, #0
   125d8:	bf04      	itt	eq
   125da:	3004      	addeq	r0, #4
   125dc:	461a      	moveq	r2, r3
   125de:	ba12      	rev	r2, r2
   125e0:	fab2 f282 	clz	r2, r2
   125e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   125e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   125ec:	4770      	bx	lr
   125ee:	e9d1 2300 	ldrd	r2, r3, [r1]
   125f2:	f004 0503 	and.w	r5, r4, #3
   125f6:	f1c4 0000 	rsb	r0, r4, #0
   125fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   125fe:	f014 0f04 	tst.w	r4, #4
   12602:	f891 f040 	pld	[r1, #64]	; 0x40
   12606:	fa0c f505 	lsl.w	r5, ip, r5
   1260a:	ea62 0205 	orn	r2, r2, r5
   1260e:	bf1c      	itt	ne
   12610:	ea63 0305 	ornne	r3, r3, r5
   12614:	4662      	movne	r2, ip
   12616:	f04f 0400 	mov.w	r4, #0
   1261a:	e7a9      	b.n	12570 <strlen+0x30>

0001261c <__register_exitproc>:
   1261c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12620:	f8df a07c 	ldr.w	sl, [pc, #124]	; 126a0 <__register_exitproc+0x84>
   12624:	4606      	mov	r6, r0
   12626:	f8da 0000 	ldr.w	r0, [sl]
   1262a:	4698      	mov	r8, r3
   1262c:	460f      	mov	r7, r1
   1262e:	4691      	mov	r9, r2
   12630:	f7ff ff1a 	bl	12468 <__retarget_lock_acquire_recursive>
   12634:	4b18      	ldr	r3, [pc, #96]	; (12698 <__register_exitproc+0x7c>)
   12636:	681c      	ldr	r4, [r3, #0]
   12638:	b324      	cbz	r4, 12684 <__register_exitproc+0x68>
   1263a:	6865      	ldr	r5, [r4, #4]
   1263c:	2d1f      	cmp	r5, #31
   1263e:	dc24      	bgt.n	1268a <__register_exitproc+0x6e>
   12640:	b95e      	cbnz	r6, 1265a <__register_exitproc+0x3e>
   12642:	1c6b      	adds	r3, r5, #1
   12644:	3502      	adds	r5, #2
   12646:	f8da 0000 	ldr.w	r0, [sl]
   1264a:	6063      	str	r3, [r4, #4]
   1264c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   12650:	f7ff ff0c 	bl	1246c <__retarget_lock_release_recursive>
   12654:	2000      	movs	r0, #0
   12656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1265a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   1265e:	2301      	movs	r3, #1
   12660:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   12664:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   12668:	40ab      	lsls	r3, r5
   1266a:	431a      	orrs	r2, r3
   1266c:	2e02      	cmp	r6, #2
   1266e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   12672:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   12676:	d1e4      	bne.n	12642 <__register_exitproc+0x26>
   12678:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   1267c:	431a      	orrs	r2, r3
   1267e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   12682:	e7de      	b.n	12642 <__register_exitproc+0x26>
   12684:	4c05      	ldr	r4, [pc, #20]	; (1269c <__register_exitproc+0x80>)
   12686:	601c      	str	r4, [r3, #0]
   12688:	e7d7      	b.n	1263a <__register_exitproc+0x1e>
   1268a:	f8da 0000 	ldr.w	r0, [sl]
   1268e:	f7ff feed 	bl	1246c <__retarget_lock_release_recursive>
   12692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12696:	e7de      	b.n	12656 <__register_exitproc+0x3a>
   12698:	20004470 	.word	0x20004470
   1269c:	20004474 	.word	0x20004474
   126a0:	20002f10 	.word	0x20002f10
   126a4:	00000000 	.word	0x00000000

000126a8 <nan>:
   126a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 126b0 <nan+0x8>
   126ac:	4770      	bx	lr
   126ae:	bf00      	nop
   126b0:	00000000 	.word	0x00000000
   126b4:	7ff80000 	.word	0x7ff80000

000126b8 <_malloc_trim_r>:
   126b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126ba:	4f24      	ldr	r7, [pc, #144]	; (1274c <_malloc_trim_r+0x94>)
   126bc:	460c      	mov	r4, r1
   126be:	4606      	mov	r6, r0
   126c0:	f7fd ff00 	bl	104c4 <__malloc_lock>
   126c4:	68bb      	ldr	r3, [r7, #8]
   126c6:	685d      	ldr	r5, [r3, #4]
   126c8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   126cc:	310f      	adds	r1, #15
   126ce:	f025 0503 	bic.w	r5, r5, #3
   126d2:	194b      	adds	r3, r1, r5
   126d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   126d8:	f023 030f 	bic.w	r3, r3, #15
   126dc:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   126e0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   126e4:	db07      	blt.n	126f6 <_malloc_trim_r+0x3e>
   126e6:	2100      	movs	r1, #0
   126e8:	4630      	mov	r0, r6
   126ea:	f7ff fc8f 	bl	1200c <_sbrk_r>
   126ee:	68bb      	ldr	r3, [r7, #8]
   126f0:	442b      	add	r3, r5
   126f2:	4298      	cmp	r0, r3
   126f4:	d004      	beq.n	12700 <_malloc_trim_r+0x48>
   126f6:	4630      	mov	r0, r6
   126f8:	f7fd feea 	bl	104d0 <__malloc_unlock>
   126fc:	2000      	movs	r0, #0
   126fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12700:	4261      	negs	r1, r4
   12702:	4630      	mov	r0, r6
   12704:	f7ff fc82 	bl	1200c <_sbrk_r>
   12708:	3001      	adds	r0, #1
   1270a:	d00d      	beq.n	12728 <_malloc_trim_r+0x70>
   1270c:	4a10      	ldr	r2, [pc, #64]	; (12750 <_malloc_trim_r+0x98>)
   1270e:	68bb      	ldr	r3, [r7, #8]
   12710:	1b2d      	subs	r5, r5, r4
   12712:	f045 0501 	orr.w	r5, r5, #1
   12716:	605d      	str	r5, [r3, #4]
   12718:	6813      	ldr	r3, [r2, #0]
   1271a:	4630      	mov	r0, r6
   1271c:	1b1b      	subs	r3, r3, r4
   1271e:	6013      	str	r3, [r2, #0]
   12720:	f7fd fed6 	bl	104d0 <__malloc_unlock>
   12724:	2001      	movs	r0, #1
   12726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12728:	2100      	movs	r1, #0
   1272a:	4630      	mov	r0, r6
   1272c:	f7ff fc6e 	bl	1200c <_sbrk_r>
   12730:	68ba      	ldr	r2, [r7, #8]
   12732:	1a83      	subs	r3, r0, r2
   12734:	2b0f      	cmp	r3, #15
   12736:	ddde      	ble.n	126f6 <_malloc_trim_r+0x3e>
   12738:	f043 0301 	orr.w	r3, r3, #1
   1273c:	6053      	str	r3, [r2, #4]
   1273e:	4b05      	ldr	r3, [pc, #20]	; (12754 <_malloc_trim_r+0x9c>)
   12740:	4903      	ldr	r1, [pc, #12]	; (12750 <_malloc_trim_r+0x98>)
   12742:	681b      	ldr	r3, [r3, #0]
   12744:	1ac0      	subs	r0, r0, r3
   12746:	6008      	str	r0, [r1, #0]
   12748:	e7d5      	b.n	126f6 <_malloc_trim_r+0x3e>
   1274a:	bf00      	nop
   1274c:	20003088 	.word	0x20003088
   12750:	20004610 	.word	0x20004610
   12754:	20003490 	.word	0x20003490

00012758 <_free_r>:
   12758:	2900      	cmp	r1, #0
   1275a:	d061      	beq.n	12820 <_free_r+0xc8>
   1275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1275e:	460c      	mov	r4, r1
   12760:	4606      	mov	r6, r0
   12762:	f7fd feaf 	bl	104c4 <__malloc_lock>
   12766:	f854 2c04 	ldr.w	r2, [r4, #-4]
   1276a:	4f7b      	ldr	r7, [pc, #492]	; (12958 <_free_r+0x200>)
   1276c:	f1a4 0508 	sub.w	r5, r4, #8
   12770:	f022 0101 	bic.w	r1, r2, #1
   12774:	eb05 0c01 	add.w	ip, r5, r1
   12778:	68b8      	ldr	r0, [r7, #8]
   1277a:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1277e:	4560      	cmp	r0, ip
   12780:	f023 0303 	bic.w	r3, r3, #3
   12784:	f000 808b 	beq.w	1289e <_free_r+0x146>
   12788:	07d2      	lsls	r2, r2, #31
   1278a:	f8cc 3004 	str.w	r3, [ip, #4]
   1278e:	d432      	bmi.n	127f6 <_free_r+0x9e>
   12790:	f854 2c08 	ldr.w	r2, [r4, #-8]
   12794:	1aad      	subs	r5, r5, r2
   12796:	4411      	add	r1, r2
   12798:	68aa      	ldr	r2, [r5, #8]
   1279a:	f107 0008 	add.w	r0, r7, #8
   1279e:	4282      	cmp	r2, r0
   127a0:	d06a      	beq.n	12878 <_free_r+0x120>
   127a2:	eb0c 0403 	add.w	r4, ip, r3
   127a6:	f8d4 e004 	ldr.w	lr, [r4, #4]
   127aa:	68ec      	ldr	r4, [r5, #12]
   127ac:	60d4      	str	r4, [r2, #12]
   127ae:	f01e 0f01 	tst.w	lr, #1
   127b2:	60a2      	str	r2, [r4, #8]
   127b4:	f000 8097 	beq.w	128e6 <_free_r+0x18e>
   127b8:	f041 0301 	orr.w	r3, r1, #1
   127bc:	606b      	str	r3, [r5, #4]
   127be:	f8cc 1000 	str.w	r1, [ip]
   127c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   127c6:	d235      	bcs.n	12834 <_free_r+0xdc>
   127c8:	6878      	ldr	r0, [r7, #4]
   127ca:	08cb      	lsrs	r3, r1, #3
   127cc:	2201      	movs	r2, #1
   127ce:	0949      	lsrs	r1, r1, #5
   127d0:	3301      	adds	r3, #1
   127d2:	408a      	lsls	r2, r1
   127d4:	4302      	orrs	r2, r0
   127d6:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   127da:	607a      	str	r2, [r7, #4]
   127dc:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   127e0:	3a08      	subs	r2, #8
   127e2:	e9c5 1202 	strd	r1, r2, [r5, #8]
   127e6:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   127ea:	60cd      	str	r5, [r1, #12]
   127ec:	4630      	mov	r0, r6
   127ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   127f2:	f7fd be6d 	b.w	104d0 <__malloc_unlock>
   127f6:	eb0c 0203 	add.w	r2, ip, r3
   127fa:	6852      	ldr	r2, [r2, #4]
   127fc:	07d0      	lsls	r0, r2, #31
   127fe:	d410      	bmi.n	12822 <_free_r+0xca>
   12800:	4419      	add	r1, r3
   12802:	f107 0008 	add.w	r0, r7, #8
   12806:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1280a:	4283      	cmp	r3, r0
   1280c:	d073      	beq.n	128f6 <_free_r+0x19e>
   1280e:	f8dc 200c 	ldr.w	r2, [ip, #12]
   12812:	60da      	str	r2, [r3, #12]
   12814:	6093      	str	r3, [r2, #8]
   12816:	f041 0301 	orr.w	r3, r1, #1
   1281a:	606b      	str	r3, [r5, #4]
   1281c:	5069      	str	r1, [r5, r1]
   1281e:	e7d0      	b.n	127c2 <_free_r+0x6a>
   12820:	4770      	bx	lr
   12822:	f041 0301 	orr.w	r3, r1, #1
   12826:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1282a:	f844 3c04 	str.w	r3, [r4, #-4]
   1282e:	f8cc 1000 	str.w	r1, [ip]
   12832:	d3c9      	bcc.n	127c8 <_free_r+0x70>
   12834:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   12838:	ea4f 2351 	mov.w	r3, r1, lsr #9
   1283c:	d248      	bcs.n	128d0 <_free_r+0x178>
   1283e:	098b      	lsrs	r3, r1, #6
   12840:	f103 0039 	add.w	r0, r3, #57	; 0x39
   12844:	f103 0238 	add.w	r2, r3, #56	; 0x38
   12848:	00c3      	lsls	r3, r0, #3
   1284a:	18f8      	adds	r0, r7, r3
   1284c:	58fb      	ldr	r3, [r7, r3]
   1284e:	3808      	subs	r0, #8
   12850:	4298      	cmp	r0, r3
   12852:	d059      	beq.n	12908 <_free_r+0x1b0>
   12854:	685a      	ldr	r2, [r3, #4]
   12856:	f022 0203 	bic.w	r2, r2, #3
   1285a:	428a      	cmp	r2, r1
   1285c:	d902      	bls.n	12864 <_free_r+0x10c>
   1285e:	689b      	ldr	r3, [r3, #8]
   12860:	4298      	cmp	r0, r3
   12862:	d1f7      	bne.n	12854 <_free_r+0xfc>
   12864:	68d8      	ldr	r0, [r3, #12]
   12866:	e9c5 3002 	strd	r3, r0, [r5, #8]
   1286a:	6085      	str	r5, [r0, #8]
   1286c:	60dd      	str	r5, [r3, #12]
   1286e:	4630      	mov	r0, r6
   12870:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12874:	f7fd be2c 	b.w	104d0 <__malloc_unlock>
   12878:	eb0c 0203 	add.w	r2, ip, r3
   1287c:	6852      	ldr	r2, [r2, #4]
   1287e:	07d2      	lsls	r2, r2, #31
   12880:	d463      	bmi.n	1294a <_free_r+0x1f2>
   12882:	440b      	add	r3, r1
   12884:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   12888:	60ca      	str	r2, [r1, #12]
   1288a:	6091      	str	r1, [r2, #8]
   1288c:	f043 0201 	orr.w	r2, r3, #1
   12890:	606a      	str	r2, [r5, #4]
   12892:	4630      	mov	r0, r6
   12894:	50eb      	str	r3, [r5, r3]
   12896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1289a:	f7fd be19 	b.w	104d0 <__malloc_unlock>
   1289e:	440b      	add	r3, r1
   128a0:	07d1      	lsls	r1, r2, #31
   128a2:	d407      	bmi.n	128b4 <_free_r+0x15c>
   128a4:	f854 2c08 	ldr.w	r2, [r4, #-8]
   128a8:	1aad      	subs	r5, r5, r2
   128aa:	4413      	add	r3, r2
   128ac:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   128b0:	60ca      	str	r2, [r1, #12]
   128b2:	6091      	str	r1, [r2, #8]
   128b4:	f043 0201 	orr.w	r2, r3, #1
   128b8:	606a      	str	r2, [r5, #4]
   128ba:	4a28      	ldr	r2, [pc, #160]	; (1295c <_free_r+0x204>)
   128bc:	60bd      	str	r5, [r7, #8]
   128be:	6812      	ldr	r2, [r2, #0]
   128c0:	429a      	cmp	r2, r3
   128c2:	d893      	bhi.n	127ec <_free_r+0x94>
   128c4:	4b26      	ldr	r3, [pc, #152]	; (12960 <_free_r+0x208>)
   128c6:	4630      	mov	r0, r6
   128c8:	6819      	ldr	r1, [r3, #0]
   128ca:	f7ff fef5 	bl	126b8 <_malloc_trim_r>
   128ce:	e78d      	b.n	127ec <_free_r+0x94>
   128d0:	2b14      	cmp	r3, #20
   128d2:	d90a      	bls.n	128ea <_free_r+0x192>
   128d4:	2b54      	cmp	r3, #84	; 0x54
   128d6:	d81f      	bhi.n	12918 <_free_r+0x1c0>
   128d8:	0b0b      	lsrs	r3, r1, #12
   128da:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   128de:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   128e2:	00c3      	lsls	r3, r0, #3
   128e4:	e7b1      	b.n	1284a <_free_r+0xf2>
   128e6:	4419      	add	r1, r3
   128e8:	e78d      	b.n	12806 <_free_r+0xae>
   128ea:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   128ee:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   128f2:	00c3      	lsls	r3, r0, #3
   128f4:	e7a9      	b.n	1284a <_free_r+0xf2>
   128f6:	f041 0301 	orr.w	r3, r1, #1
   128fa:	e9c7 5504 	strd	r5, r5, [r7, #16]
   128fe:	e9c5 0002 	strd	r0, r0, [r5, #8]
   12902:	606b      	str	r3, [r5, #4]
   12904:	5069      	str	r1, [r5, r1]
   12906:	e771      	b.n	127ec <_free_r+0x94>
   12908:	6879      	ldr	r1, [r7, #4]
   1290a:	1092      	asrs	r2, r2, #2
   1290c:	2401      	movs	r4, #1
   1290e:	fa04 f202 	lsl.w	r2, r4, r2
   12912:	430a      	orrs	r2, r1
   12914:	607a      	str	r2, [r7, #4]
   12916:	e7a6      	b.n	12866 <_free_r+0x10e>
   12918:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1291c:	d806      	bhi.n	1292c <_free_r+0x1d4>
   1291e:	0bcb      	lsrs	r3, r1, #15
   12920:	f103 0078 	add.w	r0, r3, #120	; 0x78
   12924:	f103 0277 	add.w	r2, r3, #119	; 0x77
   12928:	00c3      	lsls	r3, r0, #3
   1292a:	e78e      	b.n	1284a <_free_r+0xf2>
   1292c:	f240 5254 	movw	r2, #1364	; 0x554
   12930:	4293      	cmp	r3, r2
   12932:	d806      	bhi.n	12942 <_free_r+0x1ea>
   12934:	0c8b      	lsrs	r3, r1, #18
   12936:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1293a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   1293e:	00c3      	lsls	r3, r0, #3
   12940:	e783      	b.n	1284a <_free_r+0xf2>
   12942:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   12946:	227e      	movs	r2, #126	; 0x7e
   12948:	e77f      	b.n	1284a <_free_r+0xf2>
   1294a:	f041 0301 	orr.w	r3, r1, #1
   1294e:	606b      	str	r3, [r5, #4]
   12950:	f8cc 1000 	str.w	r1, [ip]
   12954:	e74a      	b.n	127ec <_free_r+0x94>
   12956:	bf00      	nop
   12958:	20003088 	.word	0x20003088
   1295c:	20003494 	.word	0x20003494
   12960:	20004640 	.word	0x20004640

00012964 <rshift>:
   12964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12968:	6904      	ldr	r4, [r0, #16]
   1296a:	ebb4 1f61 	cmp.w	r4, r1, asr #5
   1296e:	dd2f      	ble.n	129d0 <rshift+0x6c>
   12970:	f100 0e14 	add.w	lr, r0, #20
   12974:	114e      	asrs	r6, r1, #5
   12976:	f011 0c1f 	ands.w	ip, r1, #31
   1297a:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
   1297e:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
   12982:	d02b      	beq.n	129dc <rshift+0x78>
   12984:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
   12988:	3304      	adds	r3, #4
   1298a:	429d      	cmp	r5, r3
   1298c:	fa21 f10c 	lsr.w	r1, r1, ip
   12990:	f1cc 0820 	rsb	r8, ip, #32
   12994:	d918      	bls.n	129c8 <rshift+0x64>
   12996:	4677      	mov	r7, lr
   12998:	681a      	ldr	r2, [r3, #0]
   1299a:	fa02 f208 	lsl.w	r2, r2, r8
   1299e:	430a      	orrs	r2, r1
   129a0:	f847 2b04 	str.w	r2, [r7], #4
   129a4:	f853 1b04 	ldr.w	r1, [r3], #4
   129a8:	429d      	cmp	r5, r3
   129aa:	fa21 f10c 	lsr.w	r1, r1, ip
   129ae:	d8f3      	bhi.n	12998 <rshift+0x34>
   129b0:	1ba3      	subs	r3, r4, r6
   129b2:	009b      	lsls	r3, r3, #2
   129b4:	3b05      	subs	r3, #5
   129b6:	089b      	lsrs	r3, r3, #2
   129b8:	3301      	adds	r3, #1
   129ba:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
   129be:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   129c2:	b1c9      	cbz	r1, 129f8 <rshift+0x94>
   129c4:	3404      	adds	r4, #4
   129c6:	e017      	b.n	129f8 <rshift+0x94>
   129c8:	6141      	str	r1, [r0, #20]
   129ca:	4674      	mov	r4, lr
   129cc:	2900      	cmp	r1, #0
   129ce:	d1f9      	bne.n	129c4 <rshift+0x60>
   129d0:	2300      	movs	r3, #0
   129d2:	6103      	str	r3, [r0, #16]
   129d4:	2300      	movs	r3, #0
   129d6:	6143      	str	r3, [r0, #20]
   129d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   129dc:	429d      	cmp	r5, r3
   129de:	bf88      	it	hi
   129e0:	f100 0210 	addhi.w	r2, r0, #16
   129e4:	d9f4      	bls.n	129d0 <rshift+0x6c>
   129e6:	f853 1b04 	ldr.w	r1, [r3], #4
   129ea:	f842 1f04 	str.w	r1, [r2, #4]!
   129ee:	429d      	cmp	r5, r3
   129f0:	d8f9      	bhi.n	129e6 <rshift+0x82>
   129f2:	1ba4      	subs	r4, r4, r6
   129f4:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
   129f8:	eba4 030e 	sub.w	r3, r4, lr
   129fc:	109b      	asrs	r3, r3, #2
   129fe:	4574      	cmp	r4, lr
   12a00:	6103      	str	r3, [r0, #16]
   12a02:	d0e7      	beq.n	129d4 <rshift+0x70>
   12a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012a08 <__gethex>:
   12a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a0c:	ed2d 8b02 	vpush	{d8}
   12a10:	680c      	ldr	r4, [r1, #0]
   12a12:	468b      	mov	fp, r1
   12a14:	78a1      	ldrb	r1, [r4, #2]
   12a16:	b085      	sub	sp, #20
   12a18:	2930      	cmp	r1, #48	; 0x30
   12a1a:	ee08 0a10 	vmov	s16, r0
   12a1e:	4692      	mov	sl, r2
   12a20:	9302      	str	r3, [sp, #8]
   12a22:	f040 81ce 	bne.w	12dc2 <__gethex+0x3ba>
   12a26:	f06f 0001 	mvn.w	r0, #1
   12a2a:	1b00      	subs	r0, r0, r4
   12a2c:	1ce2      	adds	r2, r4, #3
   12a2e:	1883      	adds	r3, r0, r2
   12a30:	4614      	mov	r4, r2
   12a32:	f812 1b01 	ldrb.w	r1, [r2], #1
   12a36:	2930      	cmp	r1, #48	; 0x30
   12a38:	d0f9      	beq.n	12a2e <__gethex+0x26>
   12a3a:	f8df 8300 	ldr.w	r8, [pc, #768]	; 12d3c <__gethex+0x334>
   12a3e:	f818 2001 	ldrb.w	r2, [r8, r1]
   12a42:	2a00      	cmp	r2, #0
   12a44:	f000 80e5 	beq.w	12c12 <__gethex+0x20a>
   12a48:	7822      	ldrb	r2, [r4, #0]
   12a4a:	2700      	movs	r7, #0
   12a4c:	f818 2002 	ldrb.w	r2, [r8, r2]
   12a50:	463d      	mov	r5, r7
   12a52:	4626      	mov	r6, r4
   12a54:	b12a      	cbz	r2, 12a62 <__gethex+0x5a>
   12a56:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   12a5a:	f818 2002 	ldrb.w	r2, [r8, r2]
   12a5e:	2a00      	cmp	r2, #0
   12a60:	d1f9      	bne.n	12a56 <__gethex+0x4e>
   12a62:	49b5      	ldr	r1, [pc, #724]	; (12d38 <__gethex+0x330>)
   12a64:	9301      	str	r3, [sp, #4]
   12a66:	2201      	movs	r2, #1
   12a68:	4630      	mov	r0, r6
   12a6a:	f7ff fa11 	bl	11e90 <strncmp>
   12a6e:	9b01      	ldr	r3, [sp, #4]
   12a70:	4681      	mov	r9, r0
   12a72:	2800      	cmp	r0, #0
   12a74:	d04d      	beq.n	12b12 <__gethex+0x10a>
   12a76:	2d00      	cmp	r5, #0
   12a78:	d14e      	bne.n	12b18 <__gethex+0x110>
   12a7a:	7832      	ldrb	r2, [r6, #0]
   12a7c:	46a9      	mov	r9, r5
   12a7e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   12a82:	2a50      	cmp	r2, #80	; 0x50
   12a84:	4635      	mov	r5, r6
   12a86:	d050      	beq.n	12b2a <__gethex+0x122>
   12a88:	f8cb 6000 	str.w	r6, [fp]
   12a8c:	2f00      	cmp	r7, #0
   12a8e:	d169      	bne.n	12b64 <__gethex+0x15c>
   12a90:	1b2b      	subs	r3, r5, r4
   12a92:	3b01      	subs	r3, #1
   12a94:	2b07      	cmp	r3, #7
   12a96:	4639      	mov	r1, r7
   12a98:	dd04      	ble.n	12aa4 <__gethex+0x9c>
   12a9a:	105b      	asrs	r3, r3, #1
   12a9c:	2b07      	cmp	r3, #7
   12a9e:	f101 0101 	add.w	r1, r1, #1
   12aa2:	dcfa      	bgt.n	12a9a <__gethex+0x92>
   12aa4:	ee18 0a10 	vmov	r0, s16
   12aa8:	f002 f924 	bl	14cf4 <_Balloc>
   12aac:	4683      	mov	fp, r0
   12aae:	2800      	cmp	r0, #0
   12ab0:	f000 8266 	beq.w	12f80 <__gethex+0x578>
   12ab4:	f100 0614 	add.w	r6, r0, #20
   12ab8:	42ac      	cmp	r4, r5
   12aba:	9601      	str	r6, [sp, #4]
   12abc:	f080 81d2 	bcs.w	12e64 <__gethex+0x45c>
   12ac0:	2700      	movs	r7, #0
   12ac2:	f8cd 900c 	str.w	r9, [sp, #12]
   12ac6:	499c      	ldr	r1, [pc, #624]	; (12d38 <__gethex+0x330>)
   12ac8:	46a1      	mov	r9, r4
   12aca:	463c      	mov	r4, r7
   12acc:	e00c      	b.n	12ae8 <__gethex+0xe0>
   12ace:	2f20      	cmp	r7, #32
   12ad0:	d019      	beq.n	12b06 <__gethex+0xfe>
   12ad2:	4638      	mov	r0, r7
   12ad4:	3704      	adds	r7, #4
   12ad6:	782a      	ldrb	r2, [r5, #0]
   12ad8:	f818 2002 	ldrb.w	r2, [r8, r2]
   12adc:	f002 020f 	and.w	r2, r2, #15
   12ae0:	4082      	lsls	r2, r0
   12ae2:	4314      	orrs	r4, r2
   12ae4:	454d      	cmp	r5, r9
   12ae6:	d047      	beq.n	12b78 <__gethex+0x170>
   12ae8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
   12aec:	2a2e      	cmp	r2, #46	; 0x2e
   12aee:	d1ee      	bne.n	12ace <__gethex+0xc6>
   12af0:	454d      	cmp	r5, r9
   12af2:	d3ec      	bcc.n	12ace <__gethex+0xc6>
   12af4:	2201      	movs	r2, #1
   12af6:	4628      	mov	r0, r5
   12af8:	f7ff f9ca 	bl	11e90 <strncmp>
   12afc:	498e      	ldr	r1, [pc, #568]	; (12d38 <__gethex+0x330>)
   12afe:	2800      	cmp	r0, #0
   12b00:	d0f0      	beq.n	12ae4 <__gethex+0xdc>
   12b02:	2f20      	cmp	r7, #32
   12b04:	d1e5      	bne.n	12ad2 <__gethex+0xca>
   12b06:	2000      	movs	r0, #0
   12b08:	f846 4b04 	str.w	r4, [r6], #4
   12b0c:	2704      	movs	r7, #4
   12b0e:	4604      	mov	r4, r0
   12b10:	e7e1      	b.n	12ad6 <__gethex+0xce>
   12b12:	2d00      	cmp	r5, #0
   12b14:	f000 8142 	beq.w	12d9c <__gethex+0x394>
   12b18:	7832      	ldrb	r2, [r6, #0]
   12b1a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   12b1e:	1bad      	subs	r5, r5, r6
   12b20:	2a50      	cmp	r2, #80	; 0x50
   12b22:	ea4f 0985 	mov.w	r9, r5, lsl #2
   12b26:	4635      	mov	r5, r6
   12b28:	d1ae      	bne.n	12a88 <__gethex+0x80>
   12b2a:	786a      	ldrb	r2, [r5, #1]
   12b2c:	2a2b      	cmp	r2, #43	; 0x2b
   12b2e:	f000 8125 	beq.w	12d7c <__gethex+0x374>
   12b32:	2a2d      	cmp	r2, #45	; 0x2d
   12b34:	f000 80a5 	beq.w	12c82 <__gethex+0x27a>
   12b38:	1c6e      	adds	r6, r5, #1
   12b3a:	2000      	movs	r0, #0
   12b3c:	f818 1002 	ldrb.w	r1, [r8, r2]
   12b40:	1e4a      	subs	r2, r1, #1
   12b42:	2a18      	cmp	r2, #24
   12b44:	f200 809b 	bhi.w	12c7e <__gethex+0x276>
   12b48:	7872      	ldrb	r2, [r6, #1]
   12b4a:	f818 2002 	ldrb.w	r2, [r8, r2]
   12b4e:	3910      	subs	r1, #16
   12b50:	3601      	adds	r6, #1
   12b52:	2a00      	cmp	r2, #0
   12b54:	d15a      	bne.n	12c0c <__gethex+0x204>
   12b56:	b100      	cbz	r0, 12b5a <__gethex+0x152>
   12b58:	4249      	negs	r1, r1
   12b5a:	4489      	add	r9, r1
   12b5c:	f8cb 6000 	str.w	r6, [fp]
   12b60:	2f00      	cmp	r7, #0
   12b62:	d095      	beq.n	12a90 <__gethex+0x88>
   12b64:	2b00      	cmp	r3, #0
   12b66:	bf14      	ite	ne
   12b68:	2500      	movne	r5, #0
   12b6a:	2506      	moveq	r5, #6
   12b6c:	4628      	mov	r0, r5
   12b6e:	b005      	add	sp, #20
   12b70:	ecbd 8b02 	vpop	{d8}
   12b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b78:	f8dd 900c 	ldr.w	r9, [sp, #12]
   12b7c:	4623      	mov	r3, r4
   12b7e:	f846 3b04 	str.w	r3, [r6], #4
   12b82:	4618      	mov	r0, r3
   12b84:	9b01      	ldr	r3, [sp, #4]
   12b86:	1af6      	subs	r6, r6, r3
   12b88:	10b6      	asrs	r6, r6, #2
   12b8a:	f8cb 6010 	str.w	r6, [fp, #16]
   12b8e:	f002 f98b 	bl	14ea8 <__hi0bits>
   12b92:	0176      	lsls	r6, r6, #5
   12b94:	f8da 4000 	ldr.w	r4, [sl]
   12b98:	1a30      	subs	r0, r6, r0
   12b9a:	42a0      	cmp	r0, r4
   12b9c:	dc75      	bgt.n	12c8a <__gethex+0x282>
   12b9e:	f2c0 80ef 	blt.w	12d80 <__gethex+0x378>
   12ba2:	2700      	movs	r7, #0
   12ba4:	f8da 3008 	ldr.w	r3, [sl, #8]
   12ba8:	454b      	cmp	r3, r9
   12baa:	f2c0 8151 	blt.w	12e50 <__gethex+0x448>
   12bae:	f8da 3004 	ldr.w	r3, [sl, #4]
   12bb2:	454b      	cmp	r3, r9
   12bb4:	dd4a      	ble.n	12c4c <__gethex+0x244>
   12bb6:	eba3 0909 	sub.w	r9, r3, r9
   12bba:	454c      	cmp	r4, r9
   12bbc:	f300 8082 	bgt.w	12cc4 <__gethex+0x2bc>
   12bc0:	f8da 200c 	ldr.w	r2, [sl, #12]
   12bc4:	2a02      	cmp	r2, #2
   12bc6:	f000 8165 	beq.w	12e94 <__gethex+0x48c>
   12bca:	2a03      	cmp	r2, #3
   12bcc:	f000 8181 	beq.w	12ed2 <__gethex+0x4ca>
   12bd0:	2a01      	cmp	r2, #1
   12bd2:	f000 816f 	beq.w	12eb4 <__gethex+0x4ac>
   12bd6:	ee18 0a10 	vmov	r0, s16
   12bda:	4659      	mov	r1, fp
   12bdc:	f002 f8b0 	bl	14d40 <_Bfree>
   12be0:	2550      	movs	r5, #80	; 0x50
   12be2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12be4:	2300      	movs	r3, #0
   12be6:	4628      	mov	r0, r5
   12be8:	6013      	str	r3, [r2, #0]
   12bea:	b005      	add	sp, #20
   12bec:	ecbd 8b02 	vpop	{d8}
   12bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bf4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   12bf8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   12bfc:	f1a2 0110 	sub.w	r1, r2, #16
   12c00:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   12c04:	f818 2002 	ldrb.w	r2, [r8, r2]
   12c08:	2a00      	cmp	r2, #0
   12c0a:	d0a4      	beq.n	12b56 <__gethex+0x14e>
   12c0c:	2a19      	cmp	r2, #25
   12c0e:	ddf1      	ble.n	12bf4 <__gethex+0x1ec>
   12c10:	e7a1      	b.n	12b56 <__gethex+0x14e>
   12c12:	4949      	ldr	r1, [pc, #292]	; (12d38 <__gethex+0x330>)
   12c14:	9301      	str	r3, [sp, #4]
   12c16:	2201      	movs	r2, #1
   12c18:	4620      	mov	r0, r4
   12c1a:	f7ff f939 	bl	11e90 <strncmp>
   12c1e:	9b01      	ldr	r3, [sp, #4]
   12c20:	2800      	cmp	r0, #0
   12c22:	d16d      	bne.n	12d00 <__gethex+0x2f8>
   12c24:	7861      	ldrb	r1, [r4, #1]
   12c26:	f818 2001 	ldrb.w	r2, [r8, r1]
   12c2a:	1c65      	adds	r5, r4, #1
   12c2c:	2a00      	cmp	r2, #0
   12c2e:	d069      	beq.n	12d04 <__gethex+0x2fc>
   12c30:	2930      	cmp	r1, #48	; 0x30
   12c32:	462c      	mov	r4, r5
   12c34:	d105      	bne.n	12c42 <__gethex+0x23a>
   12c36:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   12c3a:	2b30      	cmp	r3, #48	; 0x30
   12c3c:	d0fb      	beq.n	12c36 <__gethex+0x22e>
   12c3e:	f818 2003 	ldrb.w	r2, [r8, r3]
   12c42:	fab2 f782 	clz	r7, r2
   12c46:	097f      	lsrs	r7, r7, #5
   12c48:	2301      	movs	r3, #1
   12c4a:	e702      	b.n	12a52 <__gethex+0x4a>
   12c4c:	2501      	movs	r5, #1
   12c4e:	b157      	cbz	r7, 12c66 <__gethex+0x25e>
   12c50:	f8da 300c 	ldr.w	r3, [sl, #12]
   12c54:	2b02      	cmp	r3, #2
   12c56:	d05d      	beq.n	12d14 <__gethex+0x30c>
   12c58:	2b03      	cmp	r3, #3
   12c5a:	d05f      	beq.n	12d1c <__gethex+0x314>
   12c5c:	2b01      	cmp	r3, #1
   12c5e:	f000 8084 	beq.w	12d6a <__gethex+0x362>
   12c62:	f045 0510 	orr.w	r5, r5, #16
   12c66:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12c68:	f8c3 b000 	str.w	fp, [r3]
   12c6c:	9b02      	ldr	r3, [sp, #8]
   12c6e:	4628      	mov	r0, r5
   12c70:	f8c3 9000 	str.w	r9, [r3]
   12c74:	b005      	add	sp, #20
   12c76:	ecbd 8b02 	vpop	{d8}
   12c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c7e:	462e      	mov	r6, r5
   12c80:	e702      	b.n	12a88 <__gethex+0x80>
   12c82:	2001      	movs	r0, #1
   12c84:	78aa      	ldrb	r2, [r5, #2]
   12c86:	1cae      	adds	r6, r5, #2
   12c88:	e758      	b.n	12b3c <__gethex+0x134>
   12c8a:	1b06      	subs	r6, r0, r4
   12c8c:	4631      	mov	r1, r6
   12c8e:	4658      	mov	r0, fp
   12c90:	f002 fd38 	bl	15704 <__any_on>
   12c94:	4607      	mov	r7, r0
   12c96:	b178      	cbz	r0, 12cb8 <__gethex+0x2b0>
   12c98:	1e72      	subs	r2, r6, #1
   12c9a:	1153      	asrs	r3, r2, #5
   12c9c:	9901      	ldr	r1, [sp, #4]
   12c9e:	2701      	movs	r7, #1
   12ca0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   12ca4:	f002 031f 	and.w	r3, r2, #31
   12ca8:	fa07 f303 	lsl.w	r3, r7, r3
   12cac:	420b      	tst	r3, r1
   12cae:	d003      	beq.n	12cb8 <__gethex+0x2b0>
   12cb0:	42ba      	cmp	r2, r7
   12cb2:	f300 80e2 	bgt.w	12e7a <__gethex+0x472>
   12cb6:	2702      	movs	r7, #2
   12cb8:	4631      	mov	r1, r6
   12cba:	4658      	mov	r0, fp
   12cbc:	44b1      	add	r9, r6
   12cbe:	f7ff fe51 	bl	12964 <rshift>
   12cc2:	e76f      	b.n	12ba4 <__gethex+0x19c>
   12cc4:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
   12cc8:	2f00      	cmp	r7, #0
   12cca:	f040 80ce 	bne.w	12e6a <__gethex+0x462>
   12cce:	2d00      	cmp	r5, #0
   12cd0:	f040 80cd 	bne.w	12e6e <__gethex+0x466>
   12cd4:	116b      	asrs	r3, r5, #5
   12cd6:	9a01      	ldr	r2, [sp, #4]
   12cd8:	f005 051f 	and.w	r5, r5, #31
   12cdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   12ce0:	2301      	movs	r3, #1
   12ce2:	40ab      	lsls	r3, r5
   12ce4:	4213      	tst	r3, r2
   12ce6:	4649      	mov	r1, r9
   12ce8:	4658      	mov	r0, fp
   12cea:	bf18      	it	ne
   12cec:	f047 0702 	orrne.w	r7, r7, #2
   12cf0:	eba4 0409 	sub.w	r4, r4, r9
   12cf4:	f7ff fe36 	bl	12964 <rshift>
   12cf8:	2502      	movs	r5, #2
   12cfa:	f8da 9004 	ldr.w	r9, [sl, #4]
   12cfe:	e7a6      	b.n	12c4e <__gethex+0x246>
   12d00:	7821      	ldrb	r1, [r4, #0]
   12d02:	4625      	mov	r5, r4
   12d04:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   12d08:	2950      	cmp	r1, #80	; 0x50
   12d0a:	f000 80bf 	beq.w	12e8c <__gethex+0x484>
   12d0e:	f8cb 5000 	str.w	r5, [fp]
   12d12:	e727      	b.n	12b64 <__gethex+0x15c>
   12d14:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12d16:	f1c3 0301 	rsb	r3, r3, #1
   12d1a:	9311      	str	r3, [sp, #68]	; 0x44
   12d1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12d1e:	2b00      	cmp	r3, #0
   12d20:	d09f      	beq.n	12c62 <__gethex+0x25a>
   12d22:	f8db 7010 	ldr.w	r7, [fp, #16]
   12d26:	f8dd 8004 	ldr.w	r8, [sp, #4]
   12d2a:	00ba      	lsls	r2, r7, #2
   12d2c:	4643      	mov	r3, r8
   12d2e:	9201      	str	r2, [sp, #4]
   12d30:	eb08 0087 	add.w	r0, r8, r7, lsl #2
   12d34:	2100      	movs	r1, #0
   12d36:	e007      	b.n	12d48 <__gethex+0x340>
   12d38:	20000fc8 	.word	0x20000fc8
   12d3c:	200016cc 	.word	0x200016cc
   12d40:	4298      	cmp	r0, r3
   12d42:	f843 1c04 	str.w	r1, [r3, #-4]
   12d46:	d93f      	bls.n	12dc8 <__gethex+0x3c0>
   12d48:	461e      	mov	r6, r3
   12d4a:	f853 2b04 	ldr.w	r2, [r3], #4
   12d4e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   12d52:	d0f5      	beq.n	12d40 <__gethex+0x338>
   12d54:	3201      	adds	r2, #1
   12d56:	2d02      	cmp	r5, #2
   12d58:	6032      	str	r2, [r6, #0]
   12d5a:	f000 80bf 	beq.w	12edc <__gethex+0x4d4>
   12d5e:	f014 041f 	ands.w	r4, r4, #31
   12d62:	f040 80e7 	bne.w	12f34 <__gethex+0x52c>
   12d66:	2521      	movs	r5, #33	; 0x21
   12d68:	e77d      	b.n	12c66 <__gethex+0x25e>
   12d6a:	07ba      	lsls	r2, r7, #30
   12d6c:	f57f af79 	bpl.w	12c62 <__gethex+0x25a>
   12d70:	9b01      	ldr	r3, [sp, #4]
   12d72:	681b      	ldr	r3, [r3, #0]
   12d74:	431f      	orrs	r7, r3
   12d76:	07fb      	lsls	r3, r7, #31
   12d78:	d4d3      	bmi.n	12d22 <__gethex+0x31a>
   12d7a:	e772      	b.n	12c62 <__gethex+0x25a>
   12d7c:	2000      	movs	r0, #0
   12d7e:	e781      	b.n	12c84 <__gethex+0x27c>
   12d80:	1a22      	subs	r2, r4, r0
   12d82:	4659      	mov	r1, fp
   12d84:	ee18 0a10 	vmov	r0, s16
   12d88:	eba9 0902 	sub.w	r9, r9, r2
   12d8c:	f002 fa18 	bl	151c0 <__lshift>
   12d90:	f100 0314 	add.w	r3, r0, #20
   12d94:	4683      	mov	fp, r0
   12d96:	9301      	str	r3, [sp, #4]
   12d98:	2700      	movs	r7, #0
   12d9a:	e703      	b.n	12ba4 <__gethex+0x19c>
   12d9c:	7872      	ldrb	r2, [r6, #1]
   12d9e:	f818 0002 	ldrb.w	r0, [r8, r2]
   12da2:	1c71      	adds	r1, r6, #1
   12da4:	2800      	cmp	r0, #0
   12da6:	f000 80a0 	beq.w	12eea <__gethex+0x4e2>
   12daa:	460d      	mov	r5, r1
   12dac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   12db0:	f818 0002 	ldrb.w	r0, [r8, r2]
   12db4:	2800      	cmp	r0, #0
   12db6:	d1f8      	bne.n	12daa <__gethex+0x3a2>
   12db8:	1b75      	subs	r5, r6, r5
   12dba:	ea4f 0985 	mov.w	r9, r5, lsl #2
   12dbe:	460e      	mov	r6, r1
   12dc0:	e65d      	b.n	12a7e <__gethex+0x76>
   12dc2:	3402      	adds	r4, #2
   12dc4:	2300      	movs	r3, #0
   12dc6:	e638      	b.n	12a3a <__gethex+0x32>
   12dc8:	f8db 3008 	ldr.w	r3, [fp, #8]
   12dcc:	429f      	cmp	r7, r3
   12dce:	f280 808e 	bge.w	12eee <__gethex+0x4e6>
   12dd2:	463b      	mov	r3, r7
   12dd4:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
   12dd8:	2101      	movs	r1, #1
   12dda:	3301      	adds	r3, #1
   12ddc:	2d02      	cmp	r5, #2
   12dde:	f8cb 3010 	str.w	r3, [fp, #16]
   12de2:	6151      	str	r1, [r2, #20]
   12de4:	d07a      	beq.n	12edc <__gethex+0x4d4>
   12de6:	429f      	cmp	r7, r3
   12de8:	dab9      	bge.n	12d5e <__gethex+0x356>
   12dea:	2b00      	cmp	r3, #0
   12dec:	f340 809b 	ble.w	12f26 <__gethex+0x51e>
   12df0:	f8db 2014 	ldr.w	r2, [fp, #20]
   12df4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   12df8:	f10b 0018 	add.w	r0, fp, #24
   12dfc:	4283      	cmp	r3, r0
   12dfe:	ea4f 0252 	mov.w	r2, r2, lsr #1
   12e02:	f240 80b1 	bls.w	12f68 <__gethex+0x560>
   12e06:	4644      	mov	r4, r8
   12e08:	6801      	ldr	r1, [r0, #0]
   12e0a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   12e0e:	f844 2b04 	str.w	r2, [r4], #4
   12e12:	f850 2b04 	ldr.w	r2, [r0], #4
   12e16:	4283      	cmp	r3, r0
   12e18:	ea4f 0252 	mov.w	r2, r2, lsr #1
   12e1c:	d8f4      	bhi.n	12e08 <__gethex+0x400>
   12e1e:	eba3 030b 	sub.w	r3, r3, fp
   12e22:	3b19      	subs	r3, #25
   12e24:	089b      	lsrs	r3, r3, #2
   12e26:	3301      	adds	r3, #1
   12e28:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
   12e2c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   12e30:	2a00      	cmp	r2, #0
   12e32:	f040 809d 	bne.w	12f70 <__gethex+0x568>
   12e36:	eba3 0208 	sub.w	r2, r3, r8
   12e3a:	1092      	asrs	r2, r2, #2
   12e3c:	4543      	cmp	r3, r8
   12e3e:	f8cb 2010 	str.w	r2, [fp, #16]
   12e42:	d073      	beq.n	12f2c <__gethex+0x524>
   12e44:	f8da 3008 	ldr.w	r3, [sl, #8]
   12e48:	f109 0901 	add.w	r9, r9, #1
   12e4c:	454b      	cmp	r3, r9
   12e4e:	da8a      	bge.n	12d66 <__gethex+0x35e>
   12e50:	ee18 0a10 	vmov	r0, s16
   12e54:	4659      	mov	r1, fp
   12e56:	f001 ff73 	bl	14d40 <_Bfree>
   12e5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12e5c:	2300      	movs	r3, #0
   12e5e:	6013      	str	r3, [r2, #0]
   12e60:	25a3      	movs	r5, #163	; 0xa3
   12e62:	e683      	b.n	12b6c <__gethex+0x164>
   12e64:	9e01      	ldr	r6, [sp, #4]
   12e66:	2300      	movs	r3, #0
   12e68:	e689      	b.n	12b7e <__gethex+0x176>
   12e6a:	2701      	movs	r7, #1
   12e6c:	e732      	b.n	12cd4 <__gethex+0x2cc>
   12e6e:	4629      	mov	r1, r5
   12e70:	4658      	mov	r0, fp
   12e72:	f002 fc47 	bl	15704 <__any_on>
   12e76:	4607      	mov	r7, r0
   12e78:	e72c      	b.n	12cd4 <__gethex+0x2cc>
   12e7a:	1eb1      	subs	r1, r6, #2
   12e7c:	4658      	mov	r0, fp
   12e7e:	f002 fc41 	bl	15704 <__any_on>
   12e82:	2800      	cmp	r0, #0
   12e84:	f43f af17 	beq.w	12cb6 <__gethex+0x2ae>
   12e88:	2703      	movs	r7, #3
   12e8a:	e715      	b.n	12cb8 <__gethex+0x2b0>
   12e8c:	f04f 0900 	mov.w	r9, #0
   12e90:	2701      	movs	r7, #1
   12e92:	e64a      	b.n	12b2a <__gethex+0x122>
   12e94:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12e96:	2a00      	cmp	r2, #0
   12e98:	f47f ae9d 	bne.w	12bd6 <__gethex+0x1ce>
   12e9c:	9902      	ldr	r1, [sp, #8]
   12e9e:	600b      	str	r3, [r1, #0]
   12ea0:	9b01      	ldr	r3, [sp, #4]
   12ea2:	2201      	movs	r2, #1
   12ea4:	f8cb 2010 	str.w	r2, [fp, #16]
   12ea8:	601a      	str	r2, [r3, #0]
   12eaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12eac:	2562      	movs	r5, #98	; 0x62
   12eae:	f8c3 b000 	str.w	fp, [r3]
   12eb2:	e65b      	b.n	12b6c <__gethex+0x164>
   12eb4:	454c      	cmp	r4, r9
   12eb6:	f47f ae8e 	bne.w	12bd6 <__gethex+0x1ce>
   12eba:	2c01      	cmp	r4, #1
   12ebc:	d0ee      	beq.n	12e9c <__gethex+0x494>
   12ebe:	1e61      	subs	r1, r4, #1
   12ec0:	4658      	mov	r0, fp
   12ec2:	f002 fc1f 	bl	15704 <__any_on>
   12ec6:	2800      	cmp	r0, #0
   12ec8:	f43f ae85 	beq.w	12bd6 <__gethex+0x1ce>
   12ecc:	f8da 3004 	ldr.w	r3, [sl, #4]
   12ed0:	e7e4      	b.n	12e9c <__gethex+0x494>
   12ed2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12ed4:	2a00      	cmp	r2, #0
   12ed6:	f43f ae7e 	beq.w	12bd6 <__gethex+0x1ce>
   12eda:	e7df      	b.n	12e9c <__gethex+0x494>
   12edc:	f8da 3000 	ldr.w	r3, [sl]
   12ee0:	3b01      	subs	r3, #1
   12ee2:	42a3      	cmp	r3, r4
   12ee4:	d034      	beq.n	12f50 <__gethex+0x548>
   12ee6:	2522      	movs	r5, #34	; 0x22
   12ee8:	e6bd      	b.n	12c66 <__gethex+0x25e>
   12eea:	460e      	mov	r6, r1
   12eec:	e5c7      	b.n	12a7e <__gethex+0x76>
   12eee:	f8db 1004 	ldr.w	r1, [fp, #4]
   12ef2:	ee18 0a10 	vmov	r0, s16
   12ef6:	3101      	adds	r1, #1
   12ef8:	f001 fefc 	bl	14cf4 <_Balloc>
   12efc:	4606      	mov	r6, r0
   12efe:	b3c8      	cbz	r0, 12f74 <__gethex+0x56c>
   12f00:	f8db 3010 	ldr.w	r3, [fp, #16]
   12f04:	3302      	adds	r3, #2
   12f06:	009a      	lsls	r2, r3, #2
   12f08:	f10b 010c 	add.w	r1, fp, #12
   12f0c:	300c      	adds	r0, #12
   12f0e:	f7fb fa01 	bl	e314 <memcpy>
   12f12:	4659      	mov	r1, fp
   12f14:	ee18 0a10 	vmov	r0, s16
   12f18:	f001 ff12 	bl	14d40 <_Bfree>
   12f1c:	f106 0814 	add.w	r8, r6, #20
   12f20:	6933      	ldr	r3, [r6, #16]
   12f22:	46b3      	mov	fp, r6
   12f24:	e756      	b.n	12dd4 <__gethex+0x3cc>
   12f26:	2300      	movs	r3, #0
   12f28:	f8cb 3010 	str.w	r3, [fp, #16]
   12f2c:	2300      	movs	r3, #0
   12f2e:	f8cb 3014 	str.w	r3, [fp, #20]
   12f32:	e787      	b.n	12e44 <__gethex+0x43c>
   12f34:	9b01      	ldr	r3, [sp, #4]
   12f36:	4443      	add	r3, r8
   12f38:	f1c4 0420 	rsb	r4, r4, #32
   12f3c:	f853 0c04 	ldr.w	r0, [r3, #-4]
   12f40:	f001 ffb2 	bl	14ea8 <__hi0bits>
   12f44:	42a0      	cmp	r0, r4
   12f46:	f6bf af0e 	bge.w	12d66 <__gethex+0x35e>
   12f4a:	f8db 3010 	ldr.w	r3, [fp, #16]
   12f4e:	e74c      	b.n	12dea <__gethex+0x3e2>
   12f50:	1163      	asrs	r3, r4, #5
   12f52:	f004 041f 	and.w	r4, r4, #31
   12f56:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   12f5a:	2301      	movs	r3, #1
   12f5c:	40a3      	lsls	r3, r4
   12f5e:	4213      	tst	r3, r2
   12f60:	bf0c      	ite	eq
   12f62:	2522      	moveq	r5, #34	; 0x22
   12f64:	2521      	movne	r5, #33	; 0x21
   12f66:	e67e      	b.n	12c66 <__gethex+0x25e>
   12f68:	f8c8 2000 	str.w	r2, [r8]
   12f6c:	4643      	mov	r3, r8
   12f6e:	b16a      	cbz	r2, 12f8c <__gethex+0x584>
   12f70:	3304      	adds	r3, #4
   12f72:	e760      	b.n	12e36 <__gethex+0x42e>
   12f74:	4b07      	ldr	r3, [pc, #28]	; (12f94 <__gethex+0x58c>)
   12f76:	4808      	ldr	r0, [pc, #32]	; (12f98 <__gethex+0x590>)
   12f78:	4632      	mov	r2, r6
   12f7a:	2184      	movs	r1, #132	; 0x84
   12f7c:	f002 fe20 	bl	15bc0 <__assert_func>
   12f80:	4b04      	ldr	r3, [pc, #16]	; (12f94 <__gethex+0x58c>)
   12f82:	4805      	ldr	r0, [pc, #20]	; (12f98 <__gethex+0x590>)
   12f84:	465a      	mov	r2, fp
   12f86:	21e4      	movs	r1, #228	; 0xe4
   12f88:	f002 fe1a 	bl	15bc0 <__assert_func>
   12f8c:	f8cb 2010 	str.w	r2, [fp, #16]
   12f90:	e7cc      	b.n	12f2c <__gethex+0x524>
   12f92:	bf00      	nop
   12f94:	2000164c 	.word	0x2000164c
   12f98:	20001660 	.word	0x20001660

00012f9c <__match>:
   12f9c:	b410      	push	{r4}
   12f9e:	6804      	ldr	r4, [r0, #0]
   12fa0:	e009      	b.n	12fb6 <__match+0x1a>
   12fa2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   12fa6:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   12faa:	f1bc 0f19 	cmp.w	ip, #25
   12fae:	bf98      	it	ls
   12fb0:	3320      	addls	r3, #32
   12fb2:	4293      	cmp	r3, r2
   12fb4:	d109      	bne.n	12fca <__match+0x2e>
   12fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
   12fba:	2a00      	cmp	r2, #0
   12fbc:	d1f1      	bne.n	12fa2 <__match+0x6>
   12fbe:	3401      	adds	r4, #1
   12fc0:	6004      	str	r4, [r0, #0]
   12fc2:	2001      	movs	r0, #1
   12fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
   12fc8:	4770      	bx	lr
   12fca:	2000      	movs	r0, #0
   12fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
   12fd0:	4770      	bx	lr
   12fd2:	bf00      	nop

00012fd4 <__hexnan>:
   12fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fd8:	6809      	ldr	r1, [r1, #0]
   12fda:	b085      	sub	sp, #20
   12fdc:	114b      	asrs	r3, r1, #5
   12fde:	f011 011f 	ands.w	r1, r1, #31
   12fe2:	9002      	str	r0, [sp, #8]
   12fe4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12fe8:	9103      	str	r1, [sp, #12]
   12fea:	f040 808f 	bne.w	1310c <__hexnan+0x138>
   12fee:	1f1d      	subs	r5, r3, #4
   12ff0:	9301      	str	r3, [sp, #4]
   12ff2:	9b02      	ldr	r3, [sp, #8]
   12ff4:	9901      	ldr	r1, [sp, #4]
   12ff6:	681c      	ldr	r4, [r3, #0]
   12ff8:	2300      	movs	r3, #0
   12ffa:	f841 3c04 	str.w	r3, [r1, #-4]
   12ffe:	7861      	ldrb	r1, [r4, #1]
   13000:	3401      	adds	r4, #1
   13002:	2900      	cmp	r1, #0
   13004:	f000 8098 	beq.w	13138 <__hexnan+0x164>
   13008:	f8df 9174 	ldr.w	r9, [pc, #372]	; 13180 <__hexnan+0x1ac>
   1300c:	46a8      	mov	r8, r5
   1300e:	46ac      	mov	ip, r5
   13010:	469a      	mov	sl, r3
   13012:	461e      	mov	r6, r3
   13014:	e00e      	b.n	13034 <__hexnan+0x60>
   13016:	2920      	cmp	r1, #32
   13018:	f200 808c 	bhi.w	13134 <__hexnan+0x160>
   1301c:	4556      	cmp	r6, sl
   1301e:	dd06      	ble.n	1302e <__hexnan+0x5a>
   13020:	45c4      	cmp	ip, r8
   13022:	d201      	bcs.n	13028 <__hexnan+0x54>
   13024:	2b07      	cmp	r3, #7
   13026:	dd5b      	ble.n	130e0 <__hexnan+0x10c>
   13028:	4562      	cmp	r2, ip
   1302a:	d351      	bcc.n	130d0 <__hexnan+0xfc>
   1302c:	2308      	movs	r3, #8
   1302e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   13032:	b1a1      	cbz	r1, 1305e <__hexnan+0x8a>
   13034:	f819 0001 	ldrb.w	r0, [r9, r1]
   13038:	2800      	cmp	r0, #0
   1303a:	d0ec      	beq.n	13016 <__hexnan+0x42>
   1303c:	3301      	adds	r3, #1
   1303e:	2b08      	cmp	r3, #8
   13040:	f106 0601 	add.w	r6, r6, #1
   13044:	dc3a      	bgt.n	130bc <__hexnan+0xe8>
   13046:	f8dc 1000 	ldr.w	r1, [ip]
   1304a:	0109      	lsls	r1, r1, #4
   1304c:	f000 000f 	and.w	r0, r0, #15
   13050:	4308      	orrs	r0, r1
   13052:	f8cc 0000 	str.w	r0, [ip]
   13056:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1305a:	2900      	cmp	r1, #0
   1305c:	d1ea      	bne.n	13034 <__hexnan+0x60>
   1305e:	2e00      	cmp	r6, #0
   13060:	d06a      	beq.n	13138 <__hexnan+0x164>
   13062:	45c4      	cmp	ip, r8
   13064:	d201      	bcs.n	1306a <__hexnan+0x96>
   13066:	2b07      	cmp	r3, #7
   13068:	dd74      	ble.n	13154 <__hexnan+0x180>
   1306a:	4562      	cmp	r2, ip
   1306c:	d252      	bcs.n	13114 <__hexnan+0x140>
   1306e:	1f11      	subs	r1, r2, #4
   13070:	4663      	mov	r3, ip
   13072:	f853 0b04 	ldr.w	r0, [r3], #4
   13076:	f841 0f04 	str.w	r0, [r1, #4]!
   1307a:	42ab      	cmp	r3, r5
   1307c:	d9f9      	bls.n	13072 <__hexnan+0x9e>
   1307e:	eba5 030c 	sub.w	r3, r5, ip
   13082:	f023 0303 	bic.w	r3, r3, #3
   13086:	1c69      	adds	r1, r5, #1
   13088:	3304      	adds	r3, #4
   1308a:	f10c 0c01 	add.w	ip, ip, #1
   1308e:	4561      	cmp	r1, ip
   13090:	bf38      	it	cc
   13092:	2304      	movcc	r3, #4
   13094:	4413      	add	r3, r2
   13096:	2100      	movs	r1, #0
   13098:	f843 1b04 	str.w	r1, [r3], #4
   1309c:	42ab      	cmp	r3, r5
   1309e:	d9fb      	bls.n	13098 <__hexnan+0xc4>
   130a0:	9b01      	ldr	r3, [sp, #4]
   130a2:	f853 3c04 	ldr.w	r3, [r3, #-4]
   130a6:	b92b      	cbnz	r3, 130b4 <__hexnan+0xe0>
   130a8:	42aa      	cmp	r2, r5
   130aa:	d049      	beq.n	13140 <__hexnan+0x16c>
   130ac:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   130b0:	2b00      	cmp	r3, #0
   130b2:	d0f9      	beq.n	130a8 <__hexnan+0xd4>
   130b4:	2005      	movs	r0, #5
   130b6:	b005      	add	sp, #20
   130b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130bc:	4562      	cmp	r2, ip
   130be:	d2b6      	bcs.n	1302e <__hexnan+0x5a>
   130c0:	2300      	movs	r3, #0
   130c2:	f84c 3c04 	str.w	r3, [ip, #-4]
   130c6:	4619      	mov	r1, r3
   130c8:	f1ac 0c04 	sub.w	ip, ip, #4
   130cc:	2301      	movs	r3, #1
   130ce:	e7bd      	b.n	1304c <__hexnan+0x78>
   130d0:	2300      	movs	r3, #0
   130d2:	f1ac 0804 	sub.w	r8, ip, #4
   130d6:	f84c 3c04 	str.w	r3, [ip, #-4]
   130da:	46b2      	mov	sl, r6
   130dc:	46c4      	mov	ip, r8
   130de:	e7a6      	b.n	1302e <__hexnan+0x5a>
   130e0:	f1c3 0108 	rsb	r1, r3, #8
   130e4:	f8dc 3000 	ldr.w	r3, [ip]
   130e8:	0089      	lsls	r1, r1, #2
   130ea:	f1c1 0e20 	rsb	lr, r1, #32
   130ee:	4660      	mov	r0, ip
   130f0:	469b      	mov	fp, r3
   130f2:	6847      	ldr	r7, [r0, #4]
   130f4:	fa07 f30e 	lsl.w	r3, r7, lr
   130f8:	ea43 030b 	orr.w	r3, r3, fp
   130fc:	fa27 fb01 	lsr.w	fp, r7, r1
   13100:	6003      	str	r3, [r0, #0]
   13102:	f840 bf04 	str.w	fp, [r0, #4]!
   13106:	4540      	cmp	r0, r8
   13108:	d3f3      	bcc.n	130f2 <__hexnan+0x11e>
   1310a:	e78d      	b.n	13028 <__hexnan+0x54>
   1310c:	1d19      	adds	r1, r3, #4
   1310e:	9101      	str	r1, [sp, #4]
   13110:	461d      	mov	r5, r3
   13112:	e76e      	b.n	12ff2 <__hexnan+0x1e>
   13114:	9b03      	ldr	r3, [sp, #12]
   13116:	2b00      	cmp	r3, #0
   13118:	d0c2      	beq.n	130a0 <__hexnan+0xcc>
   1311a:	9b03      	ldr	r3, [sp, #12]
   1311c:	9801      	ldr	r0, [sp, #4]
   1311e:	f1c3 0120 	rsb	r1, r3, #32
   13122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13126:	40cb      	lsrs	r3, r1
   13128:	f850 1c04 	ldr.w	r1, [r0, #-4]
   1312c:	400b      	ands	r3, r1
   1312e:	f840 3c04 	str.w	r3, [r0, #-4]
   13132:	e7b8      	b.n	130a6 <__hexnan+0xd2>
   13134:	2929      	cmp	r1, #41	; 0x29
   13136:	d009      	beq.n	1314c <__hexnan+0x178>
   13138:	2004      	movs	r0, #4
   1313a:	b005      	add	sp, #20
   1313c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13140:	2301      	movs	r3, #1
   13142:	2005      	movs	r0, #5
   13144:	602b      	str	r3, [r5, #0]
   13146:	b005      	add	sp, #20
   13148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1314c:	9902      	ldr	r1, [sp, #8]
   1314e:	3401      	adds	r4, #1
   13150:	600c      	str	r4, [r1, #0]
   13152:	e784      	b.n	1305e <__hexnan+0x8a>
   13154:	f8dc 1000 	ldr.w	r1, [ip]
   13158:	f1c3 0308 	rsb	r3, r3, #8
   1315c:	009b      	lsls	r3, r3, #2
   1315e:	f1c3 0720 	rsb	r7, r3, #32
   13162:	4664      	mov	r4, ip
   13164:	4608      	mov	r0, r1
   13166:	6866      	ldr	r6, [r4, #4]
   13168:	fa06 f107 	lsl.w	r1, r6, r7
   1316c:	4301      	orrs	r1, r0
   1316e:	fa26 f003 	lsr.w	r0, r6, r3
   13172:	6021      	str	r1, [r4, #0]
   13174:	f844 0f04 	str.w	r0, [r4, #4]!
   13178:	4544      	cmp	r4, r8
   1317a:	d3f4      	bcc.n	13166 <__hexnan+0x192>
   1317c:	e775      	b.n	1306a <__hexnan+0x96>
   1317e:	bf00      	nop
   13180:	200016cc 	.word	0x200016cc

00013184 <__ascii_mbtowc>:
   13184:	b082      	sub	sp, #8
   13186:	b149      	cbz	r1, 1319c <__ascii_mbtowc+0x18>
   13188:	b15a      	cbz	r2, 131a2 <__ascii_mbtowc+0x1e>
   1318a:	b16b      	cbz	r3, 131a8 <__ascii_mbtowc+0x24>
   1318c:	7813      	ldrb	r3, [r2, #0]
   1318e:	600b      	str	r3, [r1, #0]
   13190:	7812      	ldrb	r2, [r2, #0]
   13192:	1e10      	subs	r0, r2, #0
   13194:	bf18      	it	ne
   13196:	2001      	movne	r0, #1
   13198:	b002      	add	sp, #8
   1319a:	4770      	bx	lr
   1319c:	a901      	add	r1, sp, #4
   1319e:	2a00      	cmp	r2, #0
   131a0:	d1f3      	bne.n	1318a <__ascii_mbtowc+0x6>
   131a2:	4610      	mov	r0, r2
   131a4:	b002      	add	sp, #8
   131a6:	4770      	bx	lr
   131a8:	f06f 0001 	mvn.w	r0, #1
   131ac:	e7f4      	b.n	13198 <__ascii_mbtowc+0x14>
   131ae:	bf00      	nop

000131b0 <_svfprintf_r>:
   131b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131b4:	ed2d 8b08 	vpush	{d8-d11}
   131b8:	b0d1      	sub	sp, #324	; 0x144
   131ba:	460c      	mov	r4, r1
   131bc:	ee0b 1a10 	vmov	s22, r1
   131c0:	4690      	mov	r8, r2
   131c2:	9308      	str	r3, [sp, #32]
   131c4:	4683      	mov	fp, r0
   131c6:	f002 fc49 	bl	15a5c <_localeconv_r>
   131ca:	6803      	ldr	r3, [r0, #0]
   131cc:	9312      	str	r3, [sp, #72]	; 0x48
   131ce:	4618      	mov	r0, r3
   131d0:	f7ff f9b6 	bl	12540 <strlen>
   131d4:	af20      	add	r7, sp, #128	; 0x80
   131d6:	9010      	str	r0, [sp, #64]	; 0x40
   131d8:	2208      	movs	r2, #8
   131da:	2100      	movs	r1, #0
   131dc:	4638      	mov	r0, r7
   131de:	f7fe fe05 	bl	11dec <memset>
   131e2:	89a3      	ldrh	r3, [r4, #12]
   131e4:	061b      	lsls	r3, r3, #24
   131e6:	d503      	bpl.n	131f0 <_svfprintf_r+0x40>
   131e8:	6923      	ldr	r3, [r4, #16]
   131ea:	2b00      	cmp	r3, #0
   131ec:	f000 8755 	beq.w	1409a <_svfprintf_r+0xeea>
   131f0:	2300      	movs	r3, #0
   131f2:	ed9f 8b83 	vldr	d8, [pc, #524]	; 13400 <_svfprintf_r+0x250>
   131f6:	ed9f 9b84 	vldr	d9, [pc, #528]	; 13408 <_svfprintf_r+0x258>
   131fa:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   131fe:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   13202:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   13206:	aa27      	add	r2, sp, #156	; 0x9c
   13208:	930e      	str	r3, [sp, #56]	; 0x38
   1320a:	9224      	str	r2, [sp, #144]	; 0x90
   1320c:	4692      	mov	sl, r2
   1320e:	9311      	str	r3, [sp, #68]	; 0x44
   13210:	9304      	str	r3, [sp, #16]
   13212:	4644      	mov	r4, r8
   13214:	46a1      	mov	r9, r4
   13216:	4b7e      	ldr	r3, [pc, #504]	; (13410 <_svfprintf_r+0x260>)
   13218:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1321c:	f7fe feea 	bl	11ff4 <__locale_mb_cur_max>
   13220:	464a      	mov	r2, r9
   13222:	4603      	mov	r3, r0
   13224:	a91c      	add	r1, sp, #112	; 0x70
   13226:	9700      	str	r7, [sp, #0]
   13228:	4658      	mov	r0, fp
   1322a:	47a8      	blx	r5
   1322c:	2800      	cmp	r0, #0
   1322e:	f000 80b0 	beq.w	13392 <_svfprintf_r+0x1e2>
   13232:	f2c0 80a6 	blt.w	13382 <_svfprintf_r+0x1d2>
   13236:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13238:	2a25      	cmp	r2, #37	; 0x25
   1323a:	4603      	mov	r3, r0
   1323c:	d001      	beq.n	13242 <_svfprintf_r+0x92>
   1323e:	4499      	add	r9, r3
   13240:	e7e9      	b.n	13216 <_svfprintf_r+0x66>
   13242:	ebb9 0504 	subs.w	r5, r9, r4
   13246:	4606      	mov	r6, r0
   13248:	f040 80a7 	bne.w	1339a <_svfprintf_r+0x1ea>
   1324c:	2300      	movs	r3, #0
   1324e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13252:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   13256:	4698      	mov	r8, r3
   13258:	9306      	str	r3, [sp, #24]
   1325a:	f109 0901 	add.w	r9, r9, #1
   1325e:	f899 3000 	ldrb.w	r3, [r9]
   13262:	9203      	str	r2, [sp, #12]
   13264:	252b      	movs	r5, #43	; 0x2b
   13266:	2620      	movs	r6, #32
   13268:	f109 0901 	add.w	r9, r9, #1
   1326c:	f1a3 0220 	sub.w	r2, r3, #32
   13270:	2a5a      	cmp	r2, #90	; 0x5a
   13272:	f200 80cf 	bhi.w	13414 <_svfprintf_r+0x264>
   13276:	e8df f012 	tbh	[pc, r2, lsl #1]
   1327a:	02e8      	.short	0x02e8
   1327c:	00cd00cd 	.word	0x00cd00cd
   13280:	00cd02e3 	.word	0x00cd02e3
   13284:	00cd00cd 	.word	0x00cd00cd
   13288:	00cd006a 	.word	0x00cd006a
   1328c:	020500cd 	.word	0x020500cd
   13290:	00cd0284 	.word	0x00cd0284
   13294:	02c90210 	.word	0x02c90210
   13298:	02bd00cd 	.word	0x02bd00cd
   1329c:	005b005b 	.word	0x005b005b
   132a0:	005b005b 	.word	0x005b005b
   132a4:	005b005b 	.word	0x005b005b
   132a8:	005b005b 	.word	0x005b005b
   132ac:	00cd005b 	.word	0x00cd005b
   132b0:	00cd00cd 	.word	0x00cd00cd
   132b4:	00cd00cd 	.word	0x00cd00cd
   132b8:	00cd00cd 	.word	0x00cd00cd
   132bc:	00cd0153 	.word	0x00cd0153
   132c0:	021a0183 	.word	0x021a0183
   132c4:	01530153 	.word	0x01530153
   132c8:	00cd0153 	.word	0x00cd0153
   132cc:	00cd00cd 	.word	0x00cd00cd
   132d0:	021500cd 	.word	0x021500cd
   132d4:	00cd00cd 	.word	0x00cd00cd
   132d8:	00cd0296 	.word	0x00cd0296
   132dc:	00cd00cd 	.word	0x00cd00cd
   132e0:	00cd01ab 	.word	0x00cd01ab
   132e4:	00cd02aa 	.word	0x00cd02aa
   132e8:	06e300cd 	.word	0x06e300cd
   132ec:	00cd00cd 	.word	0x00cd00cd
   132f0:	00cd00cd 	.word	0x00cd00cd
   132f4:	00cd00cd 	.word	0x00cd00cd
   132f8:	00cd00cd 	.word	0x00cd00cd
   132fc:	00cd0153 	.word	0x00cd0153
   13300:	01de0183 	.word	0x01de0183
   13304:	01530153 	.word	0x01530153
   13308:	02770153 	.word	0x02770153
   1330c:	007f01de 	.word	0x007f01de
   13310:	028900cd 	.word	0x028900cd
   13314:	025f00cd 	.word	0x025f00cd
   13318:	022f06e0 	.word	0x022f06e0
   1331c:	00cd007f 	.word	0x00cd007f
   13320:	007c01ab 	.word	0x007c01ab
   13324:	00cd06b8 	.word	0x00cd06b8
   13328:	06bd00cd 	.word	0x06bd00cd
   1332c:	007c00cd 	.word	0x007c00cd
   13330:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13334:	2100      	movs	r1, #0
   13336:	f819 3b01 	ldrb.w	r3, [r9], #1
   1333a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1333e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   13342:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13346:	2a09      	cmp	r2, #9
   13348:	d9f5      	bls.n	13336 <_svfprintf_r+0x186>
   1334a:	9106      	str	r1, [sp, #24]
   1334c:	e78e      	b.n	1326c <_svfprintf_r+0xbc>
   1334e:	4658      	mov	r0, fp
   13350:	f002 fb84 	bl	15a5c <_localeconv_r>
   13354:	6843      	ldr	r3, [r0, #4]
   13356:	9315      	str	r3, [sp, #84]	; 0x54
   13358:	4618      	mov	r0, r3
   1335a:	f7ff f8f1 	bl	12540 <strlen>
   1335e:	9016      	str	r0, [sp, #88]	; 0x58
   13360:	4658      	mov	r0, fp
   13362:	f002 fb7b 	bl	15a5c <_localeconv_r>
   13366:	6883      	ldr	r3, [r0, #8]
   13368:	9313      	str	r3, [sp, #76]	; 0x4c
   1336a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1336c:	2b00      	cmp	r3, #0
   1336e:	f040 862d 	bne.w	13fcc <_svfprintf_r+0xe1c>
   13372:	f899 3000 	ldrb.w	r3, [r9]
   13376:	e777      	b.n	13268 <_svfprintf_r+0xb8>
   13378:	f899 3000 	ldrb.w	r3, [r9]
   1337c:	f048 0820 	orr.w	r8, r8, #32
   13380:	e772      	b.n	13268 <_svfprintf_r+0xb8>
   13382:	2208      	movs	r2, #8
   13384:	2100      	movs	r1, #0
   13386:	4638      	mov	r0, r7
   13388:	f7fe fd30 	bl	11dec <memset>
   1338c:	2301      	movs	r3, #1
   1338e:	4499      	add	r9, r3
   13390:	e741      	b.n	13216 <_svfprintf_r+0x66>
   13392:	ebb9 0504 	subs.w	r5, r9, r4
   13396:	4606      	mov	r6, r0
   13398:	d011      	beq.n	133be <_svfprintf_r+0x20e>
   1339a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1339c:	442b      	add	r3, r5
   1339e:	9326      	str	r3, [sp, #152]	; 0x98
   133a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   133a2:	3301      	adds	r3, #1
   133a4:	2b07      	cmp	r3, #7
   133a6:	e9ca 4500 	strd	r4, r5, [sl]
   133aa:	9325      	str	r3, [sp, #148]	; 0x94
   133ac:	dc1c      	bgt.n	133e8 <_svfprintf_r+0x238>
   133ae:	f10a 0a08 	add.w	sl, sl, #8
   133b2:	9b04      	ldr	r3, [sp, #16]
   133b4:	442b      	add	r3, r5
   133b6:	9304      	str	r3, [sp, #16]
   133b8:	2e00      	cmp	r6, #0
   133ba:	f47f af47 	bne.w	1324c <_svfprintf_r+0x9c>
   133be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   133c0:	2b00      	cmp	r3, #0
   133c2:	f041 820b 	bne.w	147dc <_svfprintf_r+0x162c>
   133c6:	ee1b 3a10 	vmov	r3, s22
   133ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   133ce:	f013 0f40 	tst.w	r3, #64	; 0x40
   133d2:	9b04      	ldr	r3, [sp, #16]
   133d4:	bf18      	it	ne
   133d6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   133da:	9304      	str	r3, [sp, #16]
   133dc:	9804      	ldr	r0, [sp, #16]
   133de:	b051      	add	sp, #324	; 0x144
   133e0:	ecbd 8b08 	vpop	{d8-d11}
   133e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133e8:	ee1b 1a10 	vmov	r1, s22
   133ec:	aa24      	add	r2, sp, #144	; 0x90
   133ee:	4658      	mov	r0, fp
   133f0:	f003 fb60 	bl	16ab4 <__ssprint_r>
   133f4:	2800      	cmp	r0, #0
   133f6:	d1e6      	bne.n	133c6 <_svfprintf_r+0x216>
   133f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   133fc:	e7d9      	b.n	133b2 <_svfprintf_r+0x202>
   133fe:	bf00      	nop
	...
   13408:	ffffffff 	.word	0xffffffff
   1340c:	7fefffff 	.word	0x7fefffff
   13410:	20002f1c 	.word	0x20002f1c
   13414:	930b      	str	r3, [sp, #44]	; 0x2c
   13416:	2b00      	cmp	r3, #0
   13418:	d0d1      	beq.n	133be <_svfprintf_r+0x20e>
   1341a:	2100      	movs	r1, #0
   1341c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   13420:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   13424:	2301      	movs	r3, #1
   13426:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   1342a:	9302      	str	r3, [sp, #8]
   1342c:	9107      	str	r1, [sp, #28]
   1342e:	9305      	str	r3, [sp, #20]
   13430:	9103      	str	r1, [sp, #12]
   13432:	910f      	str	r1, [sp, #60]	; 0x3c
   13434:	ac37      	add	r4, sp, #220	; 0xdc
   13436:	f018 0302 	ands.w	r3, r8, #2
   1343a:	9309      	str	r3, [sp, #36]	; 0x24
   1343c:	d002      	beq.n	13444 <_svfprintf_r+0x294>
   1343e:	9b02      	ldr	r3, [sp, #8]
   13440:	3302      	adds	r3, #2
   13442:	9302      	str	r3, [sp, #8]
   13444:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   13448:	930a      	str	r3, [sp, #40]	; 0x28
   1344a:	d105      	bne.n	13458 <_svfprintf_r+0x2a8>
   1344c:	9b06      	ldr	r3, [sp, #24]
   1344e:	9a02      	ldr	r2, [sp, #8]
   13450:	1a9d      	subs	r5, r3, r2
   13452:	2d00      	cmp	r5, #0
   13454:	f300 8369 	bgt.w	13b2a <_svfprintf_r+0x97a>
   13458:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1345a:	b189      	cbz	r1, 13480 <_svfprintf_r+0x2d0>
   1345c:	9925      	ldr	r1, [sp, #148]	; 0x94
   1345e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   13462:	3101      	adds	r1, #1
   13464:	3201      	adds	r2, #1
   13466:	f8ca 0000 	str.w	r0, [sl]
   1346a:	2907      	cmp	r1, #7
   1346c:	f04f 0001 	mov.w	r0, #1
   13470:	9226      	str	r2, [sp, #152]	; 0x98
   13472:	9125      	str	r1, [sp, #148]	; 0x94
   13474:	f8ca 0004 	str.w	r0, [sl, #4]
   13478:	f300 83a2 	bgt.w	13bc0 <_svfprintf_r+0xa10>
   1347c:	f10a 0a08 	add.w	sl, sl, #8
   13480:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13482:	b183      	cbz	r3, 134a6 <_svfprintf_r+0x2f6>
   13484:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13486:	a91a      	add	r1, sp, #104	; 0x68
   13488:	3301      	adds	r3, #1
   1348a:	3202      	adds	r2, #2
   1348c:	f8ca 1000 	str.w	r1, [sl]
   13490:	2b07      	cmp	r3, #7
   13492:	f04f 0102 	mov.w	r1, #2
   13496:	9226      	str	r2, [sp, #152]	; 0x98
   13498:	9325      	str	r3, [sp, #148]	; 0x94
   1349a:	f8ca 1004 	str.w	r1, [sl, #4]
   1349e:	f300 83a3 	bgt.w	13be8 <_svfprintf_r+0xa38>
   134a2:	f10a 0a08 	add.w	sl, sl, #8
   134a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   134a8:	2b80      	cmp	r3, #128	; 0x80
   134aa:	f000 826c 	beq.w	13986 <_svfprintf_r+0x7d6>
   134ae:	9b03      	ldr	r3, [sp, #12]
   134b0:	9905      	ldr	r1, [sp, #20]
   134b2:	1a5d      	subs	r5, r3, r1
   134b4:	2d00      	cmp	r5, #0
   134b6:	f300 82a5 	bgt.w	13a04 <_svfprintf_r+0x854>
   134ba:	f418 7f80 	tst.w	r8, #256	; 0x100
   134be:	f040 820d 	bne.w	138dc <_svfprintf_r+0x72c>
   134c2:	9b05      	ldr	r3, [sp, #20]
   134c4:	f8ca 3004 	str.w	r3, [sl, #4]
   134c8:	441a      	add	r2, r3
   134ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
   134cc:	f8ca 4000 	str.w	r4, [sl]
   134d0:	3301      	adds	r3, #1
   134d2:	2b07      	cmp	r3, #7
   134d4:	9226      	str	r2, [sp, #152]	; 0x98
   134d6:	9325      	str	r3, [sp, #148]	; 0x94
   134d8:	f300 831b 	bgt.w	13b12 <_svfprintf_r+0x962>
   134dc:	f10a 0a08 	add.w	sl, sl, #8
   134e0:	f018 0f04 	tst.w	r8, #4
   134e4:	d005      	beq.n	134f2 <_svfprintf_r+0x342>
   134e6:	9b06      	ldr	r3, [sp, #24]
   134e8:	9902      	ldr	r1, [sp, #8]
   134ea:	1a5c      	subs	r4, r3, r1
   134ec:	2c00      	cmp	r4, #0
   134ee:	f300 8388 	bgt.w	13c02 <_svfprintf_r+0xa52>
   134f2:	9b04      	ldr	r3, [sp, #16]
   134f4:	9906      	ldr	r1, [sp, #24]
   134f6:	9802      	ldr	r0, [sp, #8]
   134f8:	4281      	cmp	r1, r0
   134fa:	bfac      	ite	ge
   134fc:	185b      	addge	r3, r3, r1
   134fe:	181b      	addlt	r3, r3, r0
   13500:	9304      	str	r3, [sp, #16]
   13502:	2a00      	cmp	r2, #0
   13504:	f040 82b0 	bne.w	13a68 <_svfprintf_r+0x8b8>
   13508:	2300      	movs	r3, #0
   1350a:	9325      	str	r3, [sp, #148]	; 0x94
   1350c:	9b07      	ldr	r3, [sp, #28]
   1350e:	b11b      	cbz	r3, 13518 <_svfprintf_r+0x368>
   13510:	9907      	ldr	r1, [sp, #28]
   13512:	4658      	mov	r0, fp
   13514:	f7ff f920 	bl	12758 <_free_r>
   13518:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1351c:	464c      	mov	r4, r9
   1351e:	e679      	b.n	13214 <_svfprintf_r+0x64>
   13520:	930b      	str	r3, [sp, #44]	; 0x2c
   13522:	9b08      	ldr	r3, [sp, #32]
   13524:	3307      	adds	r3, #7
   13526:	f023 0307 	bic.w	r3, r3, #7
   1352a:	ecb3 8b02 	vldmia	r3!, {d8}
   1352e:	eeb0 7bc8 	vabs.f64	d7, d8
   13532:	eeb4 7b49 	vcmp.f64	d7, d9
   13536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1353a:	9308      	str	r3, [sp, #32]
   1353c:	f340 84e9 	ble.w	13f12 <_svfprintf_r+0xd62>
   13540:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   13544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13548:	f101 8059 	bmi.w	145fe <_svfprintf_r+0x144e>
   1354c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   13550:	4cab      	ldr	r4, [pc, #684]	; (13800 <_svfprintf_r+0x650>)
   13552:	4bac      	ldr	r3, [pc, #688]	; (13804 <_svfprintf_r+0x654>)
   13554:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   13558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1355a:	2a47      	cmp	r2, #71	; 0x47
   1355c:	bfc8      	it	gt
   1355e:	461c      	movgt	r4, r3
   13560:	2300      	movs	r3, #0
   13562:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   13566:	2203      	movs	r2, #3
   13568:	9307      	str	r3, [sp, #28]
   1356a:	9202      	str	r2, [sp, #8]
   1356c:	9205      	str	r2, [sp, #20]
   1356e:	9303      	str	r3, [sp, #12]
   13570:	930f      	str	r3, [sp, #60]	; 0x3c
   13572:	2900      	cmp	r1, #0
   13574:	f43f af5f 	beq.w	13436 <_svfprintf_r+0x286>
   13578:	9b02      	ldr	r3, [sp, #8]
   1357a:	3301      	adds	r3, #1
   1357c:	9302      	str	r3, [sp, #8]
   1357e:	e75a      	b.n	13436 <_svfprintf_r+0x286>
   13580:	2b43      	cmp	r3, #67	; 0x43
   13582:	930b      	str	r3, [sp, #44]	; 0x2c
   13584:	d003      	beq.n	1358e <_svfprintf_r+0x3de>
   13586:	f018 0f10 	tst.w	r8, #16
   1358a:	f000 855d 	beq.w	14048 <_svfprintf_r+0xe98>
   1358e:	9d08      	ldr	r5, [sp, #32]
   13590:	2208      	movs	r2, #8
   13592:	2100      	movs	r1, #0
   13594:	a822      	add	r0, sp, #136	; 0x88
   13596:	ac37      	add	r4, sp, #220	; 0xdc
   13598:	f7fe fc28 	bl	11dec <memset>
   1359c:	ab22      	add	r3, sp, #136	; 0x88
   1359e:	f855 2b04 	ldr.w	r2, [r5], #4
   135a2:	4621      	mov	r1, r4
   135a4:	4658      	mov	r0, fp
   135a6:	f002 fa9b 	bl	15ae0 <_wcrtomb_r>
   135aa:	4603      	mov	r3, r0
   135ac:	3301      	adds	r3, #1
   135ae:	9005      	str	r0, [sp, #20]
   135b0:	f001 82ee 	beq.w	14b90 <_svfprintf_r+0x19e0>
   135b4:	9b05      	ldr	r3, [sp, #20]
   135b6:	9508      	str	r5, [sp, #32]
   135b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   135bc:	9302      	str	r3, [sp, #8]
   135be:	2100      	movs	r1, #0
   135c0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   135c4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   135c8:	9107      	str	r1, [sp, #28]
   135ca:	9103      	str	r1, [sp, #12]
   135cc:	910f      	str	r1, [sp, #60]	; 0x3c
   135ce:	e732      	b.n	13436 <_svfprintf_r+0x286>
   135d0:	930b      	str	r3, [sp, #44]	; 0x2c
   135d2:	9b08      	ldr	r3, [sp, #32]
   135d4:	461a      	mov	r2, r3
   135d6:	2300      	movs	r3, #0
   135d8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   135dc:	4613      	mov	r3, r2
   135de:	f853 4b04 	ldr.w	r4, [r3], #4
   135e2:	9308      	str	r3, [sp, #32]
   135e4:	2c00      	cmp	r4, #0
   135e6:	f000 8548 	beq.w	1407a <_svfprintf_r+0xeca>
   135ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   135ec:	2b53      	cmp	r3, #83	; 0x53
   135ee:	f000 86ec 	beq.w	143ca <_svfprintf_r+0x121a>
   135f2:	f018 0310 	ands.w	r3, r8, #16
   135f6:	930c      	str	r3, [sp, #48]	; 0x30
   135f8:	f040 86e7 	bne.w	143ca <_svfprintf_r+0x121a>
   135fc:	9b03      	ldr	r3, [sp, #12]
   135fe:	1c5d      	adds	r5, r3, #1
   13600:	f001 80e5 	beq.w	147ce <_svfprintf_r+0x161e>
   13604:	990c      	ldr	r1, [sp, #48]	; 0x30
   13606:	461a      	mov	r2, r3
   13608:	4620      	mov	r0, r4
   1360a:	f7fe ff31 	bl	12470 <memchr>
   1360e:	9007      	str	r0, [sp, #28]
   13610:	2800      	cmp	r0, #0
   13612:	f001 8328 	beq.w	14c66 <_svfprintf_r+0x1ab6>
   13616:	9b07      	ldr	r3, [sp, #28]
   13618:	1b1a      	subs	r2, r3, r4
   1361a:	9205      	str	r2, [sp, #20]
   1361c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1361e:	9303      	str	r3, [sp, #12]
   13620:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   13624:	930f      	str	r3, [sp, #60]	; 0x3c
   13626:	930d      	str	r3, [sp, #52]	; 0x34
   13628:	9307      	str	r3, [sp, #28]
   1362a:	2373      	movs	r3, #115	; 0x73
   1362c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   13630:	9202      	str	r2, [sp, #8]
   13632:	930b      	str	r3, [sp, #44]	; 0x2c
   13634:	e79d      	b.n	13572 <_svfprintf_r+0x3c2>
   13636:	f018 0f20 	tst.w	r8, #32
   1363a:	930b      	str	r3, [sp, #44]	; 0x2c
   1363c:	9b08      	ldr	r3, [sp, #32]
   1363e:	d03d      	beq.n	136bc <_svfprintf_r+0x50c>
   13640:	3307      	adds	r3, #7
   13642:	f023 0307 	bic.w	r3, r3, #7
   13646:	461a      	mov	r2, r3
   13648:	4611      	mov	r1, r2
   1364a:	685b      	ldr	r3, [r3, #4]
   1364c:	f851 2b08 	ldr.w	r2, [r1], #8
   13650:	9108      	str	r1, [sp, #32]
   13652:	4619      	mov	r1, r3
   13654:	2b00      	cmp	r3, #0
   13656:	f2c0 840c 	blt.w	13e72 <_svfprintf_r+0xcc2>
   1365a:	9b03      	ldr	r3, [sp, #12]
   1365c:	3301      	adds	r3, #1
   1365e:	f000 829e 	beq.w	13b9e <_svfprintf_r+0x9ee>
   13662:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   13666:	ea52 0301 	orrs.w	r3, r2, r1
   1366a:	9002      	str	r0, [sp, #8]
   1366c:	f040 8299 	bne.w	13ba2 <_svfprintf_r+0x9f2>
   13670:	9b03      	ldr	r3, [sp, #12]
   13672:	2b00      	cmp	r3, #0
   13674:	f040 829a 	bne.w	13bac <_svfprintf_r+0x9fc>
   13678:	4680      	mov	r8, r0
   1367a:	2300      	movs	r3, #0
   1367c:	9303      	str	r3, [sp, #12]
   1367e:	9305      	str	r3, [sp, #20]
   13680:	ac50      	add	r4, sp, #320	; 0x140
   13682:	e106      	b.n	13892 <_svfprintf_r+0x6e2>
   13684:	9b08      	ldr	r3, [sp, #32]
   13686:	f853 2b04 	ldr.w	r2, [r3], #4
   1368a:	9206      	str	r2, [sp, #24]
   1368c:	2a00      	cmp	r2, #0
   1368e:	f280 8419 	bge.w	13ec4 <_svfprintf_r+0xd14>
   13692:	9a06      	ldr	r2, [sp, #24]
   13694:	9308      	str	r3, [sp, #32]
   13696:	4252      	negs	r2, r2
   13698:	9206      	str	r2, [sp, #24]
   1369a:	f899 3000 	ldrb.w	r3, [r9]
   1369e:	f048 0804 	orr.w	r8, r8, #4
   136a2:	e5e1      	b.n	13268 <_svfprintf_r+0xb8>
   136a4:	f899 3000 	ldrb.w	r3, [r9]
   136a8:	f048 0808 	orr.w	r8, r8, #8
   136ac:	e5dc      	b.n	13268 <_svfprintf_r+0xb8>
   136ae:	f048 0810 	orr.w	r8, r8, #16
   136b2:	f018 0f20 	tst.w	r8, #32
   136b6:	930b      	str	r3, [sp, #44]	; 0x2c
   136b8:	9b08      	ldr	r3, [sp, #32]
   136ba:	d1c1      	bne.n	13640 <_svfprintf_r+0x490>
   136bc:	f018 0f10 	tst.w	r8, #16
   136c0:	f040 840b 	bne.w	13eda <_svfprintf_r+0xd2a>
   136c4:	f018 0f40 	tst.w	r8, #64	; 0x40
   136c8:	f000 8403 	beq.w	13ed2 <_svfprintf_r+0xd22>
   136cc:	f933 2b04 	ldrsh.w	r2, [r3], #4
   136d0:	9308      	str	r3, [sp, #32]
   136d2:	17d1      	asrs	r1, r2, #31
   136d4:	460b      	mov	r3, r1
   136d6:	e7bd      	b.n	13654 <_svfprintf_r+0x4a4>
   136d8:	9b08      	ldr	r3, [sp, #32]
   136da:	f048 0202 	orr.w	r2, r8, #2
   136de:	9202      	str	r2, [sp, #8]
   136e0:	f853 2b04 	ldr.w	r2, [r3], #4
   136e4:	9308      	str	r3, [sp, #32]
   136e6:	f647 0330 	movw	r3, #30768	; 0x7830
   136ea:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   136ee:	2078      	movs	r0, #120	; 0x78
   136f0:	4b45      	ldr	r3, [pc, #276]	; (13808 <_svfprintf_r+0x658>)
   136f2:	9311      	str	r3, [sp, #68]	; 0x44
   136f4:	2100      	movs	r1, #0
   136f6:	2302      	movs	r3, #2
   136f8:	900b      	str	r0, [sp, #44]	; 0x2c
   136fa:	2000      	movs	r0, #0
   136fc:	9c03      	ldr	r4, [sp, #12]
   136fe:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   13702:	1c60      	adds	r0, r4, #1
   13704:	f000 80ad 	beq.w	13862 <_svfprintf_r+0x6b2>
   13708:	9802      	ldr	r0, [sp, #8]
   1370a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   1370e:	ea52 0001 	orrs.w	r0, r2, r1
   13712:	f040 80a4 	bne.w	1385e <_svfprintf_r+0x6ae>
   13716:	2c00      	cmp	r4, #0
   13718:	f040 86ae 	bne.w	14478 <_svfprintf_r+0x12c8>
   1371c:	2b00      	cmp	r3, #0
   1371e:	d1ac      	bne.n	1367a <_svfprintf_r+0x4ca>
   13720:	9b02      	ldr	r3, [sp, #8]
   13722:	f013 0301 	ands.w	r3, r3, #1
   13726:	9305      	str	r3, [sp, #20]
   13728:	f000 83d1 	beq.w	13ece <_svfprintf_r+0xd1e>
   1372c:	2330      	movs	r3, #48	; 0x30
   1372e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   13732:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   13736:	e0ac      	b.n	13892 <_svfprintf_r+0x6e2>
   13738:	f018 0f20 	tst.w	r8, #32
   1373c:	f040 83d4 	bne.w	13ee8 <_svfprintf_r+0xd38>
   13740:	f018 0f10 	tst.w	r8, #16
   13744:	f040 869f 	bne.w	14486 <_svfprintf_r+0x12d6>
   13748:	f018 0f40 	tst.w	r8, #64	; 0x40
   1374c:	f040 8797 	bne.w	1467e <_svfprintf_r+0x14ce>
   13750:	f418 7f00 	tst.w	r8, #512	; 0x200
   13754:	f000 8697 	beq.w	14486 <_svfprintf_r+0x12d6>
   13758:	9b08      	ldr	r3, [sp, #32]
   1375a:	9904      	ldr	r1, [sp, #16]
   1375c:	f853 2b04 	ldr.w	r2, [r3], #4
   13760:	9308      	str	r3, [sp, #32]
   13762:	7011      	strb	r1, [r2, #0]
   13764:	464c      	mov	r4, r9
   13766:	e555      	b.n	13214 <_svfprintf_r+0x64>
   13768:	f899 3000 	ldrb.w	r3, [r9]
   1376c:	2b68      	cmp	r3, #104	; 0x68
   1376e:	bf03      	ittte	eq
   13770:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   13774:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   13778:	f109 0901 	addeq.w	r9, r9, #1
   1377c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   13780:	e572      	b.n	13268 <_svfprintf_r+0xb8>
   13782:	f899 3000 	ldrb.w	r3, [r9]
   13786:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   1378a:	e56d      	b.n	13268 <_svfprintf_r+0xb8>
   1378c:	f899 3000 	ldrb.w	r3, [r9]
   13790:	2b6c      	cmp	r3, #108	; 0x6c
   13792:	bf03      	ittte	eq
   13794:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   13798:	f048 0820 	orreq.w	r8, r8, #32
   1379c:	f109 0901 	addeq.w	r9, r9, #1
   137a0:	f048 0810 	orrne.w	r8, r8, #16
   137a4:	e560      	b.n	13268 <_svfprintf_r+0xb8>
   137a6:	930b      	str	r3, [sp, #44]	; 0x2c
   137a8:	f048 0810 	orr.w	r8, r8, #16
   137ac:	f018 0120 	ands.w	r1, r8, #32
   137b0:	f000 8351 	beq.w	13e56 <_svfprintf_r+0xca6>
   137b4:	9b08      	ldr	r3, [sp, #32]
   137b6:	3307      	adds	r3, #7
   137b8:	f023 0307 	bic.w	r3, r3, #7
   137bc:	6859      	ldr	r1, [r3, #4]
   137be:	f853 2b08 	ldr.w	r2, [r3], #8
   137c2:	9308      	str	r3, [sp, #32]
   137c4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   137c8:	9302      	str	r3, [sp, #8]
   137ca:	2300      	movs	r3, #0
   137cc:	e795      	b.n	136fa <_svfprintf_r+0x54a>
   137ce:	930b      	str	r3, [sp, #44]	; 0x2c
   137d0:	f048 0310 	orr.w	r3, r8, #16
   137d4:	9302      	str	r3, [sp, #8]
   137d6:	9b02      	ldr	r3, [sp, #8]
   137d8:	f013 0120 	ands.w	r1, r3, #32
   137dc:	f000 8329 	beq.w	13e32 <_svfprintf_r+0xc82>
   137e0:	9b08      	ldr	r3, [sp, #32]
   137e2:	3307      	adds	r3, #7
   137e4:	f023 0307 	bic.w	r3, r3, #7
   137e8:	6859      	ldr	r1, [r3, #4]
   137ea:	f853 2b08 	ldr.w	r2, [r3], #8
   137ee:	9308      	str	r3, [sp, #32]
   137f0:	2301      	movs	r3, #1
   137f2:	e782      	b.n	136fa <_svfprintf_r+0x54a>
   137f4:	f899 3000 	ldrb.w	r3, [r9]
   137f8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   137fc:	e534      	b.n	13268 <_svfprintf_r+0xb8>
   137fe:	bf00      	nop
   13800:	200019b8 	.word	0x200019b8
   13804:	200012a0 	.word	0x200012a0
   13808:	200019c0 	.word	0x200019c0
   1380c:	4649      	mov	r1, r9
   1380e:	f811 3b01 	ldrb.w	r3, [r1], #1
   13812:	2b2a      	cmp	r3, #42	; 0x2a
   13814:	f001 8249 	beq.w	14caa <_svfprintf_r+0x1afa>
   13818:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1381c:	2a09      	cmp	r2, #9
   1381e:	4689      	mov	r9, r1
   13820:	bf98      	it	ls
   13822:	2100      	movls	r1, #0
   13824:	f201 8144 	bhi.w	14ab0 <_svfprintf_r+0x1900>
   13828:	f819 3b01 	ldrb.w	r3, [r9], #1
   1382c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   13830:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   13834:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13838:	2a09      	cmp	r2, #9
   1383a:	d9f5      	bls.n	13828 <_svfprintf_r+0x678>
   1383c:	9103      	str	r1, [sp, #12]
   1383e:	e515      	b.n	1326c <_svfprintf_r+0xbc>
   13840:	f899 3000 	ldrb.w	r3, [r9]
   13844:	f048 0801 	orr.w	r8, r8, #1
   13848:	e50e      	b.n	13268 <_svfprintf_r+0xb8>
   1384a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   1384e:	2b00      	cmp	r3, #0
   13850:	f47f ad8f 	bne.w	13372 <_svfprintf_r+0x1c2>
   13854:	f899 3000 	ldrb.w	r3, [r9]
   13858:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   1385c:	e504      	b.n	13268 <_svfprintf_r+0xb8>
   1385e:	f8cd 8008 	str.w	r8, [sp, #8]
   13862:	2b01      	cmp	r3, #1
   13864:	f000 819d 	beq.w	13ba2 <_svfprintf_r+0x9f2>
   13868:	2b02      	cmp	r3, #2
   1386a:	ac50      	add	r4, sp, #320	; 0x140
   1386c:	d120      	bne.n	138b0 <_svfprintf_r+0x700>
   1386e:	9811      	ldr	r0, [sp, #68]	; 0x44
   13870:	f002 030f 	and.w	r3, r2, #15
   13874:	0912      	lsrs	r2, r2, #4
   13876:	5cc3      	ldrb	r3, [r0, r3]
   13878:	f804 3d01 	strb.w	r3, [r4, #-1]!
   1387c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   13880:	0909      	lsrs	r1, r1, #4
   13882:	ea52 0301 	orrs.w	r3, r2, r1
   13886:	d1f3      	bne.n	13870 <_svfprintf_r+0x6c0>
   13888:	ab50      	add	r3, sp, #320	; 0x140
   1388a:	1b1b      	subs	r3, r3, r4
   1388c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   13890:	9305      	str	r3, [sp, #20]
   13892:	9a05      	ldr	r2, [sp, #20]
   13894:	9803      	ldr	r0, [sp, #12]
   13896:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1389a:	4282      	cmp	r2, r0
   1389c:	f04f 0300 	mov.w	r3, #0
   138a0:	bfb8      	it	lt
   138a2:	4602      	movlt	r2, r0
   138a4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   138a8:	9307      	str	r3, [sp, #28]
   138aa:	9202      	str	r2, [sp, #8]
   138ac:	930f      	str	r3, [sp, #60]	; 0x3c
   138ae:	e660      	b.n	13572 <_svfprintf_r+0x3c2>
   138b0:	f002 0307 	and.w	r3, r2, #7
   138b4:	08d2      	lsrs	r2, r2, #3
   138b6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   138ba:	08c9      	lsrs	r1, r1, #3
   138bc:	3330      	adds	r3, #48	; 0x30
   138be:	ea52 0501 	orrs.w	r5, r2, r1
   138c2:	4620      	mov	r0, r4
   138c4:	f804 3d01 	strb.w	r3, [r4, #-1]!
   138c8:	d1f2      	bne.n	138b0 <_svfprintf_r+0x700>
   138ca:	9a02      	ldr	r2, [sp, #8]
   138cc:	07d1      	lsls	r1, r2, #31
   138ce:	f100 824d 	bmi.w	13d6c <_svfprintf_r+0xbbc>
   138d2:	ab50      	add	r3, sp, #320	; 0x140
   138d4:	1b1b      	subs	r3, r3, r4
   138d6:	4690      	mov	r8, r2
   138d8:	9305      	str	r3, [sp, #20]
   138da:	e7da      	b.n	13892 <_svfprintf_r+0x6e2>
   138dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   138de:	2b65      	cmp	r3, #101	; 0x65
   138e0:	f340 80d4 	ble.w	13a8c <_svfprintf_r+0x8dc>
   138e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
   138e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   138ec:	f040 81c1 	bne.w	13c72 <_svfprintf_r+0xac2>
   138f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   138f2:	49ba      	ldr	r1, [pc, #744]	; (13bdc <_svfprintf_r+0xa2c>)
   138f4:	f8ca 1000 	str.w	r1, [sl]
   138f8:	3301      	adds	r3, #1
   138fa:	3201      	adds	r2, #1
   138fc:	2101      	movs	r1, #1
   138fe:	2b07      	cmp	r3, #7
   13900:	9226      	str	r2, [sp, #152]	; 0x98
   13902:	9325      	str	r3, [sp, #148]	; 0x94
   13904:	f8ca 1004 	str.w	r1, [sl, #4]
   13908:	f300 8551 	bgt.w	143ae <_svfprintf_r+0x11fe>
   1390c:	f10a 0a08 	add.w	sl, sl, #8
   13910:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13912:	990e      	ldr	r1, [sp, #56]	; 0x38
   13914:	428b      	cmp	r3, r1
   13916:	f280 82d0 	bge.w	13eba <_svfprintf_r+0xd0a>
   1391a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1391c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1391e:	441a      	add	r2, r3
   13920:	e9ca 1300 	strd	r1, r3, [sl]
   13924:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13926:	9226      	str	r2, [sp, #152]	; 0x98
   13928:	3301      	adds	r3, #1
   1392a:	2b07      	cmp	r3, #7
   1392c:	9325      	str	r3, [sp, #148]	; 0x94
   1392e:	f300 8397 	bgt.w	14060 <_svfprintf_r+0xeb0>
   13932:	f10a 0a08 	add.w	sl, sl, #8
   13936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13938:	1e5c      	subs	r4, r3, #1
   1393a:	2c00      	cmp	r4, #0
   1393c:	f77f add0 	ble.w	134e0 <_svfprintf_r+0x330>
   13940:	2c10      	cmp	r4, #16
   13942:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13944:	f340 856e 	ble.w	14424 <_svfprintf_r+0x1274>
   13948:	ee1b 6a10 	vmov	r6, s22
   1394c:	2510      	movs	r5, #16
   1394e:	e005      	b.n	1395c <_svfprintf_r+0x7ac>
   13950:	f10a 0a08 	add.w	sl, sl, #8
   13954:	3c10      	subs	r4, #16
   13956:	2c10      	cmp	r4, #16
   13958:	f340 8564 	ble.w	14424 <_svfprintf_r+0x1274>
   1395c:	3301      	adds	r3, #1
   1395e:	49a0      	ldr	r1, [pc, #640]	; (13be0 <_svfprintf_r+0xa30>)
   13960:	3210      	adds	r2, #16
   13962:	2b07      	cmp	r3, #7
   13964:	e9ca 1500 	strd	r1, r5, [sl]
   13968:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1396c:	ddf0      	ble.n	13950 <_svfprintf_r+0x7a0>
   1396e:	aa24      	add	r2, sp, #144	; 0x90
   13970:	4631      	mov	r1, r6
   13972:	4658      	mov	r0, fp
   13974:	f003 f89e 	bl	16ab4 <__ssprint_r>
   13978:	2800      	cmp	r0, #0
   1397a:	d17e      	bne.n	13a7a <_svfprintf_r+0x8ca>
   1397c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13980:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13984:	e7e6      	b.n	13954 <_svfprintf_r+0x7a4>
   13986:	9b06      	ldr	r3, [sp, #24]
   13988:	9902      	ldr	r1, [sp, #8]
   1398a:	1a5d      	subs	r5, r3, r1
   1398c:	2d00      	cmp	r5, #0
   1398e:	f77f ad8e 	ble.w	134ae <_svfprintf_r+0x2fe>
   13992:	2d10      	cmp	r5, #16
   13994:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13996:	dd21      	ble.n	139dc <_svfprintf_r+0x82c>
   13998:	9409      	str	r4, [sp, #36]	; 0x24
   1399a:	2610      	movs	r6, #16
   1399c:	ee1b 4a10 	vmov	r4, s22
   139a0:	e004      	b.n	139ac <_svfprintf_r+0x7fc>
   139a2:	3d10      	subs	r5, #16
   139a4:	2d10      	cmp	r5, #16
   139a6:	f10a 0a08 	add.w	sl, sl, #8
   139aa:	dd16      	ble.n	139da <_svfprintf_r+0x82a>
   139ac:	3301      	adds	r3, #1
   139ae:	498c      	ldr	r1, [pc, #560]	; (13be0 <_svfprintf_r+0xa30>)
   139b0:	3210      	adds	r2, #16
   139b2:	2b07      	cmp	r3, #7
   139b4:	e9ca 1600 	strd	r1, r6, [sl]
   139b8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   139bc:	ddf1      	ble.n	139a2 <_svfprintf_r+0x7f2>
   139be:	aa24      	add	r2, sp, #144	; 0x90
   139c0:	4621      	mov	r1, r4
   139c2:	4658      	mov	r0, fp
   139c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   139c8:	f003 f874 	bl	16ab4 <__ssprint_r>
   139cc:	2800      	cmp	r0, #0
   139ce:	d154      	bne.n	13a7a <_svfprintf_r+0x8ca>
   139d0:	3d10      	subs	r5, #16
   139d2:	2d10      	cmp	r5, #16
   139d4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   139d8:	dce8      	bgt.n	139ac <_svfprintf_r+0x7fc>
   139da:	9c09      	ldr	r4, [sp, #36]	; 0x24
   139dc:	4980      	ldr	r1, [pc, #512]	; (13be0 <_svfprintf_r+0xa30>)
   139de:	f8ca 5004 	str.w	r5, [sl, #4]
   139e2:	3301      	adds	r3, #1
   139e4:	442a      	add	r2, r5
   139e6:	2b07      	cmp	r3, #7
   139e8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   139ec:	f8ca 1000 	str.w	r1, [sl]
   139f0:	f300 8526 	bgt.w	14440 <_svfprintf_r+0x1290>
   139f4:	9b03      	ldr	r3, [sp, #12]
   139f6:	9905      	ldr	r1, [sp, #20]
   139f8:	1a5d      	subs	r5, r3, r1
   139fa:	2d00      	cmp	r5, #0
   139fc:	f10a 0a08 	add.w	sl, sl, #8
   13a00:	f77f ad5b 	ble.w	134ba <_svfprintf_r+0x30a>
   13a04:	2d10      	cmp	r5, #16
   13a06:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13a08:	dd1f      	ble.n	13a4a <_svfprintf_r+0x89a>
   13a0a:	4651      	mov	r1, sl
   13a0c:	2610      	movs	r6, #16
   13a0e:	ee1b aa10 	vmov	sl, s22
   13a12:	e004      	b.n	13a1e <_svfprintf_r+0x86e>
   13a14:	3d10      	subs	r5, #16
   13a16:	2d10      	cmp	r5, #16
   13a18:	f101 0108 	add.w	r1, r1, #8
   13a1c:	dd14      	ble.n	13a48 <_svfprintf_r+0x898>
   13a1e:	3301      	adds	r3, #1
   13a20:	486f      	ldr	r0, [pc, #444]	; (13be0 <_svfprintf_r+0xa30>)
   13a22:	3210      	adds	r2, #16
   13a24:	2b07      	cmp	r3, #7
   13a26:	e9c1 0600 	strd	r0, r6, [r1]
   13a2a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13a2e:	ddf1      	ble.n	13a14 <_svfprintf_r+0x864>
   13a30:	aa24      	add	r2, sp, #144	; 0x90
   13a32:	4651      	mov	r1, sl
   13a34:	4658      	mov	r0, fp
   13a36:	f003 f83d 	bl	16ab4 <__ssprint_r>
   13a3a:	b9f0      	cbnz	r0, 13a7a <_svfprintf_r+0x8ca>
   13a3c:	3d10      	subs	r5, #16
   13a3e:	2d10      	cmp	r5, #16
   13a40:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13a44:	a927      	add	r1, sp, #156	; 0x9c
   13a46:	dcea      	bgt.n	13a1e <_svfprintf_r+0x86e>
   13a48:	468a      	mov	sl, r1
   13a4a:	3301      	adds	r3, #1
   13a4c:	4964      	ldr	r1, [pc, #400]	; (13be0 <_svfprintf_r+0xa30>)
   13a4e:	f8ca 5004 	str.w	r5, [sl, #4]
   13a52:	442a      	add	r2, r5
   13a54:	2b07      	cmp	r3, #7
   13a56:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13a5a:	f8ca 1000 	str.w	r1, [sl]
   13a5e:	f300 81da 	bgt.w	13e16 <_svfprintf_r+0xc66>
   13a62:	f10a 0a08 	add.w	sl, sl, #8
   13a66:	e528      	b.n	134ba <_svfprintf_r+0x30a>
   13a68:	ee1b 1a10 	vmov	r1, s22
   13a6c:	aa24      	add	r2, sp, #144	; 0x90
   13a6e:	4658      	mov	r0, fp
   13a70:	f003 f820 	bl	16ab4 <__ssprint_r>
   13a74:	2800      	cmp	r0, #0
   13a76:	f43f ad47 	beq.w	13508 <_svfprintf_r+0x358>
   13a7a:	9b07      	ldr	r3, [sp, #28]
   13a7c:	2b00      	cmp	r3, #0
   13a7e:	f43f aca2 	beq.w	133c6 <_svfprintf_r+0x216>
   13a82:	9907      	ldr	r1, [sp, #28]
   13a84:	4658      	mov	r0, fp
   13a86:	f7fe fe67 	bl	12758 <_free_r>
   13a8a:	e49c      	b.n	133c6 <_svfprintf_r+0x216>
   13a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13a8e:	2b01      	cmp	r3, #1
   13a90:	f340 817a 	ble.w	13d88 <_svfprintf_r+0xbd8>
   13a94:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13a96:	f8ca 4000 	str.w	r4, [sl]
   13a9a:	3301      	adds	r3, #1
   13a9c:	3201      	adds	r2, #1
   13a9e:	2101      	movs	r1, #1
   13aa0:	2b07      	cmp	r3, #7
   13aa2:	9226      	str	r2, [sp, #152]	; 0x98
   13aa4:	9325      	str	r3, [sp, #148]	; 0x94
   13aa6:	f8ca 1004 	str.w	r1, [sl, #4]
   13aaa:	f300 81f8 	bgt.w	13e9e <_svfprintf_r+0xcee>
   13aae:	f10a 0a08 	add.w	sl, sl, #8
   13ab2:	9910      	ldr	r1, [sp, #64]	; 0x40
   13ab4:	9812      	ldr	r0, [sp, #72]	; 0x48
   13ab6:	3301      	adds	r3, #1
   13ab8:	440a      	add	r2, r1
   13aba:	2b07      	cmp	r3, #7
   13abc:	e9ca 0100 	strd	r0, r1, [sl]
   13ac0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13ac4:	f300 81dd 	bgt.w	13e82 <_svfprintf_r+0xcd2>
   13ac8:	f10a 0a08 	add.w	sl, sl, #8
   13acc:	eeb5 8b40 	vcmp.f64	d8, #0.0
   13ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ad4:	f000 8177 	beq.w	13dc6 <_svfprintf_r+0xc16>
   13ad8:	990e      	ldr	r1, [sp, #56]	; 0x38
   13ada:	3301      	adds	r3, #1
   13adc:	3901      	subs	r1, #1
   13ade:	3401      	adds	r4, #1
   13ae0:	440a      	add	r2, r1
   13ae2:	2b07      	cmp	r3, #7
   13ae4:	f8ca 4000 	str.w	r4, [sl]
   13ae8:	9325      	str	r3, [sp, #148]	; 0x94
   13aea:	f8ca 1004 	str.w	r1, [sl, #4]
   13aee:	9226      	str	r2, [sp, #152]	; 0x98
   13af0:	f300 815b 	bgt.w	13daa <_svfprintf_r+0xbfa>
   13af4:	f10a 0a08 	add.w	sl, sl, #8
   13af8:	9914      	ldr	r1, [sp, #80]	; 0x50
   13afa:	f8ca 1004 	str.w	r1, [sl, #4]
   13afe:	3301      	adds	r3, #1
   13b00:	440a      	add	r2, r1
   13b02:	2b07      	cmp	r3, #7
   13b04:	a91e      	add	r1, sp, #120	; 0x78
   13b06:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13b0a:	f8ca 1000 	str.w	r1, [sl]
   13b0e:	f77f ace5 	ble.w	134dc <_svfprintf_r+0x32c>
   13b12:	ee1b 1a10 	vmov	r1, s22
   13b16:	aa24      	add	r2, sp, #144	; 0x90
   13b18:	4658      	mov	r0, fp
   13b1a:	f002 ffcb 	bl	16ab4 <__ssprint_r>
   13b1e:	2800      	cmp	r0, #0
   13b20:	d1ab      	bne.n	13a7a <_svfprintf_r+0x8ca>
   13b22:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13b24:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13b28:	e4da      	b.n	134e0 <_svfprintf_r+0x330>
   13b2a:	2d10      	cmp	r5, #16
   13b2c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   13b30:	4e2c      	ldr	r6, [pc, #176]	; (13be4 <_svfprintf_r+0xa34>)
   13b32:	dd24      	ble.n	13b7e <_svfprintf_r+0x9ce>
   13b34:	9417      	str	r4, [sp, #92]	; 0x5c
   13b36:	2310      	movs	r3, #16
   13b38:	ee1b 4a10 	vmov	r4, s22
   13b3c:	4608      	mov	r0, r1
   13b3e:	e004      	b.n	13b4a <_svfprintf_r+0x99a>
   13b40:	3d10      	subs	r5, #16
   13b42:	2d10      	cmp	r5, #16
   13b44:	f10a 0a08 	add.w	sl, sl, #8
   13b48:	dd17      	ble.n	13b7a <_svfprintf_r+0x9ca>
   13b4a:	3001      	adds	r0, #1
   13b4c:	3210      	adds	r2, #16
   13b4e:	2807      	cmp	r0, #7
   13b50:	e9ca 6300 	strd	r6, r3, [sl]
   13b54:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   13b58:	ddf2      	ble.n	13b40 <_svfprintf_r+0x990>
   13b5a:	aa24      	add	r2, sp, #144	; 0x90
   13b5c:	4621      	mov	r1, r4
   13b5e:	4658      	mov	r0, fp
   13b60:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13b64:	f002 ffa6 	bl	16ab4 <__ssprint_r>
   13b68:	2800      	cmp	r0, #0
   13b6a:	d186      	bne.n	13a7a <_svfprintf_r+0x8ca>
   13b6c:	3d10      	subs	r5, #16
   13b6e:	2d10      	cmp	r5, #16
   13b70:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   13b74:	f04f 0310 	mov.w	r3, #16
   13b78:	dce7      	bgt.n	13b4a <_svfprintf_r+0x99a>
   13b7a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   13b7c:	4601      	mov	r1, r0
   13b7e:	3101      	adds	r1, #1
   13b80:	442a      	add	r2, r5
   13b82:	2907      	cmp	r1, #7
   13b84:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   13b88:	f8ca 6000 	str.w	r6, [sl]
   13b8c:	f8ca 5004 	str.w	r5, [sl, #4]
   13b90:	f300 83bd 	bgt.w	1430e <_svfprintf_r+0x115e>
   13b94:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   13b98:	f10a 0a08 	add.w	sl, sl, #8
   13b9c:	e45d      	b.n	1345a <_svfprintf_r+0x2aa>
   13b9e:	f8cd 8008 	str.w	r8, [sp, #8]
   13ba2:	2a0a      	cmp	r2, #10
   13ba4:	f171 0300 	sbcs.w	r3, r1, #0
   13ba8:	f080 8345 	bcs.w	14236 <_svfprintf_r+0x1086>
   13bac:	3230      	adds	r2, #48	; 0x30
   13bae:	2301      	movs	r3, #1
   13bb0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   13bb4:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   13bb8:	9305      	str	r3, [sp, #20]
   13bba:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   13bbe:	e668      	b.n	13892 <_svfprintf_r+0x6e2>
   13bc0:	ee1b 1a10 	vmov	r1, s22
   13bc4:	aa24      	add	r2, sp, #144	; 0x90
   13bc6:	4658      	mov	r0, fp
   13bc8:	f002 ff74 	bl	16ab4 <__ssprint_r>
   13bcc:	2800      	cmp	r0, #0
   13bce:	f47f af54 	bne.w	13a7a <_svfprintf_r+0x8ca>
   13bd2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13bd4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13bd8:	e452      	b.n	13480 <_svfprintf_r+0x2d0>
   13bda:	bf00      	nop
   13bdc:	200019f0 	.word	0x200019f0
   13be0:	200028e0 	.word	0x200028e0
   13be4:	200019f4 	.word	0x200019f4
   13be8:	ee1b 1a10 	vmov	r1, s22
   13bec:	aa24      	add	r2, sp, #144	; 0x90
   13bee:	4658      	mov	r0, fp
   13bf0:	f002 ff60 	bl	16ab4 <__ssprint_r>
   13bf4:	2800      	cmp	r0, #0
   13bf6:	f47f af40 	bne.w	13a7a <_svfprintf_r+0x8ca>
   13bfa:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13bfc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13c00:	e451      	b.n	134a6 <_svfprintf_r+0x2f6>
   13c02:	2c10      	cmp	r4, #16
   13c04:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13c06:	4ebe      	ldr	r6, [pc, #760]	; (13f00 <_svfprintf_r+0xd50>)
   13c08:	dd1f      	ble.n	13c4a <_svfprintf_r+0xa9a>
   13c0a:	ee1b 8a10 	vmov	r8, s22
   13c0e:	2510      	movs	r5, #16
   13c10:	e004      	b.n	13c1c <_svfprintf_r+0xa6c>
   13c12:	3c10      	subs	r4, #16
   13c14:	2c10      	cmp	r4, #16
   13c16:	f10a 0a08 	add.w	sl, sl, #8
   13c1a:	dd16      	ble.n	13c4a <_svfprintf_r+0xa9a>
   13c1c:	3301      	adds	r3, #1
   13c1e:	3210      	adds	r2, #16
   13c20:	2b07      	cmp	r3, #7
   13c22:	e9ca 6500 	strd	r6, r5, [sl]
   13c26:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13c2a:	ddf2      	ble.n	13c12 <_svfprintf_r+0xa62>
   13c2c:	aa24      	add	r2, sp, #144	; 0x90
   13c2e:	4641      	mov	r1, r8
   13c30:	4658      	mov	r0, fp
   13c32:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13c36:	f002 ff3d 	bl	16ab4 <__ssprint_r>
   13c3a:	2800      	cmp	r0, #0
   13c3c:	f47f af1d 	bne.w	13a7a <_svfprintf_r+0x8ca>
   13c40:	3c10      	subs	r4, #16
   13c42:	2c10      	cmp	r4, #16
   13c44:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13c48:	dce8      	bgt.n	13c1c <_svfprintf_r+0xa6c>
   13c4a:	3301      	adds	r3, #1
   13c4c:	4422      	add	r2, r4
   13c4e:	2b07      	cmp	r3, #7
   13c50:	e9ca 6400 	strd	r6, r4, [sl]
   13c54:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13c58:	f77f ac4b 	ble.w	134f2 <_svfprintf_r+0x342>
   13c5c:	ee1b 1a10 	vmov	r1, s22
   13c60:	aa24      	add	r2, sp, #144	; 0x90
   13c62:	4658      	mov	r0, fp
   13c64:	f002 ff26 	bl	16ab4 <__ssprint_r>
   13c68:	2800      	cmp	r0, #0
   13c6a:	f47f af06 	bne.w	13a7a <_svfprintf_r+0x8ca>
   13c6e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13c70:	e43f      	b.n	134f2 <_svfprintf_r+0x342>
   13c72:	991b      	ldr	r1, [sp, #108]	; 0x6c
   13c74:	2900      	cmp	r1, #0
   13c76:	f340 835a 	ble.w	1432e <_svfprintf_r+0x117e>
   13c7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13c7e:	429e      	cmp	r6, r3
   13c80:	bfa8      	it	ge
   13c82:	461e      	movge	r6, r3
   13c84:	2e00      	cmp	r6, #0
   13c86:	dd0b      	ble.n	13ca0 <_svfprintf_r+0xaf0>
   13c88:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13c8a:	3301      	adds	r3, #1
   13c8c:	4432      	add	r2, r6
   13c8e:	2b07      	cmp	r3, #7
   13c90:	e9ca 4600 	strd	r4, r6, [sl]
   13c94:	9226      	str	r2, [sp, #152]	; 0x98
   13c96:	9325      	str	r3, [sp, #148]	; 0x94
   13c98:	f300 8689 	bgt.w	149ae <_svfprintf_r+0x17fe>
   13c9c:	f10a 0a08 	add.w	sl, sl, #8
   13ca0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   13ca2:	2e00      	cmp	r6, #0
   13ca4:	bfa8      	it	ge
   13ca6:	1bad      	subge	r5, r5, r6
   13ca8:	2d00      	cmp	r5, #0
   13caa:	f300 8203 	bgt.w	140b4 <_svfprintf_r+0xf04>
   13cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13cb0:	f418 6f80 	tst.w	r8, #1024	; 0x400
   13cb4:	4423      	add	r3, r4
   13cb6:	9305      	str	r3, [sp, #20]
   13cb8:	f040 821f 	bne.w	140fa <_svfprintf_r+0xf4a>
   13cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13cbe:	990e      	ldr	r1, [sp, #56]	; 0x38
   13cc0:	428b      	cmp	r3, r1
   13cc2:	db03      	blt.n	13ccc <_svfprintf_r+0xb1c>
   13cc4:	f018 0f01 	tst.w	r8, #1
   13cc8:	f000 84cf 	beq.w	1466a <_svfprintf_r+0x14ba>
   13ccc:	9910      	ldr	r1, [sp, #64]	; 0x40
   13cce:	9812      	ldr	r0, [sp, #72]	; 0x48
   13cd0:	440a      	add	r2, r1
   13cd2:	e9ca 0100 	strd	r0, r1, [sl]
   13cd6:	9925      	ldr	r1, [sp, #148]	; 0x94
   13cd8:	9226      	str	r2, [sp, #152]	; 0x98
   13cda:	3101      	adds	r1, #1
   13cdc:	2907      	cmp	r1, #7
   13cde:	9125      	str	r1, [sp, #148]	; 0x94
   13ce0:	f300 86a5 	bgt.w	14a2e <_svfprintf_r+0x187e>
   13ce4:	f10a 0a08 	add.w	sl, sl, #8
   13ce8:	990e      	ldr	r1, [sp, #56]	; 0x38
   13cea:	1865      	adds	r5, r4, r1
   13cec:	1acc      	subs	r4, r1, r3
   13cee:	9b05      	ldr	r3, [sp, #20]
   13cf0:	1aed      	subs	r5, r5, r3
   13cf2:	42a5      	cmp	r5, r4
   13cf4:	bfa8      	it	ge
   13cf6:	4625      	movge	r5, r4
   13cf8:	2d00      	cmp	r5, #0
   13cfa:	dd0d      	ble.n	13d18 <_svfprintf_r+0xb68>
   13cfc:	f8ca 3000 	str.w	r3, [sl]
   13d00:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13d02:	f8ca 5004 	str.w	r5, [sl, #4]
   13d06:	3301      	adds	r3, #1
   13d08:	442a      	add	r2, r5
   13d0a:	2b07      	cmp	r3, #7
   13d0c:	9226      	str	r2, [sp, #152]	; 0x98
   13d0e:	9325      	str	r3, [sp, #148]	; 0x94
   13d10:	f300 86bb 	bgt.w	14a8a <_svfprintf_r+0x18da>
   13d14:	f10a 0a08 	add.w	sl, sl, #8
   13d18:	2d00      	cmp	r5, #0
   13d1a:	bfa8      	it	ge
   13d1c:	1b64      	subge	r4, r4, r5
   13d1e:	2c00      	cmp	r4, #0
   13d20:	f77f abde 	ble.w	134e0 <_svfprintf_r+0x330>
   13d24:	2c10      	cmp	r4, #16
   13d26:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13d28:	f340 837c 	ble.w	14424 <_svfprintf_r+0x1274>
   13d2c:	ee1b 6a10 	vmov	r6, s22
   13d30:	2510      	movs	r5, #16
   13d32:	e005      	b.n	13d40 <_svfprintf_r+0xb90>
   13d34:	f10a 0a08 	add.w	sl, sl, #8
   13d38:	3c10      	subs	r4, #16
   13d3a:	2c10      	cmp	r4, #16
   13d3c:	f340 8372 	ble.w	14424 <_svfprintf_r+0x1274>
   13d40:	3301      	adds	r3, #1
   13d42:	4970      	ldr	r1, [pc, #448]	; (13f04 <_svfprintf_r+0xd54>)
   13d44:	3210      	adds	r2, #16
   13d46:	2b07      	cmp	r3, #7
   13d48:	e9ca 1500 	strd	r1, r5, [sl]
   13d4c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13d50:	ddf0      	ble.n	13d34 <_svfprintf_r+0xb84>
   13d52:	aa24      	add	r2, sp, #144	; 0x90
   13d54:	4631      	mov	r1, r6
   13d56:	4658      	mov	r0, fp
   13d58:	f002 feac 	bl	16ab4 <__ssprint_r>
   13d5c:	2800      	cmp	r0, #0
   13d5e:	f47f ae8c 	bne.w	13a7a <_svfprintf_r+0x8ca>
   13d62:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13d66:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13d6a:	e7e5      	b.n	13d38 <_svfprintf_r+0xb88>
   13d6c:	2b30      	cmp	r3, #48	; 0x30
   13d6e:	f43f ad8b 	beq.w	13888 <_svfprintf_r+0x6d8>
   13d72:	2330      	movs	r3, #48	; 0x30
   13d74:	3802      	subs	r0, #2
   13d76:	f804 3c01 	strb.w	r3, [r4, #-1]
   13d7a:	ab50      	add	r3, sp, #320	; 0x140
   13d7c:	1a1b      	subs	r3, r3, r0
   13d7e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   13d82:	9305      	str	r3, [sp, #20]
   13d84:	4604      	mov	r4, r0
   13d86:	e584      	b.n	13892 <_svfprintf_r+0x6e2>
   13d88:	f018 0f01 	tst.w	r8, #1
   13d8c:	f47f ae82 	bne.w	13a94 <_svfprintf_r+0x8e4>
   13d90:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13d92:	f8ca 4000 	str.w	r4, [sl]
   13d96:	3301      	adds	r3, #1
   13d98:	3201      	adds	r2, #1
   13d9a:	2101      	movs	r1, #1
   13d9c:	2b07      	cmp	r3, #7
   13d9e:	9226      	str	r2, [sp, #152]	; 0x98
   13da0:	9325      	str	r3, [sp, #148]	; 0x94
   13da2:	f8ca 1004 	str.w	r1, [sl, #4]
   13da6:	f77f aea5 	ble.w	13af4 <_svfprintf_r+0x944>
   13daa:	ee1b 1a10 	vmov	r1, s22
   13dae:	aa24      	add	r2, sp, #144	; 0x90
   13db0:	4658      	mov	r0, fp
   13db2:	f002 fe7f 	bl	16ab4 <__ssprint_r>
   13db6:	2800      	cmp	r0, #0
   13db8:	f47f ae5f 	bne.w	13a7a <_svfprintf_r+0x8ca>
   13dbc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13dc0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13dc4:	e698      	b.n	13af8 <_svfprintf_r+0x948>
   13dc6:	990e      	ldr	r1, [sp, #56]	; 0x38
   13dc8:	1e4c      	subs	r4, r1, #1
   13dca:	2c00      	cmp	r4, #0
   13dcc:	f77f ae94 	ble.w	13af8 <_svfprintf_r+0x948>
   13dd0:	2c10      	cmp	r4, #16
   13dd2:	f340 8361 	ble.w	14498 <_svfprintf_r+0x12e8>
   13dd6:	ee1b 6a10 	vmov	r6, s22
   13dda:	2510      	movs	r5, #16
   13ddc:	e005      	b.n	13dea <_svfprintf_r+0xc3a>
   13dde:	f10a 0a08 	add.w	sl, sl, #8
   13de2:	3c10      	subs	r4, #16
   13de4:	2c10      	cmp	r4, #16
   13de6:	f340 8357 	ble.w	14498 <_svfprintf_r+0x12e8>
   13dea:	3301      	adds	r3, #1
   13dec:	4945      	ldr	r1, [pc, #276]	; (13f04 <_svfprintf_r+0xd54>)
   13dee:	3210      	adds	r2, #16
   13df0:	2b07      	cmp	r3, #7
   13df2:	e9ca 1500 	strd	r1, r5, [sl]
   13df6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13dfa:	ddf0      	ble.n	13dde <_svfprintf_r+0xc2e>
   13dfc:	aa24      	add	r2, sp, #144	; 0x90
   13dfe:	4631      	mov	r1, r6
   13e00:	4658      	mov	r0, fp
   13e02:	f002 fe57 	bl	16ab4 <__ssprint_r>
   13e06:	2800      	cmp	r0, #0
   13e08:	f47f ae37 	bne.w	13a7a <_svfprintf_r+0x8ca>
   13e0c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13e10:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13e14:	e7e5      	b.n	13de2 <_svfprintf_r+0xc32>
   13e16:	ee1b 1a10 	vmov	r1, s22
   13e1a:	aa24      	add	r2, sp, #144	; 0x90
   13e1c:	4658      	mov	r0, fp
   13e1e:	f002 fe49 	bl	16ab4 <__ssprint_r>
   13e22:	2800      	cmp	r0, #0
   13e24:	f47f ae29 	bne.w	13a7a <_svfprintf_r+0x8ca>
   13e28:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13e2a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13e2e:	f7ff bb44 	b.w	134ba <_svfprintf_r+0x30a>
   13e32:	9b02      	ldr	r3, [sp, #8]
   13e34:	f013 0310 	ands.w	r3, r3, #16
   13e38:	f040 80c1 	bne.w	13fbe <_svfprintf_r+0xe0e>
   13e3c:	9a02      	ldr	r2, [sp, #8]
   13e3e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   13e42:	f000 837a 	beq.w	1453a <_svfprintf_r+0x138a>
   13e46:	9808      	ldr	r0, [sp, #32]
   13e48:	f850 2b04 	ldr.w	r2, [r0], #4
   13e4c:	9008      	str	r0, [sp, #32]
   13e4e:	4619      	mov	r1, r3
   13e50:	b292      	uxth	r2, r2
   13e52:	2301      	movs	r3, #1
   13e54:	e451      	b.n	136fa <_svfprintf_r+0x54a>
   13e56:	f018 0310 	ands.w	r3, r8, #16
   13e5a:	d155      	bne.n	13f08 <_svfprintf_r+0xd58>
   13e5c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   13e60:	f000 835d 	beq.w	1451e <_svfprintf_r+0x136e>
   13e64:	9808      	ldr	r0, [sp, #32]
   13e66:	f850 2b04 	ldr.w	r2, [r0], #4
   13e6a:	9008      	str	r0, [sp, #32]
   13e6c:	4619      	mov	r1, r3
   13e6e:	b292      	uxth	r2, r2
   13e70:	e4a8      	b.n	137c4 <_svfprintf_r+0x614>
   13e72:	4252      	negs	r2, r2
   13e74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13e78:	f8cd 8008 	str.w	r8, [sp, #8]
   13e7c:	202d      	movs	r0, #45	; 0x2d
   13e7e:	2301      	movs	r3, #1
   13e80:	e43c      	b.n	136fc <_svfprintf_r+0x54c>
   13e82:	ee1b 1a10 	vmov	r1, s22
   13e86:	aa24      	add	r2, sp, #144	; 0x90
   13e88:	4658      	mov	r0, fp
   13e8a:	f002 fe13 	bl	16ab4 <__ssprint_r>
   13e8e:	2800      	cmp	r0, #0
   13e90:	f47f adf3 	bne.w	13a7a <_svfprintf_r+0x8ca>
   13e94:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13e98:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13e9c:	e616      	b.n	13acc <_svfprintf_r+0x91c>
   13e9e:	ee1b 1a10 	vmov	r1, s22
   13ea2:	aa24      	add	r2, sp, #144	; 0x90
   13ea4:	4658      	mov	r0, fp
   13ea6:	f002 fe05 	bl	16ab4 <__ssprint_r>
   13eaa:	2800      	cmp	r0, #0
   13eac:	f47f ade5 	bne.w	13a7a <_svfprintf_r+0x8ca>
   13eb0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13eb4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13eb8:	e5fb      	b.n	13ab2 <_svfprintf_r+0x902>
   13eba:	f018 0f01 	tst.w	r8, #1
   13ebe:	f43f ab0f 	beq.w	134e0 <_svfprintf_r+0x330>
   13ec2:	e52a      	b.n	1391a <_svfprintf_r+0x76a>
   13ec4:	9308      	str	r3, [sp, #32]
   13ec6:	f899 3000 	ldrb.w	r3, [r9]
   13eca:	f7ff b9cd 	b.w	13268 <_svfprintf_r+0xb8>
   13ece:	ac50      	add	r4, sp, #320	; 0x140
   13ed0:	e4df      	b.n	13892 <_svfprintf_r+0x6e2>
   13ed2:	f418 7f00 	tst.w	r8, #512	; 0x200
   13ed6:	f040 83db 	bne.w	14690 <_svfprintf_r+0x14e0>
   13eda:	f853 2b04 	ldr.w	r2, [r3], #4
   13ede:	9308      	str	r3, [sp, #32]
   13ee0:	17d1      	asrs	r1, r2, #31
   13ee2:	460b      	mov	r3, r1
   13ee4:	f7ff bbb6 	b.w	13654 <_svfprintf_r+0x4a4>
   13ee8:	9b08      	ldr	r3, [sp, #32]
   13eea:	9804      	ldr	r0, [sp, #16]
   13eec:	f853 1b04 	ldr.w	r1, [r3], #4
   13ef0:	9308      	str	r3, [sp, #32]
   13ef2:	17c2      	asrs	r2, r0, #31
   13ef4:	e9c1 0200 	strd	r0, r2, [r1]
   13ef8:	464c      	mov	r4, r9
   13efa:	f7ff b98b 	b.w	13214 <_svfprintf_r+0x64>
   13efe:	bf00      	nop
   13f00:	200019f4 	.word	0x200019f4
   13f04:	200028e0 	.word	0x200028e0
   13f08:	9b08      	ldr	r3, [sp, #32]
   13f0a:	f853 2b04 	ldr.w	r2, [r3], #4
   13f0e:	9308      	str	r3, [sp, #32]
   13f10:	e458      	b.n	137c4 <_svfprintf_r+0x614>
   13f12:	eeb4 8b48 	vcmp.f64	d8, d8
   13f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13f1a:	f180 8694 	bvs.w	14c46 <_svfprintf_r+0x1a96>
   13f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f20:	2b61      	cmp	r3, #97	; 0x61
   13f22:	f000 8552 	beq.w	149ca <_svfprintf_r+0x181a>
   13f26:	2b41      	cmp	r3, #65	; 0x41
   13f28:	f000 85c0 	beq.w	14aac <_svfprintf_r+0x18fc>
   13f2c:	9b03      	ldr	r3, [sp, #12]
   13f2e:	3301      	adds	r3, #1
   13f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f32:	f023 0520 	bic.w	r5, r3, #32
   13f36:	f000 8480 	beq.w	1483a <_svfprintf_r+0x168a>
   13f3a:	2d47      	cmp	r5, #71	; 0x47
   13f3c:	d104      	bne.n	13f48 <_svfprintf_r+0xd98>
   13f3e:	9b03      	ldr	r3, [sp, #12]
   13f40:	2b00      	cmp	r3, #0
   13f42:	bf08      	it	eq
   13f44:	2301      	moveq	r3, #1
   13f46:	9303      	str	r3, [sp, #12]
   13f48:	ee18 3a90 	vmov	r3, s17
   13f4c:	2b00      	cmp	r3, #0
   13f4e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   13f52:	4646      	mov	r6, r8
   13f54:	f2c0 8618 	blt.w	14b88 <_svfprintf_r+0x19d8>
   13f58:	eeb0 ab48 	vmov.f64	d10, d8
   13f5c:	2300      	movs	r3, #0
   13f5e:	4690      	mov	r8, r2
   13f60:	9309      	str	r3, [sp, #36]	; 0x24
   13f62:	9307      	str	r3, [sp, #28]
   13f64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f66:	3b41      	subs	r3, #65	; 0x41
   13f68:	2b25      	cmp	r3, #37	; 0x25
   13f6a:	f200 8398 	bhi.w	1469e <_svfprintf_r+0x14ee>
   13f6e:	e8df f013 	tbh	[pc, r3, lsl #1]
   13f72:	046f      	.short	0x046f
   13f74:	03960396 	.word	0x03960396
   13f78:	04680396 	.word	0x04680396
   13f7c:	0396046c 	.word	0x0396046c
   13f80:	03960396 	.word	0x03960396
   13f84:	03960396 	.word	0x03960396
   13f88:	03960396 	.word	0x03960396
   13f8c:	03960396 	.word	0x03960396
   13f90:	03960396 	.word	0x03960396
   13f94:	03960396 	.word	0x03960396
   13f98:	03960396 	.word	0x03960396
   13f9c:	03960396 	.word	0x03960396
   13fa0:	03960396 	.word	0x03960396
   13fa4:	03960396 	.word	0x03960396
   13fa8:	03960396 	.word	0x03960396
   13fac:	03960396 	.word	0x03960396
   13fb0:	03960396 	.word	0x03960396
   13fb4:	03960396 	.word	0x03960396
   13fb8:	04680396 	.word	0x04680396
   13fbc:	046c      	.short	0x046c
   13fbe:	9b08      	ldr	r3, [sp, #32]
   13fc0:	f853 2b04 	ldr.w	r2, [r3], #4
   13fc4:	9308      	str	r3, [sp, #32]
   13fc6:	2301      	movs	r3, #1
   13fc8:	f7ff bb97 	b.w	136fa <_svfprintf_r+0x54a>
   13fcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13fce:	2b00      	cmp	r3, #0
   13fd0:	f43f a9cf 	beq.w	13372 <_svfprintf_r+0x1c2>
   13fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13fd6:	781b      	ldrb	r3, [r3, #0]
   13fd8:	2b00      	cmp	r3, #0
   13fda:	f43f a9ca 	beq.w	13372 <_svfprintf_r+0x1c2>
   13fde:	f899 3000 	ldrb.w	r3, [r9]
   13fe2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   13fe6:	f7ff b93f 	b.w	13268 <_svfprintf_r+0xb8>
   13fea:	930b      	str	r3, [sp, #44]	; 0x2c
   13fec:	f8cd 8008 	str.w	r8, [sp, #8]
   13ff0:	f7ff bbf1 	b.w	137d6 <_svfprintf_r+0x626>
   13ff4:	930b      	str	r3, [sp, #44]	; 0x2c
   13ff6:	4b9a      	ldr	r3, [pc, #616]	; (14260 <_svfprintf_r+0x10b0>)
   13ff8:	9311      	str	r3, [sp, #68]	; 0x44
   13ffa:	f018 0120 	ands.w	r1, r8, #32
   13ffe:	f000 8105 	beq.w	1420c <_svfprintf_r+0x105c>
   14002:	9b08      	ldr	r3, [sp, #32]
   14004:	3307      	adds	r3, #7
   14006:	f023 0307 	bic.w	r3, r3, #7
   1400a:	6859      	ldr	r1, [r3, #4]
   1400c:	f853 2b08 	ldr.w	r2, [r3], #8
   14010:	9308      	str	r3, [sp, #32]
   14012:	f018 0f01 	tst.w	r8, #1
   14016:	d00a      	beq.n	1402e <_svfprintf_r+0xe7e>
   14018:	ea52 0301 	orrs.w	r3, r2, r1
   1401c:	d007      	beq.n	1402e <_svfprintf_r+0xe7e>
   1401e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14020:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   14024:	2330      	movs	r3, #48	; 0x30
   14026:	f048 0802 	orr.w	r8, r8, #2
   1402a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   1402e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   14032:	9302      	str	r3, [sp, #8]
   14034:	2302      	movs	r3, #2
   14036:	f7ff bb60 	b.w	136fa <_svfprintf_r+0x54a>
   1403a:	930b      	str	r3, [sp, #44]	; 0x2c
   1403c:	f7ff bbb6 	b.w	137ac <_svfprintf_r+0x5fc>
   14040:	930b      	str	r3, [sp, #44]	; 0x2c
   14042:	4b88      	ldr	r3, [pc, #544]	; (14264 <_svfprintf_r+0x10b4>)
   14044:	9311      	str	r3, [sp, #68]	; 0x44
   14046:	e7d8      	b.n	13ffa <_svfprintf_r+0xe4a>
   14048:	9b08      	ldr	r3, [sp, #32]
   1404a:	2101      	movs	r1, #1
   1404c:	f853 2b04 	ldr.w	r2, [r3], #4
   14050:	9102      	str	r1, [sp, #8]
   14052:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   14056:	9308      	str	r3, [sp, #32]
   14058:	9105      	str	r1, [sp, #20]
   1405a:	ac37      	add	r4, sp, #220	; 0xdc
   1405c:	f7ff baaf 	b.w	135be <_svfprintf_r+0x40e>
   14060:	ee1b 1a10 	vmov	r1, s22
   14064:	aa24      	add	r2, sp, #144	; 0x90
   14066:	4658      	mov	r0, fp
   14068:	f002 fd24 	bl	16ab4 <__ssprint_r>
   1406c:	2800      	cmp	r0, #0
   1406e:	f47f ad04 	bne.w	13a7a <_svfprintf_r+0x8ca>
   14072:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14074:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14078:	e45d      	b.n	13936 <_svfprintf_r+0x786>
   1407a:	9b03      	ldr	r3, [sp, #12]
   1407c:	9407      	str	r4, [sp, #28]
   1407e:	2b06      	cmp	r3, #6
   14080:	4622      	mov	r2, r4
   14082:	bf28      	it	cs
   14084:	2306      	movcs	r3, #6
   14086:	9403      	str	r4, [sp, #12]
   14088:	4621      	mov	r1, r4
   1408a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   1408e:	4c76      	ldr	r4, [pc, #472]	; (14268 <_svfprintf_r+0x10b8>)
   14090:	9302      	str	r3, [sp, #8]
   14092:	9305      	str	r3, [sp, #20]
   14094:	920f      	str	r2, [sp, #60]	; 0x3c
   14096:	f7ff ba6c 	b.w	13572 <_svfprintf_r+0x3c2>
   1409a:	2140      	movs	r1, #64	; 0x40
   1409c:	4658      	mov	r0, fp
   1409e:	f7fb ff61 	bl	ff64 <_malloc_r>
   140a2:	6020      	str	r0, [r4, #0]
   140a4:	6120      	str	r0, [r4, #16]
   140a6:	2800      	cmp	r0, #0
   140a8:	f000 860f 	beq.w	14cca <_svfprintf_r+0x1b1a>
   140ac:	2340      	movs	r3, #64	; 0x40
   140ae:	6163      	str	r3, [r4, #20]
   140b0:	f7ff b89e 	b.w	131f0 <_svfprintf_r+0x40>
   140b4:	2d10      	cmp	r5, #16
   140b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   140b8:	f340 825d 	ble.w	14576 <_svfprintf_r+0x13c6>
   140bc:	4651      	mov	r1, sl
   140be:	2610      	movs	r6, #16
   140c0:	ee1b aa10 	vmov	sl, s22
   140c4:	e004      	b.n	140d0 <_svfprintf_r+0xf20>
   140c6:	3108      	adds	r1, #8
   140c8:	3d10      	subs	r5, #16
   140ca:	2d10      	cmp	r5, #16
   140cc:	f340 8252 	ble.w	14574 <_svfprintf_r+0x13c4>
   140d0:	3301      	adds	r3, #1
   140d2:	4866      	ldr	r0, [pc, #408]	; (1426c <_svfprintf_r+0x10bc>)
   140d4:	3210      	adds	r2, #16
   140d6:	2b07      	cmp	r3, #7
   140d8:	e9c1 0600 	strd	r0, r6, [r1]
   140dc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   140e0:	ddf1      	ble.n	140c6 <_svfprintf_r+0xf16>
   140e2:	aa24      	add	r2, sp, #144	; 0x90
   140e4:	4651      	mov	r1, sl
   140e6:	4658      	mov	r0, fp
   140e8:	f002 fce4 	bl	16ab4 <__ssprint_r>
   140ec:	2800      	cmp	r0, #0
   140ee:	f47f acc4 	bne.w	13a7a <_svfprintf_r+0x8ca>
   140f2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   140f6:	a927      	add	r1, sp, #156	; 0x9c
   140f8:	e7e6      	b.n	140c8 <_svfprintf_r+0xf18>
   140fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   140fc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   14100:	18e3      	adds	r3, r4, r3
   14102:	9303      	str	r3, [sp, #12]
   14104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14106:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1410a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1410c:	9d05      	ldr	r5, [sp, #20]
   1410e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   14112:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   14116:	940b      	str	r4, [sp, #44]	; 0x2c
   14118:	ee1b 1a10 	vmov	r1, s22
   1411c:	4650      	mov	r0, sl
   1411e:	2b00      	cmp	r3, #0
   14120:	d034      	beq.n	1418c <_svfprintf_r+0xfdc>
   14122:	f1b8 0f00 	cmp.w	r8, #0
   14126:	d135      	bne.n	14194 <_svfprintf_r+0xfe4>
   14128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1412a:	3b01      	subs	r3, #1
   1412c:	3e01      	subs	r6, #1
   1412e:	930d      	str	r3, [sp, #52]	; 0x34
   14130:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14132:	e9c0 3900 	strd	r3, r9, [r0]
   14136:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14138:	3301      	adds	r3, #1
   1413a:	444a      	add	r2, r9
   1413c:	2b07      	cmp	r3, #7
   1413e:	9226      	str	r2, [sp, #152]	; 0x98
   14140:	9325      	str	r3, [sp, #148]	; 0x94
   14142:	dc6c      	bgt.n	1421e <_svfprintf_r+0x106e>
   14144:	3008      	adds	r0, #8
   14146:	9b03      	ldr	r3, [sp, #12]
   14148:	f896 c000 	ldrb.w	ip, [r6]
   1414c:	1b5b      	subs	r3, r3, r5
   1414e:	4563      	cmp	r3, ip
   14150:	bfa8      	it	ge
   14152:	4663      	movge	r3, ip
   14154:	2b00      	cmp	r3, #0
   14156:	469a      	mov	sl, r3
   14158:	dd0c      	ble.n	14174 <_svfprintf_r+0xfc4>
   1415a:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1415c:	3401      	adds	r4, #1
   1415e:	441a      	add	r2, r3
   14160:	2c07      	cmp	r4, #7
   14162:	e9c0 5300 	strd	r5, r3, [r0]
   14166:	9226      	str	r2, [sp, #152]	; 0x98
   14168:	9425      	str	r4, [sp, #148]	; 0x94
   1416a:	f300 8177 	bgt.w	1445c <_svfprintf_r+0x12ac>
   1416e:	f896 c000 	ldrb.w	ip, [r6]
   14172:	3008      	adds	r0, #8
   14174:	f1ba 0f00 	cmp.w	sl, #0
   14178:	bfac      	ite	ge
   1417a:	ebac 040a 	subge.w	r4, ip, sl
   1417e:	4664      	movlt	r4, ip
   14180:	2c00      	cmp	r4, #0
   14182:	dc0a      	bgt.n	1419a <_svfprintf_r+0xfea>
   14184:	4465      	add	r5, ip
   14186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14188:	2b00      	cmp	r3, #0
   1418a:	d1ca      	bne.n	14122 <_svfprintf_r+0xf72>
   1418c:	f1b8 0f00 	cmp.w	r8, #0
   14190:	f000 83ac 	beq.w	148ec <_svfprintf_r+0x173c>
   14194:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   14198:	e7ca      	b.n	14130 <_svfprintf_r+0xf80>
   1419a:	2c10      	cmp	r4, #16
   1419c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   141a0:	dd24      	ble.n	141ec <_svfprintf_r+0x103c>
   141a2:	9505      	str	r5, [sp, #20]
   141a4:	f04f 0a10 	mov.w	sl, #16
   141a8:	4663      	mov	r3, ip
   141aa:	460d      	mov	r5, r1
   141ac:	e004      	b.n	141b8 <_svfprintf_r+0x1008>
   141ae:	3c10      	subs	r4, #16
   141b0:	2c10      	cmp	r4, #16
   141b2:	f100 0008 	add.w	r0, r0, #8
   141b6:	dd16      	ble.n	141e6 <_svfprintf_r+0x1036>
   141b8:	3301      	adds	r3, #1
   141ba:	492c      	ldr	r1, [pc, #176]	; (1426c <_svfprintf_r+0x10bc>)
   141bc:	3210      	adds	r2, #16
   141be:	2b07      	cmp	r3, #7
   141c0:	e9c0 1a00 	strd	r1, sl, [r0]
   141c4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   141c8:	ddf1      	ble.n	141ae <_svfprintf_r+0xffe>
   141ca:	aa24      	add	r2, sp, #144	; 0x90
   141cc:	4629      	mov	r1, r5
   141ce:	4658      	mov	r0, fp
   141d0:	f002 fc70 	bl	16ab4 <__ssprint_r>
   141d4:	2800      	cmp	r0, #0
   141d6:	f47f ac50 	bne.w	13a7a <_svfprintf_r+0x8ca>
   141da:	3c10      	subs	r4, #16
   141dc:	2c10      	cmp	r4, #16
   141de:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   141e2:	a827      	add	r0, sp, #156	; 0x9c
   141e4:	dce8      	bgt.n	141b8 <_svfprintf_r+0x1008>
   141e6:	4629      	mov	r1, r5
   141e8:	9d05      	ldr	r5, [sp, #20]
   141ea:	469c      	mov	ip, r3
   141ec:	f10c 0301 	add.w	r3, ip, #1
   141f0:	4422      	add	r2, r4
   141f2:	6044      	str	r4, [r0, #4]
   141f4:	2b07      	cmp	r3, #7
   141f6:	4c1d      	ldr	r4, [pc, #116]	; (1426c <_svfprintf_r+0x10bc>)
   141f8:	6004      	str	r4, [r0, #0]
   141fa:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   141fe:	f300 83c6 	bgt.w	1498e <_svfprintf_r+0x17de>
   14202:	f896 c000 	ldrb.w	ip, [r6]
   14206:	3008      	adds	r0, #8
   14208:	4465      	add	r5, ip
   1420a:	e7bc      	b.n	14186 <_svfprintf_r+0xfd6>
   1420c:	f018 0310 	ands.w	r3, r8, #16
   14210:	f000 80c2 	beq.w	14398 <_svfprintf_r+0x11e8>
   14214:	9b08      	ldr	r3, [sp, #32]
   14216:	f853 2b04 	ldr.w	r2, [r3], #4
   1421a:	9308      	str	r3, [sp, #32]
   1421c:	e6f9      	b.n	14012 <_svfprintf_r+0xe62>
   1421e:	aa24      	add	r2, sp, #144	; 0x90
   14220:	4658      	mov	r0, fp
   14222:	9105      	str	r1, [sp, #20]
   14224:	f002 fc46 	bl	16ab4 <__ssprint_r>
   14228:	2800      	cmp	r0, #0
   1422a:	f47f ac26 	bne.w	13a7a <_svfprintf_r+0x8ca>
   1422e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14230:	9905      	ldr	r1, [sp, #20]
   14232:	a827      	add	r0, sp, #156	; 0x9c
   14234:	e787      	b.n	14146 <_svfprintf_r+0xf96>
   14236:	9802      	ldr	r0, [sp, #8]
   14238:	f8cd a01c 	str.w	sl, [sp, #28]
   1423c:	ac50      	add	r4, sp, #320	; 0x140
   1423e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   14242:	2500      	movs	r5, #0
   14244:	ee0a ba10 	vmov	s20, fp
   14248:	4b09      	ldr	r3, [pc, #36]	; (14270 <_svfprintf_r+0x10c0>)
   1424a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1424e:	f8cd 9014 	str.w	r9, [sp, #20]
   14252:	46a3      	mov	fp, r4
   14254:	f04f 0805 	mov.w	r8, #5
   14258:	46ac      	mov	ip, r5
   1425a:	4604      	mov	r4, r0
   1425c:	e010      	b.n	14280 <_svfprintf_r+0x10d0>
   1425e:	bf00      	nop
   14260:	200019c0 	.word	0x200019c0
   14264:	200019d4 	.word	0x200019d4
   14268:	200019e8 	.word	0x200019e8
   1426c:	200028e0 	.word	0x200028e0
   14270:	cccccccd 	.word	0xcccccccd
   14274:	2a0a      	cmp	r2, #10
   14276:	f171 0100 	sbcs.w	r1, r1, #0
   1427a:	d336      	bcc.n	142ea <_svfprintf_r+0x113a>
   1427c:	464a      	mov	r2, r9
   1427e:	4631      	mov	r1, r6
   14280:	1850      	adds	r0, r2, r1
   14282:	f140 0000 	adc.w	r0, r0, #0
   14286:	fba3 5600 	umull	r5, r6, r3, r0
   1428a:	f026 0503 	bic.w	r5, r6, #3
   1428e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   14292:	1b40      	subs	r0, r0, r5
   14294:	1a15      	subs	r5, r2, r0
   14296:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   1429a:	f161 0e00 	sbc.w	lr, r1, #0
   1429e:	fb06 f605 	mul.w	r6, r6, r5
   142a2:	fba5 9503 	umull	r9, r5, r5, r3
   142a6:	fb03 660e 	mla	r6, r3, lr, r6
   142aa:	f009 0e01 	and.w	lr, r9, #1
   142ae:	442e      	add	r6, r5
   142b0:	fbae 5e08 	umull	r5, lr, lr, r8
   142b4:	182d      	adds	r5, r5, r0
   142b6:	ea4f 0959 	mov.w	r9, r9, lsr #1
   142ba:	3530      	adds	r5, #48	; 0x30
   142bc:	f80b 5c01 	strb.w	r5, [fp, #-1]
   142c0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   142c4:	f10c 0c01 	add.w	ip, ip, #1
   142c8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   142cc:	0876      	lsrs	r6, r6, #1
   142ce:	2c00      	cmp	r4, #0
   142d0:	d0d0      	beq.n	14274 <_svfprintf_r+0x10c4>
   142d2:	f89a 0000 	ldrb.w	r0, [sl]
   142d6:	4584      	cmp	ip, r0
   142d8:	d1cc      	bne.n	14274 <_svfprintf_r+0x10c4>
   142da:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   142de:	d0c9      	beq.n	14274 <_svfprintf_r+0x10c4>
   142e0:	2a0a      	cmp	r2, #10
   142e2:	f171 0100 	sbcs.w	r1, r1, #0
   142e6:	f080 818f 	bcs.w	14608 <_svfprintf_r+0x1458>
   142ea:	465c      	mov	r4, fp
   142ec:	ab50      	add	r3, sp, #320	; 0x140
   142ee:	1b1b      	subs	r3, r3, r4
   142f0:	f8dd 9014 	ldr.w	r9, [sp, #20]
   142f4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   142f8:	ee1a ba10 	vmov	fp, s20
   142fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
   14300:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14304:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   14308:	9305      	str	r3, [sp, #20]
   1430a:	f7ff bac2 	b.w	13892 <_svfprintf_r+0x6e2>
   1430e:	ee1b 1a10 	vmov	r1, s22
   14312:	aa24      	add	r2, sp, #144	; 0x90
   14314:	4658      	mov	r0, fp
   14316:	f002 fbcd 	bl	16ab4 <__ssprint_r>
   1431a:	2800      	cmp	r0, #0
   1431c:	f47f abad 	bne.w	13a7a <_svfprintf_r+0x8ca>
   14320:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14324:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14326:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1432a:	f7ff b896 	b.w	1345a <_svfprintf_r+0x2aa>
   1432e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14330:	48be      	ldr	r0, [pc, #760]	; (1462c <_svfprintf_r+0x147c>)
   14332:	f8ca 0000 	str.w	r0, [sl]
   14336:	3301      	adds	r3, #1
   14338:	3201      	adds	r2, #1
   1433a:	2001      	movs	r0, #1
   1433c:	2b07      	cmp	r3, #7
   1433e:	9226      	str	r2, [sp, #152]	; 0x98
   14340:	9325      	str	r3, [sp, #148]	; 0x94
   14342:	f8ca 0004 	str.w	r0, [sl, #4]
   14346:	f300 8177 	bgt.w	14638 <_svfprintf_r+0x1488>
   1434a:	f10a 0a08 	add.w	sl, sl, #8
   1434e:	2900      	cmp	r1, #0
   14350:	f040 80af 	bne.w	144b2 <_svfprintf_r+0x1302>
   14354:	990e      	ldr	r1, [sp, #56]	; 0x38
   14356:	f008 0301 	and.w	r3, r8, #1
   1435a:	430b      	orrs	r3, r1
   1435c:	f43f a8c0 	beq.w	134e0 <_svfprintf_r+0x330>
   14360:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14362:	9912      	ldr	r1, [sp, #72]	; 0x48
   14364:	441a      	add	r2, r3
   14366:	e9ca 1300 	strd	r1, r3, [sl]
   1436a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1436c:	9226      	str	r2, [sp, #152]	; 0x98
   1436e:	3301      	adds	r3, #1
   14370:	2b07      	cmp	r3, #7
   14372:	9325      	str	r3, [sp, #148]	; 0x94
   14374:	f300 8252 	bgt.w	1481c <_svfprintf_r+0x166c>
   14378:	f10a 0a08 	add.w	sl, sl, #8
   1437c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1437e:	f8ca 4000 	str.w	r4, [sl]
   14382:	3301      	adds	r3, #1
   14384:	440a      	add	r2, r1
   14386:	2b07      	cmp	r3, #7
   14388:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1438c:	f8ca 1004 	str.w	r1, [sl, #4]
   14390:	f77f a8a4 	ble.w	134dc <_svfprintf_r+0x32c>
   14394:	f7ff bbbd 	b.w	13b12 <_svfprintf_r+0x962>
   14398:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   1439c:	f000 80dd 	beq.w	1455a <_svfprintf_r+0x13aa>
   143a0:	9808      	ldr	r0, [sp, #32]
   143a2:	f850 2b04 	ldr.w	r2, [r0], #4
   143a6:	9008      	str	r0, [sp, #32]
   143a8:	4619      	mov	r1, r3
   143aa:	b292      	uxth	r2, r2
   143ac:	e631      	b.n	14012 <_svfprintf_r+0xe62>
   143ae:	ee1b 1a10 	vmov	r1, s22
   143b2:	aa24      	add	r2, sp, #144	; 0x90
   143b4:	4658      	mov	r0, fp
   143b6:	f002 fb7d 	bl	16ab4 <__ssprint_r>
   143ba:	2800      	cmp	r0, #0
   143bc:	f47f ab5d 	bne.w	13a7a <_svfprintf_r+0x8ca>
   143c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   143c2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   143c6:	f7ff baa3 	b.w	13910 <_svfprintf_r+0x760>
   143ca:	ae22      	add	r6, sp, #136	; 0x88
   143cc:	2208      	movs	r2, #8
   143ce:	2100      	movs	r1, #0
   143d0:	4630      	mov	r0, r6
   143d2:	941d      	str	r4, [sp, #116]	; 0x74
   143d4:	f7fd fd0a 	bl	11dec <memset>
   143d8:	9b03      	ldr	r3, [sp, #12]
   143da:	1c5a      	adds	r2, r3, #1
   143dc:	f000 80db 	beq.w	14596 <_svfprintf_r+0x13e6>
   143e0:	2500      	movs	r5, #0
   143e2:	f8cd 9008 	str.w	r9, [sp, #8]
   143e6:	f8cd 801c 	str.w	r8, [sp, #28]
   143ea:	4699      	mov	r9, r3
   143ec:	46a8      	mov	r8, r5
   143ee:	e00c      	b.n	1440a <_svfprintf_r+0x125a>
   143f0:	a937      	add	r1, sp, #220	; 0xdc
   143f2:	4658      	mov	r0, fp
   143f4:	f001 fb74 	bl	15ae0 <_wcrtomb_r>
   143f8:	1c43      	adds	r3, r0, #1
   143fa:	4440      	add	r0, r8
   143fc:	f000 83c8 	beq.w	14b90 <_svfprintf_r+0x19e0>
   14400:	4548      	cmp	r0, r9
   14402:	dc08      	bgt.n	14416 <_svfprintf_r+0x1266>
   14404:	f000 8418 	beq.w	14c38 <_svfprintf_r+0x1a88>
   14408:	4680      	mov	r8, r0
   1440a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1440c:	5952      	ldr	r2, [r2, r5]
   1440e:	4633      	mov	r3, r6
   14410:	3504      	adds	r5, #4
   14412:	2a00      	cmp	r2, #0
   14414:	d1ec      	bne.n	143f0 <_svfprintf_r+0x1240>
   14416:	f8cd 8014 	str.w	r8, [sp, #20]
   1441a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1441e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   14422:	e0c5      	b.n	145b0 <_svfprintf_r+0x1400>
   14424:	3301      	adds	r3, #1
   14426:	4982      	ldr	r1, [pc, #520]	; (14630 <_svfprintf_r+0x1480>)
   14428:	f8ca 4004 	str.w	r4, [sl, #4]
   1442c:	4422      	add	r2, r4
   1442e:	2b07      	cmp	r3, #7
   14430:	f8ca 1000 	str.w	r1, [sl]
   14434:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14438:	f77f a850 	ble.w	134dc <_svfprintf_r+0x32c>
   1443c:	f7ff bb69 	b.w	13b12 <_svfprintf_r+0x962>
   14440:	ee1b 1a10 	vmov	r1, s22
   14444:	aa24      	add	r2, sp, #144	; 0x90
   14446:	4658      	mov	r0, fp
   14448:	f002 fb34 	bl	16ab4 <__ssprint_r>
   1444c:	2800      	cmp	r0, #0
   1444e:	f47f ab14 	bne.w	13a7a <_svfprintf_r+0x8ca>
   14452:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14454:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14458:	f7ff b829 	b.w	134ae <_svfprintf_r+0x2fe>
   1445c:	aa24      	add	r2, sp, #144	; 0x90
   1445e:	4658      	mov	r0, fp
   14460:	9105      	str	r1, [sp, #20]
   14462:	f002 fb27 	bl	16ab4 <__ssprint_r>
   14466:	2800      	cmp	r0, #0
   14468:	f47f ab07 	bne.w	13a7a <_svfprintf_r+0x8ca>
   1446c:	f896 c000 	ldrb.w	ip, [r6]
   14470:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14472:	9905      	ldr	r1, [sp, #20]
   14474:	a827      	add	r0, sp, #156	; 0x9c
   14476:	e67d      	b.n	14174 <_svfprintf_r+0xfc4>
   14478:	2b01      	cmp	r3, #1
   1447a:	f8cd 8008 	str.w	r8, [sp, #8]
   1447e:	f47f a9f3 	bne.w	13868 <_svfprintf_r+0x6b8>
   14482:	f7ff bb93 	b.w	13bac <_svfprintf_r+0x9fc>
   14486:	9b08      	ldr	r3, [sp, #32]
   14488:	9904      	ldr	r1, [sp, #16]
   1448a:	f853 2b04 	ldr.w	r2, [r3], #4
   1448e:	464c      	mov	r4, r9
   14490:	6011      	str	r1, [r2, #0]
   14492:	9308      	str	r3, [sp, #32]
   14494:	f7fe bebe 	b.w	13214 <_svfprintf_r+0x64>
   14498:	3301      	adds	r3, #1
   1449a:	4965      	ldr	r1, [pc, #404]	; (14630 <_svfprintf_r+0x1480>)
   1449c:	f8ca 4004 	str.w	r4, [sl, #4]
   144a0:	4422      	add	r2, r4
   144a2:	2b07      	cmp	r3, #7
   144a4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   144a8:	f8ca 1000 	str.w	r1, [sl]
   144ac:	f77f ab22 	ble.w	13af4 <_svfprintf_r+0x944>
   144b0:	e47b      	b.n	13daa <_svfprintf_r+0xbfa>
   144b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   144b4:	9812      	ldr	r0, [sp, #72]	; 0x48
   144b6:	441a      	add	r2, r3
   144b8:	e9ca 0300 	strd	r0, r3, [sl]
   144bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   144be:	9226      	str	r2, [sp, #152]	; 0x98
   144c0:	3301      	adds	r3, #1
   144c2:	2b07      	cmp	r3, #7
   144c4:	9325      	str	r3, [sp, #148]	; 0x94
   144c6:	f300 81a9 	bgt.w	1481c <_svfprintf_r+0x166c>
   144ca:	f10a 0a08 	add.w	sl, sl, #8
   144ce:	2900      	cmp	r1, #0
   144d0:	f6bf af54 	bge.w	1437c <_svfprintf_r+0x11cc>
   144d4:	424d      	negs	r5, r1
   144d6:	3110      	adds	r1, #16
   144d8:	f280 830f 	bge.w	14afa <_svfprintf_r+0x194a>
   144dc:	ee1b 1a10 	vmov	r1, s22
   144e0:	2610      	movs	r6, #16
   144e2:	e005      	b.n	144f0 <_svfprintf_r+0x1340>
   144e4:	f10a 0a08 	add.w	sl, sl, #8
   144e8:	3d10      	subs	r5, #16
   144ea:	2d10      	cmp	r5, #16
   144ec:	f340 8305 	ble.w	14afa <_svfprintf_r+0x194a>
   144f0:	3301      	adds	r3, #1
   144f2:	484f      	ldr	r0, [pc, #316]	; (14630 <_svfprintf_r+0x1480>)
   144f4:	3210      	adds	r2, #16
   144f6:	2b07      	cmp	r3, #7
   144f8:	e9ca 0600 	strd	r0, r6, [sl]
   144fc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14500:	ddf0      	ble.n	144e4 <_svfprintf_r+0x1334>
   14502:	aa24      	add	r2, sp, #144	; 0x90
   14504:	4658      	mov	r0, fp
   14506:	9103      	str	r1, [sp, #12]
   14508:	f002 fad4 	bl	16ab4 <__ssprint_r>
   1450c:	2800      	cmp	r0, #0
   1450e:	f47f aab4 	bne.w	13a7a <_svfprintf_r+0x8ca>
   14512:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14516:	9903      	ldr	r1, [sp, #12]
   14518:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1451c:	e7e4      	b.n	144e8 <_svfprintf_r+0x1338>
   1451e:	9b08      	ldr	r3, [sp, #32]
   14520:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   14524:	bf1a      	itte	ne
   14526:	4611      	movne	r1, r2
   14528:	f853 2b04 	ldrne.w	r2, [r3], #4
   1452c:	f853 2b04 	ldreq.w	r2, [r3], #4
   14530:	9308      	str	r3, [sp, #32]
   14532:	bf18      	it	ne
   14534:	b2d2      	uxtbne	r2, r2
   14536:	f7ff b945 	b.w	137c4 <_svfprintf_r+0x614>
   1453a:	9b02      	ldr	r3, [sp, #8]
   1453c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   14540:	9b08      	ldr	r3, [sp, #32]
   14542:	bf1a      	itte	ne
   14544:	4611      	movne	r1, r2
   14546:	f853 2b04 	ldrne.w	r2, [r3], #4
   1454a:	f853 2b04 	ldreq.w	r2, [r3], #4
   1454e:	9308      	str	r3, [sp, #32]
   14550:	bf18      	it	ne
   14552:	b2d2      	uxtbne	r2, r2
   14554:	2301      	movs	r3, #1
   14556:	f7ff b8d0 	b.w	136fa <_svfprintf_r+0x54a>
   1455a:	9b08      	ldr	r3, [sp, #32]
   1455c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   14560:	bf1a      	itte	ne
   14562:	4611      	movne	r1, r2
   14564:	f853 2b04 	ldrne.w	r2, [r3], #4
   14568:	f853 2b04 	ldreq.w	r2, [r3], #4
   1456c:	9308      	str	r3, [sp, #32]
   1456e:	bf18      	it	ne
   14570:	b2d2      	uxtbne	r2, r2
   14572:	e54e      	b.n	14012 <_svfprintf_r+0xe62>
   14574:	468a      	mov	sl, r1
   14576:	3301      	adds	r3, #1
   14578:	492d      	ldr	r1, [pc, #180]	; (14630 <_svfprintf_r+0x1480>)
   1457a:	f8ca 5004 	str.w	r5, [sl, #4]
   1457e:	442a      	add	r2, r5
   14580:	2b07      	cmp	r3, #7
   14582:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14586:	f8ca 1000 	str.w	r1, [sl]
   1458a:	f300 8139 	bgt.w	14800 <_svfprintf_r+0x1650>
   1458e:	f10a 0a08 	add.w	sl, sl, #8
   14592:	f7ff bb8c 	b.w	13cae <_svfprintf_r+0xafe>
   14596:	2300      	movs	r3, #0
   14598:	4619      	mov	r1, r3
   1459a:	9600      	str	r6, [sp, #0]
   1459c:	aa1d      	add	r2, sp, #116	; 0x74
   1459e:	4658      	mov	r0, fp
   145a0:	f001 fac4 	bl	15b2c <_wcsrtombs_r>
   145a4:	4603      	mov	r3, r0
   145a6:	3301      	adds	r3, #1
   145a8:	9005      	str	r0, [sp, #20]
   145aa:	f000 82f1 	beq.w	14b90 <_svfprintf_r+0x19e0>
   145ae:	941d      	str	r4, [sp, #116]	; 0x74
   145b0:	9b05      	ldr	r3, [sp, #20]
   145b2:	2b00      	cmp	r3, #0
   145b4:	d04e      	beq.n	14654 <_svfprintf_r+0x14a4>
   145b6:	2b63      	cmp	r3, #99	; 0x63
   145b8:	f300 8118 	bgt.w	147ec <_svfprintf_r+0x163c>
   145bc:	2300      	movs	r3, #0
   145be:	9307      	str	r3, [sp, #28]
   145c0:	ac37      	add	r4, sp, #220	; 0xdc
   145c2:	2208      	movs	r2, #8
   145c4:	2100      	movs	r1, #0
   145c6:	4630      	mov	r0, r6
   145c8:	f7fd fc10 	bl	11dec <memset>
   145cc:	9d05      	ldr	r5, [sp, #20]
   145ce:	9600      	str	r6, [sp, #0]
   145d0:	462b      	mov	r3, r5
   145d2:	aa1d      	add	r2, sp, #116	; 0x74
   145d4:	4621      	mov	r1, r4
   145d6:	4658      	mov	r0, fp
   145d8:	f001 faa8 	bl	15b2c <_wcsrtombs_r>
   145dc:	4285      	cmp	r5, r0
   145de:	f040 837c 	bne.w	14cda <_svfprintf_r+0x1b2a>
   145e2:	9a05      	ldr	r2, [sp, #20]
   145e4:	2300      	movs	r3, #0
   145e6:	54a3      	strb	r3, [r4, r2]
   145e8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   145ec:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   145f0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   145f4:	9303      	str	r3, [sp, #12]
   145f6:	9202      	str	r2, [sp, #8]
   145f8:	930f      	str	r3, [sp, #60]	; 0x3c
   145fa:	f7fe bfba 	b.w	13572 <_svfprintf_r+0x3c2>
   145fe:	212d      	movs	r1, #45	; 0x2d
   14600:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   14604:	f7fe bfa4 	b.w	13550 <_svfprintf_r+0x3a0>
   14608:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1460a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1460c:	ebab 0b03 	sub.w	fp, fp, r3
   14610:	461a      	mov	r2, r3
   14612:	4658      	mov	r0, fp
   14614:	f7fd fc82 	bl	11f1c <strncpy>
   14618:	f89a 2001 	ldrb.w	r2, [sl, #1]
   1461c:	4b05      	ldr	r3, [pc, #20]	; (14634 <_svfprintf_r+0x1484>)
   1461e:	b10a      	cbz	r2, 14624 <_svfprintf_r+0x1474>
   14620:	f10a 0a01 	add.w	sl, sl, #1
   14624:	f04f 0c00 	mov.w	ip, #0
   14628:	e628      	b.n	1427c <_svfprintf_r+0x10cc>
   1462a:	bf00      	nop
   1462c:	200019f0 	.word	0x200019f0
   14630:	200028e0 	.word	0x200028e0
   14634:	cccccccd 	.word	0xcccccccd
   14638:	ee1b 1a10 	vmov	r1, s22
   1463c:	aa24      	add	r2, sp, #144	; 0x90
   1463e:	4658      	mov	r0, fp
   14640:	f002 fa38 	bl	16ab4 <__ssprint_r>
   14644:	2800      	cmp	r0, #0
   14646:	f47f aa18 	bne.w	13a7a <_svfprintf_r+0x8ca>
   1464a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1464c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1464e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14652:	e67c      	b.n	1434e <_svfprintf_r+0x119e>
   14654:	9b05      	ldr	r3, [sp, #20]
   14656:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1465a:	930f      	str	r3, [sp, #60]	; 0x3c
   1465c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   14660:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14664:	9307      	str	r3, [sp, #28]
   14666:	f7fe bf84 	b.w	13572 <_svfprintf_r+0x3c2>
   1466a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1466c:	9805      	ldr	r0, [sp, #20]
   1466e:	1865      	adds	r5, r4, r1
   14670:	1a2d      	subs	r5, r5, r0
   14672:	1acc      	subs	r4, r1, r3
   14674:	42a5      	cmp	r5, r4
   14676:	bfa8      	it	ge
   14678:	4625      	movge	r5, r4
   1467a:	f7ff bb4d 	b.w	13d18 <_svfprintf_r+0xb68>
   1467e:	9b08      	ldr	r3, [sp, #32]
   14680:	9904      	ldr	r1, [sp, #16]
   14682:	f853 2b04 	ldr.w	r2, [r3], #4
   14686:	9308      	str	r3, [sp, #32]
   14688:	8011      	strh	r1, [r2, #0]
   1468a:	464c      	mov	r4, r9
   1468c:	f7fe bdc2 	b.w	13214 <_svfprintf_r+0x64>
   14690:	f913 2b04 	ldrsb.w	r2, [r3], #4
   14694:	9308      	str	r3, [sp, #32]
   14696:	17d1      	asrs	r1, r2, #31
   14698:	460b      	mov	r3, r1
   1469a:	f7fe bfdb 	b.w	13654 <_svfprintf_r+0x4a4>
   1469e:	9a03      	ldr	r2, [sp, #12]
   146a0:	2102      	movs	r1, #2
   146a2:	ab22      	add	r3, sp, #136	; 0x88
   146a4:	9301      	str	r3, [sp, #4]
   146a6:	ab1d      	add	r3, sp, #116	; 0x74
   146a8:	9300      	str	r3, [sp, #0]
   146aa:	4658      	mov	r0, fp
   146ac:	ab1b      	add	r3, sp, #108	; 0x6c
   146ae:	eeb0 0b4a 	vmov.f64	d0, d10
   146b2:	9202      	str	r2, [sp, #8]
   146b4:	f001 fb74 	bl	15da0 <_dtoa_r>
   146b8:	2d47      	cmp	r5, #71	; 0x47
   146ba:	9a02      	ldr	r2, [sp, #8]
   146bc:	4604      	mov	r4, r0
   146be:	f000 8161 	beq.w	14984 <_svfprintf_r+0x17d4>
   146c2:	2d46      	cmp	r5, #70	; 0x46
   146c4:	4410      	add	r0, r2
   146c6:	d105      	bne.n	146d4 <_svfprintf_r+0x1524>
   146c8:	7823      	ldrb	r3, [r4, #0]
   146ca:	2b30      	cmp	r3, #48	; 0x30
   146cc:	f000 826f 	beq.w	14bae <_svfprintf_r+0x19fe>
   146d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   146d2:	4410      	add	r0, r2
   146d4:	eeb5 ab40 	vcmp.f64	d10, #0.0
   146d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   146dc:	f040 8146 	bne.w	1496c <_svfprintf_r+0x17bc>
   146e0:	4603      	mov	r3, r0
   146e2:	1b1b      	subs	r3, r3, r4
   146e4:	930e      	str	r3, [sp, #56]	; 0x38
   146e6:	2d47      	cmp	r5, #71	; 0x47
   146e8:	f000 8110 	beq.w	1490c <_svfprintf_r+0x175c>
   146ec:	2d46      	cmp	r5, #70	; 0x46
   146ee:	f000 81b5 	beq.w	14a5c <_svfprintf_r+0x18ac>
   146f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   146f4:	930c      	str	r3, [sp, #48]	; 0x30
   146f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   146f8:	2d41      	cmp	r5, #65	; 0x41
   146fa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   146fe:	931b      	str	r3, [sp, #108]	; 0x6c
   14700:	f000 81e5 	beq.w	14ace <_svfprintf_r+0x191e>
   14704:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   14708:	2100      	movs	r1, #0
   1470a:	2b00      	cmp	r3, #0
   1470c:	bfb8      	it	lt
   1470e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   14710:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   14714:	bfba      	itte	lt
   14716:	f1c3 0301 	rsblt	r3, r3, #1
   1471a:	222d      	movlt	r2, #45	; 0x2d
   1471c:	222b      	movge	r2, #43	; 0x2b
   1471e:	2b09      	cmp	r3, #9
   14720:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   14724:	f340 81da 	ble.w	14adc <_svfprintf_r+0x192c>
   14728:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   1472c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 14b4c <_svfprintf_r+0x199c>
   14730:	462a      	mov	r2, r5
   14732:	4610      	mov	r0, r2
   14734:	fb8c 2103 	smull	r2, r1, ip, r3
   14738:	17da      	asrs	r2, r3, #31
   1473a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   1473e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   14742:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   14746:	3130      	adds	r1, #48	; 0x30
   14748:	f800 1c01 	strb.w	r1, [r0, #-1]
   1474c:	4619      	mov	r1, r3
   1474e:	2963      	cmp	r1, #99	; 0x63
   14750:	4613      	mov	r3, r2
   14752:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   14756:	dcec      	bgt.n	14732 <_svfprintf_r+0x1582>
   14758:	3330      	adds	r3, #48	; 0x30
   1475a:	b2d9      	uxtb	r1, r3
   1475c:	1e83      	subs	r3, r0, #2
   1475e:	429d      	cmp	r5, r3
   14760:	f802 1c01 	strb.w	r1, [r2, #-1]
   14764:	f240 828b 	bls.w	14c7e <_svfprintf_r+0x1ace>
   14768:	4613      	mov	r3, r2
   1476a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   1476e:	e001      	b.n	14774 <_svfprintf_r+0x15c4>
   14770:	f813 1b01 	ldrb.w	r1, [r3], #1
   14774:	f802 1b01 	strb.w	r1, [r2], #1
   14778:	429d      	cmp	r5, r3
   1477a:	d1f9      	bne.n	14770 <_svfprintf_r+0x15c0>
   1477c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   14780:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   14784:	1a1b      	subs	r3, r3, r0
   14786:	4413      	add	r3, r2
   14788:	aa1e      	add	r2, sp, #120	; 0x78
   1478a:	1a9b      	subs	r3, r3, r2
   1478c:	9314      	str	r3, [sp, #80]	; 0x50
   1478e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14790:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14792:	2b01      	cmp	r3, #1
   14794:	441a      	add	r2, r3
   14796:	9205      	str	r2, [sp, #20]
   14798:	f340 8203 	ble.w	14ba2 <_svfprintf_r+0x19f2>
   1479c:	9b05      	ldr	r3, [sp, #20]
   1479e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   147a0:	4413      	add	r3, r2
   147a2:	9305      	str	r3, [sp, #20]
   147a4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   147a8:	9a05      	ldr	r2, [sp, #20]
   147aa:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   147ae:	2300      	movs	r3, #0
   147b0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   147b4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   147b8:	930f      	str	r3, [sp, #60]	; 0x3c
   147ba:	9202      	str	r2, [sp, #8]
   147bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   147be:	2b00      	cmp	r3, #0
   147c0:	f040 80b1 	bne.w	14926 <_svfprintf_r+0x1776>
   147c4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   147c8:	9303      	str	r3, [sp, #12]
   147ca:	f7fe bed2 	b.w	13572 <_svfprintf_r+0x3c2>
   147ce:	4620      	mov	r0, r4
   147d0:	f7fd feb6 	bl	12540 <strlen>
   147d4:	4602      	mov	r2, r0
   147d6:	9005      	str	r0, [sp, #20]
   147d8:	f7fe bf20 	b.w	1361c <_svfprintf_r+0x46c>
   147dc:	ee1b 1a10 	vmov	r1, s22
   147e0:	aa24      	add	r2, sp, #144	; 0x90
   147e2:	4658      	mov	r0, fp
   147e4:	f002 f966 	bl	16ab4 <__ssprint_r>
   147e8:	f7fe bded 	b.w	133c6 <_svfprintf_r+0x216>
   147ec:	1c59      	adds	r1, r3, #1
   147ee:	4658      	mov	r0, fp
   147f0:	f7fb fbb8 	bl	ff64 <_malloc_r>
   147f4:	4604      	mov	r4, r0
   147f6:	2800      	cmp	r0, #0
   147f8:	f000 81ca 	beq.w	14b90 <_svfprintf_r+0x19e0>
   147fc:	9007      	str	r0, [sp, #28]
   147fe:	e6e0      	b.n	145c2 <_svfprintf_r+0x1412>
   14800:	ee1b 1a10 	vmov	r1, s22
   14804:	aa24      	add	r2, sp, #144	; 0x90
   14806:	4658      	mov	r0, fp
   14808:	f002 f954 	bl	16ab4 <__ssprint_r>
   1480c:	2800      	cmp	r0, #0
   1480e:	f47f a934 	bne.w	13a7a <_svfprintf_r+0x8ca>
   14812:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14814:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14818:	f7ff ba49 	b.w	13cae <_svfprintf_r+0xafe>
   1481c:	ee1b 1a10 	vmov	r1, s22
   14820:	aa24      	add	r2, sp, #144	; 0x90
   14822:	4658      	mov	r0, fp
   14824:	f002 f946 	bl	16ab4 <__ssprint_r>
   14828:	2800      	cmp	r0, #0
   1482a:	f47f a926 	bne.w	13a7a <_svfprintf_r+0x8ca>
   1482e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14832:	991b      	ldr	r1, [sp, #108]	; 0x6c
   14834:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14838:	e649      	b.n	144ce <_svfprintf_r+0x131e>
   1483a:	2306      	movs	r3, #6
   1483c:	9303      	str	r3, [sp, #12]
   1483e:	f7ff bb83 	b.w	13f48 <_svfprintf_r+0xd98>
   14842:	9b03      	ldr	r3, [sp, #12]
   14844:	2102      	movs	r1, #2
   14846:	1c5a      	adds	r2, r3, #1
   14848:	e72b      	b.n	146a2 <_svfprintf_r+0x14f2>
   1484a:	9a03      	ldr	r2, [sp, #12]
   1484c:	2103      	movs	r1, #3
   1484e:	e728      	b.n	146a2 <_svfprintf_r+0x14f2>
   14850:	a81b      	add	r0, sp, #108	; 0x6c
   14852:	eeb0 0b4a 	vmov.f64	d0, d10
   14856:	f001 f977 	bl	15b48 <frexp>
   1485a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   1485e:	ee20 0b07 	vmul.f64	d0, d0, d7
   14862:	eeb5 0b40 	vcmp.f64	d0, #0.0
   14866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1486a:	d101      	bne.n	14870 <_svfprintf_r+0x16c0>
   1486c:	2301      	movs	r3, #1
   1486e:	931b      	str	r3, [sp, #108]	; 0x6c
   14870:	48b3      	ldr	r0, [pc, #716]	; (14b40 <_svfprintf_r+0x1990>)
   14872:	9b03      	ldr	r3, [sp, #12]
   14874:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   14878:	3b01      	subs	r3, #1
   1487a:	4622      	mov	r2, r4
   1487c:	e004      	b.n	14888 <_svfprintf_r+0x16d8>
   1487e:	eeb5 0b40 	vcmp.f64	d0, #0.0
   14882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14886:	d013      	beq.n	148b0 <_svfprintf_r+0x1700>
   14888:	ee20 0b05 	vmul.f64	d0, d0, d5
   1488c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   14890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   14894:	ee17 1a90 	vmov	r1, s15
   14898:	5c41      	ldrb	r1, [r0, r1]
   1489a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   1489e:	4694      	mov	ip, r2
   148a0:	ee30 0b46 	vsub.f64	d0, d0, d6
   148a4:	f802 1b01 	strb.w	r1, [r2], #1
   148a8:	4619      	mov	r1, r3
   148aa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   148ae:	d1e6      	bne.n	1487e <_svfprintf_r+0x16ce>
   148b0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   148b4:	eeb4 0bc6 	vcmpe.f64	d0, d6
   148b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   148bc:	f300 8148 	bgt.w	14b50 <_svfprintf_r+0x19a0>
   148c0:	eeb4 0b46 	vcmp.f64	d0, d6
   148c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   148c8:	d104      	bne.n	148d4 <_svfprintf_r+0x1724>
   148ca:	ee17 3a90 	vmov	r3, s15
   148ce:	07db      	lsls	r3, r3, #31
   148d0:	f100 813e 	bmi.w	14b50 <_svfprintf_r+0x19a0>
   148d4:	2900      	cmp	r1, #0
   148d6:	db06      	blt.n	148e6 <_svfprintf_r+0x1736>
   148d8:	1c4b      	adds	r3, r1, #1
   148da:	4413      	add	r3, r2
   148dc:	2130      	movs	r1, #48	; 0x30
   148de:	f802 1b01 	strb.w	r1, [r2], #1
   148e2:	4293      	cmp	r3, r2
   148e4:	d1fb      	bne.n	148de <_svfprintf_r+0x172e>
   148e6:	1b13      	subs	r3, r2, r4
   148e8:	930e      	str	r3, [sp, #56]	; 0x38
   148ea:	e6fc      	b.n	146e6 <_svfprintf_r+0x1536>
   148ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   148ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   148f0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   148f4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   148f8:	9613      	str	r6, [sp, #76]	; 0x4c
   148fa:	18e3      	adds	r3, r4, r3
   148fc:	429d      	cmp	r5, r3
   148fe:	4629      	mov	r1, r5
   14900:	bf28      	it	cs
   14902:	4619      	movcs	r1, r3
   14904:	4682      	mov	sl, r0
   14906:	9105      	str	r1, [sp, #20]
   14908:	f7ff b9d8 	b.w	13cbc <_svfprintf_r+0xb0c>
   1490c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1490e:	930c      	str	r3, [sp, #48]	; 0x30
   14910:	1cda      	adds	r2, r3, #3
   14912:	db02      	blt.n	1491a <_svfprintf_r+0x176a>
   14914:	9a03      	ldr	r2, [sp, #12]
   14916:	4293      	cmp	r3, r2
   14918:	dd0c      	ble.n	14934 <_svfprintf_r+0x1784>
   1491a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1491c:	3b02      	subs	r3, #2
   1491e:	930b      	str	r3, [sp, #44]	; 0x2c
   14920:	f023 0520 	bic.w	r5, r3, #32
   14924:	e6e7      	b.n	146f6 <_svfprintf_r+0x1546>
   14926:	212d      	movs	r1, #45	; 0x2d
   14928:	2300      	movs	r3, #0
   1492a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   1492e:	9303      	str	r3, [sp, #12]
   14930:	f7fe be22 	b.w	13578 <_svfprintf_r+0x3c8>
   14934:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14936:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14938:	4293      	cmp	r3, r2
   1493a:	f2c0 80bd 	blt.w	14ab8 <_svfprintf_r+0x1908>
   1493e:	07f0      	lsls	r0, r6, #31
   14940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14942:	f140 8132 	bpl.w	14baa <_svfprintf_r+0x19fa>
   14946:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14948:	4413      	add	r3, r2
   1494a:	9305      	str	r3, [sp, #20]
   1494c:	0571      	lsls	r1, r6, #21
   1494e:	d503      	bpl.n	14958 <_svfprintf_r+0x17a8>
   14950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14952:	2b00      	cmp	r3, #0
   14954:	f300 8135 	bgt.w	14bc2 <_svfprintf_r+0x1a12>
   14958:	9b05      	ldr	r3, [sp, #20]
   1495a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1495e:	9302      	str	r3, [sp, #8]
   14960:	2367      	movs	r3, #103	; 0x67
   14962:	930b      	str	r3, [sp, #44]	; 0x2c
   14964:	2300      	movs	r3, #0
   14966:	930f      	str	r3, [sp, #60]	; 0x3c
   14968:	930d      	str	r3, [sp, #52]	; 0x34
   1496a:	e727      	b.n	147bc <_svfprintf_r+0x160c>
   1496c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1496e:	4283      	cmp	r3, r0
   14970:	f4bf aeb7 	bcs.w	146e2 <_svfprintf_r+0x1532>
   14974:	2130      	movs	r1, #48	; 0x30
   14976:	1c5a      	adds	r2, r3, #1
   14978:	9222      	str	r2, [sp, #136]	; 0x88
   1497a:	7019      	strb	r1, [r3, #0]
   1497c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1497e:	4298      	cmp	r0, r3
   14980:	d8f9      	bhi.n	14976 <_svfprintf_r+0x17c6>
   14982:	e6ae      	b.n	146e2 <_svfprintf_r+0x1532>
   14984:	07f3      	lsls	r3, r6, #31
   14986:	f100 80a7 	bmi.w	14ad8 <_svfprintf_r+0x1928>
   1498a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1498c:	e6a9      	b.n	146e2 <_svfprintf_r+0x1532>
   1498e:	aa24      	add	r2, sp, #144	; 0x90
   14990:	4658      	mov	r0, fp
   14992:	9105      	str	r1, [sp, #20]
   14994:	f002 f88e 	bl	16ab4 <__ssprint_r>
   14998:	2800      	cmp	r0, #0
   1499a:	f47f a86e 	bne.w	13a7a <_svfprintf_r+0x8ca>
   1499e:	f896 c000 	ldrb.w	ip, [r6]
   149a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   149a4:	9905      	ldr	r1, [sp, #20]
   149a6:	a827      	add	r0, sp, #156	; 0x9c
   149a8:	4465      	add	r5, ip
   149aa:	f7ff bbec 	b.w	14186 <_svfprintf_r+0xfd6>
   149ae:	ee1b 1a10 	vmov	r1, s22
   149b2:	aa24      	add	r2, sp, #144	; 0x90
   149b4:	4658      	mov	r0, fp
   149b6:	f002 f87d 	bl	16ab4 <__ssprint_r>
   149ba:	2800      	cmp	r0, #0
   149bc:	f47f a85d 	bne.w	13a7a <_svfprintf_r+0x8ca>
   149c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   149c2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   149c6:	f7ff b96b 	b.w	13ca0 <_svfprintf_r+0xaf0>
   149ca:	2378      	movs	r3, #120	; 0x78
   149cc:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   149d0:	2330      	movs	r3, #48	; 0x30
   149d2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   149d6:	9b03      	ldr	r3, [sp, #12]
   149d8:	2b63      	cmp	r3, #99	; 0x63
   149da:	f048 0602 	orr.w	r6, r8, #2
   149de:	f300 80a6 	bgt.w	14b2e <_svfprintf_r+0x197e>
   149e2:	2300      	movs	r3, #0
   149e4:	9307      	str	r3, [sp, #28]
   149e6:	ac37      	add	r4, sp, #220	; 0xdc
   149e8:	ee18 3a90 	vmov	r3, s17
   149ec:	2b00      	cmp	r3, #0
   149ee:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   149f2:	db2b      	blt.n	14a4c <_svfprintf_r+0x189c>
   149f4:	eeb0 ab48 	vmov.f64	d10, d8
   149f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   149fa:	f023 0520 	bic.w	r5, r3, #32
   149fe:	2300      	movs	r3, #0
   14a00:	9309      	str	r3, [sp, #36]	; 0x24
   14a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14a04:	2b61      	cmp	r3, #97	; 0x61
   14a06:	f47f aaad 	bne.w	13f64 <_svfprintf_r+0xdb4>
   14a0a:	eeb0 0b4a 	vmov.f64	d0, d10
   14a0e:	a81b      	add	r0, sp, #108	; 0x6c
   14a10:	f001 f89a 	bl	15b48 <frexp>
   14a14:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   14a18:	ee20 0b07 	vmul.f64	d0, d0, d7
   14a1c:	eeb5 0b40 	vcmp.f64	d0, #0.0
   14a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14a24:	d101      	bne.n	14a2a <_svfprintf_r+0x187a>
   14a26:	2301      	movs	r3, #1
   14a28:	931b      	str	r3, [sp, #108]	; 0x6c
   14a2a:	4846      	ldr	r0, [pc, #280]	; (14b44 <_svfprintf_r+0x1994>)
   14a2c:	e721      	b.n	14872 <_svfprintf_r+0x16c2>
   14a2e:	ee1b 1a10 	vmov	r1, s22
   14a32:	aa24      	add	r2, sp, #144	; 0x90
   14a34:	4658      	mov	r0, fp
   14a36:	f002 f83d 	bl	16ab4 <__ssprint_r>
   14a3a:	2800      	cmp	r0, #0
   14a3c:	f47f a81d 	bne.w	13a7a <_svfprintf_r+0x8ca>
   14a40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14a42:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14a44:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14a48:	f7ff b94e 	b.w	13ce8 <_svfprintf_r+0xb38>
   14a4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14a4e:	f023 0520 	bic.w	r5, r3, #32
   14a52:	232d      	movs	r3, #45	; 0x2d
   14a54:	9309      	str	r3, [sp, #36]	; 0x24
   14a56:	eeb1 ab48 	vneg.f64	d10, d8
   14a5a:	e7d2      	b.n	14a02 <_svfprintf_r+0x1852>
   14a5c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14a5e:	920c      	str	r2, [sp, #48]	; 0x30
   14a60:	2a00      	cmp	r2, #0
   14a62:	f006 0301 	and.w	r3, r6, #1
   14a66:	f340 810d 	ble.w	14c84 <_svfprintf_r+0x1ad4>
   14a6a:	9903      	ldr	r1, [sp, #12]
   14a6c:	430b      	orrs	r3, r1
   14a6e:	f040 80cf 	bne.w	14c10 <_svfprintf_r+0x1a60>
   14a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14a74:	9305      	str	r3, [sp, #20]
   14a76:	2366      	movs	r3, #102	; 0x66
   14a78:	930b      	str	r3, [sp, #44]	; 0x2c
   14a7a:	0572      	lsls	r2, r6, #21
   14a7c:	f100 80a3 	bmi.w	14bc6 <_svfprintf_r+0x1a16>
   14a80:	9b05      	ldr	r3, [sp, #20]
   14a82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14a86:	9302      	str	r3, [sp, #8]
   14a88:	e76c      	b.n	14964 <_svfprintf_r+0x17b4>
   14a8a:	ee1b 1a10 	vmov	r1, s22
   14a8e:	aa24      	add	r2, sp, #144	; 0x90
   14a90:	4658      	mov	r0, fp
   14a92:	f002 f80f 	bl	16ab4 <__ssprint_r>
   14a96:	2800      	cmp	r0, #0
   14a98:	f47e afef 	bne.w	13a7a <_svfprintf_r+0x8ca>
   14a9c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   14a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14aa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14aa2:	1b1c      	subs	r4, r3, r4
   14aa4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14aa8:	f7ff b936 	b.w	13d18 <_svfprintf_r+0xb68>
   14aac:	2358      	movs	r3, #88	; 0x58
   14aae:	e78d      	b.n	149cc <_svfprintf_r+0x181c>
   14ab0:	2200      	movs	r2, #0
   14ab2:	9203      	str	r2, [sp, #12]
   14ab4:	f7fe bbda 	b.w	1326c <_svfprintf_r+0xbc>
   14ab8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14aba:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14abc:	189a      	adds	r2, r3, r2
   14abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14ac0:	9205      	str	r2, [sp, #20]
   14ac2:	2b00      	cmp	r3, #0
   14ac4:	f340 80ab 	ble.w	14c1e <_svfprintf_r+0x1a6e>
   14ac8:	2367      	movs	r3, #103	; 0x67
   14aca:	930b      	str	r3, [sp, #44]	; 0x2c
   14acc:	e7d5      	b.n	14a7a <_svfprintf_r+0x18ca>
   14ace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14ad0:	320f      	adds	r2, #15
   14ad2:	b2d2      	uxtb	r2, r2
   14ad4:	2101      	movs	r1, #1
   14ad6:	e618      	b.n	1470a <_svfprintf_r+0x155a>
   14ad8:	18a0      	adds	r0, r4, r2
   14ada:	e5fb      	b.n	146d4 <_svfprintf_r+0x1524>
   14adc:	2900      	cmp	r1, #0
   14ade:	f040 80a8 	bne.w	14c32 <_svfprintf_r+0x1a82>
   14ae2:	2230      	movs	r2, #48	; 0x30
   14ae4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   14ae8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   14aec:	3330      	adds	r3, #48	; 0x30
   14aee:	f802 3b01 	strb.w	r3, [r2], #1
   14af2:	ab1e      	add	r3, sp, #120	; 0x78
   14af4:	1ad3      	subs	r3, r2, r3
   14af6:	9314      	str	r3, [sp, #80]	; 0x50
   14af8:	e649      	b.n	1478e <_svfprintf_r+0x15de>
   14afa:	3301      	adds	r3, #1
   14afc:	4912      	ldr	r1, [pc, #72]	; (14b48 <_svfprintf_r+0x1998>)
   14afe:	f8ca 5004 	str.w	r5, [sl, #4]
   14b02:	442a      	add	r2, r5
   14b04:	2b07      	cmp	r3, #7
   14b06:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14b0a:	f8ca 1000 	str.w	r1, [sl]
   14b0e:	f77f ac33 	ble.w	14378 <_svfprintf_r+0x11c8>
   14b12:	ee1b 1a10 	vmov	r1, s22
   14b16:	aa24      	add	r2, sp, #144	; 0x90
   14b18:	4658      	mov	r0, fp
   14b1a:	f001 ffcb 	bl	16ab4 <__ssprint_r>
   14b1e:	2800      	cmp	r0, #0
   14b20:	f47e afab 	bne.w	13a7a <_svfprintf_r+0x8ca>
   14b24:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14b28:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14b2c:	e426      	b.n	1437c <_svfprintf_r+0x11cc>
   14b2e:	1c59      	adds	r1, r3, #1
   14b30:	4658      	mov	r0, fp
   14b32:	f7fb fa17 	bl	ff64 <_malloc_r>
   14b36:	4604      	mov	r4, r0
   14b38:	b350      	cbz	r0, 14b90 <_svfprintf_r+0x19e0>
   14b3a:	9007      	str	r0, [sp, #28]
   14b3c:	e754      	b.n	149e8 <_svfprintf_r+0x1838>
   14b3e:	bf00      	nop
   14b40:	200019d4 	.word	0x200019d4
   14b44:	200019c0 	.word	0x200019c0
   14b48:	200028e0 	.word	0x200028e0
   14b4c:	66666667 	.word	0x66666667
   14b50:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   14b54:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   14b58:	f890 c00f 	ldrb.w	ip, [r0, #15]
   14b5c:	4561      	cmp	r1, ip
   14b5e:	4613      	mov	r3, r2
   14b60:	d10a      	bne.n	14b78 <_svfprintf_r+0x19c8>
   14b62:	f04f 0e30 	mov.w	lr, #48	; 0x30
   14b66:	f803 ec01 	strb.w	lr, [r3, #-1]
   14b6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14b6c:	1e59      	subs	r1, r3, #1
   14b6e:	9122      	str	r1, [sp, #136]	; 0x88
   14b70:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   14b74:	458c      	cmp	ip, r1
   14b76:	d0f6      	beq.n	14b66 <_svfprintf_r+0x19b6>
   14b78:	2939      	cmp	r1, #57	; 0x39
   14b7a:	bf16      	itet	ne
   14b7c:	3101      	addne	r1, #1
   14b7e:	7a81      	ldrbeq	r1, [r0, #10]
   14b80:	b2c9      	uxtbne	r1, r1
   14b82:	f803 1c01 	strb.w	r1, [r3, #-1]
   14b86:	e6ae      	b.n	148e6 <_svfprintf_r+0x1736>
   14b88:	2300      	movs	r3, #0
   14b8a:	4690      	mov	r8, r2
   14b8c:	9307      	str	r3, [sp, #28]
   14b8e:	e760      	b.n	14a52 <_svfprintf_r+0x18a2>
   14b90:	ee1b 2a10 	vmov	r2, s22
   14b94:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   14b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14b9c:	8193      	strh	r3, [r2, #12]
   14b9e:	f7fe bc16 	b.w	133ce <_svfprintf_r+0x21e>
   14ba2:	07f5      	lsls	r5, r6, #31
   14ba4:	f57f adfe 	bpl.w	147a4 <_svfprintf_r+0x15f4>
   14ba8:	e5f8      	b.n	1479c <_svfprintf_r+0x15ec>
   14baa:	9305      	str	r3, [sp, #20]
   14bac:	e6ce      	b.n	1494c <_svfprintf_r+0x179c>
   14bae:	eeb5 ab40 	vcmp.f64	d10, #0.0
   14bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14bb6:	f43f ad8b 	beq.w	146d0 <_svfprintf_r+0x1520>
   14bba:	f1c2 0201 	rsb	r2, r2, #1
   14bbe:	921b      	str	r2, [sp, #108]	; 0x6c
   14bc0:	e587      	b.n	146d2 <_svfprintf_r+0x1522>
   14bc2:	2367      	movs	r3, #103	; 0x67
   14bc4:	930b      	str	r3, [sp, #44]	; 0x2c
   14bc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   14bc8:	780b      	ldrb	r3, [r1, #0]
   14bca:	2bff      	cmp	r3, #255	; 0xff
   14bcc:	d079      	beq.n	14cc2 <_svfprintf_r+0x1b12>
   14bce:	2500      	movs	r5, #0
   14bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14bd2:	4628      	mov	r0, r5
   14bd4:	e003      	b.n	14bde <_svfprintf_r+0x1a2e>
   14bd6:	3001      	adds	r0, #1
   14bd8:	3101      	adds	r1, #1
   14bda:	2bff      	cmp	r3, #255	; 0xff
   14bdc:	d008      	beq.n	14bf0 <_svfprintf_r+0x1a40>
   14bde:	4293      	cmp	r3, r2
   14be0:	da06      	bge.n	14bf0 <_svfprintf_r+0x1a40>
   14be2:	1ad2      	subs	r2, r2, r3
   14be4:	784b      	ldrb	r3, [r1, #1]
   14be6:	2b00      	cmp	r3, #0
   14be8:	d1f5      	bne.n	14bd6 <_svfprintf_r+0x1a26>
   14bea:	780b      	ldrb	r3, [r1, #0]
   14bec:	3501      	adds	r5, #1
   14bee:	e7f4      	b.n	14bda <_svfprintf_r+0x1a2a>
   14bf0:	920c      	str	r2, [sp, #48]	; 0x30
   14bf2:	9113      	str	r1, [sp, #76]	; 0x4c
   14bf4:	900d      	str	r0, [sp, #52]	; 0x34
   14bf6:	950f      	str	r5, [sp, #60]	; 0x3c
   14bf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14bfc:	9916      	ldr	r1, [sp, #88]	; 0x58
   14bfe:	4413      	add	r3, r2
   14c00:	9a05      	ldr	r2, [sp, #20]
   14c02:	fb01 2303 	mla	r3, r1, r3, r2
   14c06:	9305      	str	r3, [sp, #20]
   14c08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14c0c:	9302      	str	r3, [sp, #8]
   14c0e:	e5d5      	b.n	147bc <_svfprintf_r+0x160c>
   14c10:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14c12:	18d3      	adds	r3, r2, r3
   14c14:	4419      	add	r1, r3
   14c16:	2366      	movs	r3, #102	; 0x66
   14c18:	9105      	str	r1, [sp, #20]
   14c1a:	930b      	str	r3, [sp, #44]	; 0x2c
   14c1c:	e72d      	b.n	14a7a <_svfprintf_r+0x18ca>
   14c1e:	f1c3 0301 	rsb	r3, r3, #1
   14c22:	441a      	add	r2, r3
   14c24:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   14c28:	9302      	str	r3, [sp, #8]
   14c2a:	2367      	movs	r3, #103	; 0x67
   14c2c:	9205      	str	r2, [sp, #20]
   14c2e:	930b      	str	r3, [sp, #44]	; 0x2c
   14c30:	e698      	b.n	14964 <_svfprintf_r+0x17b4>
   14c32:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   14c36:	e759      	b.n	14aec <_svfprintf_r+0x193c>
   14c38:	9b03      	ldr	r3, [sp, #12]
   14c3a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   14c3e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   14c42:	9305      	str	r3, [sp, #20]
   14c44:	e4b4      	b.n	145b0 <_svfprintf_r+0x1400>
   14c46:	ee18 3a90 	vmov	r3, s17
   14c4a:	2b00      	cmp	r3, #0
   14c4c:	bfb4      	ite	lt
   14c4e:	212d      	movlt	r1, #45	; 0x2d
   14c50:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   14c54:	4c25      	ldr	r4, [pc, #148]	; (14cec <_svfprintf_r+0x1b3c>)
   14c56:	4b26      	ldr	r3, [pc, #152]	; (14cf0 <_svfprintf_r+0x1b40>)
   14c58:	bfb8      	it	lt
   14c5a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   14c5e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   14c62:	f7fe bc79 	b.w	13558 <_svfprintf_r+0x3a8>
   14c66:	9b03      	ldr	r3, [sp, #12]
   14c68:	9302      	str	r3, [sp, #8]
   14c6a:	9305      	str	r3, [sp, #20]
   14c6c:	2373      	movs	r3, #115	; 0x73
   14c6e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14c72:	9003      	str	r0, [sp, #12]
   14c74:	900f      	str	r0, [sp, #60]	; 0x3c
   14c76:	900d      	str	r0, [sp, #52]	; 0x34
   14c78:	930b      	str	r3, [sp, #44]	; 0x2c
   14c7a:	f7fe bc7a 	b.w	13572 <_svfprintf_r+0x3c2>
   14c7e:	2302      	movs	r3, #2
   14c80:	9314      	str	r3, [sp, #80]	; 0x50
   14c82:	e584      	b.n	1478e <_svfprintf_r+0x15de>
   14c84:	9a03      	ldr	r2, [sp, #12]
   14c86:	4313      	orrs	r3, r2
   14c88:	d105      	bne.n	14c96 <_svfprintf_r+0x1ae6>
   14c8a:	2301      	movs	r3, #1
   14c8c:	2266      	movs	r2, #102	; 0x66
   14c8e:	9302      	str	r3, [sp, #8]
   14c90:	920b      	str	r2, [sp, #44]	; 0x2c
   14c92:	9305      	str	r3, [sp, #20]
   14c94:	e666      	b.n	14964 <_svfprintf_r+0x17b4>
   14c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14c98:	3301      	adds	r3, #1
   14c9a:	441a      	add	r2, r3
   14c9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   14ca0:	9302      	str	r3, [sp, #8]
   14ca2:	2366      	movs	r3, #102	; 0x66
   14ca4:	9205      	str	r2, [sp, #20]
   14ca6:	930b      	str	r3, [sp, #44]	; 0x2c
   14ca8:	e65c      	b.n	14964 <_svfprintf_r+0x17b4>
   14caa:	9a08      	ldr	r2, [sp, #32]
   14cac:	f899 3001 	ldrb.w	r3, [r9, #1]
   14cb0:	4689      	mov	r9, r1
   14cb2:	f852 1b04 	ldr.w	r1, [r2], #4
   14cb6:	9208      	str	r2, [sp, #32]
   14cb8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   14cbc:	9103      	str	r1, [sp, #12]
   14cbe:	f7fe bad3 	b.w	13268 <_svfprintf_r+0xb8>
   14cc2:	2300      	movs	r3, #0
   14cc4:	930f      	str	r3, [sp, #60]	; 0x3c
   14cc6:	930d      	str	r3, [sp, #52]	; 0x34
   14cc8:	e796      	b.n	14bf8 <_svfprintf_r+0x1a48>
   14cca:	230c      	movs	r3, #12
   14ccc:	f8cb 3000 	str.w	r3, [fp]
   14cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14cd4:	9304      	str	r3, [sp, #16]
   14cd6:	f7fe bb81 	b.w	133dc <_svfprintf_r+0x22c>
   14cda:	ee1b 2a10 	vmov	r2, s22
   14cde:	8993      	ldrh	r3, [r2, #12]
   14ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14ce4:	8193      	strh	r3, [r2, #12]
   14ce6:	f7fe bec8 	b.w	13a7a <_svfprintf_r+0x8ca>
   14cea:	bf00      	nop
   14cec:	200019bc 	.word	0x200019bc
   14cf0:	2000129c 	.word	0x2000129c

00014cf4 <_Balloc>:
   14cf4:	6c43      	ldr	r3, [r0, #68]	; 0x44
   14cf6:	b570      	push	{r4, r5, r6, lr}
   14cf8:	4605      	mov	r5, r0
   14cfa:	460c      	mov	r4, r1
   14cfc:	b14b      	cbz	r3, 14d12 <_Balloc+0x1e>
   14cfe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   14d02:	b180      	cbz	r0, 14d26 <_Balloc+0x32>
   14d04:	6802      	ldr	r2, [r0, #0]
   14d06:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   14d0a:	2300      	movs	r3, #0
   14d0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   14d10:	bd70      	pop	{r4, r5, r6, pc}
   14d12:	2221      	movs	r2, #33	; 0x21
   14d14:	2104      	movs	r1, #4
   14d16:	f000 ff73 	bl	15c00 <_calloc_r>
   14d1a:	4603      	mov	r3, r0
   14d1c:	6468      	str	r0, [r5, #68]	; 0x44
   14d1e:	2800      	cmp	r0, #0
   14d20:	d1ed      	bne.n	14cfe <_Balloc+0xa>
   14d22:	2000      	movs	r0, #0
   14d24:	bd70      	pop	{r4, r5, r6, pc}
   14d26:	2101      	movs	r1, #1
   14d28:	fa01 f604 	lsl.w	r6, r1, r4
   14d2c:	1d72      	adds	r2, r6, #5
   14d2e:	0092      	lsls	r2, r2, #2
   14d30:	4628      	mov	r0, r5
   14d32:	f000 ff65 	bl	15c00 <_calloc_r>
   14d36:	2800      	cmp	r0, #0
   14d38:	d0f3      	beq.n	14d22 <_Balloc+0x2e>
   14d3a:	e9c0 4601 	strd	r4, r6, [r0, #4]
   14d3e:	e7e4      	b.n	14d0a <_Balloc+0x16>

00014d40 <_Bfree>:
   14d40:	b131      	cbz	r1, 14d50 <_Bfree+0x10>
   14d42:	6c43      	ldr	r3, [r0, #68]	; 0x44
   14d44:	684a      	ldr	r2, [r1, #4]
   14d46:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   14d4a:	6008      	str	r0, [r1, #0]
   14d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   14d50:	4770      	bx	lr
   14d52:	bf00      	nop

00014d54 <__multadd>:
   14d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d58:	690e      	ldr	r6, [r1, #16]
   14d5a:	4680      	mov	r8, r0
   14d5c:	460f      	mov	r7, r1
   14d5e:	461d      	mov	r5, r3
   14d60:	f101 0e14 	add.w	lr, r1, #20
   14d64:	2000      	movs	r0, #0
   14d66:	f8de 1000 	ldr.w	r1, [lr]
   14d6a:	b28c      	uxth	r4, r1
   14d6c:	fb02 5304 	mla	r3, r2, r4, r5
   14d70:	0c09      	lsrs	r1, r1, #16
   14d72:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   14d76:	fb02 cc01 	mla	ip, r2, r1, ip
   14d7a:	3001      	adds	r0, #1
   14d7c:	b29c      	uxth	r4, r3
   14d7e:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   14d82:	4286      	cmp	r6, r0
   14d84:	f84e 4b04 	str.w	r4, [lr], #4
   14d88:	ea4f 451c 	mov.w	r5, ip, lsr #16
   14d8c:	dceb      	bgt.n	14d66 <__multadd+0x12>
   14d8e:	b13d      	cbz	r5, 14da0 <__multadd+0x4c>
   14d90:	68bb      	ldr	r3, [r7, #8]
   14d92:	42b3      	cmp	r3, r6
   14d94:	dd07      	ble.n	14da6 <__multadd+0x52>
   14d96:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   14d9a:	3601      	adds	r6, #1
   14d9c:	615d      	str	r5, [r3, #20]
   14d9e:	613e      	str	r6, [r7, #16]
   14da0:	4638      	mov	r0, r7
   14da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14da6:	6879      	ldr	r1, [r7, #4]
   14da8:	4640      	mov	r0, r8
   14daa:	3101      	adds	r1, #1
   14dac:	f7ff ffa2 	bl	14cf4 <_Balloc>
   14db0:	4604      	mov	r4, r0
   14db2:	b1b0      	cbz	r0, 14de2 <__multadd+0x8e>
   14db4:	693a      	ldr	r2, [r7, #16]
   14db6:	3202      	adds	r2, #2
   14db8:	f107 010c 	add.w	r1, r7, #12
   14dbc:	0092      	lsls	r2, r2, #2
   14dbe:	300c      	adds	r0, #12
   14dc0:	f7f9 faa8 	bl	e314 <memcpy>
   14dc4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   14dc8:	687a      	ldr	r2, [r7, #4]
   14dca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   14dce:	6039      	str	r1, [r7, #0]
   14dd0:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   14dd4:	4627      	mov	r7, r4
   14dd6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   14dda:	3601      	adds	r6, #1
   14ddc:	615d      	str	r5, [r3, #20]
   14dde:	613e      	str	r6, [r7, #16]
   14de0:	e7de      	b.n	14da0 <__multadd+0x4c>
   14de2:	4b03      	ldr	r3, [pc, #12]	; (14df0 <__multadd+0x9c>)
   14de4:	4803      	ldr	r0, [pc, #12]	; (14df4 <__multadd+0xa0>)
   14de6:	4622      	mov	r2, r4
   14de8:	21ba      	movs	r1, #186	; 0xba
   14dea:	f000 fee9 	bl	15bc0 <__assert_func>
   14dee:	bf00      	nop
   14df0:	2000164c 	.word	0x2000164c
   14df4:	200017cc 	.word	0x200017cc

00014df8 <__s2b>:
   14df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14dfc:	4617      	mov	r7, r2
   14dfe:	4a27      	ldr	r2, [pc, #156]	; (14e9c <__s2b+0xa4>)
   14e00:	461e      	mov	r6, r3
   14e02:	3308      	adds	r3, #8
   14e04:	460c      	mov	r4, r1
   14e06:	2e09      	cmp	r6, #9
   14e08:	fb82 1203 	smull	r1, r2, r2, r3
   14e0c:	ea4f 73e3 	mov.w	r3, r3, asr #31
   14e10:	4605      	mov	r5, r0
   14e12:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   14e16:	dd39      	ble.n	14e8c <__s2b+0x94>
   14e18:	f04f 0c01 	mov.w	ip, #1
   14e1c:	2100      	movs	r1, #0
   14e1e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   14e22:	4563      	cmp	r3, ip
   14e24:	f101 0101 	add.w	r1, r1, #1
   14e28:	dcf9      	bgt.n	14e1e <__s2b+0x26>
   14e2a:	4628      	mov	r0, r5
   14e2c:	f7ff ff62 	bl	14cf4 <_Balloc>
   14e30:	4601      	mov	r1, r0
   14e32:	b368      	cbz	r0, 14e90 <__s2b+0x98>
   14e34:	9b08      	ldr	r3, [sp, #32]
   14e36:	6143      	str	r3, [r0, #20]
   14e38:	2f09      	cmp	r7, #9
   14e3a:	f04f 0301 	mov.w	r3, #1
   14e3e:	6103      	str	r3, [r0, #16]
   14e40:	dc12      	bgt.n	14e68 <__s2b+0x70>
   14e42:	340a      	adds	r4, #10
   14e44:	2709      	movs	r7, #9
   14e46:	42be      	cmp	r6, r7
   14e48:	dd0b      	ble.n	14e62 <__s2b+0x6a>
   14e4a:	1bf2      	subs	r2, r6, r7
   14e4c:	18a6      	adds	r6, r4, r2
   14e4e:	f814 3b01 	ldrb.w	r3, [r4], #1
   14e52:	220a      	movs	r2, #10
   14e54:	3b30      	subs	r3, #48	; 0x30
   14e56:	4628      	mov	r0, r5
   14e58:	f7ff ff7c 	bl	14d54 <__multadd>
   14e5c:	42a6      	cmp	r6, r4
   14e5e:	4601      	mov	r1, r0
   14e60:	d1f5      	bne.n	14e4e <__s2b+0x56>
   14e62:	4608      	mov	r0, r1
   14e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14e68:	f104 0909 	add.w	r9, r4, #9
   14e6c:	46c8      	mov	r8, r9
   14e6e:	443c      	add	r4, r7
   14e70:	f818 3b01 	ldrb.w	r3, [r8], #1
   14e74:	220a      	movs	r2, #10
   14e76:	3b30      	subs	r3, #48	; 0x30
   14e78:	4628      	mov	r0, r5
   14e7a:	f7ff ff6b 	bl	14d54 <__multadd>
   14e7e:	45a0      	cmp	r8, r4
   14e80:	4601      	mov	r1, r0
   14e82:	d1f5      	bne.n	14e70 <__s2b+0x78>
   14e84:	f1a7 0408 	sub.w	r4, r7, #8
   14e88:	444c      	add	r4, r9
   14e8a:	e7dc      	b.n	14e46 <__s2b+0x4e>
   14e8c:	2100      	movs	r1, #0
   14e8e:	e7cc      	b.n	14e2a <__s2b+0x32>
   14e90:	460a      	mov	r2, r1
   14e92:	4b03      	ldr	r3, [pc, #12]	; (14ea0 <__s2b+0xa8>)
   14e94:	4803      	ldr	r0, [pc, #12]	; (14ea4 <__s2b+0xac>)
   14e96:	21d3      	movs	r1, #211	; 0xd3
   14e98:	f000 fe92 	bl	15bc0 <__assert_func>
   14e9c:	38e38e39 	.word	0x38e38e39
   14ea0:	2000164c 	.word	0x2000164c
   14ea4:	200017cc 	.word	0x200017cc

00014ea8 <__hi0bits>:
   14ea8:	0c03      	lsrs	r3, r0, #16
   14eaa:	041b      	lsls	r3, r3, #16
   14eac:	b9d3      	cbnz	r3, 14ee4 <__hi0bits+0x3c>
   14eae:	0400      	lsls	r0, r0, #16
   14eb0:	2310      	movs	r3, #16
   14eb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   14eb6:	bf04      	itt	eq
   14eb8:	0200      	lsleq	r0, r0, #8
   14eba:	3308      	addeq	r3, #8
   14ebc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   14ec0:	bf04      	itt	eq
   14ec2:	0100      	lsleq	r0, r0, #4
   14ec4:	3304      	addeq	r3, #4
   14ec6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   14eca:	bf04      	itt	eq
   14ecc:	0080      	lsleq	r0, r0, #2
   14ece:	3302      	addeq	r3, #2
   14ed0:	2800      	cmp	r0, #0
   14ed2:	db05      	blt.n	14ee0 <__hi0bits+0x38>
   14ed4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   14ed8:	f103 0301 	add.w	r3, r3, #1
   14edc:	bf08      	it	eq
   14ede:	2320      	moveq	r3, #32
   14ee0:	4618      	mov	r0, r3
   14ee2:	4770      	bx	lr
   14ee4:	2300      	movs	r3, #0
   14ee6:	e7e4      	b.n	14eb2 <__hi0bits+0xa>

00014ee8 <__lo0bits>:
   14ee8:	6803      	ldr	r3, [r0, #0]
   14eea:	f013 0207 	ands.w	r2, r3, #7
   14eee:	d008      	beq.n	14f02 <__lo0bits+0x1a>
   14ef0:	07d9      	lsls	r1, r3, #31
   14ef2:	d41f      	bmi.n	14f34 <__lo0bits+0x4c>
   14ef4:	079a      	lsls	r2, r3, #30
   14ef6:	d522      	bpl.n	14f3e <__lo0bits+0x56>
   14ef8:	085b      	lsrs	r3, r3, #1
   14efa:	6003      	str	r3, [r0, #0]
   14efc:	2201      	movs	r2, #1
   14efe:	4610      	mov	r0, r2
   14f00:	4770      	bx	lr
   14f02:	b299      	uxth	r1, r3
   14f04:	b909      	cbnz	r1, 14f0a <__lo0bits+0x22>
   14f06:	0c1b      	lsrs	r3, r3, #16
   14f08:	2210      	movs	r2, #16
   14f0a:	b2d9      	uxtb	r1, r3
   14f0c:	b909      	cbnz	r1, 14f12 <__lo0bits+0x2a>
   14f0e:	3208      	adds	r2, #8
   14f10:	0a1b      	lsrs	r3, r3, #8
   14f12:	0719      	lsls	r1, r3, #28
   14f14:	bf04      	itt	eq
   14f16:	091b      	lsreq	r3, r3, #4
   14f18:	3204      	addeq	r2, #4
   14f1a:	0799      	lsls	r1, r3, #30
   14f1c:	bf04      	itt	eq
   14f1e:	089b      	lsreq	r3, r3, #2
   14f20:	3202      	addeq	r2, #2
   14f22:	07d9      	lsls	r1, r3, #31
   14f24:	d403      	bmi.n	14f2e <__lo0bits+0x46>
   14f26:	085b      	lsrs	r3, r3, #1
   14f28:	f102 0201 	add.w	r2, r2, #1
   14f2c:	d005      	beq.n	14f3a <__lo0bits+0x52>
   14f2e:	6003      	str	r3, [r0, #0]
   14f30:	4610      	mov	r0, r2
   14f32:	4770      	bx	lr
   14f34:	2200      	movs	r2, #0
   14f36:	4610      	mov	r0, r2
   14f38:	4770      	bx	lr
   14f3a:	2220      	movs	r2, #32
   14f3c:	e7df      	b.n	14efe <__lo0bits+0x16>
   14f3e:	089b      	lsrs	r3, r3, #2
   14f40:	2202      	movs	r2, #2
   14f42:	6003      	str	r3, [r0, #0]
   14f44:	4610      	mov	r0, r2
   14f46:	4770      	bx	lr

00014f48 <__i2b>:
   14f48:	b538      	push	{r3, r4, r5, lr}
   14f4a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   14f4c:	4604      	mov	r4, r0
   14f4e:	460d      	mov	r5, r1
   14f50:	b14b      	cbz	r3, 14f66 <__i2b+0x1e>
   14f52:	6858      	ldr	r0, [r3, #4]
   14f54:	b1b0      	cbz	r0, 14f84 <__i2b+0x3c>
   14f56:	6802      	ldr	r2, [r0, #0]
   14f58:	605a      	str	r2, [r3, #4]
   14f5a:	2200      	movs	r2, #0
   14f5c:	2301      	movs	r3, #1
   14f5e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   14f62:	60c2      	str	r2, [r0, #12]
   14f64:	bd38      	pop	{r3, r4, r5, pc}
   14f66:	2221      	movs	r2, #33	; 0x21
   14f68:	2104      	movs	r1, #4
   14f6a:	f000 fe49 	bl	15c00 <_calloc_r>
   14f6e:	4603      	mov	r3, r0
   14f70:	6460      	str	r0, [r4, #68]	; 0x44
   14f72:	2800      	cmp	r0, #0
   14f74:	d1ed      	bne.n	14f52 <__i2b+0xa>
   14f76:	4b09      	ldr	r3, [pc, #36]	; (14f9c <__i2b+0x54>)
   14f78:	4809      	ldr	r0, [pc, #36]	; (14fa0 <__i2b+0x58>)
   14f7a:	2200      	movs	r2, #0
   14f7c:	f240 1145 	movw	r1, #325	; 0x145
   14f80:	f000 fe1e 	bl	15bc0 <__assert_func>
   14f84:	221c      	movs	r2, #28
   14f86:	2101      	movs	r1, #1
   14f88:	4620      	mov	r0, r4
   14f8a:	f000 fe39 	bl	15c00 <_calloc_r>
   14f8e:	2800      	cmp	r0, #0
   14f90:	d0f1      	beq.n	14f76 <__i2b+0x2e>
   14f92:	2201      	movs	r2, #1
   14f94:	2302      	movs	r3, #2
   14f96:	e9c0 2301 	strd	r2, r3, [r0, #4]
   14f9a:	e7de      	b.n	14f5a <__i2b+0x12>
   14f9c:	2000164c 	.word	0x2000164c
   14fa0:	200017cc 	.word	0x200017cc

00014fa4 <__multiply>:
   14fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fa8:	690e      	ldr	r6, [r1, #16]
   14faa:	6915      	ldr	r5, [r2, #16]
   14fac:	42ae      	cmp	r6, r5
   14fae:	b085      	sub	sp, #20
   14fb0:	4688      	mov	r8, r1
   14fb2:	4614      	mov	r4, r2
   14fb4:	db05      	blt.n	14fc2 <__multiply+0x1e>
   14fb6:	462a      	mov	r2, r5
   14fb8:	4623      	mov	r3, r4
   14fba:	4635      	mov	r5, r6
   14fbc:	460c      	mov	r4, r1
   14fbe:	4616      	mov	r6, r2
   14fc0:	4698      	mov	r8, r3
   14fc2:	68a3      	ldr	r3, [r4, #8]
   14fc4:	6861      	ldr	r1, [r4, #4]
   14fc6:	19af      	adds	r7, r5, r6
   14fc8:	42bb      	cmp	r3, r7
   14fca:	bfb8      	it	lt
   14fcc:	3101      	addlt	r1, #1
   14fce:	f7ff fe91 	bl	14cf4 <_Balloc>
   14fd2:	9001      	str	r0, [sp, #4]
   14fd4:	2800      	cmp	r0, #0
   14fd6:	f000 8087 	beq.w	150e8 <__multiply+0x144>
   14fda:	9b01      	ldr	r3, [sp, #4]
   14fdc:	f103 0914 	add.w	r9, r3, #20
   14fe0:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   14fe4:	45d1      	cmp	r9, sl
   14fe6:	d205      	bcs.n	14ff4 <__multiply+0x50>
   14fe8:	464b      	mov	r3, r9
   14fea:	2200      	movs	r2, #0
   14fec:	f843 2b04 	str.w	r2, [r3], #4
   14ff0:	459a      	cmp	sl, r3
   14ff2:	d8fb      	bhi.n	14fec <__multiply+0x48>
   14ff4:	f108 0814 	add.w	r8, r8, #20
   14ff8:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   14ffc:	f104 0314 	add.w	r3, r4, #20
   15000:	45d8      	cmp	r8, fp
   15002:	461a      	mov	r2, r3
   15004:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   15008:	d25f      	bcs.n	150ca <__multiply+0x126>
   1500a:	1b2b      	subs	r3, r5, r4
   1500c:	3b15      	subs	r3, #21
   1500e:	f023 0303 	bic.w	r3, r3, #3
   15012:	3304      	adds	r3, #4
   15014:	3415      	adds	r4, #21
   15016:	42a5      	cmp	r5, r4
   15018:	bf38      	it	cc
   1501a:	2304      	movcc	r3, #4
   1501c:	e9cd a702 	strd	sl, r7, [sp, #8]
   15020:	46ac      	mov	ip, r5
   15022:	461f      	mov	r7, r3
   15024:	4692      	mov	sl, r2
   15026:	e005      	b.n	15034 <__multiply+0x90>
   15028:	0c09      	lsrs	r1, r1, #16
   1502a:	d129      	bne.n	15080 <__multiply+0xdc>
   1502c:	45c3      	cmp	fp, r8
   1502e:	f109 0904 	add.w	r9, r9, #4
   15032:	d948      	bls.n	150c6 <__multiply+0x122>
   15034:	f858 1b04 	ldr.w	r1, [r8], #4
   15038:	b28d      	uxth	r5, r1
   1503a:	2d00      	cmp	r5, #0
   1503c:	d0f4      	beq.n	15028 <__multiply+0x84>
   1503e:	4656      	mov	r6, sl
   15040:	464c      	mov	r4, r9
   15042:	2300      	movs	r3, #0
   15044:	f856 1b04 	ldr.w	r1, [r6], #4
   15048:	6822      	ldr	r2, [r4, #0]
   1504a:	fa1f fe81 	uxth.w	lr, r1
   1504e:	b290      	uxth	r0, r2
   15050:	0c09      	lsrs	r1, r1, #16
   15052:	fb05 000e 	mla	r0, r5, lr, r0
   15056:	0c12      	lsrs	r2, r2, #16
   15058:	4403      	add	r3, r0
   1505a:	fb05 2201 	mla	r2, r5, r1, r2
   1505e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   15062:	b29b      	uxth	r3, r3
   15064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   15068:	45b4      	cmp	ip, r6
   1506a:	f844 3b04 	str.w	r3, [r4], #4
   1506e:	ea4f 4312 	mov.w	r3, r2, lsr #16
   15072:	d8e7      	bhi.n	15044 <__multiply+0xa0>
   15074:	f849 3007 	str.w	r3, [r9, r7]
   15078:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1507c:	0c09      	lsrs	r1, r1, #16
   1507e:	d0d5      	beq.n	1502c <__multiply+0x88>
   15080:	f8d9 3000 	ldr.w	r3, [r9]
   15084:	4650      	mov	r0, sl
   15086:	461a      	mov	r2, r3
   15088:	464c      	mov	r4, r9
   1508a:	2600      	movs	r6, #0
   1508c:	8805      	ldrh	r5, [r0, #0]
   1508e:	0c12      	lsrs	r2, r2, #16
   15090:	fb01 2205 	mla	r2, r1, r5, r2
   15094:	4416      	add	r6, r2
   15096:	b29b      	uxth	r3, r3
   15098:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1509c:	f844 3b04 	str.w	r3, [r4], #4
   150a0:	f850 5b04 	ldr.w	r5, [r0], #4
   150a4:	6822      	ldr	r2, [r4, #0]
   150a6:	0c2d      	lsrs	r5, r5, #16
   150a8:	b293      	uxth	r3, r2
   150aa:	fb01 3305 	mla	r3, r1, r5, r3
   150ae:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   150b2:	4584      	cmp	ip, r0
   150b4:	ea4f 4613 	mov.w	r6, r3, lsr #16
   150b8:	d8e8      	bhi.n	1508c <__multiply+0xe8>
   150ba:	45c3      	cmp	fp, r8
   150bc:	f849 3007 	str.w	r3, [r9, r7]
   150c0:	f109 0904 	add.w	r9, r9, #4
   150c4:	d8b6      	bhi.n	15034 <__multiply+0x90>
   150c6:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   150ca:	2f00      	cmp	r7, #0
   150cc:	dc02      	bgt.n	150d4 <__multiply+0x130>
   150ce:	e005      	b.n	150dc <__multiply+0x138>
   150d0:	3f01      	subs	r7, #1
   150d2:	d003      	beq.n	150dc <__multiply+0x138>
   150d4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   150d8:	2b00      	cmp	r3, #0
   150da:	d0f9      	beq.n	150d0 <__multiply+0x12c>
   150dc:	9b01      	ldr	r3, [sp, #4]
   150de:	4618      	mov	r0, r3
   150e0:	611f      	str	r7, [r3, #16]
   150e2:	b005      	add	sp, #20
   150e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e8:	4b03      	ldr	r3, [pc, #12]	; (150f8 <__multiply+0x154>)
   150ea:	4804      	ldr	r0, [pc, #16]	; (150fc <__multiply+0x158>)
   150ec:	9a01      	ldr	r2, [sp, #4]
   150ee:	f44f 71b1 	mov.w	r1, #354	; 0x162
   150f2:	f000 fd65 	bl	15bc0 <__assert_func>
   150f6:	bf00      	nop
   150f8:	2000164c 	.word	0x2000164c
   150fc:	200017cc 	.word	0x200017cc

00015100 <__pow5mult>:
   15100:	f012 0303 	ands.w	r3, r2, #3
   15104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15108:	4614      	mov	r4, r2
   1510a:	4606      	mov	r6, r0
   1510c:	d132      	bne.n	15174 <__pow5mult+0x74>
   1510e:	460d      	mov	r5, r1
   15110:	10a4      	asrs	r4, r4, #2
   15112:	d020      	beq.n	15156 <__pow5mult+0x56>
   15114:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   15118:	f1b8 0f00 	cmp.w	r8, #0
   1511c:	d033      	beq.n	15186 <__pow5mult+0x86>
   1511e:	07e3      	lsls	r3, r4, #31
   15120:	f04f 0700 	mov.w	r7, #0
   15124:	d407      	bmi.n	15136 <__pow5mult+0x36>
   15126:	1064      	asrs	r4, r4, #1
   15128:	d015      	beq.n	15156 <__pow5mult+0x56>
   1512a:	f8d8 0000 	ldr.w	r0, [r8]
   1512e:	b1a8      	cbz	r0, 1515c <__pow5mult+0x5c>
   15130:	4680      	mov	r8, r0
   15132:	07e3      	lsls	r3, r4, #31
   15134:	d5f7      	bpl.n	15126 <__pow5mult+0x26>
   15136:	4642      	mov	r2, r8
   15138:	4629      	mov	r1, r5
   1513a:	4630      	mov	r0, r6
   1513c:	f7ff ff32 	bl	14fa4 <__multiply>
   15140:	b1b5      	cbz	r5, 15170 <__pow5mult+0x70>
   15142:	6869      	ldr	r1, [r5, #4]
   15144:	6c73      	ldr	r3, [r6, #68]	; 0x44
   15146:	1064      	asrs	r4, r4, #1
   15148:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   1514c:	602a      	str	r2, [r5, #0]
   1514e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   15152:	4605      	mov	r5, r0
   15154:	d1e9      	bne.n	1512a <__pow5mult+0x2a>
   15156:	4628      	mov	r0, r5
   15158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1515c:	4642      	mov	r2, r8
   1515e:	4641      	mov	r1, r8
   15160:	4630      	mov	r0, r6
   15162:	f7ff ff1f 	bl	14fa4 <__multiply>
   15166:	f8c8 0000 	str.w	r0, [r8]
   1516a:	6007      	str	r7, [r0, #0]
   1516c:	4680      	mov	r8, r0
   1516e:	e7e0      	b.n	15132 <__pow5mult+0x32>
   15170:	4605      	mov	r5, r0
   15172:	e7d8      	b.n	15126 <__pow5mult+0x26>
   15174:	3b01      	subs	r3, #1
   15176:	4a0f      	ldr	r2, [pc, #60]	; (151b4 <__pow5mult+0xb4>)
   15178:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1517c:	2300      	movs	r3, #0
   1517e:	f7ff fde9 	bl	14d54 <__multadd>
   15182:	4605      	mov	r5, r0
   15184:	e7c4      	b.n	15110 <__pow5mult+0x10>
   15186:	2101      	movs	r1, #1
   15188:	4630      	mov	r0, r6
   1518a:	f7ff fdb3 	bl	14cf4 <_Balloc>
   1518e:	4680      	mov	r8, r0
   15190:	b140      	cbz	r0, 151a4 <__pow5mult+0xa4>
   15192:	2301      	movs	r3, #1
   15194:	f240 2271 	movw	r2, #625	; 0x271
   15198:	e9c0 3204 	strd	r3, r2, [r0, #16]
   1519c:	2300      	movs	r3, #0
   1519e:	6430      	str	r0, [r6, #64]	; 0x40
   151a0:	6003      	str	r3, [r0, #0]
   151a2:	e7bc      	b.n	1511e <__pow5mult+0x1e>
   151a4:	4b04      	ldr	r3, [pc, #16]	; (151b8 <__pow5mult+0xb8>)
   151a6:	4805      	ldr	r0, [pc, #20]	; (151bc <__pow5mult+0xbc>)
   151a8:	4642      	mov	r2, r8
   151aa:	f240 1145 	movw	r1, #325	; 0x145
   151ae:	f000 fd07 	bl	15bc0 <__assert_func>
   151b2:	bf00      	nop
   151b4:	20001d10 	.word	0x20001d10
   151b8:	2000164c 	.word	0x2000164c
   151bc:	200017cc 	.word	0x200017cc

000151c0 <__lshift>:
   151c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   151c4:	460d      	mov	r5, r1
   151c6:	4614      	mov	r4, r2
   151c8:	692f      	ldr	r7, [r5, #16]
   151ca:	68ab      	ldr	r3, [r5, #8]
   151cc:	6849      	ldr	r1, [r1, #4]
   151ce:	eb07 1762 	add.w	r7, r7, r2, asr #5
   151d2:	1c7e      	adds	r6, r7, #1
   151d4:	429e      	cmp	r6, r3
   151d6:	4680      	mov	r8, r0
   151d8:	ea4f 1962 	mov.w	r9, r2, asr #5
   151dc:	dd04      	ble.n	151e8 <__lshift+0x28>
   151de:	005b      	lsls	r3, r3, #1
   151e0:	429e      	cmp	r6, r3
   151e2:	f101 0101 	add.w	r1, r1, #1
   151e6:	dcfa      	bgt.n	151de <__lshift+0x1e>
   151e8:	4640      	mov	r0, r8
   151ea:	f7ff fd83 	bl	14cf4 <_Balloc>
   151ee:	4684      	mov	ip, r0
   151f0:	2800      	cmp	r0, #0
   151f2:	d052      	beq.n	1529a <__lshift+0xda>
   151f4:	f1b9 0f00 	cmp.w	r9, #0
   151f8:	f100 0214 	add.w	r2, r0, #20
   151fc:	dd0e      	ble.n	1521c <__lshift+0x5c>
   151fe:	f109 0105 	add.w	r1, r9, #5
   15202:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   15206:	4613      	mov	r3, r2
   15208:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1520c:	2000      	movs	r0, #0
   1520e:	f843 0b04 	str.w	r0, [r3], #4
   15212:	428b      	cmp	r3, r1
   15214:	d1fb      	bne.n	1520e <__lshift+0x4e>
   15216:	f1ae 0314 	sub.w	r3, lr, #20
   1521a:	441a      	add	r2, r3
   1521c:	6929      	ldr	r1, [r5, #16]
   1521e:	f105 0314 	add.w	r3, r5, #20
   15222:	f014 0e1f 	ands.w	lr, r4, #31
   15226:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1522a:	d02e      	beq.n	1528a <__lshift+0xca>
   1522c:	f1ce 0920 	rsb	r9, lr, #32
   15230:	4610      	mov	r0, r2
   15232:	f04f 0a00 	mov.w	sl, #0
   15236:	681c      	ldr	r4, [r3, #0]
   15238:	fa04 f40e 	lsl.w	r4, r4, lr
   1523c:	ea44 040a 	orr.w	r4, r4, sl
   15240:	f840 4b04 	str.w	r4, [r0], #4
   15244:	f853 4b04 	ldr.w	r4, [r3], #4
   15248:	4299      	cmp	r1, r3
   1524a:	fa24 fa09 	lsr.w	sl, r4, r9
   1524e:	d8f2      	bhi.n	15236 <__lshift+0x76>
   15250:	1b4b      	subs	r3, r1, r5
   15252:	3b15      	subs	r3, #21
   15254:	f023 0303 	bic.w	r3, r3, #3
   15258:	3304      	adds	r3, #4
   1525a:	f105 0015 	add.w	r0, r5, #21
   1525e:	4281      	cmp	r1, r0
   15260:	bf38      	it	cc
   15262:	2304      	movcc	r3, #4
   15264:	f1ba 0f00 	cmp.w	sl, #0
   15268:	bf18      	it	ne
   1526a:	4637      	movne	r7, r6
   1526c:	f842 a003 	str.w	sl, [r2, r3]
   15270:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   15274:	686a      	ldr	r2, [r5, #4]
   15276:	f8cc 7010 	str.w	r7, [ip, #16]
   1527a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1527e:	6029      	str	r1, [r5, #0]
   15280:	4660      	mov	r0, ip
   15282:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   15286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1528a:	3a04      	subs	r2, #4
   1528c:	f853 0b04 	ldr.w	r0, [r3], #4
   15290:	f842 0f04 	str.w	r0, [r2, #4]!
   15294:	4299      	cmp	r1, r3
   15296:	d8f9      	bhi.n	1528c <__lshift+0xcc>
   15298:	e7ea      	b.n	15270 <__lshift+0xb0>
   1529a:	4b03      	ldr	r3, [pc, #12]	; (152a8 <__lshift+0xe8>)
   1529c:	4803      	ldr	r0, [pc, #12]	; (152ac <__lshift+0xec>)
   1529e:	4662      	mov	r2, ip
   152a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   152a4:	f000 fc8c 	bl	15bc0 <__assert_func>
   152a8:	2000164c 	.word	0x2000164c
   152ac:	200017cc 	.word	0x200017cc

000152b0 <__mcmp>:
   152b0:	690b      	ldr	r3, [r1, #16]
   152b2:	4684      	mov	ip, r0
   152b4:	6900      	ldr	r0, [r0, #16]
   152b6:	1ac0      	subs	r0, r0, r3
   152b8:	d116      	bne.n	152e8 <__mcmp+0x38>
   152ba:	f10c 0c14 	add.w	ip, ip, #20
   152be:	3114      	adds	r1, #20
   152c0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   152c4:	b410      	push	{r4}
   152c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   152ca:	e001      	b.n	152d0 <__mcmp+0x20>
   152cc:	4594      	cmp	ip, r2
   152ce:	d208      	bcs.n	152e2 <__mcmp+0x32>
   152d0:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   152d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   152d8:	428c      	cmp	r4, r1
   152da:	d0f7      	beq.n	152cc <__mcmp+0x1c>
   152dc:	d205      	bcs.n	152ea <__mcmp+0x3a>
   152de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   152e2:	f85d 4b04 	ldr.w	r4, [sp], #4
   152e6:	4770      	bx	lr
   152e8:	4770      	bx	lr
   152ea:	2001      	movs	r0, #1
   152ec:	f85d 4b04 	ldr.w	r4, [sp], #4
   152f0:	4770      	bx	lr
   152f2:	bf00      	nop

000152f4 <__mdiff>:
   152f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152f8:	690f      	ldr	r7, [r1, #16]
   152fa:	6913      	ldr	r3, [r2, #16]
   152fc:	1aff      	subs	r7, r7, r3
   152fe:	2f00      	cmp	r7, #0
   15300:	460e      	mov	r6, r1
   15302:	4690      	mov	r8, r2
   15304:	d17f      	bne.n	15406 <__mdiff+0x112>
   15306:	f101 0514 	add.w	r5, r1, #20
   1530a:	3214      	adds	r2, #20
   1530c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   15310:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   15314:	e001      	b.n	1531a <__mdiff+0x26>
   15316:	429d      	cmp	r5, r3
   15318:	d278      	bcs.n	1540c <__mdiff+0x118>
   1531a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1531e:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   15322:	42a1      	cmp	r1, r4
   15324:	d0f7      	beq.n	15316 <__mdiff+0x22>
   15326:	d369      	bcc.n	153fc <__mdiff+0x108>
   15328:	6871      	ldr	r1, [r6, #4]
   1532a:	f7ff fce3 	bl	14cf4 <_Balloc>
   1532e:	4681      	mov	r9, r0
   15330:	2800      	cmp	r0, #0
   15332:	d077      	beq.n	15424 <__mdiff+0x130>
   15334:	6935      	ldr	r5, [r6, #16]
   15336:	f8d8 2010 	ldr.w	r2, [r8, #16]
   1533a:	60c7      	str	r7, [r0, #12]
   1533c:	f108 0e14 	add.w	lr, r8, #20
   15340:	f106 0014 	add.w	r0, r6, #20
   15344:	f109 0a14 	add.w	sl, r9, #20
   15348:	f106 0110 	add.w	r1, r6, #16
   1534c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   15350:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   15354:	4656      	mov	r6, sl
   15356:	f04f 0c00 	mov.w	ip, #0
   1535a:	f85e 4b04 	ldr.w	r4, [lr], #4
   1535e:	f851 bf04 	ldr.w	fp, [r1, #4]!
   15362:	b2a3      	uxth	r3, r4
   15364:	fa1c fc8b 	uxtah	ip, ip, fp
   15368:	ebac 0303 	sub.w	r3, ip, r3
   1536c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   15370:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   15374:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   15378:	b29b      	uxth	r3, r3
   1537a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   1537e:	4572      	cmp	r2, lr
   15380:	f846 3b04 	str.w	r3, [r6], #4
   15384:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   15388:	d8e7      	bhi.n	1535a <__mdiff+0x66>
   1538a:	eba2 0108 	sub.w	r1, r2, r8
   1538e:	3915      	subs	r1, #21
   15390:	f108 0815 	add.w	r8, r8, #21
   15394:	4542      	cmp	r2, r8
   15396:	f021 0403 	bic.w	r4, r1, #3
   1539a:	f104 0404 	add.w	r4, r4, #4
   1539e:	bf38      	it	cc
   153a0:	2404      	movcc	r4, #4
   153a2:	4420      	add	r0, r4
   153a4:	f021 0203 	bic.w	r2, r1, #3
   153a8:	bf38      	it	cc
   153aa:	2200      	movcc	r2, #0
   153ac:	4287      	cmp	r7, r0
   153ae:	4452      	add	r2, sl
   153b0:	4454      	add	r4, sl
   153b2:	d918      	bls.n	153e6 <__mdiff+0xf2>
   153b4:	4626      	mov	r6, r4
   153b6:	4601      	mov	r1, r0
   153b8:	f851 3b04 	ldr.w	r3, [r1], #4
   153bc:	fa1c fc83 	uxtah	ip, ip, r3
   153c0:	ea4f 422c 	mov.w	r2, ip, asr #16
   153c4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   153c8:	fa1f fc8c 	uxth.w	ip, ip
   153cc:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   153d0:	428f      	cmp	r7, r1
   153d2:	f846 3b04 	str.w	r3, [r6], #4
   153d6:	ea4f 4c22 	mov.w	ip, r2, asr #16
   153da:	d8ed      	bhi.n	153b8 <__mdiff+0xc4>
   153dc:	3f01      	subs	r7, #1
   153de:	1a3f      	subs	r7, r7, r0
   153e0:	f027 0703 	bic.w	r7, r7, #3
   153e4:	19e2      	adds	r2, r4, r7
   153e6:	b923      	cbnz	r3, 153f2 <__mdiff+0xfe>
   153e8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   153ec:	3d01      	subs	r5, #1
   153ee:	2b00      	cmp	r3, #0
   153f0:	d0fa      	beq.n	153e8 <__mdiff+0xf4>
   153f2:	f8c9 5010 	str.w	r5, [r9, #16]
   153f6:	4648      	mov	r0, r9
   153f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153fc:	4633      	mov	r3, r6
   153fe:	2701      	movs	r7, #1
   15400:	4646      	mov	r6, r8
   15402:	4698      	mov	r8, r3
   15404:	e790      	b.n	15328 <__mdiff+0x34>
   15406:	dbf9      	blt.n	153fc <__mdiff+0x108>
   15408:	2700      	movs	r7, #0
   1540a:	e78d      	b.n	15328 <__mdiff+0x34>
   1540c:	2100      	movs	r1, #0
   1540e:	f7ff fc71 	bl	14cf4 <_Balloc>
   15412:	4681      	mov	r9, r0
   15414:	b168      	cbz	r0, 15432 <__mdiff+0x13e>
   15416:	2201      	movs	r2, #1
   15418:	2300      	movs	r3, #0
   1541a:	e9c9 2304 	strd	r2, r3, [r9, #16]
   1541e:	4648      	mov	r0, r9
   15420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15424:	4b06      	ldr	r3, [pc, #24]	; (15440 <__mdiff+0x14c>)
   15426:	4807      	ldr	r0, [pc, #28]	; (15444 <__mdiff+0x150>)
   15428:	464a      	mov	r2, r9
   1542a:	f240 2145 	movw	r1, #581	; 0x245
   1542e:	f000 fbc7 	bl	15bc0 <__assert_func>
   15432:	4b03      	ldr	r3, [pc, #12]	; (15440 <__mdiff+0x14c>)
   15434:	4803      	ldr	r0, [pc, #12]	; (15444 <__mdiff+0x150>)
   15436:	464a      	mov	r2, r9
   15438:	f240 2137 	movw	r1, #567	; 0x237
   1543c:	f000 fbc0 	bl	15bc0 <__assert_func>
   15440:	2000164c 	.word	0x2000164c
   15444:	200017cc 	.word	0x200017cc

00015448 <__ulp>:
   15448:	b082      	sub	sp, #8
   1544a:	ed8d 0b00 	vstr	d0, [sp]
   1544e:	4b16      	ldr	r3, [pc, #88]	; (154a8 <__ulp+0x60>)
   15450:	9a01      	ldr	r2, [sp, #4]
   15452:	4013      	ands	r3, r2
   15454:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   15458:	2b00      	cmp	r3, #0
   1545a:	dd06      	ble.n	1546a <__ulp+0x22>
   1545c:	2200      	movs	r2, #0
   1545e:	4619      	mov	r1, r3
   15460:	4610      	mov	r0, r2
   15462:	ec41 0b10 	vmov	d0, r0, r1
   15466:	b002      	add	sp, #8
   15468:	4770      	bx	lr
   1546a:	425b      	negs	r3, r3
   1546c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   15470:	ea4f 5223 	mov.w	r2, r3, asr #20
   15474:	da09      	bge.n	1548a <__ulp+0x42>
   15476:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1547a:	4113      	asrs	r3, r2
   1547c:	2200      	movs	r2, #0
   1547e:	4619      	mov	r1, r3
   15480:	4610      	mov	r0, r2
   15482:	ec41 0b10 	vmov	d0, r0, r1
   15486:	b002      	add	sp, #8
   15488:	4770      	bx	lr
   1548a:	f1a2 0314 	sub.w	r3, r2, #20
   1548e:	2b1e      	cmp	r3, #30
   15490:	bfda      	itte	le
   15492:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   15496:	40da      	lsrle	r2, r3
   15498:	2201      	movgt	r2, #1
   1549a:	2300      	movs	r3, #0
   1549c:	4619      	mov	r1, r3
   1549e:	4610      	mov	r0, r2
   154a0:	ec41 0b10 	vmov	d0, r0, r1
   154a4:	b002      	add	sp, #8
   154a6:	4770      	bx	lr
   154a8:	7ff00000 	.word	0x7ff00000

000154ac <__b2d>:
   154ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154ae:	6904      	ldr	r4, [r0, #16]
   154b0:	f100 0614 	add.w	r6, r0, #20
   154b4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   154b8:	1f27      	subs	r7, r4, #4
   154ba:	f854 5c04 	ldr.w	r5, [r4, #-4]
   154be:	4628      	mov	r0, r5
   154c0:	f7ff fcf2 	bl	14ea8 <__hi0bits>
   154c4:	f1c0 0320 	rsb	r3, r0, #32
   154c8:	280a      	cmp	r0, #10
   154ca:	600b      	str	r3, [r1, #0]
   154cc:	dd1b      	ble.n	15506 <__b2d+0x5a>
   154ce:	42be      	cmp	r6, r7
   154d0:	d20b      	bcs.n	154ea <__b2d+0x3e>
   154d2:	380b      	subs	r0, #11
   154d4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   154d8:	d12e      	bne.n	15538 <__b2d+0x8c>
   154da:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   154de:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   154e2:	460a      	mov	r2, r1
   154e4:	ec43 2b10 	vmov	d0, r2, r3
   154e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   154ea:	f1b0 010b 	subs.w	r1, r0, #11
   154ee:	d0f4      	beq.n	154da <__b2d+0x2e>
   154f0:	fa05 f101 	lsl.w	r1, r5, r1
   154f4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   154f8:	2100      	movs	r1, #0
   154fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   154fe:	460a      	mov	r2, r1
   15500:	ec43 2b10 	vmov	d0, r2, r3
   15504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15506:	f1c0 0c0b 	rsb	ip, r0, #11
   1550a:	fa25 f10c 	lsr.w	r1, r5, ip
   1550e:	42be      	cmp	r6, r7
   15510:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   15514:	bf38      	it	cc
   15516:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   1551a:	f100 0015 	add.w	r0, r0, #21
   1551e:	bf34      	ite	cc
   15520:	fa21 f10c 	lsrcc.w	r1, r1, ip
   15524:	2100      	movcs	r1, #0
   15526:	fa05 f000 	lsl.w	r0, r5, r0
   1552a:	4301      	orrs	r1, r0
   1552c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   15530:	460a      	mov	r2, r1
   15532:	ec43 2b10 	vmov	d0, r2, r3
   15536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15538:	f1c0 0c20 	rsb	ip, r0, #32
   1553c:	4085      	lsls	r5, r0
   1553e:	fa21 f30c 	lsr.w	r3, r1, ip
   15542:	ea45 0703 	orr.w	r7, r5, r3
   15546:	f1a4 0508 	sub.w	r5, r4, #8
   1554a:	42ae      	cmp	r6, r5
   1554c:	fa01 f100 	lsl.w	r1, r1, r0
   15550:	bf3c      	itt	cc
   15552:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
   15556:	fa20 f00c 	lsrcc.w	r0, r0, ip
   1555a:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   1555e:	bf38      	it	cc
   15560:	4301      	orrcc	r1, r0
   15562:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   15566:	460a      	mov	r2, r1
   15568:	ec43 2b10 	vmov	d0, r2, r3
   1556c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1556e:	bf00      	nop

00015570 <__d2b>:
   15570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15574:	4688      	mov	r8, r1
   15576:	b083      	sub	sp, #12
   15578:	2101      	movs	r1, #1
   1557a:	ec57 6b10 	vmov	r6, r7, d0
   1557e:	4615      	mov	r5, r2
   15580:	f7ff fbb8 	bl	14cf4 <_Balloc>
   15584:	4604      	mov	r4, r0
   15586:	2800      	cmp	r0, #0
   15588:	d051      	beq.n	1562e <__d2b+0xbe>
   1558a:	f3c7 590a 	ubfx	r9, r7, #20, #11
   1558e:	f3c7 0313 	ubfx	r3, r7, #0, #20
   15592:	f1b9 0f00 	cmp.w	r9, #0
   15596:	d001      	beq.n	1559c <__d2b+0x2c>
   15598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1559c:	2e00      	cmp	r6, #0
   1559e:	9301      	str	r3, [sp, #4]
   155a0:	d118      	bne.n	155d4 <__d2b+0x64>
   155a2:	a801      	add	r0, sp, #4
   155a4:	f7ff fca0 	bl	14ee8 <__lo0bits>
   155a8:	9a01      	ldr	r2, [sp, #4]
   155aa:	6162      	str	r2, [r4, #20]
   155ac:	2201      	movs	r2, #1
   155ae:	f100 0320 	add.w	r3, r0, #32
   155b2:	6122      	str	r2, [r4, #16]
   155b4:	f1b9 0f00 	cmp.w	r9, #0
   155b8:	d025      	beq.n	15606 <__d2b+0x96>
   155ba:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   155be:	eb09 0203 	add.w	r2, r9, r3
   155c2:	4620      	mov	r0, r4
   155c4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   155c8:	f8c8 2000 	str.w	r2, [r8]
   155cc:	602b      	str	r3, [r5, #0]
   155ce:	b003      	add	sp, #12
   155d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   155d4:	4668      	mov	r0, sp
   155d6:	9600      	str	r6, [sp, #0]
   155d8:	f7ff fc86 	bl	14ee8 <__lo0bits>
   155dc:	4603      	mov	r3, r0
   155de:	b310      	cbz	r0, 15626 <__d2b+0xb6>
   155e0:	e9dd 0200 	ldrd	r0, r2, [sp]
   155e4:	f1c3 0120 	rsb	r1, r3, #32
   155e8:	fa02 f101 	lsl.w	r1, r2, r1
   155ec:	4301      	orrs	r1, r0
   155ee:	40da      	lsrs	r2, r3
   155f0:	6161      	str	r1, [r4, #20]
   155f2:	9201      	str	r2, [sp, #4]
   155f4:	2a00      	cmp	r2, #0
   155f6:	61a2      	str	r2, [r4, #24]
   155f8:	bf14      	ite	ne
   155fa:	2202      	movne	r2, #2
   155fc:	2201      	moveq	r2, #1
   155fe:	6122      	str	r2, [r4, #16]
   15600:	f1b9 0f00 	cmp.w	r9, #0
   15604:	d1d9      	bne.n	155ba <__d2b+0x4a>
   15606:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   1560a:	f8c8 3000 	str.w	r3, [r8]
   1560e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   15612:	6918      	ldr	r0, [r3, #16]
   15614:	f7ff fc48 	bl	14ea8 <__hi0bits>
   15618:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   1561c:	4620      	mov	r0, r4
   1561e:	602b      	str	r3, [r5, #0]
   15620:	b003      	add	sp, #12
   15622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15626:	9a00      	ldr	r2, [sp, #0]
   15628:	6162      	str	r2, [r4, #20]
   1562a:	9a01      	ldr	r2, [sp, #4]
   1562c:	e7e2      	b.n	155f4 <__d2b+0x84>
   1562e:	4b03      	ldr	r3, [pc, #12]	; (1563c <__d2b+0xcc>)
   15630:	4803      	ldr	r0, [pc, #12]	; (15640 <__d2b+0xd0>)
   15632:	4622      	mov	r2, r4
   15634:	f240 310f 	movw	r1, #783	; 0x30f
   15638:	f000 fac2 	bl	15bc0 <__assert_func>
   1563c:	2000164c 	.word	0x2000164c
   15640:	200017cc 	.word	0x200017cc

00015644 <__ratio>:
   15644:	b5f0      	push	{r4, r5, r6, r7, lr}
   15646:	b083      	sub	sp, #12
   15648:	460e      	mov	r6, r1
   1564a:	4669      	mov	r1, sp
   1564c:	4607      	mov	r7, r0
   1564e:	f7ff ff2d 	bl	154ac <__b2d>
   15652:	a901      	add	r1, sp, #4
   15654:	4630      	mov	r0, r6
   15656:	ec55 4b10 	vmov	r4, r5, d0
   1565a:	eeb0 7b40 	vmov.f64	d7, d0
   1565e:	f7ff ff25 	bl	154ac <__b2d>
   15662:	6933      	ldr	r3, [r6, #16]
   15664:	693a      	ldr	r2, [r7, #16]
   15666:	1ad2      	subs	r2, r2, r3
   15668:	e9dd 3100 	ldrd	r3, r1, [sp]
   1566c:	1a5b      	subs	r3, r3, r1
   1566e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   15672:	2b00      	cmp	r3, #0
   15674:	dd09      	ble.n	1568a <__ratio+0x46>
   15676:	ee17 2a90 	vmov	r2, s15
   1567a:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   1567e:	ec45 4b17 	vmov	d7, r4, r5
   15682:	ee87 0b00 	vdiv.f64	d0, d7, d0
   15686:	b003      	add	sp, #12
   15688:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1568a:	ee10 2a90 	vmov	r2, s1
   1568e:	ec51 0b10 	vmov	r0, r1, d0
   15692:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   15696:	eb02 5103 	add.w	r1, r2, r3, lsl #20
   1569a:	ec41 0b10 	vmov	d0, r0, r1
   1569e:	ee87 0b00 	vdiv.f64	d0, d7, d0
   156a2:	b003      	add	sp, #12
   156a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   156a6:	bf00      	nop

000156a8 <__copybits>:
   156a8:	3901      	subs	r1, #1
   156aa:	1149      	asrs	r1, r1, #5
   156ac:	f101 0c01 	add.w	ip, r1, #1
   156b0:	6911      	ldr	r1, [r2, #16]
   156b2:	f102 0314 	add.w	r3, r2, #20
   156b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   156ba:	428b      	cmp	r3, r1
   156bc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   156c0:	d217      	bcs.n	156f2 <__copybits+0x4a>
   156c2:	b510      	push	{r4, lr}
   156c4:	f1a0 0e04 	sub.w	lr, r0, #4
   156c8:	f853 4b04 	ldr.w	r4, [r3], #4
   156cc:	f84e 4f04 	str.w	r4, [lr, #4]!
   156d0:	4299      	cmp	r1, r3
   156d2:	d8f9      	bhi.n	156c8 <__copybits+0x20>
   156d4:	1a8a      	subs	r2, r1, r2
   156d6:	f1a2 0315 	sub.w	r3, r2, #21
   156da:	f023 0303 	bic.w	r3, r3, #3
   156de:	3304      	adds	r3, #4
   156e0:	4418      	add	r0, r3
   156e2:	4584      	cmp	ip, r0
   156e4:	d904      	bls.n	156f0 <__copybits+0x48>
   156e6:	2300      	movs	r3, #0
   156e8:	f840 3b04 	str.w	r3, [r0], #4
   156ec:	4584      	cmp	ip, r0
   156ee:	d8fb      	bhi.n	156e8 <__copybits+0x40>
   156f0:	bd10      	pop	{r4, pc}
   156f2:	4584      	cmp	ip, r0
   156f4:	d905      	bls.n	15702 <__copybits+0x5a>
   156f6:	2300      	movs	r3, #0
   156f8:	f840 3b04 	str.w	r3, [r0], #4
   156fc:	4584      	cmp	ip, r0
   156fe:	d8fb      	bhi.n	156f8 <__copybits+0x50>
   15700:	4770      	bx	lr
   15702:	4770      	bx	lr

00015704 <__any_on>:
   15704:	6903      	ldr	r3, [r0, #16]
   15706:	114a      	asrs	r2, r1, #5
   15708:	4293      	cmp	r3, r2
   1570a:	f100 0014 	add.w	r0, r0, #20
   1570e:	da09      	bge.n	15724 <__any_on+0x20>
   15710:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   15714:	e002      	b.n	1571c <__any_on+0x18>
   15716:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1571a:	b9c2      	cbnz	r2, 1574e <__any_on+0x4a>
   1571c:	4283      	cmp	r3, r0
   1571e:	d8fa      	bhi.n	15716 <__any_on+0x12>
   15720:	2000      	movs	r0, #0
   15722:	4770      	bx	lr
   15724:	dd10      	ble.n	15748 <__any_on+0x44>
   15726:	f011 011f 	ands.w	r1, r1, #31
   1572a:	d00d      	beq.n	15748 <__any_on+0x44>
   1572c:	b410      	push	{r4}
   1572e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   15732:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   15736:	fa24 f201 	lsr.w	r2, r4, r1
   1573a:	408a      	lsls	r2, r1
   1573c:	4294      	cmp	r4, r2
   1573e:	d00c      	beq.n	1575a <__any_on+0x56>
   15740:	2001      	movs	r0, #1
   15742:	f85d 4b04 	ldr.w	r4, [sp], #4
   15746:	4770      	bx	lr
   15748:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   1574c:	e7e6      	b.n	1571c <__any_on+0x18>
   1574e:	2001      	movs	r0, #1
   15750:	4770      	bx	lr
   15752:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   15756:	2a00      	cmp	r2, #0
   15758:	d1f2      	bne.n	15740 <__any_on+0x3c>
   1575a:	4283      	cmp	r3, r0
   1575c:	d8f9      	bhi.n	15752 <__any_on+0x4e>
   1575e:	2000      	movs	r0, #0
   15760:	f85d 4b04 	ldr.w	r4, [sp], #4
   15764:	4770      	bx	lr
   15766:	bf00      	nop

00015768 <_fclose_r>:
   15768:	b570      	push	{r4, r5, r6, lr}
   1576a:	2900      	cmp	r1, #0
   1576c:	d04b      	beq.n	15806 <_fclose_r+0x9e>
   1576e:	4606      	mov	r6, r0
   15770:	460c      	mov	r4, r1
   15772:	b110      	cbz	r0, 1577a <_fclose_r+0x12>
   15774:	6b43      	ldr	r3, [r0, #52]	; 0x34
   15776:	2b00      	cmp	r3, #0
   15778:	d048      	beq.n	1580c <_fclose_r+0xa4>
   1577a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1577c:	07d8      	lsls	r0, r3, #31
   1577e:	d534      	bpl.n	157ea <_fclose_r+0x82>
   15780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15784:	2b00      	cmp	r3, #0
   15786:	d03e      	beq.n	15806 <_fclose_r+0x9e>
   15788:	4621      	mov	r1, r4
   1578a:	4630      	mov	r0, r6
   1578c:	f000 f850 	bl	15830 <__sflush_r>
   15790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15792:	4605      	mov	r5, r0
   15794:	b133      	cbz	r3, 157a4 <_fclose_r+0x3c>
   15796:	69e1      	ldr	r1, [r4, #28]
   15798:	4630      	mov	r0, r6
   1579a:	4798      	blx	r3
   1579c:	2800      	cmp	r0, #0
   1579e:	bfb8      	it	lt
   157a0:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   157a4:	89a3      	ldrh	r3, [r4, #12]
   157a6:	061a      	lsls	r2, r3, #24
   157a8:	d43c      	bmi.n	15824 <_fclose_r+0xbc>
   157aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
   157ac:	b141      	cbz	r1, 157c0 <_fclose_r+0x58>
   157ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
   157b2:	4299      	cmp	r1, r3
   157b4:	d002      	beq.n	157bc <_fclose_r+0x54>
   157b6:	4630      	mov	r0, r6
   157b8:	f7fc ffce 	bl	12758 <_free_r>
   157bc:	2300      	movs	r3, #0
   157be:	6323      	str	r3, [r4, #48]	; 0x30
   157c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   157c2:	b121      	cbz	r1, 157ce <_fclose_r+0x66>
   157c4:	4630      	mov	r0, r6
   157c6:	f7fc ffc7 	bl	12758 <_free_r>
   157ca:	2300      	movs	r3, #0
   157cc:	6463      	str	r3, [r4, #68]	; 0x44
   157ce:	f7fc fa31 	bl	11c34 <__sfp_lock_acquire>
   157d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   157d4:	2200      	movs	r2, #0
   157d6:	07db      	lsls	r3, r3, #31
   157d8:	81a2      	strh	r2, [r4, #12]
   157da:	d51f      	bpl.n	1581c <_fclose_r+0xb4>
   157dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   157de:	f7fc fe41 	bl	12464 <__retarget_lock_close_recursive>
   157e2:	f7fc fa2d 	bl	11c40 <__sfp_lock_release>
   157e6:	4628      	mov	r0, r5
   157e8:	bd70      	pop	{r4, r5, r6, pc}
   157ea:	89a3      	ldrh	r3, [r4, #12]
   157ec:	0599      	lsls	r1, r3, #22
   157ee:	d4cb      	bmi.n	15788 <_fclose_r+0x20>
   157f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   157f2:	f7fc fe39 	bl	12468 <__retarget_lock_acquire_recursive>
   157f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   157fa:	2b00      	cmp	r3, #0
   157fc:	d1c4      	bne.n	15788 <_fclose_r+0x20>
   157fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
   15800:	f015 0501 	ands.w	r5, r5, #1
   15804:	d005      	beq.n	15812 <_fclose_r+0xaa>
   15806:	2500      	movs	r5, #0
   15808:	4628      	mov	r0, r5
   1580a:	bd70      	pop	{r4, r5, r6, pc}
   1580c:	f7fc f9f4 	bl	11bf8 <__sinit>
   15810:	e7b3      	b.n	1577a <_fclose_r+0x12>
   15812:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15814:	f7fc fe2a 	bl	1246c <__retarget_lock_release_recursive>
   15818:	4628      	mov	r0, r5
   1581a:	bd70      	pop	{r4, r5, r6, pc}
   1581c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1581e:	f7fc fe25 	bl	1246c <__retarget_lock_release_recursive>
   15822:	e7db      	b.n	157dc <_fclose_r+0x74>
   15824:	6921      	ldr	r1, [r4, #16]
   15826:	4630      	mov	r0, r6
   15828:	f7fc ff96 	bl	12758 <_free_r>
   1582c:	e7bd      	b.n	157aa <_fclose_r+0x42>
   1582e:	bf00      	nop

00015830 <__sflush_r>:
   15830:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   15834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15838:	460c      	mov	r4, r1
   1583a:	0711      	lsls	r1, r2, #28
   1583c:	4680      	mov	r8, r0
   1583e:	d447      	bmi.n	158d0 <__sflush_r+0xa0>
   15840:	6863      	ldr	r3, [r4, #4]
   15842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   15846:	2b00      	cmp	r3, #0
   15848:	81a2      	strh	r2, [r4, #12]
   1584a:	dd5e      	ble.n	1590a <__sflush_r+0xda>
   1584c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   1584e:	2d00      	cmp	r5, #0
   15850:	d058      	beq.n	15904 <__sflush_r+0xd4>
   15852:	2300      	movs	r3, #0
   15854:	f8d8 6000 	ldr.w	r6, [r8]
   15858:	f8c8 3000 	str.w	r3, [r8]
   1585c:	b293      	uxth	r3, r2
   1585e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   15862:	d156      	bne.n	15912 <__sflush_r+0xe2>
   15864:	2301      	movs	r3, #1
   15866:	69e1      	ldr	r1, [r4, #28]
   15868:	4640      	mov	r0, r8
   1586a:	47a8      	blx	r5
   1586c:	1c43      	adds	r3, r0, #1
   1586e:	d067      	beq.n	15940 <__sflush_r+0x110>
   15870:	89a3      	ldrh	r3, [r4, #12]
   15872:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   15874:	075f      	lsls	r7, r3, #29
   15876:	d505      	bpl.n	15884 <__sflush_r+0x54>
   15878:	6863      	ldr	r3, [r4, #4]
   1587a:	1ac0      	subs	r0, r0, r3
   1587c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1587e:	b10b      	cbz	r3, 15884 <__sflush_r+0x54>
   15880:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   15882:	1ac0      	subs	r0, r0, r3
   15884:	69e1      	ldr	r1, [r4, #28]
   15886:	4602      	mov	r2, r0
   15888:	2300      	movs	r3, #0
   1588a:	4640      	mov	r0, r8
   1588c:	47a8      	blx	r5
   1588e:	1c41      	adds	r1, r0, #1
   15890:	d141      	bne.n	15916 <__sflush_r+0xe6>
   15892:	f8d8 3000 	ldr.w	r3, [r8]
   15896:	2b00      	cmp	r3, #0
   15898:	d03d      	beq.n	15916 <__sflush_r+0xe6>
   1589a:	2b1d      	cmp	r3, #29
   1589c:	d001      	beq.n	158a2 <__sflush_r+0x72>
   1589e:	2b16      	cmp	r3, #22
   158a0:	d156      	bne.n	15950 <__sflush_r+0x120>
   158a2:	89a3      	ldrh	r3, [r4, #12]
   158a4:	6922      	ldr	r2, [r4, #16]
   158a6:	6022      	str	r2, [r4, #0]
   158a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   158ac:	2100      	movs	r1, #0
   158ae:	6061      	str	r1, [r4, #4]
   158b0:	81a3      	strh	r3, [r4, #12]
   158b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   158b4:	f8c8 6000 	str.w	r6, [r8]
   158b8:	b321      	cbz	r1, 15904 <__sflush_r+0xd4>
   158ba:	f104 0340 	add.w	r3, r4, #64	; 0x40
   158be:	4299      	cmp	r1, r3
   158c0:	d002      	beq.n	158c8 <__sflush_r+0x98>
   158c2:	4640      	mov	r0, r8
   158c4:	f7fc ff48 	bl	12758 <_free_r>
   158c8:	2000      	movs	r0, #0
   158ca:	6320      	str	r0, [r4, #48]	; 0x30
   158cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   158d0:	6926      	ldr	r6, [r4, #16]
   158d2:	b1be      	cbz	r6, 15904 <__sflush_r+0xd4>
   158d4:	b293      	uxth	r3, r2
   158d6:	6825      	ldr	r5, [r4, #0]
   158d8:	6026      	str	r6, [r4, #0]
   158da:	079a      	lsls	r2, r3, #30
   158dc:	bf0c      	ite	eq
   158de:	6963      	ldreq	r3, [r4, #20]
   158e0:	2300      	movne	r3, #0
   158e2:	1bad      	subs	r5, r5, r6
   158e4:	60a3      	str	r3, [r4, #8]
   158e6:	e00b      	b.n	15900 <__sflush_r+0xd0>
   158e8:	462b      	mov	r3, r5
   158ea:	4632      	mov	r2, r6
   158ec:	69e1      	ldr	r1, [r4, #28]
   158ee:	6a67      	ldr	r7, [r4, #36]	; 0x24
   158f0:	4640      	mov	r0, r8
   158f2:	47b8      	blx	r7
   158f4:	f1b0 0c00 	subs.w	ip, r0, #0
   158f8:	eba5 050c 	sub.w	r5, r5, ip
   158fc:	4466      	add	r6, ip
   158fe:	dd17      	ble.n	15930 <__sflush_r+0x100>
   15900:	2d00      	cmp	r5, #0
   15902:	dcf1      	bgt.n	158e8 <__sflush_r+0xb8>
   15904:	2000      	movs	r0, #0
   15906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1590a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1590c:	2b00      	cmp	r3, #0
   1590e:	dc9d      	bgt.n	1584c <__sflush_r+0x1c>
   15910:	e7f8      	b.n	15904 <__sflush_r+0xd4>
   15912:	6d20      	ldr	r0, [r4, #80]	; 0x50
   15914:	e7ae      	b.n	15874 <__sflush_r+0x44>
   15916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1591a:	6922      	ldr	r2, [r4, #16]
   1591c:	6022      	str	r2, [r4, #0]
   1591e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   15922:	81a3      	strh	r3, [r4, #12]
   15924:	2200      	movs	r2, #0
   15926:	04db      	lsls	r3, r3, #19
   15928:	6062      	str	r2, [r4, #4]
   1592a:	d5c2      	bpl.n	158b2 <__sflush_r+0x82>
   1592c:	6520      	str	r0, [r4, #80]	; 0x50
   1592e:	e7c0      	b.n	158b2 <__sflush_r+0x82>
   15930:	89a3      	ldrh	r3, [r4, #12]
   15932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1593a:	81a3      	strh	r3, [r4, #12]
   1593c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15940:	f8d8 3000 	ldr.w	r3, [r8]
   15944:	2b00      	cmp	r3, #0
   15946:	d093      	beq.n	15870 <__sflush_r+0x40>
   15948:	2b1d      	cmp	r3, #29
   1594a:	d006      	beq.n	1595a <__sflush_r+0x12a>
   1594c:	2b16      	cmp	r3, #22
   1594e:	d004      	beq.n	1595a <__sflush_r+0x12a>
   15950:	89a3      	ldrh	r3, [r4, #12]
   15952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15956:	81a3      	strh	r3, [r4, #12]
   15958:	e7d5      	b.n	15906 <__sflush_r+0xd6>
   1595a:	f8c8 6000 	str.w	r6, [r8]
   1595e:	e7d1      	b.n	15904 <__sflush_r+0xd4>

00015960 <_fflush_r>:
   15960:	b538      	push	{r3, r4, r5, lr}
   15962:	460c      	mov	r4, r1
   15964:	4605      	mov	r5, r0
   15966:	b108      	cbz	r0, 1596c <_fflush_r+0xc>
   15968:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1596a:	b303      	cbz	r3, 159ae <_fflush_r+0x4e>
   1596c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   15970:	b188      	cbz	r0, 15996 <_fflush_r+0x36>
   15972:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15974:	07db      	lsls	r3, r3, #31
   15976:	d401      	bmi.n	1597c <_fflush_r+0x1c>
   15978:	0581      	lsls	r1, r0, #22
   1597a:	d50f      	bpl.n	1599c <_fflush_r+0x3c>
   1597c:	4628      	mov	r0, r5
   1597e:	4621      	mov	r1, r4
   15980:	f7ff ff56 	bl	15830 <__sflush_r>
   15984:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15986:	07da      	lsls	r2, r3, #31
   15988:	4605      	mov	r5, r0
   1598a:	d402      	bmi.n	15992 <_fflush_r+0x32>
   1598c:	89a3      	ldrh	r3, [r4, #12]
   1598e:	059b      	lsls	r3, r3, #22
   15990:	d508      	bpl.n	159a4 <_fflush_r+0x44>
   15992:	4628      	mov	r0, r5
   15994:	bd38      	pop	{r3, r4, r5, pc}
   15996:	4605      	mov	r5, r0
   15998:	4628      	mov	r0, r5
   1599a:	bd38      	pop	{r3, r4, r5, pc}
   1599c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1599e:	f7fc fd63 	bl	12468 <__retarget_lock_acquire_recursive>
   159a2:	e7eb      	b.n	1597c <_fflush_r+0x1c>
   159a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   159a6:	f7fc fd61 	bl	1246c <__retarget_lock_release_recursive>
   159aa:	4628      	mov	r0, r5
   159ac:	bd38      	pop	{r3, r4, r5, pc}
   159ae:	f7fc f923 	bl	11bf8 <__sinit>
   159b2:	e7db      	b.n	1596c <_fflush_r+0xc>

000159b4 <__sread>:
   159b4:	b510      	push	{r4, lr}
   159b6:	460c      	mov	r4, r1
   159b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   159bc:	f000 f87a 	bl	15ab4 <_read_r>
   159c0:	2800      	cmp	r0, #0
   159c2:	db03      	blt.n	159cc <__sread+0x18>
   159c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   159c6:	4403      	add	r3, r0
   159c8:	6523      	str	r3, [r4, #80]	; 0x50
   159ca:	bd10      	pop	{r4, pc}
   159cc:	89a3      	ldrh	r3, [r4, #12]
   159ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   159d2:	81a3      	strh	r3, [r4, #12]
   159d4:	bd10      	pop	{r4, pc}
   159d6:	bf00      	nop

000159d8 <__swrite>:
   159d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159dc:	460c      	mov	r4, r1
   159de:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   159e2:	461f      	mov	r7, r3
   159e4:	05cb      	lsls	r3, r1, #23
   159e6:	4605      	mov	r5, r0
   159e8:	4616      	mov	r6, r2
   159ea:	d40b      	bmi.n	15a04 <__swrite+0x2c>
   159ec:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   159f0:	81a1      	strh	r1, [r4, #12]
   159f2:	463b      	mov	r3, r7
   159f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   159f8:	4632      	mov	r2, r6
   159fa:	4628      	mov	r0, r5
   159fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15a00:	f7fc bb16 	b.w	12030 <_write_r>
   15a04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   15a08:	2302      	movs	r3, #2
   15a0a:	2200      	movs	r2, #0
   15a0c:	f000 f83c 	bl	15a88 <_lseek_r>
   15a10:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   15a14:	e7ea      	b.n	159ec <__swrite+0x14>
   15a16:	bf00      	nop

00015a18 <__sseek>:
   15a18:	b510      	push	{r4, lr}
   15a1a:	460c      	mov	r4, r1
   15a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   15a20:	f000 f832 	bl	15a88 <_lseek_r>
   15a24:	89a3      	ldrh	r3, [r4, #12]
   15a26:	1c42      	adds	r2, r0, #1
   15a28:	bf0e      	itee	eq
   15a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   15a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   15a32:	6520      	strne	r0, [r4, #80]	; 0x50
   15a34:	81a3      	strh	r3, [r4, #12]
   15a36:	bd10      	pop	{r4, pc}

00015a38 <__sclose>:
   15a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   15a3c:	f000 b812 	b.w	15a64 <_close_r>

00015a40 <__ascii_wctomb>:
   15a40:	b149      	cbz	r1, 15a56 <__ascii_wctomb+0x16>
   15a42:	2aff      	cmp	r2, #255	; 0xff
   15a44:	d802      	bhi.n	15a4c <__ascii_wctomb+0xc>
   15a46:	700a      	strb	r2, [r1, #0]
   15a48:	2001      	movs	r0, #1
   15a4a:	4770      	bx	lr
   15a4c:	238a      	movs	r3, #138	; 0x8a
   15a4e:	6003      	str	r3, [r0, #0]
   15a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15a54:	4770      	bx	lr
   15a56:	4608      	mov	r0, r1
   15a58:	4770      	bx	lr
   15a5a:	bf00      	nop

00015a5c <_localeconv_r>:
   15a5c:	4800      	ldr	r0, [pc, #0]	; (15a60 <_localeconv_r+0x4>)
   15a5e:	4770      	bx	lr
   15a60:	2000300c 	.word	0x2000300c

00015a64 <_close_r>:
   15a64:	b538      	push	{r3, r4, r5, lr}
   15a66:	4d07      	ldr	r5, [pc, #28]	; (15a84 <_close_r+0x20>)
   15a68:	2200      	movs	r2, #0
   15a6a:	4604      	mov	r4, r0
   15a6c:	4608      	mov	r0, r1
   15a6e:	602a      	str	r2, [r5, #0]
   15a70:	f7f8 ff8c 	bl	e98c <_close>
   15a74:	1c43      	adds	r3, r0, #1
   15a76:	d000      	beq.n	15a7a <_close_r+0x16>
   15a78:	bd38      	pop	{r3, r4, r5, pc}
   15a7a:	682b      	ldr	r3, [r5, #0]
   15a7c:	2b00      	cmp	r3, #0
   15a7e:	d0fb      	beq.n	15a78 <_close_r+0x14>
   15a80:	6023      	str	r3, [r4, #0]
   15a82:	bd38      	pop	{r3, r4, r5, pc}
   15a84:	200047dc 	.word	0x200047dc

00015a88 <_lseek_r>:
   15a88:	b538      	push	{r3, r4, r5, lr}
   15a8a:	460c      	mov	r4, r1
   15a8c:	4d08      	ldr	r5, [pc, #32]	; (15ab0 <_lseek_r+0x28>)
   15a8e:	4684      	mov	ip, r0
   15a90:	4611      	mov	r1, r2
   15a92:	4620      	mov	r0, r4
   15a94:	461a      	mov	r2, r3
   15a96:	2300      	movs	r3, #0
   15a98:	602b      	str	r3, [r5, #0]
   15a9a:	4664      	mov	r4, ip
   15a9c:	f7f8 ff82 	bl	e9a4 <_lseek>
   15aa0:	1c43      	adds	r3, r0, #1
   15aa2:	d000      	beq.n	15aa6 <_lseek_r+0x1e>
   15aa4:	bd38      	pop	{r3, r4, r5, pc}
   15aa6:	682b      	ldr	r3, [r5, #0]
   15aa8:	2b00      	cmp	r3, #0
   15aaa:	d0fb      	beq.n	15aa4 <_lseek_r+0x1c>
   15aac:	6023      	str	r3, [r4, #0]
   15aae:	bd38      	pop	{r3, r4, r5, pc}
   15ab0:	200047dc 	.word	0x200047dc

00015ab4 <_read_r>:
   15ab4:	b538      	push	{r3, r4, r5, lr}
   15ab6:	460c      	mov	r4, r1
   15ab8:	4d08      	ldr	r5, [pc, #32]	; (15adc <_read_r+0x28>)
   15aba:	4684      	mov	ip, r0
   15abc:	4611      	mov	r1, r2
   15abe:	4620      	mov	r0, r4
   15ac0:	461a      	mov	r2, r3
   15ac2:	2300      	movs	r3, #0
   15ac4:	602b      	str	r3, [r5, #0]
   15ac6:	4664      	mov	r4, ip
   15ac8:	f7f8 ff5e 	bl	e988 <_read>
   15acc:	1c43      	adds	r3, r0, #1
   15ace:	d000      	beq.n	15ad2 <_read_r+0x1e>
   15ad0:	bd38      	pop	{r3, r4, r5, pc}
   15ad2:	682b      	ldr	r3, [r5, #0]
   15ad4:	2b00      	cmp	r3, #0
   15ad6:	d0fb      	beq.n	15ad0 <_read_r+0x1c>
   15ad8:	6023      	str	r3, [r4, #0]
   15ada:	bd38      	pop	{r3, r4, r5, pc}
   15adc:	200047dc 	.word	0x200047dc

00015ae0 <_wcrtomb_r>:
   15ae0:	b570      	push	{r4, r5, r6, lr}
   15ae2:	4605      	mov	r5, r0
   15ae4:	b084      	sub	sp, #16
   15ae6:	b15b      	cbz	r3, 15b00 <_wcrtomb_r+0x20>
   15ae8:	461c      	mov	r4, r3
   15aea:	b169      	cbz	r1, 15b08 <_wcrtomb_r+0x28>
   15aec:	4b0e      	ldr	r3, [pc, #56]	; (15b28 <_wcrtomb_r+0x48>)
   15aee:	4628      	mov	r0, r5
   15af0:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   15af4:	4623      	mov	r3, r4
   15af6:	47b0      	blx	r6
   15af8:	1c43      	adds	r3, r0, #1
   15afa:	d00f      	beq.n	15b1c <_wcrtomb_r+0x3c>
   15afc:	b004      	add	sp, #16
   15afe:	bd70      	pop	{r4, r5, r6, pc}
   15b00:	f500 7482 	add.w	r4, r0, #260	; 0x104
   15b04:	2900      	cmp	r1, #0
   15b06:	d1f1      	bne.n	15aec <_wcrtomb_r+0xc>
   15b08:	4a07      	ldr	r2, [pc, #28]	; (15b28 <_wcrtomb_r+0x48>)
   15b0a:	4623      	mov	r3, r4
   15b0c:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   15b10:	4628      	mov	r0, r5
   15b12:	460a      	mov	r2, r1
   15b14:	a901      	add	r1, sp, #4
   15b16:	47b0      	blx	r6
   15b18:	1c43      	adds	r3, r0, #1
   15b1a:	d1ef      	bne.n	15afc <_wcrtomb_r+0x1c>
   15b1c:	2200      	movs	r2, #0
   15b1e:	238a      	movs	r3, #138	; 0x8a
   15b20:	6022      	str	r2, [r4, #0]
   15b22:	602b      	str	r3, [r5, #0]
   15b24:	b004      	add	sp, #16
   15b26:	bd70      	pop	{r4, r5, r6, pc}
   15b28:	20002f1c 	.word	0x20002f1c

00015b2c <_wcsrtombs_r>:
   15b2c:	b510      	push	{r4, lr}
   15b2e:	b082      	sub	sp, #8
   15b30:	9c04      	ldr	r4, [sp, #16]
   15b32:	e9cd 3400 	strd	r3, r4, [sp]
   15b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15b3a:	f002 fb6b 	bl	18214 <_wcsnrtombs_r>
   15b3e:	b002      	add	sp, #8
   15b40:	bd10      	pop	{r4, pc}
   15b42:	bf00      	nop
   15b44:	0000      	movs	r0, r0
	...

00015b48 <frexp>:
   15b48:	b430      	push	{r4, r5}
   15b4a:	b082      	sub	sp, #8
   15b4c:	ed8d 0b00 	vstr	d0, [sp]
   15b50:	9a01      	ldr	r2, [sp, #4]
   15b52:	4c19      	ldr	r4, [pc, #100]	; (15bb8 <frexp+0x70>)
   15b54:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   15b58:	2100      	movs	r1, #0
   15b5a:	42a3      	cmp	r3, r4
   15b5c:	6001      	str	r1, [r0, #0]
   15b5e:	dc21      	bgt.n	15ba4 <frexp+0x5c>
   15b60:	9c00      	ldr	r4, [sp, #0]
   15b62:	431c      	orrs	r4, r3
   15b64:	d01e      	beq.n	15ba4 <frexp+0x5c>
   15b66:	4c15      	ldr	r4, [pc, #84]	; (15bbc <frexp+0x74>)
   15b68:	4014      	ands	r4, r2
   15b6a:	b954      	cbnz	r4, 15b82 <frexp+0x3a>
   15b6c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 15bb0 <frexp+0x68>
   15b70:	ee20 7b07 	vmul.f64	d7, d0, d7
   15b74:	ed8d 7b00 	vstr	d7, [sp]
   15b78:	9a01      	ldr	r2, [sp, #4]
   15b7a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   15b7e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   15b82:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   15b86:	e9dd 4500 	ldrd	r4, r5, [sp]
   15b8a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   15b8e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   15b92:	151b      	asrs	r3, r3, #20
   15b94:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   15b98:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   15b9c:	e9cd 4500 	strd	r4, r5, [sp]
   15ba0:	440b      	add	r3, r1
   15ba2:	6003      	str	r3, [r0, #0]
   15ba4:	ed9d 0b00 	vldr	d0, [sp]
   15ba8:	b002      	add	sp, #8
   15baa:	bc30      	pop	{r4, r5}
   15bac:	4770      	bx	lr
   15bae:	bf00      	nop
   15bb0:	00000000 	.word	0x00000000
   15bb4:	43500000 	.word	0x43500000
   15bb8:	7fefffff 	.word	0x7fefffff
   15bbc:	7ff00000 	.word	0x7ff00000

00015bc0 <__assert_func>:
   15bc0:	b500      	push	{lr}
   15bc2:	4c0b      	ldr	r4, [pc, #44]	; (15bf0 <__assert_func+0x30>)
   15bc4:	6825      	ldr	r5, [r4, #0]
   15bc6:	4614      	mov	r4, r2
   15bc8:	68ee      	ldr	r6, [r5, #12]
   15bca:	461a      	mov	r2, r3
   15bcc:	b085      	sub	sp, #20
   15bce:	4603      	mov	r3, r0
   15bd0:	460d      	mov	r5, r1
   15bd2:	b14c      	cbz	r4, 15be8 <__assert_func+0x28>
   15bd4:	4907      	ldr	r1, [pc, #28]	; (15bf4 <__assert_func+0x34>)
   15bd6:	9500      	str	r5, [sp, #0]
   15bd8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   15bdc:	4630      	mov	r0, r6
   15bde:	4906      	ldr	r1, [pc, #24]	; (15bf8 <__assert_func+0x38>)
   15be0:	f000 ff54 	bl	16a8c <fiprintf>
   15be4:	f7f8 fee4 	bl	e9b0 <abort>
   15be8:	4904      	ldr	r1, [pc, #16]	; (15bfc <__assert_func+0x3c>)
   15bea:	460c      	mov	r4, r1
   15bec:	e7f3      	b.n	15bd6 <__assert_func+0x16>
   15bee:	bf00      	nop
   15bf0:	200034a4 	.word	0x200034a4
   15bf4:	2000160c 	.word	0x2000160c
   15bf8:	2000161c 	.word	0x2000161c
   15bfc:	200011ec 	.word	0x200011ec

00015c00 <_calloc_r>:
   15c00:	b538      	push	{r3, r4, r5, lr}
   15c02:	fba1 1402 	umull	r1, r4, r1, r2
   15c06:	bb8c      	cbnz	r4, 15c6c <_calloc_r+0x6c>
   15c08:	f7fa f9ac 	bl	ff64 <_malloc_r>
   15c0c:	4605      	mov	r5, r0
   15c0e:	b1e0      	cbz	r0, 15c4a <_calloc_r+0x4a>
   15c10:	f850 2c04 	ldr.w	r2, [r0, #-4]
   15c14:	f022 0203 	bic.w	r2, r2, #3
   15c18:	3a04      	subs	r2, #4
   15c1a:	2a24      	cmp	r2, #36	; 0x24
   15c1c:	d817      	bhi.n	15c4e <_calloc_r+0x4e>
   15c1e:	2a13      	cmp	r2, #19
   15c20:	d91a      	bls.n	15c58 <_calloc_r+0x58>
   15c22:	2a1b      	cmp	r2, #27
   15c24:	e9c0 4400 	strd	r4, r4, [r0]
   15c28:	d91d      	bls.n	15c66 <_calloc_r+0x66>
   15c2a:	2a24      	cmp	r2, #36	; 0x24
   15c2c:	bf14      	ite	ne
   15c2e:	f100 0210 	addne.w	r2, r0, #16
   15c32:	f100 0218 	addeq.w	r2, r0, #24
   15c36:	f04f 0300 	mov.w	r3, #0
   15c3a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   15c3e:	bf04      	itt	eq
   15c40:	6104      	streq	r4, [r0, #16]
   15c42:	6144      	streq	r4, [r0, #20]
   15c44:	e9c2 3300 	strd	r3, r3, [r2]
   15c48:	6093      	str	r3, [r2, #8]
   15c4a:	4628      	mov	r0, r5
   15c4c:	bd38      	pop	{r3, r4, r5, pc}
   15c4e:	4621      	mov	r1, r4
   15c50:	f7fc f8cc 	bl	11dec <memset>
   15c54:	4628      	mov	r0, r5
   15c56:	bd38      	pop	{r3, r4, r5, pc}
   15c58:	4602      	mov	r2, r0
   15c5a:	2300      	movs	r3, #0
   15c5c:	e9c2 3300 	strd	r3, r3, [r2]
   15c60:	6093      	str	r3, [r2, #8]
   15c62:	4628      	mov	r0, r5
   15c64:	bd38      	pop	{r3, r4, r5, pc}
   15c66:	f100 0208 	add.w	r2, r0, #8
   15c6a:	e7f6      	b.n	15c5a <_calloc_r+0x5a>
   15c6c:	f7fc f9f6 	bl	1205c <__errno>
   15c70:	230c      	movs	r3, #12
   15c72:	2500      	movs	r5, #0
   15c74:	6003      	str	r3, [r0, #0]
   15c76:	e7e8      	b.n	15c4a <_calloc_r+0x4a>

00015c78 <quorem>:
   15c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c7c:	6903      	ldr	r3, [r0, #16]
   15c7e:	690c      	ldr	r4, [r1, #16]
   15c80:	42a3      	cmp	r3, r4
   15c82:	b083      	sub	sp, #12
   15c84:	f2c0 8087 	blt.w	15d96 <quorem+0x11e>
   15c88:	3c01      	subs	r4, #1
   15c8a:	f101 0514 	add.w	r5, r1, #20
   15c8e:	00a3      	lsls	r3, r4, #2
   15c90:	f100 0814 	add.w	r8, r0, #20
   15c94:	9300      	str	r3, [sp, #0]
   15c96:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   15c9a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   15c9e:	3301      	adds	r3, #1
   15ca0:	4681      	mov	r9, r0
   15ca2:	429a      	cmp	r2, r3
   15ca4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   15ca8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   15cac:	9001      	str	r0, [sp, #4]
   15cae:	fbb2 f6f3 	udiv	r6, r2, r3
   15cb2:	d33b      	bcc.n	15d2c <quorem+0xb4>
   15cb4:	f04f 0c00 	mov.w	ip, #0
   15cb8:	46ae      	mov	lr, r5
   15cba:	4640      	mov	r0, r8
   15cbc:	46e2      	mov	sl, ip
   15cbe:	4663      	mov	r3, ip
   15cc0:	f85e bb04 	ldr.w	fp, [lr], #4
   15cc4:	6802      	ldr	r2, [r0, #0]
   15cc6:	fa1f fc8b 	uxth.w	ip, fp
   15cca:	fb06 330c 	mla	r3, r6, ip, r3
   15cce:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   15cd2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   15cd6:	fb06 cc0b 	mla	ip, r6, fp, ip
   15cda:	b29b      	uxth	r3, r3
   15cdc:	ebaa 0303 	sub.w	r3, sl, r3
   15ce0:	fa1f fa8c 	uxth.w	sl, ip
   15ce4:	fa13 f382 	uxtah	r3, r3, r2
   15ce8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   15cec:	eb02 4223 	add.w	r2, r2, r3, asr #16
   15cf0:	b29b      	uxth	r3, r3
   15cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   15cf6:	4577      	cmp	r7, lr
   15cf8:	f840 3b04 	str.w	r3, [r0], #4
   15cfc:	ea4f 4a22 	mov.w	sl, r2, asr #16
   15d00:	ea4f 431c 	mov.w	r3, ip, lsr #16
   15d04:	d2dc      	bcs.n	15cc0 <quorem+0x48>
   15d06:	9b00      	ldr	r3, [sp, #0]
   15d08:	f858 3003 	ldr.w	r3, [r8, r3]
   15d0c:	b973      	cbnz	r3, 15d2c <quorem+0xb4>
   15d0e:	9b01      	ldr	r3, [sp, #4]
   15d10:	3b04      	subs	r3, #4
   15d12:	4598      	cmp	r8, r3
   15d14:	d304      	bcc.n	15d20 <quorem+0xa8>
   15d16:	e007      	b.n	15d28 <quorem+0xb0>
   15d18:	4598      	cmp	r8, r3
   15d1a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   15d1e:	d203      	bcs.n	15d28 <quorem+0xb0>
   15d20:	f853 2904 	ldr.w	r2, [r3], #-4
   15d24:	2a00      	cmp	r2, #0
   15d26:	d0f7      	beq.n	15d18 <quorem+0xa0>
   15d28:	f8c9 4010 	str.w	r4, [r9, #16]
   15d2c:	4648      	mov	r0, r9
   15d2e:	f7ff fabf 	bl	152b0 <__mcmp>
   15d32:	2800      	cmp	r0, #0
   15d34:	db2b      	blt.n	15d8e <quorem+0x116>
   15d36:	3601      	adds	r6, #1
   15d38:	4641      	mov	r1, r8
   15d3a:	2300      	movs	r3, #0
   15d3c:	f855 0b04 	ldr.w	r0, [r5], #4
   15d40:	f8d1 c000 	ldr.w	ip, [r1]
   15d44:	b282      	uxth	r2, r0
   15d46:	1a9a      	subs	r2, r3, r2
   15d48:	0c03      	lsrs	r3, r0, #16
   15d4a:	fa12 f28c 	uxtah	r2, r2, ip
   15d4e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   15d52:	eb03 4322 	add.w	r3, r3, r2, asr #16
   15d56:	b292      	uxth	r2, r2
   15d58:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   15d5c:	42af      	cmp	r7, r5
   15d5e:	f841 2b04 	str.w	r2, [r1], #4
   15d62:	ea4f 4323 	mov.w	r3, r3, asr #16
   15d66:	d2e9      	bcs.n	15d3c <quorem+0xc4>
   15d68:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   15d6c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   15d70:	b96a      	cbnz	r2, 15d8e <quorem+0x116>
   15d72:	3b04      	subs	r3, #4
   15d74:	4598      	cmp	r8, r3
   15d76:	d304      	bcc.n	15d82 <quorem+0x10a>
   15d78:	e007      	b.n	15d8a <quorem+0x112>
   15d7a:	4598      	cmp	r8, r3
   15d7c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   15d80:	d203      	bcs.n	15d8a <quorem+0x112>
   15d82:	f853 2904 	ldr.w	r2, [r3], #-4
   15d86:	2a00      	cmp	r2, #0
   15d88:	d0f7      	beq.n	15d7a <quorem+0x102>
   15d8a:	f8c9 4010 	str.w	r4, [r9, #16]
   15d8e:	4630      	mov	r0, r6
   15d90:	b003      	add	sp, #12
   15d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d96:	2000      	movs	r0, #0
   15d98:	b003      	add	sp, #12
   15d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d9e:	bf00      	nop

00015da0 <_dtoa_r>:
   15da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15da4:	ed2d 8b02 	vpush	{d8}
   15da8:	b08f      	sub	sp, #60	; 0x3c
   15daa:	ed8d 0b02 	vstr	d0, [sp, #8]
   15dae:	9101      	str	r1, [sp, #4]
   15db0:	6b81      	ldr	r1, [r0, #56]	; 0x38
   15db2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   15db4:	9305      	str	r3, [sp, #20]
   15db6:	ec57 6b10 	vmov	r6, r7, d0
   15dba:	4604      	mov	r4, r0
   15dbc:	4693      	mov	fp, r2
   15dbe:	b141      	cbz	r1, 15dd2 <_dtoa_r+0x32>
   15dc0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   15dc2:	604a      	str	r2, [r1, #4]
   15dc4:	2301      	movs	r3, #1
   15dc6:	4093      	lsls	r3, r2
   15dc8:	608b      	str	r3, [r1, #8]
   15dca:	f7fe ffb9 	bl	14d40 <_Bfree>
   15dce:	2300      	movs	r3, #0
   15dd0:	63a3      	str	r3, [r4, #56]	; 0x38
   15dd2:	f1b7 0800 	subs.w	r8, r7, #0
   15dd6:	bfb4      	ite	lt
   15dd8:	2301      	movlt	r3, #1
   15dda:	2300      	movge	r3, #0
   15ddc:	602b      	str	r3, [r5, #0]
   15dde:	4bbe      	ldr	r3, [pc, #760]	; (160d8 <_dtoa_r+0x338>)
   15de0:	bfbc      	itt	lt
   15de2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   15de6:	f8cd 800c 	strlt.w	r8, [sp, #12]
   15dea:	ea33 0308 	bics.w	r3, r3, r8
   15dee:	f000 809f 	beq.w	15f30 <_dtoa_r+0x190>
   15df2:	ed9d 8b02 	vldr	d8, [sp, #8]
   15df6:	eeb5 8b40 	vcmp.f64	d8, #0.0
   15dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15dfe:	d111      	bne.n	15e24 <_dtoa_r+0x84>
   15e00:	9a05      	ldr	r2, [sp, #20]
   15e02:	2301      	movs	r3, #1
   15e04:	6013      	str	r3, [r2, #0]
   15e06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15e08:	2b00      	cmp	r3, #0
   15e0a:	f000 823f 	beq.w	1628c <_dtoa_r+0x4ec>
   15e0e:	4bb3      	ldr	r3, [pc, #716]	; (160dc <_dtoa_r+0x33c>)
   15e10:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15e12:	6013      	str	r3, [r2, #0]
   15e14:	3b01      	subs	r3, #1
   15e16:	9300      	str	r3, [sp, #0]
   15e18:	9800      	ldr	r0, [sp, #0]
   15e1a:	b00f      	add	sp, #60	; 0x3c
   15e1c:	ecbd 8b02 	vpop	{d8}
   15e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e24:	aa0c      	add	r2, sp, #48	; 0x30
   15e26:	a90d      	add	r1, sp, #52	; 0x34
   15e28:	4620      	mov	r0, r4
   15e2a:	eeb0 0b48 	vmov.f64	d0, d8
   15e2e:	f7ff fb9f 	bl	15570 <__d2b>
   15e32:	ea5f 5318 	movs.w	r3, r8, lsr #20
   15e36:	4605      	mov	r5, r0
   15e38:	f040 8092 	bne.w	15f60 <_dtoa_r+0x1c0>
   15e3c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   15e40:	440b      	add	r3, r1
   15e42:	f203 4232 	addw	r2, r3, #1074	; 0x432
   15e46:	2a20      	cmp	r2, #32
   15e48:	f340 82fa 	ble.w	16440 <_dtoa_r+0x6a0>
   15e4c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   15e50:	fa08 f802 	lsl.w	r8, r8, r2
   15e54:	f203 4212 	addw	r2, r3, #1042	; 0x412
   15e58:	40d6      	lsrs	r6, r2
   15e5a:	ea48 0206 	orr.w	r2, r8, r6
   15e5e:	ee07 2a10 	vmov	s14, r2
   15e62:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   15e66:	1e58      	subs	r0, r3, #1
   15e68:	ee17 6a90 	vmov	r6, s15
   15e6c:	ec53 2b17 	vmov	r2, r3, d7
   15e70:	f04f 0a01 	mov.w	sl, #1
   15e74:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   15e78:	ed9f 3b91 	vldr	d3, [pc, #580]	; 160c0 <_dtoa_r+0x320>
   15e7c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 160c8 <_dtoa_r+0x328>
   15e80:	ed9f 5b93 	vldr	d5, [pc, #588]	; 160d0 <_dtoa_r+0x330>
   15e84:	ee06 0a90 	vmov	s13, r0
   15e88:	ec43 2b12 	vmov	d2, r2, r3
   15e8c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   15e90:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   15e94:	ee32 6b46 	vsub.f64	d6, d2, d6
   15e98:	eea6 7b03 	vfma.f64	d7, d6, d3
   15e9c:	eea4 7b05 	vfma.f64	d7, d4, d5
   15ea0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   15ea4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   15ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15eac:	ee16 7a90 	vmov	r7, s13
   15eb0:	d508      	bpl.n	15ec4 <_dtoa_r+0x124>
   15eb2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   15eb6:	eeb4 6b47 	vcmp.f64	d6, d7
   15eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15ebe:	bf18      	it	ne
   15ec0:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   15ec4:	2f16      	cmp	r7, #22
   15ec6:	f200 8145 	bhi.w	16154 <_dtoa_r+0x3b4>
   15eca:	4b85      	ldr	r3, [pc, #532]	; (160e0 <_dtoa_r+0x340>)
   15ecc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   15ed0:	ed93 7b00 	vldr	d7, [r3]
   15ed4:	eeb4 8bc7 	vcmpe.f64	d8, d7
   15ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15edc:	d557      	bpl.n	15f8e <_dtoa_r+0x1ee>
   15ede:	1a09      	subs	r1, r1, r0
   15ee0:	2300      	movs	r3, #0
   15ee2:	f1b1 0801 	subs.w	r8, r1, #1
   15ee6:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   15eea:	930a      	str	r3, [sp, #40]	; 0x28
   15eec:	f100 8139 	bmi.w	16162 <_dtoa_r+0x3c2>
   15ef0:	2300      	movs	r3, #0
   15ef2:	9306      	str	r3, [sp, #24]
   15ef4:	2f00      	cmp	r7, #0
   15ef6:	da52      	bge.n	15f9e <_dtoa_r+0x1fe>
   15ef8:	9b06      	ldr	r3, [sp, #24]
   15efa:	9704      	str	r7, [sp, #16]
   15efc:	1bdb      	subs	r3, r3, r7
   15efe:	9306      	str	r3, [sp, #24]
   15f00:	427b      	negs	r3, r7
   15f02:	9308      	str	r3, [sp, #32]
   15f04:	9b01      	ldr	r3, [sp, #4]
   15f06:	2b09      	cmp	r3, #9
   15f08:	f04f 0700 	mov.w	r7, #0
   15f0c:	d84e      	bhi.n	15fac <_dtoa_r+0x20c>
   15f0e:	2b05      	cmp	r3, #5
   15f10:	f340 829d 	ble.w	1644e <_dtoa_r+0x6ae>
   15f14:	3b04      	subs	r3, #4
   15f16:	9301      	str	r3, [sp, #4]
   15f18:	2600      	movs	r6, #0
   15f1a:	9b01      	ldr	r3, [sp, #4]
   15f1c:	1e9a      	subs	r2, r3, #2
   15f1e:	2a03      	cmp	r2, #3
   15f20:	f200 8125 	bhi.w	1616e <_dtoa_r+0x3ce>
   15f24:	e8df f012 	tbh	[pc, r2, lsl #1]
   15f28:	03a703aa 	.word	0x03a703aa
   15f2c:	037e039d 	.word	0x037e039d
   15f30:	9a05      	ldr	r2, [sp, #20]
   15f32:	f3c8 0813 	ubfx	r8, r8, #0, #20
   15f36:	f242 730f 	movw	r3, #9999	; 0x270f
   15f3a:	ea58 0806 	orrs.w	r8, r8, r6
   15f3e:	6013      	str	r3, [r2, #0]
   15f40:	d11e      	bne.n	15f80 <_dtoa_r+0x1e0>
   15f42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15f44:	2b00      	cmp	r3, #0
   15f46:	f000 8591 	beq.w	16a6c <_dtoa_r+0xccc>
   15f4a:	4b66      	ldr	r3, [pc, #408]	; (160e4 <_dtoa_r+0x344>)
   15f4c:	9300      	str	r3, [sp, #0]
   15f4e:	3308      	adds	r3, #8
   15f50:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15f52:	9800      	ldr	r0, [sp, #0]
   15f54:	6013      	str	r3, [r2, #0]
   15f56:	b00f      	add	sp, #60	; 0x3c
   15f58:	ecbd 8b02 	vpop	{d8}
   15f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f60:	ee18 6a90 	vmov	r6, s17
   15f64:	f3c6 0613 	ubfx	r6, r6, #0, #20
   15f68:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   15f6c:	ec53 2b18 	vmov	r2, r3, d8
   15f70:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   15f74:	990c      	ldr	r1, [sp, #48]	; 0x30
   15f76:	f04f 0a00 	mov.w	sl, #0
   15f7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   15f7e:	e77b      	b.n	15e78 <_dtoa_r+0xd8>
   15f80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15f82:	2b00      	cmp	r3, #0
   15f84:	f040 833b 	bne.w	165fe <_dtoa_r+0x85e>
   15f88:	4b57      	ldr	r3, [pc, #348]	; (160e8 <_dtoa_r+0x348>)
   15f8a:	9300      	str	r3, [sp, #0]
   15f8c:	e744      	b.n	15e18 <_dtoa_r+0x78>
   15f8e:	1a09      	subs	r1, r1, r0
   15f90:	2300      	movs	r3, #0
   15f92:	f1b1 0801 	subs.w	r8, r1, #1
   15f96:	930a      	str	r3, [sp, #40]	; 0x28
   15f98:	f100 80e3 	bmi.w	16162 <_dtoa_r+0x3c2>
   15f9c:	9306      	str	r3, [sp, #24]
   15f9e:	2300      	movs	r3, #0
   15fa0:	9308      	str	r3, [sp, #32]
   15fa2:	9b01      	ldr	r3, [sp, #4]
   15fa4:	9704      	str	r7, [sp, #16]
   15fa6:	2b09      	cmp	r3, #9
   15fa8:	44b8      	add	r8, r7
   15faa:	d9b0      	bls.n	15f0e <_dtoa_r+0x16e>
   15fac:	2300      	movs	r3, #0
   15fae:	2601      	movs	r6, #1
   15fb0:	9301      	str	r3, [sp, #4]
   15fb2:	9607      	str	r6, [sp, #28]
   15fb4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   15fb8:	469b      	mov	fp, r3
   15fba:	2100      	movs	r1, #0
   15fbc:	63e1      	str	r1, [r4, #60]	; 0x3c
   15fbe:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   15fc2:	4620      	mov	r0, r4
   15fc4:	f7fe fe96 	bl	14cf4 <_Balloc>
   15fc8:	9000      	str	r0, [sp, #0]
   15fca:	2800      	cmp	r0, #0
   15fcc:	f000 8540 	beq.w	16a50 <_dtoa_r+0xcb0>
   15fd0:	9b00      	ldr	r3, [sp, #0]
   15fd2:	63a3      	str	r3, [r4, #56]	; 0x38
   15fd4:	f1b9 0f0e 	cmp.w	r9, #14
   15fd8:	f200 80dc 	bhi.w	16194 <_dtoa_r+0x3f4>
   15fdc:	2e00      	cmp	r6, #0
   15fde:	f000 80d9 	beq.w	16194 <_dtoa_r+0x3f4>
   15fe2:	9b04      	ldr	r3, [sp, #16]
   15fe4:	2b00      	cmp	r3, #0
   15fe6:	f340 83de 	ble.w	167a6 <_dtoa_r+0xa06>
   15fea:	4a3d      	ldr	r2, [pc, #244]	; (160e0 <_dtoa_r+0x340>)
   15fec:	f003 010f 	and.w	r1, r3, #15
   15ff0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   15ff4:	ed92 7b00 	vldr	d7, [r2]
   15ff8:	111a      	asrs	r2, r3, #4
   15ffa:	05db      	lsls	r3, r3, #23
   15ffc:	f140 8382 	bpl.w	16704 <_dtoa_r+0x964>
   16000:	493a      	ldr	r1, [pc, #232]	; (160ec <_dtoa_r+0x34c>)
   16002:	ed91 6b08 	vldr	d6, [r1, #32]
   16006:	f002 020f 	and.w	r2, r2, #15
   1600a:	2003      	movs	r0, #3
   1600c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   16010:	b15a      	cbz	r2, 1602a <_dtoa_r+0x28a>
   16012:	4936      	ldr	r1, [pc, #216]	; (160ec <_dtoa_r+0x34c>)
   16014:	07d6      	lsls	r6, r2, #31
   16016:	d504      	bpl.n	16022 <_dtoa_r+0x282>
   16018:	ed91 6b00 	vldr	d6, [r1]
   1601c:	3001      	adds	r0, #1
   1601e:	ee27 7b06 	vmul.f64	d7, d7, d6
   16022:	1052      	asrs	r2, r2, #1
   16024:	f101 0108 	add.w	r1, r1, #8
   16028:	d1f4      	bne.n	16014 <_dtoa_r+0x274>
   1602a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   1602e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16030:	b13b      	cbz	r3, 16042 <_dtoa_r+0x2a2>
   16032:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   16036:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1603a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1603e:	f100 84ae 	bmi.w	1699e <_dtoa_r+0xbfe>
   16042:	ee07 0a90 	vmov	s15, r0
   16046:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1604a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   1604e:	eea5 7b06 	vfma.f64	d7, d5, d6
   16052:	ee17 2a90 	vmov	r2, s15
   16056:	ec51 0b17 	vmov	r0, r1, d7
   1605a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1605e:	f1b9 0f00 	cmp.w	r9, #0
   16062:	f000 8388 	beq.w	16776 <_dtoa_r+0x9d6>
   16066:	9e04      	ldr	r6, [sp, #16]
   16068:	464a      	mov	r2, r9
   1606a:	9b07      	ldr	r3, [sp, #28]
   1606c:	2b00      	cmp	r3, #0
   1606e:	f000 8447 	beq.w	16900 <_dtoa_r+0xb60>
   16072:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   16076:	4b1a      	ldr	r3, [pc, #104]	; (160e0 <_dtoa_r+0x340>)
   16078:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   1607c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   16080:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   16084:	ee36 7b47 	vsub.f64	d7, d6, d7
   16088:	ed1c 6b02 	vldr	d6, [ip, #-8]
   1608c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   16090:	ec41 0b16 	vmov	d6, r0, r1
   16094:	ee14 0a90 	vmov	r0, s9
   16098:	ee35 5b46 	vsub.f64	d5, d5, d6
   1609c:	9900      	ldr	r1, [sp, #0]
   1609e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   160a2:	3030      	adds	r0, #48	; 0x30
   160a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   160a8:	f801 0b01 	strb.w	r0, [r1], #1
   160ac:	f300 84ac 	bgt.w	16a08 <_dtoa_r+0xc68>
   160b0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   160b4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   160b8:	f04f 0c00 	mov.w	ip, #0
   160bc:	e031      	b.n	16122 <_dtoa_r+0x382>
   160be:	bf00      	nop
   160c0:	636f4361 	.word	0x636f4361
   160c4:	3fd287a7 	.word	0x3fd287a7
   160c8:	8b60c8b3 	.word	0x8b60c8b3
   160cc:	3fc68a28 	.word	0x3fc68a28
   160d0:	509f79fb 	.word	0x509f79fb
   160d4:	3fd34413 	.word	0x3fd34413
   160d8:	7ff00000 	.word	0x7ff00000
   160dc:	200019f1 	.word	0x200019f1
   160e0:	200002a8 	.word	0x200002a8
   160e4:	20001934 	.word	0x20001934
   160e8:	20001940 	.word	0x20001940
   160ec:	20000280 	.word	0x20000280
   160f0:	f10c 0c01 	add.w	ip, ip, #1
   160f4:	4594      	cmp	ip, r2
   160f6:	da4d      	bge.n	16194 <_dtoa_r+0x3f4>
   160f8:	ee27 7b04 	vmul.f64	d7, d7, d4
   160fc:	ee25 5b04 	vmul.f64	d5, d5, d4
   16100:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   16104:	ee16 3a90 	vmov	r3, s13
   16108:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   1610c:	3330      	adds	r3, #48	; 0x30
   1610e:	ee37 7b43 	vsub.f64	d7, d7, d3
   16112:	eeb4 7bc5 	vcmpe.f64	d7, d5
   16116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1611a:	f801 3b01 	strb.w	r3, [r1], #1
   1611e:	f100 8473 	bmi.w	16a08 <_dtoa_r+0xc68>
   16122:	ee32 6b47 	vsub.f64	d6, d2, d7
   16126:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1612a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1612e:	d5df      	bpl.n	160f0 <_dtoa_r+0x350>
   16130:	9a00      	ldr	r2, [sp, #0]
   16132:	9604      	str	r6, [sp, #16]
   16134:	e002      	b.n	1613c <_dtoa_r+0x39c>
   16136:	428a      	cmp	r2, r1
   16138:	f000 8450 	beq.w	169dc <_dtoa_r+0xc3c>
   1613c:	4689      	mov	r9, r1
   1613e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   16142:	2b39      	cmp	r3, #57	; 0x39
   16144:	d0f7      	beq.n	16136 <_dtoa_r+0x396>
   16146:	3301      	adds	r3, #1
   16148:	b2db      	uxtb	r3, r3
   1614a:	700b      	strb	r3, [r1, #0]
   1614c:	9b04      	ldr	r3, [sp, #16]
   1614e:	3301      	adds	r3, #1
   16150:	9304      	str	r3, [sp, #16]
   16152:	e155      	b.n	16400 <_dtoa_r+0x660>
   16154:	1a09      	subs	r1, r1, r0
   16156:	2301      	movs	r3, #1
   16158:	f1b1 0801 	subs.w	r8, r1, #1
   1615c:	930a      	str	r3, [sp, #40]	; 0x28
   1615e:	f57f aec7 	bpl.w	15ef0 <_dtoa_r+0x150>
   16162:	f1c1 0301 	rsb	r3, r1, #1
   16166:	9306      	str	r3, [sp, #24]
   16168:	f04f 0800 	mov.w	r8, #0
   1616c:	e6c2      	b.n	15ef4 <_dtoa_r+0x154>
   1616e:	2600      	movs	r6, #0
   16170:	63e6      	str	r6, [r4, #60]	; 0x3c
   16172:	4631      	mov	r1, r6
   16174:	4620      	mov	r0, r4
   16176:	f7fe fdbd 	bl	14cf4 <_Balloc>
   1617a:	9000      	str	r0, [sp, #0]
   1617c:	2800      	cmp	r0, #0
   1617e:	f000 8467 	beq.w	16a50 <_dtoa_r+0xcb0>
   16182:	9b00      	ldr	r3, [sp, #0]
   16184:	63a3      	str	r3, [r4, #56]	; 0x38
   16186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1618a:	930b      	str	r3, [sp, #44]	; 0x2c
   1618c:	4699      	mov	r9, r3
   1618e:	2301      	movs	r3, #1
   16190:	46b3      	mov	fp, r6
   16192:	9307      	str	r3, [sp, #28]
   16194:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16196:	2a00      	cmp	r2, #0
   16198:	db55      	blt.n	16246 <_dtoa_r+0x4a6>
   1619a:	9904      	ldr	r1, [sp, #16]
   1619c:	290e      	cmp	r1, #14
   1619e:	dc52      	bgt.n	16246 <_dtoa_r+0x4a6>
   161a0:	4bb7      	ldr	r3, [pc, #732]	; (16480 <_dtoa_r+0x6e0>)
   161a2:	f1bb 0f00 	cmp.w	fp, #0
   161a6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   161aa:	ed93 6b00 	vldr	d6, [r3]
   161ae:	da15      	bge.n	161dc <_dtoa_r+0x43c>
   161b0:	f1b9 0f00 	cmp.w	r9, #0
   161b4:	dc12      	bgt.n	161dc <_dtoa_r+0x43c>
   161b6:	f040 82f2 	bne.w	1679e <_dtoa_r+0x9fe>
   161ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   161be:	ee26 7b07 	vmul.f64	d7, d6, d7
   161c2:	eeb4 8bc7 	vcmpe.f64	d8, d7
   161c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   161ca:	46ca      	mov	sl, r9
   161cc:	464e      	mov	r6, r9
   161ce:	f200 826d 	bhi.w	166ac <_dtoa_r+0x90c>
   161d2:	f8dd 8000 	ldr.w	r8, [sp]
   161d6:	ea6f 0b0b 	mvn.w	fp, fp
   161da:	e270      	b.n	166be <_dtoa_r+0x91e>
   161dc:	ee88 7b06 	vdiv.f64	d7, d8, d6
   161e0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   161e4:	9900      	ldr	r1, [sp, #0]
   161e6:	ee17 3a10 	vmov	r3, s14
   161ea:	f1b9 0f01 	cmp.w	r9, #1
   161ee:	f103 0330 	add.w	r3, r3, #48	; 0x30
   161f2:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   161f6:	f801 3b01 	strb.w	r3, [r1], #1
   161fa:	eea5 8b46 	vfms.f64	d8, d5, d6
   161fe:	f000 8334 	beq.w	1686a <_dtoa_r+0xaca>
   16202:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   16206:	2301      	movs	r3, #1
   16208:	e011      	b.n	1622e <_dtoa_r+0x48e>
   1620a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   1620e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   16212:	3301      	adds	r3, #1
   16214:	ee17 2a10 	vmov	r2, s14
   16218:	454b      	cmp	r3, r9
   1621a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   1621e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   16222:	f801 2b01 	strb.w	r2, [r1], #1
   16226:	eea5 8b46 	vfms.f64	d8, d5, d6
   1622a:	f000 831e 	beq.w	1686a <_dtoa_r+0xaca>
   1622e:	ee28 8b04 	vmul.f64	d8, d8, d4
   16232:	eeb5 8b40 	vcmp.f64	d8, #0.0
   16236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1623a:	d1e6      	bne.n	1620a <_dtoa_r+0x46a>
   1623c:	9b04      	ldr	r3, [sp, #16]
   1623e:	3301      	adds	r3, #1
   16240:	9304      	str	r3, [sp, #16]
   16242:	4689      	mov	r9, r1
   16244:	e0dc      	b.n	16400 <_dtoa_r+0x660>
   16246:	9b07      	ldr	r3, [sp, #28]
   16248:	b343      	cbz	r3, 1629c <_dtoa_r+0x4fc>
   1624a:	9b01      	ldr	r3, [sp, #4]
   1624c:	2b01      	cmp	r3, #1
   1624e:	f340 8276 	ble.w	1673e <_dtoa_r+0x99e>
   16252:	9b08      	ldr	r3, [sp, #32]
   16254:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   16258:	4553      	cmp	r3, sl
   1625a:	f280 823f 	bge.w	166dc <_dtoa_r+0x93c>
   1625e:	9b08      	ldr	r3, [sp, #32]
   16260:	f8cd a020 	str.w	sl, [sp, #32]
   16264:	ebaa 0203 	sub.w	r2, sl, r3
   16268:	4417      	add	r7, r2
   1626a:	f04f 0a00 	mov.w	sl, #0
   1626e:	f1b9 0f00 	cmp.w	r9, #0
   16272:	f2c0 8325 	blt.w	168c0 <_dtoa_r+0xb20>
   16276:	9b06      	ldr	r3, [sp, #24]
   16278:	9309      	str	r3, [sp, #36]	; 0x24
   1627a:	444b      	add	r3, r9
   1627c:	44c8      	add	r8, r9
   1627e:	9306      	str	r3, [sp, #24]
   16280:	2101      	movs	r1, #1
   16282:	4620      	mov	r0, r4
   16284:	f7fe fe60 	bl	14f48 <__i2b>
   16288:	4606      	mov	r6, r0
   1628a:	e00c      	b.n	162a6 <_dtoa_r+0x506>
   1628c:	4b7d      	ldr	r3, [pc, #500]	; (16484 <_dtoa_r+0x6e4>)
   1628e:	9300      	str	r3, [sp, #0]
   16290:	9800      	ldr	r0, [sp, #0]
   16292:	b00f      	add	sp, #60	; 0x3c
   16294:	ecbd 8b02 	vpop	{d8}
   16298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1629c:	9b06      	ldr	r3, [sp, #24]
   1629e:	f8dd a020 	ldr.w	sl, [sp, #32]
   162a2:	9e07      	ldr	r6, [sp, #28]
   162a4:	9309      	str	r3, [sp, #36]	; 0x24
   162a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   162a8:	b16b      	cbz	r3, 162c6 <_dtoa_r+0x526>
   162aa:	f1b8 0f00 	cmp.w	r8, #0
   162ae:	dd0a      	ble.n	162c6 <_dtoa_r+0x526>
   162b0:	4543      	cmp	r3, r8
   162b2:	9906      	ldr	r1, [sp, #24]
   162b4:	461a      	mov	r2, r3
   162b6:	bfa8      	it	ge
   162b8:	4642      	movge	r2, r8
   162ba:	1a89      	subs	r1, r1, r2
   162bc:	1a9b      	subs	r3, r3, r2
   162be:	9106      	str	r1, [sp, #24]
   162c0:	9309      	str	r3, [sp, #36]	; 0x24
   162c2:	eba8 0802 	sub.w	r8, r8, r2
   162c6:	9b08      	ldr	r3, [sp, #32]
   162c8:	b163      	cbz	r3, 162e4 <_dtoa_r+0x544>
   162ca:	9b07      	ldr	r3, [sp, #28]
   162cc:	2b00      	cmp	r3, #0
   162ce:	f000 82a7 	beq.w	16820 <_dtoa_r+0xa80>
   162d2:	f1ba 0f00 	cmp.w	sl, #0
   162d6:	f300 8204 	bgt.w	166e2 <_dtoa_r+0x942>
   162da:	9b08      	ldr	r3, [sp, #32]
   162dc:	ebb3 020a 	subs.w	r2, r3, sl
   162e0:	f040 82ff 	bne.w	168e2 <_dtoa_r+0xb42>
   162e4:	2101      	movs	r1, #1
   162e6:	4620      	mov	r0, r4
   162e8:	f7fe fe2e 	bl	14f48 <__i2b>
   162ec:	2f00      	cmp	r7, #0
   162ee:	4682      	mov	sl, r0
   162f0:	f300 80af 	bgt.w	16452 <_dtoa_r+0x6b2>
   162f4:	9b01      	ldr	r3, [sp, #4]
   162f6:	2b01      	cmp	r3, #1
   162f8:	f340 8187 	ble.w	1660a <_dtoa_r+0x86a>
   162fc:	2300      	movs	r3, #0
   162fe:	9308      	str	r3, [sp, #32]
   16300:	2001      	movs	r0, #1
   16302:	2f00      	cmp	r7, #0
   16304:	f040 80b1 	bne.w	1646a <_dtoa_r+0x6ca>
   16308:	4440      	add	r0, r8
   1630a:	f010 001f 	ands.w	r0, r0, #31
   1630e:	f000 817a 	beq.w	16606 <_dtoa_r+0x866>
   16312:	f1c0 0220 	rsb	r2, r0, #32
   16316:	2a04      	cmp	r2, #4
   16318:	f300 8088 	bgt.w	1642c <_dtoa_r+0x68c>
   1631c:	f040 81f6 	bne.w	1670c <_dtoa_r+0x96c>
   16320:	9b06      	ldr	r3, [sp, #24]
   16322:	2b00      	cmp	r3, #0
   16324:	dd05      	ble.n	16332 <_dtoa_r+0x592>
   16326:	4629      	mov	r1, r5
   16328:	461a      	mov	r2, r3
   1632a:	4620      	mov	r0, r4
   1632c:	f7fe ff48 	bl	151c0 <__lshift>
   16330:	4605      	mov	r5, r0
   16332:	f1b8 0f00 	cmp.w	r8, #0
   16336:	dd05      	ble.n	16344 <_dtoa_r+0x5a4>
   16338:	4651      	mov	r1, sl
   1633a:	4642      	mov	r2, r8
   1633c:	4620      	mov	r0, r4
   1633e:	f7fe ff3f 	bl	151c0 <__lshift>
   16342:	4682      	mov	sl, r0
   16344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16346:	2b00      	cmp	r3, #0
   16348:	f040 813f 	bne.w	165ca <_dtoa_r+0x82a>
   1634c:	f1b9 0f00 	cmp.w	r9, #0
   16350:	f340 8125 	ble.w	1659e <_dtoa_r+0x7fe>
   16354:	9b07      	ldr	r3, [sp, #28]
   16356:	2b00      	cmp	r3, #0
   16358:	f040 80a3 	bne.w	164a2 <_dtoa_r+0x702>
   1635c:	9b04      	ldr	r3, [sp, #16]
   1635e:	3301      	adds	r3, #1
   16360:	9304      	str	r3, [sp, #16]
   16362:	f8dd 8000 	ldr.w	r8, [sp]
   16366:	2701      	movs	r7, #1
   16368:	e007      	b.n	1637a <_dtoa_r+0x5da>
   1636a:	4629      	mov	r1, r5
   1636c:	2300      	movs	r3, #0
   1636e:	220a      	movs	r2, #10
   16370:	4620      	mov	r0, r4
   16372:	f7fe fcef 	bl	14d54 <__multadd>
   16376:	3701      	adds	r7, #1
   16378:	4605      	mov	r5, r0
   1637a:	4651      	mov	r1, sl
   1637c:	4628      	mov	r0, r5
   1637e:	f7ff fc7b 	bl	15c78 <quorem>
   16382:	45b9      	cmp	r9, r7
   16384:	f100 0030 	add.w	r0, r0, #48	; 0x30
   16388:	f808 0b01 	strb.w	r0, [r8], #1
   1638c:	dced      	bgt.n	1636a <_dtoa_r+0x5ca>
   1638e:	f1b9 0f00 	cmp.w	r9, #0
   16392:	9a00      	ldr	r2, [sp, #0]
   16394:	bfcc      	ite	gt
   16396:	46cb      	movgt	fp, r9
   16398:	f04f 0b01 	movle.w	fp, #1
   1639c:	4603      	mov	r3, r0
   1639e:	4493      	add	fp, r2
   163a0:	2700      	movs	r7, #0
   163a2:	4629      	mov	r1, r5
   163a4:	2201      	movs	r2, #1
   163a6:	4620      	mov	r0, r4
   163a8:	9301      	str	r3, [sp, #4]
   163aa:	f7fe ff09 	bl	151c0 <__lshift>
   163ae:	4651      	mov	r1, sl
   163b0:	4605      	mov	r5, r0
   163b2:	f7fe ff7d 	bl	152b0 <__mcmp>
   163b6:	2800      	cmp	r0, #0
   163b8:	f340 81af 	ble.w	1671a <_dtoa_r+0x97a>
   163bc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   163c0:	9a00      	ldr	r2, [sp, #0]
   163c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   163c6:	e004      	b.n	163d2 <_dtoa_r+0x632>
   163c8:	455a      	cmp	r2, fp
   163ca:	f000 81b1 	beq.w	16730 <_dtoa_r+0x990>
   163ce:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   163d2:	2b39      	cmp	r3, #57	; 0x39
   163d4:	f10b 0901 	add.w	r9, fp, #1
   163d8:	d0f6      	beq.n	163c8 <_dtoa_r+0x628>
   163da:	3301      	adds	r3, #1
   163dc:	f88b 3000 	strb.w	r3, [fp]
   163e0:	4651      	mov	r1, sl
   163e2:	4620      	mov	r0, r4
   163e4:	f7fe fcac 	bl	14d40 <_Bfree>
   163e8:	b156      	cbz	r6, 16400 <_dtoa_r+0x660>
   163ea:	b12f      	cbz	r7, 163f8 <_dtoa_r+0x658>
   163ec:	42b7      	cmp	r7, r6
   163ee:	d003      	beq.n	163f8 <_dtoa_r+0x658>
   163f0:	4639      	mov	r1, r7
   163f2:	4620      	mov	r0, r4
   163f4:	f7fe fca4 	bl	14d40 <_Bfree>
   163f8:	4631      	mov	r1, r6
   163fa:	4620      	mov	r0, r4
   163fc:	f7fe fca0 	bl	14d40 <_Bfree>
   16400:	4629      	mov	r1, r5
   16402:	4620      	mov	r0, r4
   16404:	f7fe fc9c 	bl	14d40 <_Bfree>
   16408:	2300      	movs	r3, #0
   1640a:	f889 3000 	strb.w	r3, [r9]
   1640e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16412:	601a      	str	r2, [r3, #0]
   16414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   16416:	2b00      	cmp	r3, #0
   16418:	f43f acfe 	beq.w	15e18 <_dtoa_r+0x78>
   1641c:	9800      	ldr	r0, [sp, #0]
   1641e:	f8c3 9000 	str.w	r9, [r3]
   16422:	b00f      	add	sp, #60	; 0x3c
   16424:	ecbd 8b02 	vpop	{d8}
   16428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1642c:	f1c0 001c 	rsb	r0, r0, #28
   16430:	9b06      	ldr	r3, [sp, #24]
   16432:	4403      	add	r3, r0
   16434:	9306      	str	r3, [sp, #24]
   16436:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16438:	4403      	add	r3, r0
   1643a:	9309      	str	r3, [sp, #36]	; 0x24
   1643c:	4480      	add	r8, r0
   1643e:	e76f      	b.n	16320 <_dtoa_r+0x580>
   16440:	f1c2 0220 	rsb	r2, r2, #32
   16444:	fa06 f202 	lsl.w	r2, r6, r2
   16448:	ee07 2a10 	vmov	s14, r2
   1644c:	e509      	b.n	15e62 <_dtoa_r+0xc2>
   1644e:	2601      	movs	r6, #1
   16450:	e563      	b.n	15f1a <_dtoa_r+0x17a>
   16452:	4601      	mov	r1, r0
   16454:	463a      	mov	r2, r7
   16456:	4620      	mov	r0, r4
   16458:	f7fe fe52 	bl	15100 <__pow5mult>
   1645c:	9b01      	ldr	r3, [sp, #4]
   1645e:	2b01      	cmp	r3, #1
   16460:	4682      	mov	sl, r0
   16462:	f340 81c5 	ble.w	167f0 <_dtoa_r+0xa50>
   16466:	2300      	movs	r3, #0
   16468:	9308      	str	r3, [sp, #32]
   1646a:	f8da 2010 	ldr.w	r2, [sl, #16]
   1646e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   16472:	6910      	ldr	r0, [r2, #16]
   16474:	f7fe fd18 	bl	14ea8 <__hi0bits>
   16478:	f1c0 0020 	rsb	r0, r0, #32
   1647c:	e744      	b.n	16308 <_dtoa_r+0x568>
   1647e:	bf00      	nop
   16480:	200002a8 	.word	0x200002a8
   16484:	200019f0 	.word	0x200019f0
   16488:	4631      	mov	r1, r6
   1648a:	2300      	movs	r3, #0
   1648c:	220a      	movs	r2, #10
   1648e:	4620      	mov	r0, r4
   16490:	f7fe fc60 	bl	14d54 <__multadd>
   16494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16496:	2b00      	cmp	r3, #0
   16498:	4606      	mov	r6, r0
   1649a:	f340 82ce 	ble.w	16a3a <_dtoa_r+0xc9a>
   1649e:	9704      	str	r7, [sp, #16]
   164a0:	4699      	mov	r9, r3
   164a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   164a4:	2b00      	cmp	r3, #0
   164a6:	dd05      	ble.n	164b4 <_dtoa_r+0x714>
   164a8:	4631      	mov	r1, r6
   164aa:	461a      	mov	r2, r3
   164ac:	4620      	mov	r0, r4
   164ae:	f7fe fe87 	bl	151c0 <__lshift>
   164b2:	4606      	mov	r6, r0
   164b4:	9b08      	ldr	r3, [sp, #32]
   164b6:	2b00      	cmp	r3, #0
   164b8:	f040 81eb 	bne.w	16892 <_dtoa_r+0xaf2>
   164bc:	46b0      	mov	r8, r6
   164be:	9b02      	ldr	r3, [sp, #8]
   164c0:	9f00      	ldr	r7, [sp, #0]
   164c2:	f003 0201 	and.w	r2, r3, #1
   164c6:	1e7b      	subs	r3, r7, #1
   164c8:	444b      	add	r3, r9
   164ca:	9308      	str	r3, [sp, #32]
   164cc:	9b01      	ldr	r3, [sp, #4]
   164ce:	920a      	str	r2, [sp, #40]	; 0x28
   164d0:	4313      	orrs	r3, r2
   164d2:	9309      	str	r3, [sp, #36]	; 0x24
   164d4:	4651      	mov	r1, sl
   164d6:	4628      	mov	r0, r5
   164d8:	f7ff fbce 	bl	15c78 <quorem>
   164dc:	4631      	mov	r1, r6
   164de:	4683      	mov	fp, r0
   164e0:	4628      	mov	r0, r5
   164e2:	f7fe fee5 	bl	152b0 <__mcmp>
   164e6:	4642      	mov	r2, r8
   164e8:	4651      	mov	r1, sl
   164ea:	4681      	mov	r9, r0
   164ec:	4620      	mov	r0, r4
   164ee:	f7fe ff01 	bl	152f4 <__mdiff>
   164f2:	68c2      	ldr	r2, [r0, #12]
   164f4:	4601      	mov	r1, r0
   164f6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   164fa:	2a00      	cmp	r2, #0
   164fc:	d142      	bne.n	16584 <_dtoa_r+0x7e4>
   164fe:	e9cd 0306 	strd	r0, r3, [sp, #24]
   16502:	4628      	mov	r0, r5
   16504:	f7fe fed4 	bl	152b0 <__mcmp>
   16508:	9906      	ldr	r1, [sp, #24]
   1650a:	9002      	str	r0, [sp, #8]
   1650c:	4620      	mov	r0, r4
   1650e:	f7fe fc17 	bl	14d40 <_Bfree>
   16512:	9a02      	ldr	r2, [sp, #8]
   16514:	9b07      	ldr	r3, [sp, #28]
   16516:	b91a      	cbnz	r2, 16520 <_dtoa_r+0x780>
   16518:	9909      	ldr	r1, [sp, #36]	; 0x24
   1651a:	2900      	cmp	r1, #0
   1651c:	f000 827e 	beq.w	16a1c <_dtoa_r+0xc7c>
   16520:	f1b9 0f00 	cmp.w	r9, #0
   16524:	f2c0 8183 	blt.w	1682e <_dtoa_r+0xa8e>
   16528:	9901      	ldr	r1, [sp, #4]
   1652a:	ea49 0901 	orr.w	r9, r9, r1
   1652e:	990a      	ldr	r1, [sp, #40]	; 0x28
   16530:	ea51 0909 	orrs.w	r9, r1, r9
   16534:	f000 817b 	beq.w	1682e <_dtoa_r+0xa8e>
   16538:	2a00      	cmp	r2, #0
   1653a:	f300 81c6 	bgt.w	168ca <_dtoa_r+0xb2a>
   1653e:	9a08      	ldr	r2, [sp, #32]
   16540:	703b      	strb	r3, [r7, #0]
   16542:	f107 0901 	add.w	r9, r7, #1
   16546:	4297      	cmp	r7, r2
   16548:	46cb      	mov	fp, r9
   1654a:	f000 81c4 	beq.w	168d6 <_dtoa_r+0xb36>
   1654e:	4629      	mov	r1, r5
   16550:	2300      	movs	r3, #0
   16552:	220a      	movs	r2, #10
   16554:	4620      	mov	r0, r4
   16556:	f7fe fbfd 	bl	14d54 <__multadd>
   1655a:	4546      	cmp	r6, r8
   1655c:	4605      	mov	r5, r0
   1655e:	4631      	mov	r1, r6
   16560:	f04f 0300 	mov.w	r3, #0
   16564:	f04f 020a 	mov.w	r2, #10
   16568:	4620      	mov	r0, r4
   1656a:	d012      	beq.n	16592 <_dtoa_r+0x7f2>
   1656c:	f7fe fbf2 	bl	14d54 <__multadd>
   16570:	4641      	mov	r1, r8
   16572:	4606      	mov	r6, r0
   16574:	2300      	movs	r3, #0
   16576:	220a      	movs	r2, #10
   16578:	4620      	mov	r0, r4
   1657a:	f7fe fbeb 	bl	14d54 <__multadd>
   1657e:	464f      	mov	r7, r9
   16580:	4680      	mov	r8, r0
   16582:	e7a7      	b.n	164d4 <_dtoa_r+0x734>
   16584:	4620      	mov	r0, r4
   16586:	9302      	str	r3, [sp, #8]
   16588:	f7fe fbda 	bl	14d40 <_Bfree>
   1658c:	9b02      	ldr	r3, [sp, #8]
   1658e:	2201      	movs	r2, #1
   16590:	e7c6      	b.n	16520 <_dtoa_r+0x780>
   16592:	f7fe fbdf 	bl	14d54 <__multadd>
   16596:	464f      	mov	r7, r9
   16598:	4606      	mov	r6, r0
   1659a:	4680      	mov	r8, r0
   1659c:	e79a      	b.n	164d4 <_dtoa_r+0x734>
   1659e:	9b01      	ldr	r3, [sp, #4]
   165a0:	2b02      	cmp	r3, #2
   165a2:	dc71      	bgt.n	16688 <_dtoa_r+0x8e8>
   165a4:	9b07      	ldr	r3, [sp, #28]
   165a6:	2b00      	cmp	r3, #0
   165a8:	f47f af7b 	bne.w	164a2 <_dtoa_r+0x702>
   165ac:	9b04      	ldr	r3, [sp, #16]
   165ae:	4651      	mov	r1, sl
   165b0:	3301      	adds	r3, #1
   165b2:	4628      	mov	r0, r5
   165b4:	9304      	str	r3, [sp, #16]
   165b6:	f7ff fb5f 	bl	15c78 <quorem>
   165ba:	f8dd b000 	ldr.w	fp, [sp]
   165be:	f100 0330 	add.w	r3, r0, #48	; 0x30
   165c2:	f80b 3b01 	strb.w	r3, [fp], #1
   165c6:	2700      	movs	r7, #0
   165c8:	e6eb      	b.n	163a2 <_dtoa_r+0x602>
   165ca:	4651      	mov	r1, sl
   165cc:	4628      	mov	r0, r5
   165ce:	f7fe fe6f 	bl	152b0 <__mcmp>
   165d2:	2800      	cmp	r0, #0
   165d4:	f6bf aeba 	bge.w	1634c <_dtoa_r+0x5ac>
   165d8:	4629      	mov	r1, r5
   165da:	2300      	movs	r3, #0
   165dc:	220a      	movs	r2, #10
   165de:	4620      	mov	r0, r4
   165e0:	f7fe fbb8 	bl	14d54 <__multadd>
   165e4:	9b04      	ldr	r3, [sp, #16]
   165e6:	1e5f      	subs	r7, r3, #1
   165e8:	9b07      	ldr	r3, [sp, #28]
   165ea:	4605      	mov	r5, r0
   165ec:	2b00      	cmp	r3, #0
   165ee:	f47f af4b 	bne.w	16488 <_dtoa_r+0x6e8>
   165f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   165f4:	2b00      	cmp	r3, #0
   165f6:	f340 8218 	ble.w	16a2a <_dtoa_r+0xc8a>
   165fa:	4699      	mov	r9, r3
   165fc:	e6b1      	b.n	16362 <_dtoa_r+0x5c2>
   165fe:	4bbc      	ldr	r3, [pc, #752]	; (168f0 <_dtoa_r+0xb50>)
   16600:	9300      	str	r3, [sp, #0]
   16602:	3303      	adds	r3, #3
   16604:	e4a4      	b.n	15f50 <_dtoa_r+0x1b0>
   16606:	201c      	movs	r0, #28
   16608:	e712      	b.n	16430 <_dtoa_r+0x690>
   1660a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1660e:	2800      	cmp	r0, #0
   16610:	f47f ae74 	bne.w	162fc <_dtoa_r+0x55c>
   16614:	f3c1 0213 	ubfx	r2, r1, #0, #20
   16618:	2a00      	cmp	r2, #0
   1661a:	f000 80f4 	beq.w	16806 <_dtoa_r+0xa66>
   1661e:	9b02      	ldr	r3, [sp, #8]
   16620:	9308      	str	r3, [sp, #32]
   16622:	e66d      	b.n	16300 <_dtoa_r+0x560>
   16624:	2301      	movs	r3, #1
   16626:	9307      	str	r3, [sp, #28]
   16628:	9b04      	ldr	r3, [sp, #16]
   1662a:	445b      	add	r3, fp
   1662c:	f103 0901 	add.w	r9, r3, #1
   16630:	f1b9 0f01 	cmp.w	r9, #1
   16634:	46cc      	mov	ip, r9
   16636:	930b      	str	r3, [sp, #44]	; 0x2c
   16638:	bfb8      	it	lt
   1663a:	f04f 0c01 	movlt.w	ip, #1
   1663e:	2100      	movs	r1, #0
   16640:	f1bc 0f17 	cmp.w	ip, #23
   16644:	63e1      	str	r1, [r4, #60]	; 0x3c
   16646:	f77f acbc 	ble.w	15fc2 <_dtoa_r+0x222>
   1664a:	2001      	movs	r0, #1
   1664c:	2204      	movs	r2, #4
   1664e:	0052      	lsls	r2, r2, #1
   16650:	f102 0314 	add.w	r3, r2, #20
   16654:	4563      	cmp	r3, ip
   16656:	4601      	mov	r1, r0
   16658:	f100 0001 	add.w	r0, r0, #1
   1665c:	d9f7      	bls.n	1664e <_dtoa_r+0x8ae>
   1665e:	63e1      	str	r1, [r4, #60]	; 0x3c
   16660:	e4af      	b.n	15fc2 <_dtoa_r+0x222>
   16662:	2301      	movs	r3, #1
   16664:	9307      	str	r3, [sp, #28]
   16666:	f1bb 0f00 	cmp.w	fp, #0
   1666a:	dd52      	ble.n	16712 <_dtoa_r+0x972>
   1666c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   16670:	46d9      	mov	r9, fp
   16672:	46dc      	mov	ip, fp
   16674:	e7e3      	b.n	1663e <_dtoa_r+0x89e>
   16676:	2300      	movs	r3, #0
   16678:	9307      	str	r3, [sp, #28]
   1667a:	e7d5      	b.n	16628 <_dtoa_r+0x888>
   1667c:	2300      	movs	r3, #0
   1667e:	9307      	str	r3, [sp, #28]
   16680:	e7f1      	b.n	16666 <_dtoa_r+0x8c6>
   16682:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   16686:	9704      	str	r7, [sp, #16]
   16688:	f1b9 0f00 	cmp.w	r9, #0
   1668c:	f47f ada1 	bne.w	161d2 <_dtoa_r+0x432>
   16690:	4651      	mov	r1, sl
   16692:	464b      	mov	r3, r9
   16694:	2205      	movs	r2, #5
   16696:	4620      	mov	r0, r4
   16698:	f7fe fb5c 	bl	14d54 <__multadd>
   1669c:	4601      	mov	r1, r0
   1669e:	4682      	mov	sl, r0
   166a0:	4628      	mov	r0, r5
   166a2:	f7fe fe05 	bl	152b0 <__mcmp>
   166a6:	2800      	cmp	r0, #0
   166a8:	f77f ad93 	ble.w	161d2 <_dtoa_r+0x432>
   166ac:	9b04      	ldr	r3, [sp, #16]
   166ae:	f103 0b01 	add.w	fp, r3, #1
   166b2:	9b00      	ldr	r3, [sp, #0]
   166b4:	2231      	movs	r2, #49	; 0x31
   166b6:	4698      	mov	r8, r3
   166b8:	f803 2b01 	strb.w	r2, [r3], #1
   166bc:	9300      	str	r3, [sp, #0]
   166be:	4651      	mov	r1, sl
   166c0:	4620      	mov	r0, r4
   166c2:	f7fe fb3d 	bl	14d40 <_Bfree>
   166c6:	f10b 0301 	add.w	r3, fp, #1
   166ca:	f8dd 9000 	ldr.w	r9, [sp]
   166ce:	9304      	str	r3, [sp, #16]
   166d0:	f8cd 8000 	str.w	r8, [sp]
   166d4:	2e00      	cmp	r6, #0
   166d6:	f47f ae8f 	bne.w	163f8 <_dtoa_r+0x658>
   166da:	e691      	b.n	16400 <_dtoa_r+0x660>
   166dc:	eba3 0a0a 	sub.w	sl, r3, sl
   166e0:	e5c5      	b.n	1626e <_dtoa_r+0x4ce>
   166e2:	4631      	mov	r1, r6
   166e4:	4652      	mov	r2, sl
   166e6:	4620      	mov	r0, r4
   166e8:	f7fe fd0a 	bl	15100 <__pow5mult>
   166ec:	462a      	mov	r2, r5
   166ee:	4601      	mov	r1, r0
   166f0:	4606      	mov	r6, r0
   166f2:	4620      	mov	r0, r4
   166f4:	f7fe fc56 	bl	14fa4 <__multiply>
   166f8:	4629      	mov	r1, r5
   166fa:	4605      	mov	r5, r0
   166fc:	4620      	mov	r0, r4
   166fe:	f7fe fb1f 	bl	14d40 <_Bfree>
   16702:	e5ea      	b.n	162da <_dtoa_r+0x53a>
   16704:	2002      	movs	r0, #2
   16706:	eeb0 5b48 	vmov.f64	d5, d8
   1670a:	e481      	b.n	16010 <_dtoa_r+0x270>
   1670c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   16710:	e68e      	b.n	16430 <_dtoa_r+0x690>
   16712:	f04f 0b01 	mov.w	fp, #1
   16716:	46d9      	mov	r9, fp
   16718:	e44f      	b.n	15fba <_dtoa_r+0x21a>
   1671a:	d103      	bne.n	16724 <_dtoa_r+0x984>
   1671c:	9b01      	ldr	r3, [sp, #4]
   1671e:	07db      	lsls	r3, r3, #31
   16720:	f53f ae4c 	bmi.w	163bc <_dtoa_r+0x61c>
   16724:	46d9      	mov	r9, fp
   16726:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1672a:	2b30      	cmp	r3, #48	; 0x30
   1672c:	d0fa      	beq.n	16724 <_dtoa_r+0x984>
   1672e:	e657      	b.n	163e0 <_dtoa_r+0x640>
   16730:	9b04      	ldr	r3, [sp, #16]
   16732:	9a00      	ldr	r2, [sp, #0]
   16734:	3301      	adds	r3, #1
   16736:	9304      	str	r3, [sp, #16]
   16738:	2331      	movs	r3, #49	; 0x31
   1673a:	7013      	strb	r3, [r2, #0]
   1673c:	e650      	b.n	163e0 <_dtoa_r+0x640>
   1673e:	f1ba 0f00 	cmp.w	sl, #0
   16742:	f000 8123 	beq.w	1698c <_dtoa_r+0xbec>
   16746:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1674a:	9b06      	ldr	r3, [sp, #24]
   1674c:	9309      	str	r3, [sp, #36]	; 0x24
   1674e:	4413      	add	r3, r2
   16750:	f8dd a020 	ldr.w	sl, [sp, #32]
   16754:	9306      	str	r3, [sp, #24]
   16756:	4490      	add	r8, r2
   16758:	e592      	b.n	16280 <_dtoa_r+0x4e0>
   1675a:	ee07 0a90 	vmov	s15, r0
   1675e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   16762:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   16766:	eea6 5b07 	vfma.f64	d5, d6, d7
   1676a:	ee15 2a90 	vmov	r2, s11
   1676e:	ec51 0b15 	vmov	r0, r1, d5
   16772:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   16776:	ec41 0b15 	vmov	d5, r0, r1
   1677a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1677e:	ee36 7b47 	vsub.f64	d7, d6, d7
   16782:	eeb4 7bc5 	vcmpe.f64	d7, d5
   16786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1678a:	f300 8137 	bgt.w	169fc <_dtoa_r+0xc5c>
   1678e:	eeb1 5b45 	vneg.f64	d5, d5
   16792:	eeb4 7bc5 	vcmpe.f64	d7, d5
   16796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1679a:	f57f acfb 	bpl.w	16194 <_dtoa_r+0x3f4>
   1679e:	f04f 0a00 	mov.w	sl, #0
   167a2:	4656      	mov	r6, sl
   167a4:	e515      	b.n	161d2 <_dtoa_r+0x432>
   167a6:	f000 80f5 	beq.w	16994 <_dtoa_r+0xbf4>
   167aa:	9b04      	ldr	r3, [sp, #16]
   167ac:	4951      	ldr	r1, [pc, #324]	; (168f4 <_dtoa_r+0xb54>)
   167ae:	425a      	negs	r2, r3
   167b0:	f002 000f 	and.w	r0, r2, #15
   167b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   167b8:	ed91 6b00 	vldr	d6, [r1]
   167bc:	1112      	asrs	r2, r2, #4
   167be:	ee28 6b06 	vmul.f64	d6, d8, d6
   167c2:	f000 8142 	beq.w	16a4a <_dtoa_r+0xcaa>
   167c6:	eeb0 7b46 	vmov.f64	d7, d6
   167ca:	494b      	ldr	r1, [pc, #300]	; (168f8 <_dtoa_r+0xb58>)
   167cc:	2600      	movs	r6, #0
   167ce:	2002      	movs	r0, #2
   167d0:	07d3      	lsls	r3, r2, #31
   167d2:	d505      	bpl.n	167e0 <_dtoa_r+0xa40>
   167d4:	ed91 5b00 	vldr	d5, [r1]
   167d8:	3001      	adds	r0, #1
   167da:	2601      	movs	r6, #1
   167dc:	ee27 7b05 	vmul.f64	d7, d7, d5
   167e0:	1052      	asrs	r2, r2, #1
   167e2:	f101 0108 	add.w	r1, r1, #8
   167e6:	d1f3      	bne.n	167d0 <_dtoa_r+0xa30>
   167e8:	2e00      	cmp	r6, #0
   167ea:	fe06 6b07 	vseleq.f64	d6, d6, d7
   167ee:	e41e      	b.n	1602e <_dtoa_r+0x28e>
   167f0:	9b02      	ldr	r3, [sp, #8]
   167f2:	2b00      	cmp	r3, #0
   167f4:	f47f ae37 	bne.w	16466 <_dtoa_r+0x6c6>
   167f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   167fc:	f3c1 0213 	ubfx	r2, r1, #0, #20
   16800:	2a00      	cmp	r2, #0
   16802:	f040 8137 	bne.w	16a74 <_dtoa_r+0xcd4>
   16806:	4a3d      	ldr	r2, [pc, #244]	; (168fc <_dtoa_r+0xb5c>)
   16808:	400a      	ands	r2, r1
   1680a:	2a00      	cmp	r2, #0
   1680c:	f000 80fa 	beq.w	16a04 <_dtoa_r+0xc64>
   16810:	9b06      	ldr	r3, [sp, #24]
   16812:	3301      	adds	r3, #1
   16814:	9306      	str	r3, [sp, #24]
   16816:	2301      	movs	r3, #1
   16818:	f108 0801 	add.w	r8, r8, #1
   1681c:	9308      	str	r3, [sp, #32]
   1681e:	e56f      	b.n	16300 <_dtoa_r+0x560>
   16820:	4629      	mov	r1, r5
   16822:	9a08      	ldr	r2, [sp, #32]
   16824:	4620      	mov	r0, r4
   16826:	f7fe fc6b 	bl	15100 <__pow5mult>
   1682a:	4605      	mov	r5, r0
   1682c:	e55a      	b.n	162e4 <_dtoa_r+0x544>
   1682e:	2a00      	cmp	r2, #0
   16830:	dd12      	ble.n	16858 <_dtoa_r+0xab8>
   16832:	4629      	mov	r1, r5
   16834:	2201      	movs	r2, #1
   16836:	4620      	mov	r0, r4
   16838:	9301      	str	r3, [sp, #4]
   1683a:	f7fe fcc1 	bl	151c0 <__lshift>
   1683e:	4651      	mov	r1, sl
   16840:	4605      	mov	r5, r0
   16842:	f7fe fd35 	bl	152b0 <__mcmp>
   16846:	2800      	cmp	r0, #0
   16848:	9b01      	ldr	r3, [sp, #4]
   1684a:	f340 80e1 	ble.w	16a10 <_dtoa_r+0xc70>
   1684e:	2b39      	cmp	r3, #57	; 0x39
   16850:	f000 80ca 	beq.w	169e8 <_dtoa_r+0xc48>
   16854:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   16858:	46b9      	mov	r9, r7
   1685a:	f809 3b01 	strb.w	r3, [r9], #1
   1685e:	9b04      	ldr	r3, [sp, #16]
   16860:	3301      	adds	r3, #1
   16862:	4637      	mov	r7, r6
   16864:	9304      	str	r3, [sp, #16]
   16866:	4646      	mov	r6, r8
   16868:	e5ba      	b.n	163e0 <_dtoa_r+0x640>
   1686a:	ee38 8b08 	vadd.f64	d8, d8, d8
   1686e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   16872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16876:	dc0a      	bgt.n	1688e <_dtoa_r+0xaee>
   16878:	eeb4 8b46 	vcmp.f64	d8, d6
   1687c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16880:	f47f acdc 	bne.w	1623c <_dtoa_r+0x49c>
   16884:	ee17 3a10 	vmov	r3, s14
   16888:	07d8      	lsls	r0, r3, #31
   1688a:	f57f acd7 	bpl.w	1623c <_dtoa_r+0x49c>
   1688e:	9a00      	ldr	r2, [sp, #0]
   16890:	e454      	b.n	1613c <_dtoa_r+0x39c>
   16892:	6871      	ldr	r1, [r6, #4]
   16894:	4620      	mov	r0, r4
   16896:	f7fe fa2d 	bl	14cf4 <_Balloc>
   1689a:	4607      	mov	r7, r0
   1689c:	2800      	cmp	r0, #0
   1689e:	f000 80de 	beq.w	16a5e <_dtoa_r+0xcbe>
   168a2:	6933      	ldr	r3, [r6, #16]
   168a4:	3302      	adds	r3, #2
   168a6:	009a      	lsls	r2, r3, #2
   168a8:	f106 010c 	add.w	r1, r6, #12
   168ac:	300c      	adds	r0, #12
   168ae:	f7f7 fd31 	bl	e314 <memcpy>
   168b2:	4639      	mov	r1, r7
   168b4:	2201      	movs	r2, #1
   168b6:	4620      	mov	r0, r4
   168b8:	f7fe fc82 	bl	151c0 <__lshift>
   168bc:	4680      	mov	r8, r0
   168be:	e5fe      	b.n	164be <_dtoa_r+0x71e>
   168c0:	9b06      	ldr	r3, [sp, #24]
   168c2:	eba3 0309 	sub.w	r3, r3, r9
   168c6:	9309      	str	r3, [sp, #36]	; 0x24
   168c8:	e4da      	b.n	16280 <_dtoa_r+0x4e0>
   168ca:	2b39      	cmp	r3, #57	; 0x39
   168cc:	f000 808c 	beq.w	169e8 <_dtoa_r+0xc48>
   168d0:	46b9      	mov	r9, r7
   168d2:	3301      	adds	r3, #1
   168d4:	e7c1      	b.n	1685a <_dtoa_r+0xaba>
   168d6:	9a04      	ldr	r2, [sp, #16]
   168d8:	3201      	adds	r2, #1
   168da:	4637      	mov	r7, r6
   168dc:	9204      	str	r2, [sp, #16]
   168de:	4646      	mov	r6, r8
   168e0:	e55f      	b.n	163a2 <_dtoa_r+0x602>
   168e2:	4629      	mov	r1, r5
   168e4:	4620      	mov	r0, r4
   168e6:	f7fe fc0b 	bl	15100 <__pow5mult>
   168ea:	4605      	mov	r5, r0
   168ec:	e4fa      	b.n	162e4 <_dtoa_r+0x544>
   168ee:	bf00      	nop
   168f0:	20001940 	.word	0x20001940
   168f4:	200002a8 	.word	0x200002a8
   168f8:	20000280 	.word	0x20000280
   168fc:	7ff00000 	.word	0x7ff00000
   16900:	4b5e      	ldr	r3, [pc, #376]	; (16a7c <_dtoa_r+0xcdc>)
   16902:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   16906:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   1690a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   1690e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   16912:	ee36 7b47 	vsub.f64	d7, d6, d7
   16916:	ec41 0b16 	vmov	d6, r0, r1
   1691a:	ee15 1a90 	vmov	r1, s11
   1691e:	ee23 3b06 	vmul.f64	d3, d3, d6
   16922:	9800      	ldr	r0, [sp, #0]
   16924:	3130      	adds	r1, #48	; 0x30
   16926:	2a01      	cmp	r2, #1
   16928:	f800 1b01 	strb.w	r1, [r0], #1
   1692c:	f000 8083 	beq.w	16a36 <_dtoa_r+0xc96>
   16930:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   16934:	9b00      	ldr	r3, [sp, #0]
   16936:	1899      	adds	r1, r3, r2
   16938:	ee27 7b04 	vmul.f64	d7, d7, d4
   1693c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   16940:	ee16 3a90 	vmov	r3, s13
   16944:	3330      	adds	r3, #48	; 0x30
   16946:	f800 3b01 	strb.w	r3, [r0], #1
   1694a:	4281      	cmp	r1, r0
   1694c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   16950:	ee37 7b45 	vsub.f64	d7, d7, d5
   16954:	d1f0      	bne.n	16938 <_dtoa_r+0xb98>
   16956:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   1695a:	ee33 5b06 	vadd.f64	d5, d3, d6
   1695e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   16962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16966:	f53f abe3 	bmi.w	16130 <_dtoa_r+0x390>
   1696a:	ee36 6b43 	vsub.f64	d6, d6, d3
   1696e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   16972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16976:	f77f ac0d 	ble.w	16194 <_dtoa_r+0x3f4>
   1697a:	4689      	mov	r9, r1
   1697c:	3901      	subs	r1, #1
   1697e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   16982:	2b30      	cmp	r3, #48	; 0x30
   16984:	d0f9      	beq.n	1697a <_dtoa_r+0xbda>
   16986:	1c73      	adds	r3, r6, #1
   16988:	9304      	str	r3, [sp, #16]
   1698a:	e539      	b.n	16400 <_dtoa_r+0x660>
   1698c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1698e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   16992:	e6da      	b.n	1674a <_dtoa_r+0x9aa>
   16994:	2002      	movs	r0, #2
   16996:	eeb0 6b48 	vmov.f64	d6, d8
   1699a:	f7ff bb48 	b.w	1602e <_dtoa_r+0x28e>
   1699e:	f1b9 0f00 	cmp.w	r9, #0
   169a2:	f43f aeda 	beq.w	1675a <_dtoa_r+0x9ba>
   169a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   169a8:	2a00      	cmp	r2, #0
   169aa:	f77f abf3 	ble.w	16194 <_dtoa_r+0x3f4>
   169ae:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   169b2:	ee26 6b04 	vmul.f64	d6, d6, d4
   169b6:	3001      	adds	r0, #1
   169b8:	ee07 0a90 	vmov	s15, r0
   169bc:	9b04      	ldr	r3, [sp, #16]
   169be:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   169c2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   169c6:	eea6 7b05 	vfma.f64	d7, d6, d5
   169ca:	ee17 ca90 	vmov	ip, s15
   169ce:	ec51 0b17 	vmov	r0, r1, d7
   169d2:	1e5e      	subs	r6, r3, #1
   169d4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   169d8:	f7ff bb47 	b.w	1606a <_dtoa_r+0x2ca>
   169dc:	9b04      	ldr	r3, [sp, #16]
   169de:	3301      	adds	r3, #1
   169e0:	9304      	str	r3, [sp, #16]
   169e2:	2331      	movs	r3, #49	; 0x31
   169e4:	f7ff bbb1 	b.w	1614a <_dtoa_r+0x3aa>
   169e8:	9b04      	ldr	r3, [sp, #16]
   169ea:	46bb      	mov	fp, r7
   169ec:	3301      	adds	r3, #1
   169ee:	9304      	str	r3, [sp, #16]
   169f0:	2339      	movs	r3, #57	; 0x39
   169f2:	4637      	mov	r7, r6
   169f4:	f80b 3b01 	strb.w	r3, [fp], #1
   169f8:	4646      	mov	r6, r8
   169fa:	e4e1      	b.n	163c0 <_dtoa_r+0x620>
   169fc:	f04f 0a00 	mov.w	sl, #0
   16a00:	4656      	mov	r6, sl
   16a02:	e653      	b.n	166ac <_dtoa_r+0x90c>
   16a04:	9208      	str	r2, [sp, #32]
   16a06:	e47b      	b.n	16300 <_dtoa_r+0x560>
   16a08:	1c73      	adds	r3, r6, #1
   16a0a:	9304      	str	r3, [sp, #16]
   16a0c:	4689      	mov	r9, r1
   16a0e:	e4f7      	b.n	16400 <_dtoa_r+0x660>
   16a10:	f47f af22 	bne.w	16858 <_dtoa_r+0xab8>
   16a14:	07da      	lsls	r2, r3, #31
   16a16:	f57f af1f 	bpl.w	16858 <_dtoa_r+0xab8>
   16a1a:	e718      	b.n	1684e <_dtoa_r+0xaae>
   16a1c:	2b39      	cmp	r3, #57	; 0x39
   16a1e:	d0e3      	beq.n	169e8 <_dtoa_r+0xc48>
   16a20:	f1b9 0f00 	cmp.w	r9, #0
   16a24:	f73f af16 	bgt.w	16854 <_dtoa_r+0xab4>
   16a28:	e716      	b.n	16858 <_dtoa_r+0xab8>
   16a2a:	9b01      	ldr	r3, [sp, #4]
   16a2c:	2b02      	cmp	r3, #2
   16a2e:	f73f ae28 	bgt.w	16682 <_dtoa_r+0x8e2>
   16a32:	9704      	str	r7, [sp, #16]
   16a34:	e5ba      	b.n	165ac <_dtoa_r+0x80c>
   16a36:	4601      	mov	r1, r0
   16a38:	e78d      	b.n	16956 <_dtoa_r+0xbb6>
   16a3a:	9b01      	ldr	r3, [sp, #4]
   16a3c:	2b02      	cmp	r3, #2
   16a3e:	f73f ae20 	bgt.w	16682 <_dtoa_r+0x8e2>
   16a42:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   16a46:	9704      	str	r7, [sp, #16]
   16a48:	e52b      	b.n	164a2 <_dtoa_r+0x702>
   16a4a:	2002      	movs	r0, #2
   16a4c:	f7ff baef 	b.w	1602e <_dtoa_r+0x28e>
   16a50:	4b0b      	ldr	r3, [pc, #44]	; (16a80 <_dtoa_r+0xce0>)
   16a52:	480c      	ldr	r0, [pc, #48]	; (16a84 <_dtoa_r+0xce4>)
   16a54:	2200      	movs	r2, #0
   16a56:	f240 11af 	movw	r1, #431	; 0x1af
   16a5a:	f7ff f8b1 	bl	15bc0 <__assert_func>
   16a5e:	4b08      	ldr	r3, [pc, #32]	; (16a80 <_dtoa_r+0xce0>)
   16a60:	4808      	ldr	r0, [pc, #32]	; (16a84 <_dtoa_r+0xce4>)
   16a62:	463a      	mov	r2, r7
   16a64:	f240 21ef 	movw	r1, #751	; 0x2ef
   16a68:	f7ff f8aa 	bl	15bc0 <__assert_func>
   16a6c:	4b06      	ldr	r3, [pc, #24]	; (16a88 <_dtoa_r+0xce8>)
   16a6e:	9300      	str	r3, [sp, #0]
   16a70:	f7ff b9d2 	b.w	15e18 <_dtoa_r+0x78>
   16a74:	9b02      	ldr	r3, [sp, #8]
   16a76:	9308      	str	r3, [sp, #32]
   16a78:	e4f7      	b.n	1646a <_dtoa_r+0x6ca>
   16a7a:	bf00      	nop
   16a7c:	200002a8 	.word	0x200002a8
   16a80:	2000164c 	.word	0x2000164c
   16a84:	20001944 	.word	0x20001944
   16a88:	20001934 	.word	0x20001934

00016a8c <fiprintf>:
   16a8c:	b40e      	push	{r1, r2, r3}
   16a8e:	b510      	push	{r4, lr}
   16a90:	b083      	sub	sp, #12
   16a92:	ab05      	add	r3, sp, #20
   16a94:	4c06      	ldr	r4, [pc, #24]	; (16ab0 <fiprintf+0x24>)
   16a96:	f853 2b04 	ldr.w	r2, [r3], #4
   16a9a:	9301      	str	r3, [sp, #4]
   16a9c:	4601      	mov	r1, r0
   16a9e:	6820      	ldr	r0, [r4, #0]
   16aa0:	f000 f8c4 	bl	16c2c <_vfiprintf_r>
   16aa4:	b003      	add	sp, #12
   16aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16aaa:	b003      	add	sp, #12
   16aac:	4770      	bx	lr
   16aae:	bf00      	nop
   16ab0:	200034a4 	.word	0x200034a4

00016ab4 <__ssprint_r>:
   16ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ab8:	6893      	ldr	r3, [r2, #8]
   16aba:	6817      	ldr	r7, [r2, #0]
   16abc:	b083      	sub	sp, #12
   16abe:	4692      	mov	sl, r2
   16ac0:	2b00      	cmp	r3, #0
   16ac2:	d070      	beq.n	16ba6 <__ssprint_r+0xf2>
   16ac4:	4681      	mov	r9, r0
   16ac6:	688a      	ldr	r2, [r1, #8]
   16ac8:	6808      	ldr	r0, [r1, #0]
   16aca:	460c      	mov	r4, r1
   16acc:	3708      	adds	r7, #8
   16ace:	e043      	b.n	16b58 <__ssprint_r+0xa4>
   16ad0:	89a3      	ldrh	r3, [r4, #12]
   16ad2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   16ad6:	d02e      	beq.n	16b36 <__ssprint_r+0x82>
   16ad8:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   16adc:	eba0 0801 	sub.w	r8, r0, r1
   16ae0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   16ae4:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   16ae8:	f108 0001 	add.w	r0, r8, #1
   16aec:	1076      	asrs	r6, r6, #1
   16aee:	4428      	add	r0, r5
   16af0:	42b0      	cmp	r0, r6
   16af2:	4632      	mov	r2, r6
   16af4:	bf84      	itt	hi
   16af6:	4606      	movhi	r6, r0
   16af8:	4632      	movhi	r2, r6
   16afa:	055b      	lsls	r3, r3, #21
   16afc:	d537      	bpl.n	16b6e <__ssprint_r+0xba>
   16afe:	4611      	mov	r1, r2
   16b00:	4648      	mov	r0, r9
   16b02:	f7f9 fa2f 	bl	ff64 <_malloc_r>
   16b06:	9001      	str	r0, [sp, #4]
   16b08:	2800      	cmp	r0, #0
   16b0a:	d03a      	beq.n	16b82 <__ssprint_r+0xce>
   16b0c:	4642      	mov	r2, r8
   16b0e:	6921      	ldr	r1, [r4, #16]
   16b10:	f7f7 fc00 	bl	e314 <memcpy>
   16b14:	89a2      	ldrh	r2, [r4, #12]
   16b16:	9b01      	ldr	r3, [sp, #4]
   16b18:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   16b1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   16b20:	81a2      	strh	r2, [r4, #12]
   16b22:	eba6 0208 	sub.w	r2, r6, r8
   16b26:	eb03 0008 	add.w	r0, r3, r8
   16b2a:	6166      	str	r6, [r4, #20]
   16b2c:	60a2      	str	r2, [r4, #8]
   16b2e:	6123      	str	r3, [r4, #16]
   16b30:	6020      	str	r0, [r4, #0]
   16b32:	462e      	mov	r6, r5
   16b34:	46a8      	mov	r8, r5
   16b36:	4642      	mov	r2, r8
   16b38:	4659      	mov	r1, fp
   16b3a:	f7fb f8db 	bl	11cf4 <memmove>
   16b3e:	f8da 3008 	ldr.w	r3, [sl, #8]
   16b42:	68a2      	ldr	r2, [r4, #8]
   16b44:	6820      	ldr	r0, [r4, #0]
   16b46:	1b92      	subs	r2, r2, r6
   16b48:	4440      	add	r0, r8
   16b4a:	1b5b      	subs	r3, r3, r5
   16b4c:	60a2      	str	r2, [r4, #8]
   16b4e:	6020      	str	r0, [r4, #0]
   16b50:	f8ca 3008 	str.w	r3, [sl, #8]
   16b54:	b33b      	cbz	r3, 16ba6 <__ssprint_r+0xf2>
   16b56:	3708      	adds	r7, #8
   16b58:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   16b5c:	2d00      	cmp	r5, #0
   16b5e:	d0fa      	beq.n	16b56 <__ssprint_r+0xa2>
   16b60:	42aa      	cmp	r2, r5
   16b62:	4616      	mov	r6, r2
   16b64:	4690      	mov	r8, r2
   16b66:	d9b3      	bls.n	16ad0 <__ssprint_r+0x1c>
   16b68:	462e      	mov	r6, r5
   16b6a:	46a8      	mov	r8, r5
   16b6c:	e7e3      	b.n	16b36 <__ssprint_r+0x82>
   16b6e:	4648      	mov	r0, r9
   16b70:	f7f9 fcb4 	bl	104dc <_realloc_r>
   16b74:	4603      	mov	r3, r0
   16b76:	2800      	cmp	r0, #0
   16b78:	d1d3      	bne.n	16b22 <__ssprint_r+0x6e>
   16b7a:	6921      	ldr	r1, [r4, #16]
   16b7c:	4648      	mov	r0, r9
   16b7e:	f7fb fdeb 	bl	12758 <_free_r>
   16b82:	89a3      	ldrh	r3, [r4, #12]
   16b84:	220c      	movs	r2, #12
   16b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16b8a:	f8c9 2000 	str.w	r2, [r9]
   16b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16b92:	81a3      	strh	r3, [r4, #12]
   16b94:	2200      	movs	r2, #0
   16b96:	2300      	movs	r3, #0
   16b98:	f8ca 2008 	str.w	r2, [sl, #8]
   16b9c:	f8ca 3004 	str.w	r3, [sl, #4]
   16ba0:	b003      	add	sp, #12
   16ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ba6:	2000      	movs	r0, #0
   16ba8:	2300      	movs	r3, #0
   16baa:	f8ca 3004 	str.w	r3, [sl, #4]
   16bae:	b003      	add	sp, #12
   16bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016bb4 <__sprint_r.part.0>:
   16bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bb8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   16bba:	049c      	lsls	r4, r3, #18
   16bbc:	4690      	mov	r8, r2
   16bbe:	d52d      	bpl.n	16c1c <__sprint_r.part.0+0x68>
   16bc0:	6893      	ldr	r3, [r2, #8]
   16bc2:	6812      	ldr	r2, [r2, #0]
   16bc4:	b343      	cbz	r3, 16c18 <__sprint_r.part.0+0x64>
   16bc6:	468b      	mov	fp, r1
   16bc8:	4606      	mov	r6, r0
   16bca:	f102 0908 	add.w	r9, r2, #8
   16bce:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   16bd2:	ea5f 079a 	movs.w	r7, sl, lsr #2
   16bd6:	d015      	beq.n	16c04 <__sprint_r.part.0+0x50>
   16bd8:	3d04      	subs	r5, #4
   16bda:	2400      	movs	r4, #0
   16bdc:	e001      	b.n	16be2 <__sprint_r.part.0+0x2e>
   16bde:	42a7      	cmp	r7, r4
   16be0:	d00e      	beq.n	16c00 <__sprint_r.part.0+0x4c>
   16be2:	f855 1f04 	ldr.w	r1, [r5, #4]!
   16be6:	465a      	mov	r2, fp
   16be8:	4630      	mov	r0, r6
   16bea:	f001 fa5b 	bl	180a4 <_fputwc_r>
   16bee:	1c43      	adds	r3, r0, #1
   16bf0:	f104 0401 	add.w	r4, r4, #1
   16bf4:	d1f3      	bne.n	16bde <__sprint_r.part.0+0x2a>
   16bf6:	2300      	movs	r3, #0
   16bf8:	e9c8 3301 	strd	r3, r3, [r8, #4]
   16bfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c00:	f8d8 3008 	ldr.w	r3, [r8, #8]
   16c04:	f02a 0a03 	bic.w	sl, sl, #3
   16c08:	eba3 030a 	sub.w	r3, r3, sl
   16c0c:	f8c8 3008 	str.w	r3, [r8, #8]
   16c10:	f109 0908 	add.w	r9, r9, #8
   16c14:	2b00      	cmp	r3, #0
   16c16:	d1da      	bne.n	16bce <__sprint_r.part.0+0x1a>
   16c18:	2000      	movs	r0, #0
   16c1a:	e7ec      	b.n	16bf6 <__sprint_r.part.0+0x42>
   16c1c:	f001 f80c 	bl	17c38 <__sfvwrite_r>
   16c20:	2300      	movs	r3, #0
   16c22:	e9c8 3301 	strd	r3, r3, [r8, #4]
   16c26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c2a:	bf00      	nop

00016c2c <_vfiprintf_r>:
   16c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c30:	ed2d 8b02 	vpush	{d8}
   16c34:	b0c5      	sub	sp, #276	; 0x114
   16c36:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   16c3a:	4683      	mov	fp, r0
   16c3c:	ee08 1a10 	vmov	s16, r1
   16c40:	4616      	mov	r6, r2
   16c42:	2100      	movs	r1, #0
   16c44:	2208      	movs	r2, #8
   16c46:	4650      	mov	r0, sl
   16c48:	461c      	mov	r4, r3
   16c4a:	9307      	str	r3, [sp, #28]
   16c4c:	f7fb f8ce 	bl	11dec <memset>
   16c50:	f1bb 0f00 	cmp.w	fp, #0
   16c54:	d004      	beq.n	16c60 <_vfiprintf_r+0x34>
   16c56:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   16c5a:	2b00      	cmp	r3, #0
   16c5c:	f000 86a0 	beq.w	179a0 <_vfiprintf_r+0xd74>
   16c60:	ee18 2a10 	vmov	r2, s16
   16c64:	6e53      	ldr	r3, [r2, #100]	; 0x64
   16c66:	07db      	lsls	r3, r3, #31
   16c68:	f140 8513 	bpl.w	17692 <_vfiprintf_r+0xa66>
   16c6c:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   16c70:	b28a      	uxth	r2, r1
   16c72:	0495      	lsls	r5, r2, #18
   16c74:	d40b      	bmi.n	16c8e <_vfiprintf_r+0x62>
   16c76:	ee18 3a10 	vmov	r3, s16
   16c7a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   16c7e:	8199      	strh	r1, [r3, #12]
   16c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   16c82:	b28a      	uxth	r2, r1
   16c84:	ee18 1a10 	vmov	r1, s16
   16c88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   16c8c:	664b      	str	r3, [r1, #100]	; 0x64
   16c8e:	0710      	lsls	r0, r2, #28
   16c90:	f140 8105 	bpl.w	16e9e <_vfiprintf_r+0x272>
   16c94:	ee18 3a10 	vmov	r3, s16
   16c98:	691b      	ldr	r3, [r3, #16]
   16c9a:	2b00      	cmp	r3, #0
   16c9c:	f000 80ff 	beq.w	16e9e <_vfiprintf_r+0x272>
   16ca0:	f002 031a 	and.w	r3, r2, #26
   16ca4:	2b0a      	cmp	r3, #10
   16ca6:	f000 810a 	beq.w	16ebe <_vfiprintf_r+0x292>
   16caa:	2300      	movs	r3, #0
   16cac:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   16cb0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   16cb4:	aa1b      	add	r2, sp, #108	; 0x6c
   16cb6:	930c      	str	r3, [sp, #48]	; 0x30
   16cb8:	9218      	str	r2, [sp, #96]	; 0x60
   16cba:	4691      	mov	r9, r2
   16cbc:	930b      	str	r3, [sp, #44]	; 0x2c
   16cbe:	9305      	str	r3, [sp, #20]
   16cc0:	46b0      	mov	r8, r6
   16cc2:	4644      	mov	r4, r8
   16cc4:	4ba8      	ldr	r3, [pc, #672]	; (16f68 <_vfiprintf_r+0x33c>)
   16cc6:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   16cca:	f7fb f993 	bl	11ff4 <__locale_mb_cur_max>
   16cce:	4622      	mov	r2, r4
   16cd0:	4603      	mov	r3, r0
   16cd2:	a912      	add	r1, sp, #72	; 0x48
   16cd4:	f8cd a000 	str.w	sl, [sp]
   16cd8:	4658      	mov	r0, fp
   16cda:	47a8      	blx	r5
   16cdc:	2800      	cmp	r0, #0
   16cde:	f000 8145 	beq.w	16f6c <_vfiprintf_r+0x340>
   16ce2:	f2c0 8139 	blt.w	16f58 <_vfiprintf_r+0x32c>
   16ce6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   16ce8:	2a25      	cmp	r2, #37	; 0x25
   16cea:	4603      	mov	r3, r0
   16cec:	d001      	beq.n	16cf2 <_vfiprintf_r+0xc6>
   16cee:	441c      	add	r4, r3
   16cf0:	e7e8      	b.n	16cc4 <_vfiprintf_r+0x98>
   16cf2:	ebb4 0608 	subs.w	r6, r4, r8
   16cf6:	4605      	mov	r5, r0
   16cf8:	f040 813c 	bne.w	16f74 <_vfiprintf_r+0x348>
   16cfc:	2300      	movs	r3, #0
   16cfe:	7861      	ldrb	r1, [r4, #1]
   16d00:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   16d04:	f104 0801 	add.w	r8, r4, #1
   16d08:	9306      	str	r3, [sp, #24]
   16d0a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   16d0e:	461e      	mov	r6, r3
   16d10:	242b      	movs	r4, #43	; 0x2b
   16d12:	f108 0801 	add.w	r8, r8, #1
   16d16:	f1a1 0320 	sub.w	r3, r1, #32
   16d1a:	2b5a      	cmp	r3, #90	; 0x5a
   16d1c:	f200 8178 	bhi.w	17010 <_vfiprintf_r+0x3e4>
   16d20:	e8df f013 	tbh	[pc, r3, lsl #1]
   16d24:	017602b5 	.word	0x017602b5
   16d28:	02b00176 	.word	0x02b00176
   16d2c:	01760176 	.word	0x01760176
   16d30:	006a0176 	.word	0x006a0176
   16d34:	01760176 	.word	0x01760176
   16d38:	028d027d 	.word	0x028d027d
   16d3c:	02880176 	.word	0x02880176
   16d40:	01760297 	.word	0x01760297
   16d44:	005b0292 	.word	0x005b0292
   16d48:	005b005b 	.word	0x005b005b
   16d4c:	005b005b 	.word	0x005b005b
   16d50:	005b005b 	.word	0x005b005b
   16d54:	005b005b 	.word	0x005b005b
   16d58:	01760176 	.word	0x01760176
   16d5c:	01760176 	.word	0x01760176
   16d60:	01760176 	.word	0x01760176
   16d64:	01760176 	.word	0x01760176
   16d68:	025c0176 	.word	0x025c0176
   16d6c:	01760084 	.word	0x01760084
   16d70:	01760176 	.word	0x01760176
   16d74:	01760176 	.word	0x01760176
   16d78:	01760176 	.word	0x01760176
   16d7c:	01760176 	.word	0x01760176
   16d80:	00e80176 	.word	0x00e80176
   16d84:	01760176 	.word	0x01760176
   16d88:	02330176 	.word	0x02330176
   16d8c:	02da0176 	.word	0x02da0176
   16d90:	01760176 	.word	0x01760176
   16d94:	0176058b 	.word	0x0176058b
   16d98:	01760176 	.word	0x01760176
   16d9c:	01760176 	.word	0x01760176
   16da0:	01760176 	.word	0x01760176
   16da4:	01760176 	.word	0x01760176
   16da8:	025c0176 	.word	0x025c0176
   16dac:	01760086 	.word	0x01760086
   16db0:	01760176 	.word	0x01760176
   16db4:	008602cd 	.word	0x008602cd
   16db8:	0176007f 	.word	0x0176007f
   16dbc:	017602c0 	.word	0x017602c0
   16dc0:	00ea02fd 	.word	0x00ea02fd
   16dc4:	007f02ed 	.word	0x007f02ed
   16dc8:	02330176 	.word	0x02330176
   16dcc:	0569007c 	.word	0x0569007c
   16dd0:	01760176 	.word	0x01760176
   16dd4:	0176056b 	.word	0x0176056b
   16dd8:	007c      	.short	0x007c
   16dda:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   16dde:	2200      	movs	r2, #0
   16de0:	f818 1b01 	ldrb.w	r1, [r8], #1
   16de4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   16de8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   16dec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   16df0:	2b09      	cmp	r3, #9
   16df2:	d9f5      	bls.n	16de0 <_vfiprintf_r+0x1b4>
   16df4:	9206      	str	r2, [sp, #24]
   16df6:	e78e      	b.n	16d16 <_vfiprintf_r+0xea>
   16df8:	4658      	mov	r0, fp
   16dfa:	f7fe fe2f 	bl	15a5c <_localeconv_r>
   16dfe:	6843      	ldr	r3, [r0, #4]
   16e00:	930d      	str	r3, [sp, #52]	; 0x34
   16e02:	4618      	mov	r0, r3
   16e04:	f7fb fb9c 	bl	12540 <strlen>
   16e08:	900e      	str	r0, [sp, #56]	; 0x38
   16e0a:	4605      	mov	r5, r0
   16e0c:	4658      	mov	r0, fp
   16e0e:	f7fe fe25 	bl	15a5c <_localeconv_r>
   16e12:	6883      	ldr	r3, [r0, #8]
   16e14:	930b      	str	r3, [sp, #44]	; 0x2c
   16e16:	2d00      	cmp	r5, #0
   16e18:	f040 84d6 	bne.w	177c8 <_vfiprintf_r+0xb9c>
   16e1c:	f898 1000 	ldrb.w	r1, [r8]
   16e20:	e777      	b.n	16d12 <_vfiprintf_r+0xe6>
   16e22:	f898 1000 	ldrb.w	r1, [r8]
   16e26:	f046 0620 	orr.w	r6, r6, #32
   16e2a:	e772      	b.n	16d12 <_vfiprintf_r+0xe6>
   16e2c:	f046 0610 	orr.w	r6, r6, #16
   16e30:	06b4      	lsls	r4, r6, #26
   16e32:	f140 818e 	bpl.w	17152 <_vfiprintf_r+0x526>
   16e36:	9b07      	ldr	r3, [sp, #28]
   16e38:	3307      	adds	r3, #7
   16e3a:	f023 0307 	bic.w	r3, r3, #7
   16e3e:	461a      	mov	r2, r3
   16e40:	6859      	ldr	r1, [r3, #4]
   16e42:	f852 3b08 	ldr.w	r3, [r2], #8
   16e46:	9207      	str	r2, [sp, #28]
   16e48:	460a      	mov	r2, r1
   16e4a:	2900      	cmp	r1, #0
   16e4c:	f2c0 8470 	blt.w	17730 <_vfiprintf_r+0xb04>
   16e50:	1c79      	adds	r1, r7, #1
   16e52:	f000 85a2 	beq.w	1799a <_vfiprintf_r+0xd6e>
   16e56:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   16e5a:	9103      	str	r1, [sp, #12]
   16e5c:	ea53 0102 	orrs.w	r1, r3, r2
   16e60:	f000 843f 	beq.w	176e2 <_vfiprintf_r+0xab6>
   16e64:	2b0a      	cmp	r3, #10
   16e66:	f172 0100 	sbcs.w	r1, r2, #0
   16e6a:	f080 8541 	bcs.w	178f0 <_vfiprintf_r+0xcc4>
   16e6e:	3330      	adds	r3, #48	; 0x30
   16e70:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   16e74:	9e03      	ldr	r6, [sp, #12]
   16e76:	2301      	movs	r3, #1
   16e78:	9304      	str	r3, [sp, #16]
   16e7a:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   16e7e:	9b04      	ldr	r3, [sp, #16]
   16e80:	42bb      	cmp	r3, r7
   16e82:	bfb8      	it	lt
   16e84:	463b      	movlt	r3, r7
   16e86:	9303      	str	r3, [sp, #12]
   16e88:	2300      	movs	r3, #0
   16e8a:	9308      	str	r3, [sp, #32]
   16e8c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   16e90:	2b00      	cmp	r3, #0
   16e92:	f000 80cb 	beq.w	1702c <_vfiprintf_r+0x400>
   16e96:	9b03      	ldr	r3, [sp, #12]
   16e98:	3301      	adds	r3, #1
   16e9a:	9303      	str	r3, [sp, #12]
   16e9c:	e0c6      	b.n	1702c <_vfiprintf_r+0x400>
   16e9e:	ee18 1a10 	vmov	r1, s16
   16ea2:	4658      	mov	r0, fp
   16ea4:	ee18 5a10 	vmov	r5, s16
   16ea8:	f001 f840 	bl	17f2c <__swsetup_r>
   16eac:	2800      	cmp	r0, #0
   16eae:	f040 8652 	bne.w	17b56 <_vfiprintf_r+0xf2a>
   16eb2:	89aa      	ldrh	r2, [r5, #12]
   16eb4:	f002 031a 	and.w	r3, r2, #26
   16eb8:	2b0a      	cmp	r3, #10
   16eba:	f47f aef6 	bne.w	16caa <_vfiprintf_r+0x7e>
   16ebe:	ee18 1a10 	vmov	r1, s16
   16ec2:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   16ec6:	2b00      	cmp	r3, #0
   16ec8:	f6ff aeef 	blt.w	16caa <_vfiprintf_r+0x7e>
   16ecc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   16ece:	07db      	lsls	r3, r3, #31
   16ed0:	d402      	bmi.n	16ed8 <_vfiprintf_r+0x2ac>
   16ed2:	0597      	lsls	r7, r2, #22
   16ed4:	f140 8612 	bpl.w	17afc <_vfiprintf_r+0xed0>
   16ed8:	ee18 1a10 	vmov	r1, s16
   16edc:	4623      	mov	r3, r4
   16ede:	4632      	mov	r2, r6
   16ee0:	4658      	mov	r0, fp
   16ee2:	f000 fe69 	bl	17bb8 <__sbprintf>
   16ee6:	9005      	str	r0, [sp, #20]
   16ee8:	9805      	ldr	r0, [sp, #20]
   16eea:	b045      	add	sp, #276	; 0x114
   16eec:	ecbd 8b02 	vpop	{d8}
   16ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ef4:	f046 0610 	orr.w	r6, r6, #16
   16ef8:	f016 0220 	ands.w	r2, r6, #32
   16efc:	f000 8136 	beq.w	1716c <_vfiprintf_r+0x540>
   16f00:	9b07      	ldr	r3, [sp, #28]
   16f02:	3307      	adds	r3, #7
   16f04:	f023 0307 	bic.w	r3, r3, #7
   16f08:	4619      	mov	r1, r3
   16f0a:	685a      	ldr	r2, [r3, #4]
   16f0c:	f851 3b08 	ldr.w	r3, [r1], #8
   16f10:	9107      	str	r1, [sp, #28]
   16f12:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   16f16:	9103      	str	r1, [sp, #12]
   16f18:	2100      	movs	r1, #0
   16f1a:	2000      	movs	r0, #0
   16f1c:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   16f20:	1c78      	adds	r0, r7, #1
   16f22:	f000 8210 	beq.w	17346 <_vfiprintf_r+0x71a>
   16f26:	9803      	ldr	r0, [sp, #12]
   16f28:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   16f2c:	ea53 0002 	orrs.w	r0, r3, r2
   16f30:	f040 8208 	bne.w	17344 <_vfiprintf_r+0x718>
   16f34:	2f00      	cmp	r7, #0
   16f36:	f040 8538 	bne.w	179aa <_vfiprintf_r+0xd7e>
   16f3a:	2900      	cmp	r1, #0
   16f3c:	f040 83d5 	bne.w	176ea <_vfiprintf_r+0xabe>
   16f40:	9b03      	ldr	r3, [sp, #12]
   16f42:	f013 0301 	ands.w	r3, r3, #1
   16f46:	9304      	str	r3, [sp, #16]
   16f48:	f000 8411 	beq.w	1776e <_vfiprintf_r+0xb42>
   16f4c:	2330      	movs	r3, #48	; 0x30
   16f4e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   16f52:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   16f56:	e792      	b.n	16e7e <_vfiprintf_r+0x252>
   16f58:	2208      	movs	r2, #8
   16f5a:	2100      	movs	r1, #0
   16f5c:	4650      	mov	r0, sl
   16f5e:	f7fa ff45 	bl	11dec <memset>
   16f62:	2301      	movs	r3, #1
   16f64:	441c      	add	r4, r3
   16f66:	e6ad      	b.n	16cc4 <_vfiprintf_r+0x98>
   16f68:	20002f1c 	.word	0x20002f1c
   16f6c:	ebb4 0608 	subs.w	r6, r4, r8
   16f70:	4605      	mov	r5, r0
   16f72:	d01b      	beq.n	16fac <_vfiprintf_r+0x380>
   16f74:	9b19      	ldr	r3, [sp, #100]	; 0x64
   16f76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   16f78:	3301      	adds	r3, #1
   16f7a:	4432      	add	r2, r6
   16f7c:	2b07      	cmp	r3, #7
   16f7e:	e9c9 8600 	strd	r8, r6, [r9]
   16f82:	921a      	str	r2, [sp, #104]	; 0x68
   16f84:	9319      	str	r3, [sp, #100]	; 0x64
   16f86:	dd1c      	ble.n	16fc2 <_vfiprintf_r+0x396>
   16f88:	2a00      	cmp	r2, #0
   16f8a:	f000 83a6 	beq.w	176da <_vfiprintf_r+0xaae>
   16f8e:	ee18 1a10 	vmov	r1, s16
   16f92:	aa18      	add	r2, sp, #96	; 0x60
   16f94:	4658      	mov	r0, fp
   16f96:	f7ff fe0d 	bl	16bb4 <__sprint_r.part.0>
   16f9a:	bb20      	cbnz	r0, 16fe6 <_vfiprintf_r+0x3ba>
   16f9c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   16fa0:	9b05      	ldr	r3, [sp, #20]
   16fa2:	4433      	add	r3, r6
   16fa4:	9305      	str	r3, [sp, #20]
   16fa6:	2d00      	cmp	r5, #0
   16fa8:	f47f aea8 	bne.w	16cfc <_vfiprintf_r+0xd0>
   16fac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   16fae:	2b00      	cmp	r3, #0
   16fb0:	f040 85c1 	bne.w	17b36 <_vfiprintf_r+0xf0a>
   16fb4:	ee18 3a10 	vmov	r3, s16
   16fb8:	2200      	movs	r2, #0
   16fba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   16fbe:	9219      	str	r2, [sp, #100]	; 0x64
   16fc0:	e015      	b.n	16fee <_vfiprintf_r+0x3c2>
   16fc2:	f109 0908 	add.w	r9, r9, #8
   16fc6:	e7eb      	b.n	16fa0 <_vfiprintf_r+0x374>
   16fc8:	ee18 1a10 	vmov	r1, s16
   16fcc:	aa18      	add	r2, sp, #96	; 0x60
   16fce:	4658      	mov	r0, fp
   16fd0:	f7ff fdf0 	bl	16bb4 <__sprint_r.part.0>
   16fd4:	2800      	cmp	r0, #0
   16fd6:	f000 80a6 	beq.w	17126 <_vfiprintf_r+0x4fa>
   16fda:	9b08      	ldr	r3, [sp, #32]
   16fdc:	b11b      	cbz	r3, 16fe6 <_vfiprintf_r+0x3ba>
   16fde:	9908      	ldr	r1, [sp, #32]
   16fe0:	4658      	mov	r0, fp
   16fe2:	f7fb fbb9 	bl	12758 <_free_r>
   16fe6:	ee18 3a10 	vmov	r3, s16
   16fea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   16fee:	ee18 2a10 	vmov	r2, s16
   16ff2:	6e52      	ldr	r2, [r2, #100]	; 0x64
   16ff4:	f012 0f01 	tst.w	r2, #1
   16ff8:	b29a      	uxth	r2, r3
   16ffa:	f000 80a0 	beq.w	1713e <_vfiprintf_r+0x512>
   16ffe:	0650      	lsls	r0, r2, #25
   17000:	f100 85b2 	bmi.w	17b68 <_vfiprintf_r+0xf3c>
   17004:	9805      	ldr	r0, [sp, #20]
   17006:	b045      	add	sp, #276	; 0x114
   17008:	ecbd 8b02 	vpop	{d8}
   1700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17010:	2900      	cmp	r1, #0
   17012:	d0cb      	beq.n	16fac <_vfiprintf_r+0x380>
   17014:	2300      	movs	r3, #0
   17016:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1701a:	2301      	movs	r3, #1
   1701c:	e9cd 3303 	strd	r3, r3, [sp, #12]
   17020:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   17024:	ac2b      	add	r4, sp, #172	; 0xac
   17026:	2300      	movs	r3, #0
   17028:	9308      	str	r3, [sp, #32]
   1702a:	461f      	mov	r7, r3
   1702c:	f016 0302 	ands.w	r3, r6, #2
   17030:	9309      	str	r3, [sp, #36]	; 0x24
   17032:	d002      	beq.n	1703a <_vfiprintf_r+0x40e>
   17034:	9b03      	ldr	r3, [sp, #12]
   17036:	3302      	adds	r3, #2
   17038:	9303      	str	r3, [sp, #12]
   1703a:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   1703e:	930a      	str	r3, [sp, #40]	; 0x28
   17040:	d105      	bne.n	1704e <_vfiprintf_r+0x422>
   17042:	9b06      	ldr	r3, [sp, #24]
   17044:	9a03      	ldr	r2, [sp, #12]
   17046:	1a9d      	subs	r5, r3, r2
   17048:	2d00      	cmp	r5, #0
   1704a:	f300 827b 	bgt.w	17544 <_vfiprintf_r+0x918>
   1704e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   17052:	1c41      	adds	r1, r0, #1
   17054:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   17058:	b182      	cbz	r2, 1707c <_vfiprintf_r+0x450>
   1705a:	2201      	movs	r2, #1
   1705c:	3301      	adds	r3, #1
   1705e:	f8c9 2004 	str.w	r2, [r9, #4]
   17062:	2907      	cmp	r1, #7
   17064:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   17068:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1706c:	f8c9 2000 	str.w	r2, [r9]
   17070:	f300 824a 	bgt.w	17508 <_vfiprintf_r+0x8dc>
   17074:	4608      	mov	r0, r1
   17076:	f109 0908 	add.w	r9, r9, #8
   1707a:	3101      	adds	r1, #1
   1707c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1707e:	b1e2      	cbz	r2, 170ba <_vfiprintf_r+0x48e>
   17080:	aa11      	add	r2, sp, #68	; 0x44
   17082:	3302      	adds	r3, #2
   17084:	f8c9 2000 	str.w	r2, [r9]
   17088:	2907      	cmp	r1, #7
   1708a:	f04f 0202 	mov.w	r2, #2
   1708e:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   17092:	f8c9 2004 	str.w	r2, [r9, #4]
   17096:	f340 8250 	ble.w	1753a <_vfiprintf_r+0x90e>
   1709a:	2b00      	cmp	r3, #0
   1709c:	f000 8343 	beq.w	17726 <_vfiprintf_r+0xafa>
   170a0:	ee18 1a10 	vmov	r1, s16
   170a4:	aa18      	add	r2, sp, #96	; 0x60
   170a6:	4658      	mov	r0, fp
   170a8:	f7ff fd84 	bl	16bb4 <__sprint_r.part.0>
   170ac:	2800      	cmp	r0, #0
   170ae:	d194      	bne.n	16fda <_vfiprintf_r+0x3ae>
   170b0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   170b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   170b8:	1c41      	adds	r1, r0, #1
   170ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   170bc:	2a80      	cmp	r2, #128	; 0x80
   170be:	f000 8184 	beq.w	173ca <_vfiprintf_r+0x79e>
   170c2:	9a04      	ldr	r2, [sp, #16]
   170c4:	1abd      	subs	r5, r7, r2
   170c6:	2d00      	cmp	r5, #0
   170c8:	f300 81d7 	bgt.w	1747a <_vfiprintf_r+0x84e>
   170cc:	9a04      	ldr	r2, [sp, #16]
   170ce:	f8c9 4000 	str.w	r4, [r9]
   170d2:	4413      	add	r3, r2
   170d4:	2907      	cmp	r1, #7
   170d6:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   170da:	f8c9 2004 	str.w	r2, [r9, #4]
   170de:	f340 816e 	ble.w	173be <_vfiprintf_r+0x792>
   170e2:	2b00      	cmp	r3, #0
   170e4:	f000 8275 	beq.w	175d2 <_vfiprintf_r+0x9a6>
   170e8:	ee18 1a10 	vmov	r1, s16
   170ec:	aa18      	add	r2, sp, #96	; 0x60
   170ee:	4658      	mov	r0, fp
   170f0:	f7ff fd60 	bl	16bb4 <__sprint_r.part.0>
   170f4:	2800      	cmp	r0, #0
   170f6:	f47f af70 	bne.w	16fda <_vfiprintf_r+0x3ae>
   170fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   170fc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   17100:	0775      	lsls	r5, r6, #29
   17102:	d505      	bpl.n	17110 <_vfiprintf_r+0x4e4>
   17104:	9a06      	ldr	r2, [sp, #24]
   17106:	9903      	ldr	r1, [sp, #12]
   17108:	1a54      	subs	r4, r2, r1
   1710a:	2c00      	cmp	r4, #0
   1710c:	f300 826b 	bgt.w	175e6 <_vfiprintf_r+0x9ba>
   17110:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   17114:	9803      	ldr	r0, [sp, #12]
   17116:	4281      	cmp	r1, r0
   17118:	bfac      	ite	ge
   1711a:	1852      	addge	r2, r2, r1
   1711c:	1812      	addlt	r2, r2, r0
   1711e:	9205      	str	r2, [sp, #20]
   17120:	2b00      	cmp	r3, #0
   17122:	f47f af51 	bne.w	16fc8 <_vfiprintf_r+0x39c>
   17126:	9908      	ldr	r1, [sp, #32]
   17128:	2300      	movs	r3, #0
   1712a:	9319      	str	r3, [sp, #100]	; 0x64
   1712c:	2900      	cmp	r1, #0
   1712e:	f000 8149 	beq.w	173c4 <_vfiprintf_r+0x798>
   17132:	4658      	mov	r0, fp
   17134:	f7fb fb10 	bl	12758 <_free_r>
   17138:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1713c:	e5c1      	b.n	16cc2 <_vfiprintf_r+0x96>
   1713e:	059c      	lsls	r4, r3, #22
   17140:	f53f af5d 	bmi.w	16ffe <_vfiprintf_r+0x3d2>
   17144:	ee18 4a10 	vmov	r4, s16
   17148:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1714a:	f7fb f98f 	bl	1246c <__retarget_lock_release_recursive>
   1714e:	89a2      	ldrh	r2, [r4, #12]
   17150:	e755      	b.n	16ffe <_vfiprintf_r+0x3d2>
   17152:	06f0      	lsls	r0, r6, #27
   17154:	9a07      	ldr	r2, [sp, #28]
   17156:	f100 831f 	bmi.w	17798 <_vfiprintf_r+0xb6c>
   1715a:	0671      	lsls	r1, r6, #25
   1715c:	f140 8319 	bpl.w	17792 <_vfiprintf_r+0xb66>
   17160:	f932 3b04 	ldrsh.w	r3, [r2], #4
   17164:	9207      	str	r2, [sp, #28]
   17166:	17da      	asrs	r2, r3, #31
   17168:	4611      	mov	r1, r2
   1716a:	e66e      	b.n	16e4a <_vfiprintf_r+0x21e>
   1716c:	f016 0310 	ands.w	r3, r6, #16
   17170:	9907      	ldr	r1, [sp, #28]
   17172:	f040 8309 	bne.w	17788 <_vfiprintf_r+0xb5c>
   17176:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   1717a:	f000 8301 	beq.w	17780 <_vfiprintf_r+0xb54>
   1717e:	461a      	mov	r2, r3
   17180:	f851 3b04 	ldr.w	r3, [r1], #4
   17184:	9107      	str	r1, [sp, #28]
   17186:	b29b      	uxth	r3, r3
   17188:	e6c3      	b.n	16f12 <_vfiprintf_r+0x2e6>
   1718a:	9b07      	ldr	r3, [sp, #28]
   1718c:	461a      	mov	r2, r3
   1718e:	2300      	movs	r3, #0
   17190:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   17194:	4613      	mov	r3, r2
   17196:	f853 4b04 	ldr.w	r4, [r3], #4
   1719a:	9303      	str	r3, [sp, #12]
   1719c:	2c00      	cmp	r4, #0
   1719e:	f000 8412 	beq.w	179c6 <_vfiprintf_r+0xd9a>
   171a2:	2953      	cmp	r1, #83	; 0x53
   171a4:	f000 8365 	beq.w	17872 <_vfiprintf_r+0xc46>
   171a8:	f016 0510 	ands.w	r5, r6, #16
   171ac:	f040 8361 	bne.w	17872 <_vfiprintf_r+0xc46>
   171b0:	1c7b      	adds	r3, r7, #1
   171b2:	f000 84b3 	beq.w	17b1c <_vfiprintf_r+0xef0>
   171b6:	463a      	mov	r2, r7
   171b8:	4629      	mov	r1, r5
   171ba:	4620      	mov	r0, r4
   171bc:	f7fb f958 	bl	12470 <memchr>
   171c0:	9008      	str	r0, [sp, #32]
   171c2:	2800      	cmp	r0, #0
   171c4:	f000 849f 	beq.w	17b06 <_vfiprintf_r+0xeda>
   171c8:	1b03      	subs	r3, r0, r4
   171ca:	9a03      	ldr	r2, [sp, #12]
   171cc:	9304      	str	r3, [sp, #16]
   171ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   171d2:	462f      	mov	r7, r5
   171d4:	9207      	str	r2, [sp, #28]
   171d6:	9303      	str	r3, [sp, #12]
   171d8:	9508      	str	r5, [sp, #32]
   171da:	e657      	b.n	16e8c <_vfiprintf_r+0x260>
   171dc:	2943      	cmp	r1, #67	; 0x43
   171de:	d002      	beq.n	171e6 <_vfiprintf_r+0x5ba>
   171e0:	06f5      	lsls	r5, r6, #27
   171e2:	f140 832d 	bpl.w	17840 <_vfiprintf_r+0xc14>
   171e6:	9d07      	ldr	r5, [sp, #28]
   171e8:	2208      	movs	r2, #8
   171ea:	2100      	movs	r1, #0
   171ec:	a816      	add	r0, sp, #88	; 0x58
   171ee:	ac2b      	add	r4, sp, #172	; 0xac
   171f0:	f7fa fdfc 	bl	11dec <memset>
   171f4:	ab16      	add	r3, sp, #88	; 0x58
   171f6:	f855 2b04 	ldr.w	r2, [r5], #4
   171fa:	4621      	mov	r1, r4
   171fc:	4658      	mov	r0, fp
   171fe:	f7fe fc6f 	bl	15ae0 <_wcrtomb_r>
   17202:	4603      	mov	r3, r0
   17204:	3301      	adds	r3, #1
   17206:	9004      	str	r0, [sp, #16]
   17208:	f000 84b3 	beq.w	17b72 <_vfiprintf_r+0xf46>
   1720c:	9b04      	ldr	r3, [sp, #16]
   1720e:	9507      	str	r5, [sp, #28]
   17210:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   17214:	9303      	str	r3, [sp, #12]
   17216:	2300      	movs	r3, #0
   17218:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1721c:	e703      	b.n	17026 <_vfiprintf_r+0x3fa>
   1721e:	9b07      	ldr	r3, [sp, #28]
   17220:	f853 2b04 	ldr.w	r2, [r3], #4
   17224:	9206      	str	r2, [sp, #24]
   17226:	2a00      	cmp	r2, #0
   17228:	f280 829c 	bge.w	17764 <_vfiprintf_r+0xb38>
   1722c:	9a06      	ldr	r2, [sp, #24]
   1722e:	4252      	negs	r2, r2
   17230:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17234:	f898 1000 	ldrb.w	r1, [r8]
   17238:	f046 0604 	orr.w	r6, r6, #4
   1723c:	e569      	b.n	16d12 <_vfiprintf_r+0xe6>
   1723e:	f898 1000 	ldrb.w	r1, [r8]
   17242:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   17246:	e564      	b.n	16d12 <_vfiprintf_r+0xe6>
   17248:	f898 1000 	ldrb.w	r1, [r8]
   1724c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   17250:	e55f      	b.n	16d12 <_vfiprintf_r+0xe6>
   17252:	4642      	mov	r2, r8
   17254:	f812 1b01 	ldrb.w	r1, [r2], #1
   17258:	292a      	cmp	r1, #42	; 0x2a
   1725a:	f000 8496 	beq.w	17b8a <_vfiprintf_r+0xf5e>
   1725e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   17262:	2b09      	cmp	r3, #9
   17264:	4690      	mov	r8, r2
   17266:	f04f 0700 	mov.w	r7, #0
   1726a:	f63f ad54 	bhi.w	16d16 <_vfiprintf_r+0xea>
   1726e:	f818 1b01 	ldrb.w	r1, [r8], #1
   17272:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   17276:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   1727a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1727e:	2b09      	cmp	r3, #9
   17280:	d9f5      	bls.n	1726e <_vfiprintf_r+0x642>
   17282:	e548      	b.n	16d16 <_vfiprintf_r+0xea>
   17284:	f898 1000 	ldrb.w	r1, [r8]
   17288:	f046 0601 	orr.w	r6, r6, #1
   1728c:	e541      	b.n	16d12 <_vfiprintf_r+0xe6>
   1728e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   17292:	2b00      	cmp	r3, #0
   17294:	f47f adc2 	bne.w	16e1c <_vfiprintf_r+0x1f0>
   17298:	2320      	movs	r3, #32
   1729a:	f898 1000 	ldrb.w	r1, [r8]
   1729e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   172a2:	e536      	b.n	16d12 <_vfiprintf_r+0xe6>
   172a4:	f898 1000 	ldrb.w	r1, [r8]
   172a8:	296c      	cmp	r1, #108	; 0x6c
   172aa:	bf03      	ittte	eq
   172ac:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   172b0:	f046 0620 	orreq.w	r6, r6, #32
   172b4:	f108 0801 	addeq.w	r8, r8, #1
   172b8:	f046 0610 	orrne.w	r6, r6, #16
   172bc:	e529      	b.n	16d12 <_vfiprintf_r+0xe6>
   172be:	f898 1000 	ldrb.w	r1, [r8]
   172c2:	2968      	cmp	r1, #104	; 0x68
   172c4:	bf03      	ittte	eq
   172c6:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   172ca:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   172ce:	f108 0801 	addeq.w	r8, r8, #1
   172d2:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   172d6:	e51c      	b.n	16d12 <_vfiprintf_r+0xe6>
   172d8:	f046 0310 	orr.w	r3, r6, #16
   172dc:	9303      	str	r3, [sp, #12]
   172de:	9b03      	ldr	r3, [sp, #12]
   172e0:	f013 0220 	ands.w	r2, r3, #32
   172e4:	f000 8206 	beq.w	176f4 <_vfiprintf_r+0xac8>
   172e8:	9b07      	ldr	r3, [sp, #28]
   172ea:	3307      	adds	r3, #7
   172ec:	f023 0307 	bic.w	r3, r3, #7
   172f0:	4619      	mov	r1, r3
   172f2:	685a      	ldr	r2, [r3, #4]
   172f4:	f851 3b08 	ldr.w	r3, [r1], #8
   172f8:	9107      	str	r1, [sp, #28]
   172fa:	2101      	movs	r1, #1
   172fc:	e60d      	b.n	16f1a <_vfiprintf_r+0x2ee>
   172fe:	9a07      	ldr	r2, [sp, #28]
   17300:	f046 0302 	orr.w	r3, r6, #2
   17304:	9303      	str	r3, [sp, #12]
   17306:	f852 3b04 	ldr.w	r3, [r2], #4
   1730a:	9207      	str	r2, [sp, #28]
   1730c:	f647 0230 	movw	r2, #30768	; 0x7830
   17310:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   17314:	4ab8      	ldr	r2, [pc, #736]	; (175f8 <_vfiprintf_r+0x9cc>)
   17316:	920c      	str	r2, [sp, #48]	; 0x30
   17318:	2102      	movs	r1, #2
   1731a:	2200      	movs	r2, #0
   1731c:	e5fd      	b.n	16f1a <_vfiprintf_r+0x2ee>
   1731e:	06b7      	lsls	r7, r6, #26
   17320:	f100 8248 	bmi.w	177b4 <_vfiprintf_r+0xb88>
   17324:	06f5      	lsls	r5, r6, #27
   17326:	f100 8346 	bmi.w	179b6 <_vfiprintf_r+0xd8a>
   1732a:	0674      	lsls	r4, r6, #25
   1732c:	f100 83d5 	bmi.w	17ada <_vfiprintf_r+0xeae>
   17330:	05b0      	lsls	r0, r6, #22
   17332:	f140 8340 	bpl.w	179b6 <_vfiprintf_r+0xd8a>
   17336:	9b07      	ldr	r3, [sp, #28]
   17338:	9905      	ldr	r1, [sp, #20]
   1733a:	f853 2b04 	ldr.w	r2, [r3], #4
   1733e:	9307      	str	r3, [sp, #28]
   17340:	7011      	strb	r1, [r2, #0]
   17342:	e4be      	b.n	16cc2 <_vfiprintf_r+0x96>
   17344:	9603      	str	r6, [sp, #12]
   17346:	2901      	cmp	r1, #1
   17348:	f43f ad8c 	beq.w	16e64 <_vfiprintf_r+0x238>
   1734c:	2902      	cmp	r1, #2
   1734e:	ac44      	add	r4, sp, #272	; 0x110
   17350:	d111      	bne.n	17376 <_vfiprintf_r+0x74a>
   17352:	980c      	ldr	r0, [sp, #48]	; 0x30
   17354:	f003 010f 	and.w	r1, r3, #15
   17358:	091b      	lsrs	r3, r3, #4
   1735a:	5c41      	ldrb	r1, [r0, r1]
   1735c:	f804 1d01 	strb.w	r1, [r4, #-1]!
   17360:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   17364:	0912      	lsrs	r2, r2, #4
   17366:	ea53 0102 	orrs.w	r1, r3, r2
   1736a:	d1f3      	bne.n	17354 <_vfiprintf_r+0x728>
   1736c:	9e03      	ldr	r6, [sp, #12]
   1736e:	ab44      	add	r3, sp, #272	; 0x110
   17370:	1b1b      	subs	r3, r3, r4
   17372:	9304      	str	r3, [sp, #16]
   17374:	e583      	b.n	16e7e <_vfiprintf_r+0x252>
   17376:	f003 0107 	and.w	r1, r3, #7
   1737a:	08db      	lsrs	r3, r3, #3
   1737c:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   17380:	08d2      	lsrs	r2, r2, #3
   17382:	3130      	adds	r1, #48	; 0x30
   17384:	ea53 0502 	orrs.w	r5, r3, r2
   17388:	4620      	mov	r0, r4
   1738a:	f804 1d01 	strb.w	r1, [r4, #-1]!
   1738e:	d1f2      	bne.n	17376 <_vfiprintf_r+0x74a>
   17390:	9e03      	ldr	r6, [sp, #12]
   17392:	07f3      	lsls	r3, r6, #31
   17394:	d5eb      	bpl.n	1736e <_vfiprintf_r+0x742>
   17396:	2930      	cmp	r1, #48	; 0x30
   17398:	d0e8      	beq.n	1736c <_vfiprintf_r+0x740>
   1739a:	2330      	movs	r3, #48	; 0x30
   1739c:	3802      	subs	r0, #2
   1739e:	f804 3c01 	strb.w	r3, [r4, #-1]
   173a2:	ab44      	add	r3, sp, #272	; 0x110
   173a4:	1a1b      	subs	r3, r3, r0
   173a6:	9e03      	ldr	r6, [sp, #12]
   173a8:	9304      	str	r3, [sp, #16]
   173aa:	4604      	mov	r4, r0
   173ac:	e567      	b.n	16e7e <_vfiprintf_r+0x252>
   173ae:	9b04      	ldr	r3, [sp, #16]
   173b0:	941b      	str	r4, [sp, #108]	; 0x6c
   173b2:	2201      	movs	r2, #1
   173b4:	931c      	str	r3, [sp, #112]	; 0x70
   173b6:	931a      	str	r3, [sp, #104]	; 0x68
   173b8:	9219      	str	r2, [sp, #100]	; 0x64
   173ba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   173be:	f109 0908 	add.w	r9, r9, #8
   173c2:	e69d      	b.n	17100 <_vfiprintf_r+0x4d4>
   173c4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   173c8:	e47b      	b.n	16cc2 <_vfiprintf_r+0x96>
   173ca:	9a06      	ldr	r2, [sp, #24]
   173cc:	9d03      	ldr	r5, [sp, #12]
   173ce:	1b55      	subs	r5, r2, r5
   173d0:	2d00      	cmp	r5, #0
   173d2:	f77f ae76 	ble.w	170c2 <_vfiprintf_r+0x496>
   173d6:	2d10      	cmp	r5, #16
   173d8:	f340 83bb 	ble.w	17b52 <_vfiprintf_r+0xf26>
   173dc:	9409      	str	r4, [sp, #36]	; 0x24
   173de:	ee18 4a10 	vmov	r4, s16
   173e2:	e007      	b.n	173f4 <_vfiprintf_r+0x7c8>
   173e4:	f100 0c02 	add.w	ip, r0, #2
   173e8:	f109 0908 	add.w	r9, r9, #8
   173ec:	4610      	mov	r0, r2
   173ee:	3d10      	subs	r5, #16
   173f0:	2d10      	cmp	r5, #16
   173f2:	dd1e      	ble.n	17432 <_vfiprintf_r+0x806>
   173f4:	4981      	ldr	r1, [pc, #516]	; (175fc <_vfiprintf_r+0x9d0>)
   173f6:	f8c9 1000 	str.w	r1, [r9]
   173fa:	1c42      	adds	r2, r0, #1
   173fc:	3310      	adds	r3, #16
   173fe:	2110      	movs	r1, #16
   17400:	2a07      	cmp	r2, #7
   17402:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   17406:	f8c9 1004 	str.w	r1, [r9, #4]
   1740a:	ddeb      	ble.n	173e4 <_vfiprintf_r+0x7b8>
   1740c:	aa18      	add	r2, sp, #96	; 0x60
   1740e:	2b00      	cmp	r3, #0
   17410:	d074      	beq.n	174fc <_vfiprintf_r+0x8d0>
   17412:	4621      	mov	r1, r4
   17414:	4658      	mov	r0, fp
   17416:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1741a:	f7ff fbcb 	bl	16bb4 <__sprint_r.part.0>
   1741e:	2800      	cmp	r0, #0
   17420:	f47f addb 	bne.w	16fda <_vfiprintf_r+0x3ae>
   17424:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   17428:	3d10      	subs	r5, #16
   1742a:	2d10      	cmp	r5, #16
   1742c:	f100 0c01 	add.w	ip, r0, #1
   17430:	dce0      	bgt.n	173f4 <_vfiprintf_r+0x7c8>
   17432:	9c09      	ldr	r4, [sp, #36]	; 0x24
   17434:	4a71      	ldr	r2, [pc, #452]	; (175fc <_vfiprintf_r+0x9d0>)
   17436:	f8c9 5004 	str.w	r5, [r9, #4]
   1743a:	442b      	add	r3, r5
   1743c:	f1bc 0f07 	cmp.w	ip, #7
   17440:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   17444:	f8c9 2000 	str.w	r2, [r9]
   17448:	f340 8194 	ble.w	17774 <_vfiprintf_r+0xb48>
   1744c:	2b00      	cmp	r3, #0
   1744e:	f000 831f 	beq.w	17a90 <_vfiprintf_r+0xe64>
   17452:	ee18 1a10 	vmov	r1, s16
   17456:	aa18      	add	r2, sp, #96	; 0x60
   17458:	4658      	mov	r0, fp
   1745a:	f7ff fbab 	bl	16bb4 <__sprint_r.part.0>
   1745e:	2800      	cmp	r0, #0
   17460:	f47f adbb 	bne.w	16fda <_vfiprintf_r+0x3ae>
   17464:	9a04      	ldr	r2, [sp, #16]
   17466:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1746a:	1abd      	subs	r5, r7, r2
   1746c:	2d00      	cmp	r5, #0
   1746e:	f100 0101 	add.w	r1, r0, #1
   17472:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   17476:	f77f ae29 	ble.w	170cc <_vfiprintf_r+0x4a0>
   1747a:	2d10      	cmp	r5, #16
   1747c:	dd29      	ble.n	174d2 <_vfiprintf_r+0x8a6>
   1747e:	9409      	str	r4, [sp, #36]	; 0x24
   17480:	2710      	movs	r7, #16
   17482:	ee18 4a10 	vmov	r4, s16
   17486:	e007      	b.n	17498 <_vfiprintf_r+0x86c>
   17488:	f100 0c02 	add.w	ip, r0, #2
   1748c:	f109 0908 	add.w	r9, r9, #8
   17490:	4610      	mov	r0, r2
   17492:	3d10      	subs	r5, #16
   17494:	2d10      	cmp	r5, #16
   17496:	dd1a      	ble.n	174ce <_vfiprintf_r+0x8a2>
   17498:	1c42      	adds	r2, r0, #1
   1749a:	4958      	ldr	r1, [pc, #352]	; (175fc <_vfiprintf_r+0x9d0>)
   1749c:	3310      	adds	r3, #16
   1749e:	2a07      	cmp	r2, #7
   174a0:	e9c9 1700 	strd	r1, r7, [r9]
   174a4:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   174a8:	ddee      	ble.n	17488 <_vfiprintf_r+0x85c>
   174aa:	aa18      	add	r2, sp, #96	; 0x60
   174ac:	b303      	cbz	r3, 174f0 <_vfiprintf_r+0x8c4>
   174ae:	4621      	mov	r1, r4
   174b0:	4658      	mov	r0, fp
   174b2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   174b6:	f7ff fb7d 	bl	16bb4 <__sprint_r.part.0>
   174ba:	2800      	cmp	r0, #0
   174bc:	f47f ad8d 	bne.w	16fda <_vfiprintf_r+0x3ae>
   174c0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   174c4:	3d10      	subs	r5, #16
   174c6:	2d10      	cmp	r5, #16
   174c8:	f100 0c01 	add.w	ip, r0, #1
   174cc:	dce4      	bgt.n	17498 <_vfiprintf_r+0x86c>
   174ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
   174d0:	4661      	mov	r1, ip
   174d2:	4a4a      	ldr	r2, [pc, #296]	; (175fc <_vfiprintf_r+0x9d0>)
   174d4:	f8c9 5004 	str.w	r5, [r9, #4]
   174d8:	442b      	add	r3, r5
   174da:	2907      	cmp	r1, #7
   174dc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   174e0:	f8c9 2000 	str.w	r2, [r9]
   174e4:	f300 80e7 	bgt.w	176b6 <_vfiprintf_r+0xa8a>
   174e8:	f109 0908 	add.w	r9, r9, #8
   174ec:	3101      	adds	r1, #1
   174ee:	e5ed      	b.n	170cc <_vfiprintf_r+0x4a0>
   174f0:	f04f 0c01 	mov.w	ip, #1
   174f4:	4618      	mov	r0, r3
   174f6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   174fa:	e7ca      	b.n	17492 <_vfiprintf_r+0x866>
   174fc:	f04f 0c01 	mov.w	ip, #1
   17500:	4618      	mov	r0, r3
   17502:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   17506:	e772      	b.n	173ee <_vfiprintf_r+0x7c2>
   17508:	2b00      	cmp	r3, #0
   1750a:	f000 8104 	beq.w	17716 <_vfiprintf_r+0xaea>
   1750e:	ee18 1a10 	vmov	r1, s16
   17512:	aa18      	add	r2, sp, #96	; 0x60
   17514:	4658      	mov	r0, fp
   17516:	f7ff fb4d 	bl	16bb4 <__sprint_r.part.0>
   1751a:	2800      	cmp	r0, #0
   1751c:	f47f ad5d 	bne.w	16fda <_vfiprintf_r+0x3ae>
   17520:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   17524:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   17528:	1c41      	adds	r1, r0, #1
   1752a:	e5a7      	b.n	1707c <_vfiprintf_r+0x450>
   1752c:	2302      	movs	r3, #2
   1752e:	aa11      	add	r2, sp, #68	; 0x44
   17530:	931c      	str	r3, [sp, #112]	; 0x70
   17532:	921b      	str	r2, [sp, #108]	; 0x6c
   17534:	2101      	movs	r1, #1
   17536:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1753a:	4608      	mov	r0, r1
   1753c:	f109 0908 	add.w	r9, r9, #8
   17540:	1c41      	adds	r1, r0, #1
   17542:	e5ba      	b.n	170ba <_vfiprintf_r+0x48e>
   17544:	2d10      	cmp	r5, #16
   17546:	f340 82e5 	ble.w	17b14 <_vfiprintf_r+0xee8>
   1754a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1754e:	940f      	str	r4, [sp, #60]	; 0x3c
   17550:	4608      	mov	r0, r1
   17552:	ee18 4a10 	vmov	r4, s16
   17556:	e007      	b.n	17568 <_vfiprintf_r+0x93c>
   17558:	f100 0c02 	add.w	ip, r0, #2
   1755c:	f109 0908 	add.w	r9, r9, #8
   17560:	4610      	mov	r0, r2
   17562:	3d10      	subs	r5, #16
   17564:	2d10      	cmp	r5, #16
   17566:	dd1d      	ble.n	175a4 <_vfiprintf_r+0x978>
   17568:	4925      	ldr	r1, [pc, #148]	; (17600 <_vfiprintf_r+0x9d4>)
   1756a:	f8c9 1000 	str.w	r1, [r9]
   1756e:	1c42      	adds	r2, r0, #1
   17570:	3310      	adds	r3, #16
   17572:	2110      	movs	r1, #16
   17574:	2a07      	cmp	r2, #7
   17576:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1757a:	f8c9 1004 	str.w	r1, [r9, #4]
   1757e:	ddeb      	ble.n	17558 <_vfiprintf_r+0x92c>
   17580:	aa18      	add	r2, sp, #96	; 0x60
   17582:	b303      	cbz	r3, 175c6 <_vfiprintf_r+0x99a>
   17584:	4621      	mov	r1, r4
   17586:	4658      	mov	r0, fp
   17588:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1758c:	f7ff fb12 	bl	16bb4 <__sprint_r.part.0>
   17590:	2800      	cmp	r0, #0
   17592:	f47f ad22 	bne.w	16fda <_vfiprintf_r+0x3ae>
   17596:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1759a:	3d10      	subs	r5, #16
   1759c:	2d10      	cmp	r5, #16
   1759e:	f100 0c01 	add.w	ip, r0, #1
   175a2:	dce1      	bgt.n	17568 <_vfiprintf_r+0x93c>
   175a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   175a6:	4660      	mov	r0, ip
   175a8:	4a15      	ldr	r2, [pc, #84]	; (17600 <_vfiprintf_r+0x9d4>)
   175aa:	f8c9 5004 	str.w	r5, [r9, #4]
   175ae:	442b      	add	r3, r5
   175b0:	2807      	cmp	r0, #7
   175b2:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   175b6:	f8c9 2000 	str.w	r2, [r9]
   175ba:	f300 80c1 	bgt.w	17740 <_vfiprintf_r+0xb14>
   175be:	f109 0908 	add.w	r9, r9, #8
   175c2:	1c41      	adds	r1, r0, #1
   175c4:	e546      	b.n	17054 <_vfiprintf_r+0x428>
   175c6:	4618      	mov	r0, r3
   175c8:	f04f 0c01 	mov.w	ip, #1
   175cc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   175d0:	e7c7      	b.n	17562 <_vfiprintf_r+0x936>
   175d2:	0776      	lsls	r6, r6, #29
   175d4:	9319      	str	r3, [sp, #100]	; 0x64
   175d6:	d553      	bpl.n	17680 <_vfiprintf_r+0xa54>
   175d8:	9a06      	ldr	r2, [sp, #24]
   175da:	9903      	ldr	r1, [sp, #12]
   175dc:	1a54      	subs	r4, r2, r1
   175de:	2c00      	cmp	r4, #0
   175e0:	dd4e      	ble.n	17680 <_vfiprintf_r+0xa54>
   175e2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   175e6:	2c10      	cmp	r4, #16
   175e8:	f340 82b0 	ble.w	17b4c <_vfiprintf_r+0xf20>
   175ec:	9919      	ldr	r1, [sp, #100]	; 0x64
   175ee:	ee18 6a10 	vmov	r6, s16
   175f2:	2510      	movs	r5, #16
   175f4:	e00d      	b.n	17612 <_vfiprintf_r+0x9e6>
   175f6:	bf00      	nop
   175f8:	200019c0 	.word	0x200019c0
   175fc:	200028f0 	.word	0x200028f0
   17600:	20001a04 	.word	0x20001a04
   17604:	1c88      	adds	r0, r1, #2
   17606:	f109 0908 	add.w	r9, r9, #8
   1760a:	4611      	mov	r1, r2
   1760c:	3c10      	subs	r4, #16
   1760e:	2c10      	cmp	r4, #16
   17610:	dd1a      	ble.n	17648 <_vfiprintf_r+0xa1c>
   17612:	1c4a      	adds	r2, r1, #1
   17614:	48b3      	ldr	r0, [pc, #716]	; (178e4 <_vfiprintf_r+0xcb8>)
   17616:	3310      	adds	r3, #16
   17618:	2a07      	cmp	r2, #7
   1761a:	e9c9 0500 	strd	r0, r5, [r9]
   1761e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   17622:	ddef      	ble.n	17604 <_vfiprintf_r+0x9d8>
   17624:	aa18      	add	r2, sp, #96	; 0x60
   17626:	b333      	cbz	r3, 17676 <_vfiprintf_r+0xa4a>
   17628:	4631      	mov	r1, r6
   1762a:	4658      	mov	r0, fp
   1762c:	f7ff fac2 	bl	16bb4 <__sprint_r.part.0>
   17630:	2800      	cmp	r0, #0
   17632:	f47f acd2 	bne.w	16fda <_vfiprintf_r+0x3ae>
   17636:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1763a:	3c10      	subs	r4, #16
   1763c:	2c10      	cmp	r4, #16
   1763e:	f101 0001 	add.w	r0, r1, #1
   17642:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   17646:	dce4      	bgt.n	17612 <_vfiprintf_r+0x9e6>
   17648:	4aa6      	ldr	r2, [pc, #664]	; (178e4 <_vfiprintf_r+0xcb8>)
   1764a:	f8c9 4004 	str.w	r4, [r9, #4]
   1764e:	4423      	add	r3, r4
   17650:	2807      	cmp	r0, #7
   17652:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   17656:	f8c9 2000 	str.w	r2, [r9]
   1765a:	f77f ad59 	ble.w	17110 <_vfiprintf_r+0x4e4>
   1765e:	b17b      	cbz	r3, 17680 <_vfiprintf_r+0xa54>
   17660:	ee18 1a10 	vmov	r1, s16
   17664:	aa18      	add	r2, sp, #96	; 0x60
   17666:	4658      	mov	r0, fp
   17668:	f7ff faa4 	bl	16bb4 <__sprint_r.part.0>
   1766c:	2800      	cmp	r0, #0
   1766e:	f47f acb4 	bne.w	16fda <_vfiprintf_r+0x3ae>
   17672:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17674:	e54c      	b.n	17110 <_vfiprintf_r+0x4e4>
   17676:	2001      	movs	r0, #1
   17678:	4619      	mov	r1, r3
   1767a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1767e:	e7c5      	b.n	1760c <_vfiprintf_r+0x9e0>
   17680:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   17684:	9903      	ldr	r1, [sp, #12]
   17686:	428a      	cmp	r2, r1
   17688:	bfac      	ite	ge
   1768a:	189b      	addge	r3, r3, r2
   1768c:	185b      	addlt	r3, r3, r1
   1768e:	9305      	str	r3, [sp, #20]
   17690:	e549      	b.n	17126 <_vfiprintf_r+0x4fa>
   17692:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   17696:	058f      	lsls	r7, r1, #22
   17698:	ee18 3a10 	vmov	r3, s16
   1769c:	b28a      	uxth	r2, r1
   1769e:	f53f aae8 	bmi.w	16c72 <_vfiprintf_r+0x46>
   176a2:	ee18 5a10 	vmov	r5, s16
   176a6:	6d98      	ldr	r0, [r3, #88]	; 0x58
   176a8:	f7fa fede 	bl	12468 <__retarget_lock_acquire_recursive>
   176ac:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   176b0:	b28a      	uxth	r2, r1
   176b2:	f7ff bade 	b.w	16c72 <_vfiprintf_r+0x46>
   176b6:	2b00      	cmp	r3, #0
   176b8:	f43f ae79 	beq.w	173ae <_vfiprintf_r+0x782>
   176bc:	ee18 1a10 	vmov	r1, s16
   176c0:	aa18      	add	r2, sp, #96	; 0x60
   176c2:	4658      	mov	r0, fp
   176c4:	f7ff fa76 	bl	16bb4 <__sprint_r.part.0>
   176c8:	2800      	cmp	r0, #0
   176ca:	f47f ac86 	bne.w	16fda <_vfiprintf_r+0x3ae>
   176ce:	9919      	ldr	r1, [sp, #100]	; 0x64
   176d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   176d2:	3101      	adds	r1, #1
   176d4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   176d8:	e4f8      	b.n	170cc <_vfiprintf_r+0x4a0>
   176da:	9219      	str	r2, [sp, #100]	; 0x64
   176dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   176e0:	e45e      	b.n	16fa0 <_vfiprintf_r+0x374>
   176e2:	2f00      	cmp	r7, #0
   176e4:	f47f abc3 	bne.w	16e6e <_vfiprintf_r+0x242>
   176e8:	9e03      	ldr	r6, [sp, #12]
   176ea:	2700      	movs	r7, #0
   176ec:	9704      	str	r7, [sp, #16]
   176ee:	ac44      	add	r4, sp, #272	; 0x110
   176f0:	f7ff bbc5 	b.w	16e7e <_vfiprintf_r+0x252>
   176f4:	9b03      	ldr	r3, [sp, #12]
   176f6:	f013 0310 	ands.w	r3, r3, #16
   176fa:	d154      	bne.n	177a6 <_vfiprintf_r+0xb7a>
   176fc:	9a03      	ldr	r2, [sp, #12]
   176fe:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   17702:	f000 816b 	beq.w	179dc <_vfiprintf_r+0xdb0>
   17706:	9907      	ldr	r1, [sp, #28]
   17708:	461a      	mov	r2, r3
   1770a:	f851 3b04 	ldr.w	r3, [r1], #4
   1770e:	9107      	str	r1, [sp, #28]
   17710:	b29b      	uxth	r3, r3
   17712:	2101      	movs	r1, #1
   17714:	e401      	b.n	16f1a <_vfiprintf_r+0x2ee>
   17716:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17718:	2a00      	cmp	r2, #0
   1771a:	d164      	bne.n	177e6 <_vfiprintf_r+0xbba>
   1771c:	4618      	mov	r0, r3
   1771e:	2101      	movs	r1, #1
   17720:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   17724:	e4c9      	b.n	170ba <_vfiprintf_r+0x48e>
   17726:	2101      	movs	r1, #1
   17728:	4618      	mov	r0, r3
   1772a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1772e:	e4c4      	b.n	170ba <_vfiprintf_r+0x48e>
   17730:	425b      	negs	r3, r3
   17732:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   17736:	9603      	str	r6, [sp, #12]
   17738:	202d      	movs	r0, #45	; 0x2d
   1773a:	2101      	movs	r1, #1
   1773c:	f7ff bbee 	b.w	16f1c <_vfiprintf_r+0x2f0>
   17740:	2b00      	cmp	r3, #0
   17742:	f000 8088 	beq.w	17856 <_vfiprintf_r+0xc2a>
   17746:	ee18 1a10 	vmov	r1, s16
   1774a:	aa18      	add	r2, sp, #96	; 0x60
   1774c:	4658      	mov	r0, fp
   1774e:	f7ff fa31 	bl	16bb4 <__sprint_r.part.0>
   17752:	2800      	cmp	r0, #0
   17754:	f47f ac41 	bne.w	16fda <_vfiprintf_r+0x3ae>
   17758:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1775c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   17760:	1c41      	adds	r1, r0, #1
   17762:	e477      	b.n	17054 <_vfiprintf_r+0x428>
   17764:	f898 1000 	ldrb.w	r1, [r8]
   17768:	9307      	str	r3, [sp, #28]
   1776a:	f7ff bad2 	b.w	16d12 <_vfiprintf_r+0xe6>
   1776e:	ac44      	add	r4, sp, #272	; 0x110
   17770:	f7ff bb85 	b.w	16e7e <_vfiprintf_r+0x252>
   17774:	f109 0908 	add.w	r9, r9, #8
   17778:	f10c 0101 	add.w	r1, ip, #1
   1777c:	4660      	mov	r0, ip
   1777e:	e4a0      	b.n	170c2 <_vfiprintf_r+0x496>
   17780:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   17784:	f040 8197 	bne.w	17ab6 <_vfiprintf_r+0xe8a>
   17788:	f851 3b04 	ldr.w	r3, [r1], #4
   1778c:	9107      	str	r1, [sp, #28]
   1778e:	f7ff bbc0 	b.w	16f12 <_vfiprintf_r+0x2e6>
   17792:	05b3      	lsls	r3, r6, #22
   17794:	f100 8188 	bmi.w	17aa8 <_vfiprintf_r+0xe7c>
   17798:	f852 3b04 	ldr.w	r3, [r2], #4
   1779c:	9207      	str	r2, [sp, #28]
   1779e:	17da      	asrs	r2, r3, #31
   177a0:	4611      	mov	r1, r2
   177a2:	f7ff bb52 	b.w	16e4a <_vfiprintf_r+0x21e>
   177a6:	9907      	ldr	r1, [sp, #28]
   177a8:	f851 3b04 	ldr.w	r3, [r1], #4
   177ac:	9107      	str	r1, [sp, #28]
   177ae:	2101      	movs	r1, #1
   177b0:	f7ff bbb3 	b.w	16f1a <_vfiprintf_r+0x2ee>
   177b4:	9b07      	ldr	r3, [sp, #28]
   177b6:	9805      	ldr	r0, [sp, #20]
   177b8:	f853 1b04 	ldr.w	r1, [r3], #4
   177bc:	9307      	str	r3, [sp, #28]
   177be:	17c2      	asrs	r2, r0, #31
   177c0:	e9c1 0200 	strd	r0, r2, [r1]
   177c4:	f7ff ba7d 	b.w	16cc2 <_vfiprintf_r+0x96>
   177c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   177ca:	2b00      	cmp	r3, #0
   177cc:	f43f ab26 	beq.w	16e1c <_vfiprintf_r+0x1f0>
   177d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   177d2:	781b      	ldrb	r3, [r3, #0]
   177d4:	2b00      	cmp	r3, #0
   177d6:	f43f ab21 	beq.w	16e1c <_vfiprintf_r+0x1f0>
   177da:	f898 1000 	ldrb.w	r1, [r8]
   177de:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   177e2:	f7ff ba96 	b.w	16d12 <_vfiprintf_r+0xe6>
   177e6:	2302      	movs	r3, #2
   177e8:	aa11      	add	r2, sp, #68	; 0x44
   177ea:	931c      	str	r3, [sp, #112]	; 0x70
   177ec:	921b      	str	r2, [sp, #108]	; 0x6c
   177ee:	2001      	movs	r0, #1
   177f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   177f4:	e6a2      	b.n	1753c <_vfiprintf_r+0x910>
   177f6:	9603      	str	r6, [sp, #12]
   177f8:	e571      	b.n	172de <_vfiprintf_r+0x6b2>
   177fa:	4b3b      	ldr	r3, [pc, #236]	; (178e8 <_vfiprintf_r+0xcbc>)
   177fc:	930c      	str	r3, [sp, #48]	; 0x30
   177fe:	f016 0220 	ands.w	r2, r6, #32
   17802:	d059      	beq.n	178b8 <_vfiprintf_r+0xc8c>
   17804:	9b07      	ldr	r3, [sp, #28]
   17806:	3307      	adds	r3, #7
   17808:	f023 0307 	bic.w	r3, r3, #7
   1780c:	4618      	mov	r0, r3
   1780e:	685a      	ldr	r2, [r3, #4]
   17810:	f850 3b08 	ldr.w	r3, [r0], #8
   17814:	9007      	str	r0, [sp, #28]
   17816:	07f4      	lsls	r4, r6, #31
   17818:	d509      	bpl.n	1782e <_vfiprintf_r+0xc02>
   1781a:	ea53 0002 	orrs.w	r0, r3, r2
   1781e:	d006      	beq.n	1782e <_vfiprintf_r+0xc02>
   17820:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   17824:	2130      	movs	r1, #48	; 0x30
   17826:	f046 0602 	orr.w	r6, r6, #2
   1782a:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   1782e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   17832:	9103      	str	r1, [sp, #12]
   17834:	2102      	movs	r1, #2
   17836:	f7ff bb70 	b.w	16f1a <_vfiprintf_r+0x2ee>
   1783a:	4b2c      	ldr	r3, [pc, #176]	; (178ec <_vfiprintf_r+0xcc0>)
   1783c:	930c      	str	r3, [sp, #48]	; 0x30
   1783e:	e7de      	b.n	177fe <_vfiprintf_r+0xbd2>
   17840:	9b07      	ldr	r3, [sp, #28]
   17842:	2101      	movs	r1, #1
   17844:	f853 2b04 	ldr.w	r2, [r3], #4
   17848:	9103      	str	r1, [sp, #12]
   1784a:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   1784e:	9307      	str	r3, [sp, #28]
   17850:	9104      	str	r1, [sp, #16]
   17852:	ac2b      	add	r4, sp, #172	; 0xac
   17854:	e4df      	b.n	17216 <_vfiprintf_r+0x5ea>
   17856:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1785a:	2a00      	cmp	r2, #0
   1785c:	f040 8132 	bne.w	17ac4 <_vfiprintf_r+0xe98>
   17860:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17862:	2a00      	cmp	r2, #0
   17864:	f47f ae62 	bne.w	1752c <_vfiprintf_r+0x900>
   17868:	4618      	mov	r0, r3
   1786a:	2101      	movs	r1, #1
   1786c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   17870:	e427      	b.n	170c2 <_vfiprintf_r+0x496>
   17872:	2100      	movs	r1, #0
   17874:	2208      	movs	r2, #8
   17876:	a816      	add	r0, sp, #88	; 0x58
   17878:	9413      	str	r4, [sp, #76]	; 0x4c
   1787a:	f7fa fab7 	bl	11dec <memset>
   1787e:	1c79      	adds	r1, r7, #1
   17880:	f000 80bc 	beq.w	179fc <_vfiprintf_r+0xdd0>
   17884:	2500      	movs	r5, #0
   17886:	9407      	str	r4, [sp, #28]
   17888:	462c      	mov	r4, r5
   1788a:	e00c      	b.n	178a6 <_vfiprintf_r+0xc7a>
   1788c:	a92b      	add	r1, sp, #172	; 0xac
   1788e:	4658      	mov	r0, fp
   17890:	f7fe f926 	bl	15ae0 <_wcrtomb_r>
   17894:	1c42      	adds	r2, r0, #1
   17896:	4420      	add	r0, r4
   17898:	f000 816b 	beq.w	17b72 <_vfiprintf_r+0xf46>
   1789c:	42b8      	cmp	r0, r7
   1789e:	dc08      	bgt.n	178b2 <_vfiprintf_r+0xc86>
   178a0:	f000 8170 	beq.w	17b84 <_vfiprintf_r+0xf58>
   178a4:	4604      	mov	r4, r0
   178a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   178a8:	5952      	ldr	r2, [r2, r5]
   178aa:	ab16      	add	r3, sp, #88	; 0x58
   178ac:	3504      	adds	r5, #4
   178ae:	2a00      	cmp	r2, #0
   178b0:	d1ec      	bne.n	1788c <_vfiprintf_r+0xc60>
   178b2:	9404      	str	r4, [sp, #16]
   178b4:	9c07      	ldr	r4, [sp, #28]
   178b6:	e0af      	b.n	17a18 <_vfiprintf_r+0xdec>
   178b8:	f016 0310 	ands.w	r3, r6, #16
   178bc:	9807      	ldr	r0, [sp, #28]
   178be:	d10c      	bne.n	178da <_vfiprintf_r+0xcae>
   178c0:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   178c4:	d005      	beq.n	178d2 <_vfiprintf_r+0xca6>
   178c6:	461a      	mov	r2, r3
   178c8:	f850 3b04 	ldr.w	r3, [r0], #4
   178cc:	9007      	str	r0, [sp, #28]
   178ce:	b29b      	uxth	r3, r3
   178d0:	e7a1      	b.n	17816 <_vfiprintf_r+0xbea>
   178d2:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   178d6:	f040 80e1 	bne.w	17a9c <_vfiprintf_r+0xe70>
   178da:	f850 3b04 	ldr.w	r3, [r0], #4
   178de:	9007      	str	r0, [sp, #28]
   178e0:	e799      	b.n	17816 <_vfiprintf_r+0xbea>
   178e2:	bf00      	nop
   178e4:	20001a04 	.word	0x20001a04
   178e8:	200019c0 	.word	0x200019c0
   178ec:	200019d4 	.word	0x200019d4
   178f0:	9903      	ldr	r1, [sp, #12]
   178f2:	9704      	str	r7, [sp, #16]
   178f4:	ac44      	add	r4, sp, #272	; 0x110
   178f6:	469e      	mov	lr, r3
   178f8:	ee08 ba90 	vmov	s17, fp
   178fc:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   17900:	f04f 0c00 	mov.w	ip, #0
   17904:	4623      	mov	r3, r4
   17906:	e006      	b.n	17916 <_vfiprintf_r+0xcea>
   17908:	f1be 0f0a 	cmp.w	lr, #10
   1790c:	f172 0200 	sbcs.w	r2, r2, #0
   17910:	d339      	bcc.n	17986 <_vfiprintf_r+0xd5a>
   17912:	46a6      	mov	lr, r4
   17914:	462a      	mov	r2, r5
   17916:	49a6      	ldr	r1, [pc, #664]	; (17bb0 <_vfiprintf_r+0xf84>)
   17918:	eb1e 0002 	adds.w	r0, lr, r2
   1791c:	f140 0000 	adc.w	r0, r0, #0
   17920:	460f      	mov	r7, r1
   17922:	fba1 1400 	umull	r1, r4, r1, r0
   17926:	f024 0103 	bic.w	r1, r4, #3
   1792a:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   1792e:	1a40      	subs	r0, r0, r1
   17930:	ebbe 0100 	subs.w	r1, lr, r0
   17934:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   17938:	f162 0400 	sbc.w	r4, r2, #0
   1793c:	fb05 f501 	mul.w	r5, r5, r1
   17940:	fb07 5504 	mla	r5, r7, r4, r5
   17944:	fba1 4107 	umull	r4, r1, r1, r7
   17948:	440d      	add	r5, r1
   1794a:	2705      	movs	r7, #5
   1794c:	f004 0101 	and.w	r1, r4, #1
   17950:	fba1 1b07 	umull	r1, fp, r1, r7
   17954:	1809      	adds	r1, r1, r0
   17956:	0864      	lsrs	r4, r4, #1
   17958:	3130      	adds	r1, #48	; 0x30
   1795a:	f803 1c01 	strb.w	r1, [r3, #-1]
   1795e:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   17962:	f10c 0c01 	add.w	ip, ip, #1
   17966:	3b01      	subs	r3, #1
   17968:	086d      	lsrs	r5, r5, #1
   1796a:	2e00      	cmp	r6, #0
   1796c:	d0cc      	beq.n	17908 <_vfiprintf_r+0xcdc>
   1796e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17970:	7809      	ldrb	r1, [r1, #0]
   17972:	4561      	cmp	r1, ip
   17974:	d1c8      	bne.n	17908 <_vfiprintf_r+0xcdc>
   17976:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1797a:	d0c5      	beq.n	17908 <_vfiprintf_r+0xcdc>
   1797c:	f1be 0f0a 	cmp.w	lr, #10
   17980:	f172 0200 	sbcs.w	r2, r2, #0
   17984:	d26c      	bcs.n	17a60 <_vfiprintf_r+0xe34>
   17986:	461c      	mov	r4, r3
   17988:	ab44      	add	r3, sp, #272	; 0x110
   1798a:	1b1b      	subs	r3, r3, r4
   1798c:	9f04      	ldr	r7, [sp, #16]
   1798e:	9e03      	ldr	r6, [sp, #12]
   17990:	9304      	str	r3, [sp, #16]
   17992:	ee18 ba90 	vmov	fp, s17
   17996:	f7ff ba72 	b.w	16e7e <_vfiprintf_r+0x252>
   1799a:	9603      	str	r6, [sp, #12]
   1799c:	f7ff ba62 	b.w	16e64 <_vfiprintf_r+0x238>
   179a0:	4658      	mov	r0, fp
   179a2:	f7fa f929 	bl	11bf8 <__sinit>
   179a6:	f7ff b95b 	b.w	16c60 <_vfiprintf_r+0x34>
   179aa:	2901      	cmp	r1, #1
   179ac:	9603      	str	r6, [sp, #12]
   179ae:	f47f accd 	bne.w	1734c <_vfiprintf_r+0x720>
   179b2:	f7ff ba5c 	b.w	16e6e <_vfiprintf_r+0x242>
   179b6:	9b07      	ldr	r3, [sp, #28]
   179b8:	9905      	ldr	r1, [sp, #20]
   179ba:	f853 2b04 	ldr.w	r2, [r3], #4
   179be:	6011      	str	r1, [r2, #0]
   179c0:	9307      	str	r3, [sp, #28]
   179c2:	f7ff b97e 	b.w	16cc2 <_vfiprintf_r+0x96>
   179c6:	2f06      	cmp	r7, #6
   179c8:	463b      	mov	r3, r7
   179ca:	9a03      	ldr	r2, [sp, #12]
   179cc:	4c79      	ldr	r4, [pc, #484]	; (17bb4 <_vfiprintf_r+0xf88>)
   179ce:	9207      	str	r2, [sp, #28]
   179d0:	bf28      	it	cs
   179d2:	2306      	movcs	r3, #6
   179d4:	9304      	str	r3, [sp, #16]
   179d6:	9303      	str	r3, [sp, #12]
   179d8:	f7ff bb25 	b.w	17026 <_vfiprintf_r+0x3fa>
   179dc:	9b03      	ldr	r3, [sp, #12]
   179de:	9907      	ldr	r1, [sp, #28]
   179e0:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   179e4:	bf14      	ite	ne
   179e6:	f851 3b04 	ldrne.w	r3, [r1], #4
   179ea:	f851 3b04 	ldreq.w	r3, [r1], #4
   179ee:	9107      	str	r1, [sp, #28]
   179f0:	bf1c      	itt	ne
   179f2:	4602      	movne	r2, r0
   179f4:	b2db      	uxtbne	r3, r3
   179f6:	2101      	movs	r1, #1
   179f8:	f7ff ba8f 	b.w	16f1a <_vfiprintf_r+0x2ee>
   179fc:	ab16      	add	r3, sp, #88	; 0x58
   179fe:	9300      	str	r3, [sp, #0]
   17a00:	2300      	movs	r3, #0
   17a02:	4619      	mov	r1, r3
   17a04:	aa13      	add	r2, sp, #76	; 0x4c
   17a06:	4658      	mov	r0, fp
   17a08:	f7fe f890 	bl	15b2c <_wcsrtombs_r>
   17a0c:	4603      	mov	r3, r0
   17a0e:	3301      	adds	r3, #1
   17a10:	9004      	str	r0, [sp, #16]
   17a12:	f000 80ae 	beq.w	17b72 <_vfiprintf_r+0xf46>
   17a16:	9413      	str	r4, [sp, #76]	; 0x4c
   17a18:	9b04      	ldr	r3, [sp, #16]
   17a1a:	2b00      	cmp	r3, #0
   17a1c:	d030      	beq.n	17a80 <_vfiprintf_r+0xe54>
   17a1e:	2b63      	cmp	r3, #99	; 0x63
   17a20:	dc63      	bgt.n	17aea <_vfiprintf_r+0xebe>
   17a22:	2300      	movs	r3, #0
   17a24:	9308      	str	r3, [sp, #32]
   17a26:	ac2b      	add	r4, sp, #172	; 0xac
   17a28:	2208      	movs	r2, #8
   17a2a:	2100      	movs	r1, #0
   17a2c:	a816      	add	r0, sp, #88	; 0x58
   17a2e:	f7fa f9dd 	bl	11dec <memset>
   17a32:	9d04      	ldr	r5, [sp, #16]
   17a34:	ab16      	add	r3, sp, #88	; 0x58
   17a36:	9300      	str	r3, [sp, #0]
   17a38:	aa13      	add	r2, sp, #76	; 0x4c
   17a3a:	462b      	mov	r3, r5
   17a3c:	4621      	mov	r1, r4
   17a3e:	4658      	mov	r0, fp
   17a40:	f7fe f874 	bl	15b2c <_wcsrtombs_r>
   17a44:	4285      	cmp	r5, r0
   17a46:	f040 80ab 	bne.w	17ba0 <_vfiprintf_r+0xf74>
   17a4a:	9b03      	ldr	r3, [sp, #12]
   17a4c:	9a04      	ldr	r2, [sp, #16]
   17a4e:	9307      	str	r3, [sp, #28]
   17a50:	2300      	movs	r3, #0
   17a52:	54a3      	strb	r3, [r4, r2]
   17a54:	461f      	mov	r7, r3
   17a56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   17a5a:	9303      	str	r3, [sp, #12]
   17a5c:	f7ff ba16 	b.w	16e8c <_vfiprintf_r+0x260>
   17a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17a62:	990d      	ldr	r1, [sp, #52]	; 0x34
   17a64:	1a9b      	subs	r3, r3, r2
   17a66:	4618      	mov	r0, r3
   17a68:	9308      	str	r3, [sp, #32]
   17a6a:	f7fa fa57 	bl	11f1c <strncpy>
   17a6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17a70:	9b08      	ldr	r3, [sp, #32]
   17a72:	784a      	ldrb	r2, [r1, #1]
   17a74:	b10a      	cbz	r2, 17a7a <_vfiprintf_r+0xe4e>
   17a76:	3101      	adds	r1, #1
   17a78:	910b      	str	r1, [sp, #44]	; 0x2c
   17a7a:	f04f 0c00 	mov.w	ip, #0
   17a7e:	e748      	b.n	17912 <_vfiprintf_r+0xce6>
   17a80:	9b03      	ldr	r3, [sp, #12]
   17a82:	9307      	str	r3, [sp, #28]
   17a84:	9b04      	ldr	r3, [sp, #16]
   17a86:	9303      	str	r3, [sp, #12]
   17a88:	461f      	mov	r7, r3
   17a8a:	9308      	str	r3, [sp, #32]
   17a8c:	f7ff b9fe 	b.w	16e8c <_vfiprintf_r+0x260>
   17a90:	2101      	movs	r1, #1
   17a92:	4618      	mov	r0, r3
   17a94:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   17a98:	f7ff bb13 	b.w	170c2 <_vfiprintf_r+0x496>
   17a9c:	f850 3b04 	ldr.w	r3, [r0], #4
   17aa0:	9007      	str	r0, [sp, #28]
   17aa2:	4622      	mov	r2, r4
   17aa4:	b2db      	uxtb	r3, r3
   17aa6:	e6b6      	b.n	17816 <_vfiprintf_r+0xbea>
   17aa8:	f912 3b04 	ldrsb.w	r3, [r2], #4
   17aac:	9207      	str	r2, [sp, #28]
   17aae:	17da      	asrs	r2, r3, #31
   17ab0:	4611      	mov	r1, r2
   17ab2:	f7ff b9ca 	b.w	16e4a <_vfiprintf_r+0x21e>
   17ab6:	f851 3b04 	ldr.w	r3, [r1], #4
   17aba:	9107      	str	r1, [sp, #28]
   17abc:	4602      	mov	r2, r0
   17abe:	b2db      	uxtb	r3, r3
   17ac0:	f7ff ba27 	b.w	16f12 <_vfiprintf_r+0x2e6>
   17ac4:	2301      	movs	r3, #1
   17ac6:	931c      	str	r3, [sp, #112]	; 0x70
   17ac8:	2101      	movs	r1, #1
   17aca:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   17ace:	931b      	str	r3, [sp, #108]	; 0x6c
   17ad0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   17ad4:	460b      	mov	r3, r1
   17ad6:	f7ff bacd 	b.w	17074 <_vfiprintf_r+0x448>
   17ada:	9b07      	ldr	r3, [sp, #28]
   17adc:	9905      	ldr	r1, [sp, #20]
   17ade:	f853 2b04 	ldr.w	r2, [r3], #4
   17ae2:	9307      	str	r3, [sp, #28]
   17ae4:	8011      	strh	r1, [r2, #0]
   17ae6:	f7ff b8ec 	b.w	16cc2 <_vfiprintf_r+0x96>
   17aea:	1c59      	adds	r1, r3, #1
   17aec:	4658      	mov	r0, fp
   17aee:	f7f8 fa39 	bl	ff64 <_malloc_r>
   17af2:	4604      	mov	r4, r0
   17af4:	2800      	cmp	r0, #0
   17af6:	d03c      	beq.n	17b72 <_vfiprintf_r+0xf46>
   17af8:	9008      	str	r0, [sp, #32]
   17afa:	e795      	b.n	17a28 <_vfiprintf_r+0xdfc>
   17afc:	6d88      	ldr	r0, [r1, #88]	; 0x58
   17afe:	f7fa fcb5 	bl	1246c <__retarget_lock_release_recursive>
   17b02:	f7ff b9e9 	b.w	16ed8 <_vfiprintf_r+0x2ac>
   17b06:	9b03      	ldr	r3, [sp, #12]
   17b08:	9307      	str	r3, [sp, #28]
   17b0a:	e9cd 7703 	strd	r7, r7, [sp, #12]
   17b0e:	9f08      	ldr	r7, [sp, #32]
   17b10:	f7ff b9bc 	b.w	16e8c <_vfiprintf_r+0x260>
   17b14:	9819      	ldr	r0, [sp, #100]	; 0x64
   17b16:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17b18:	3001      	adds	r0, #1
   17b1a:	e545      	b.n	175a8 <_vfiprintf_r+0x97c>
   17b1c:	9b03      	ldr	r3, [sp, #12]
   17b1e:	9307      	str	r3, [sp, #28]
   17b20:	4620      	mov	r0, r4
   17b22:	f7fa fd0d 	bl	12540 <strlen>
   17b26:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   17b2a:	462f      	mov	r7, r5
   17b2c:	9004      	str	r0, [sp, #16]
   17b2e:	9303      	str	r3, [sp, #12]
   17b30:	9508      	str	r5, [sp, #32]
   17b32:	f7ff b9ab 	b.w	16e8c <_vfiprintf_r+0x260>
   17b36:	ee18 1a10 	vmov	r1, s16
   17b3a:	aa18      	add	r2, sp, #96	; 0x60
   17b3c:	4658      	mov	r0, fp
   17b3e:	f7ff f839 	bl	16bb4 <__sprint_r.part.0>
   17b42:	2800      	cmp	r0, #0
   17b44:	f43f aa36 	beq.w	16fb4 <_vfiprintf_r+0x388>
   17b48:	f7ff ba4d 	b.w	16fe6 <_vfiprintf_r+0x3ba>
   17b4c:	9819      	ldr	r0, [sp, #100]	; 0x64
   17b4e:	3001      	adds	r0, #1
   17b50:	e57a      	b.n	17648 <_vfiprintf_r+0xa1c>
   17b52:	468c      	mov	ip, r1
   17b54:	e46e      	b.n	17434 <_vfiprintf_r+0x808>
   17b56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   17b58:	07d9      	lsls	r1, r3, #31
   17b5a:	d405      	bmi.n	17b68 <_vfiprintf_r+0xf3c>
   17b5c:	89ab      	ldrh	r3, [r5, #12]
   17b5e:	059a      	lsls	r2, r3, #22
   17b60:	d402      	bmi.n	17b68 <_vfiprintf_r+0xf3c>
   17b62:	6da8      	ldr	r0, [r5, #88]	; 0x58
   17b64:	f7fa fc82 	bl	1246c <__retarget_lock_release_recursive>
   17b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17b6c:	9305      	str	r3, [sp, #20]
   17b6e:	f7ff ba49 	b.w	17004 <_vfiprintf_r+0x3d8>
   17b72:	ee18 2a10 	vmov	r2, s16
   17b76:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   17b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17b7e:	8193      	strh	r3, [r2, #12]
   17b80:	f7ff ba35 	b.w	16fee <_vfiprintf_r+0x3c2>
   17b84:	9c07      	ldr	r4, [sp, #28]
   17b86:	9704      	str	r7, [sp, #16]
   17b88:	e746      	b.n	17a18 <_vfiprintf_r+0xdec>
   17b8a:	9b07      	ldr	r3, [sp, #28]
   17b8c:	f898 1001 	ldrb.w	r1, [r8, #1]
   17b90:	f853 7b04 	ldr.w	r7, [r3], #4
   17b94:	9307      	str	r3, [sp, #28]
   17b96:	4690      	mov	r8, r2
   17b98:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   17b9c:	f7ff b8b9 	b.w	16d12 <_vfiprintf_r+0xe6>
   17ba0:	ee18 2a10 	vmov	r2, s16
   17ba4:	8993      	ldrh	r3, [r2, #12]
   17ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17baa:	8193      	strh	r3, [r2, #12]
   17bac:	f7ff ba15 	b.w	16fda <_vfiprintf_r+0x3ae>
   17bb0:	cccccccd 	.word	0xcccccccd
   17bb4:	200019e8 	.word	0x200019e8

00017bb8 <__sbprintf>:
   17bb8:	b570      	push	{r4, r5, r6, lr}
   17bba:	460c      	mov	r4, r1
   17bbc:	8989      	ldrh	r1, [r1, #12]
   17bbe:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   17bc2:	f021 0102 	bic.w	r1, r1, #2
   17bc6:	f8ad 1014 	strh.w	r1, [sp, #20]
   17bca:	6e61      	ldr	r1, [r4, #100]	; 0x64
   17bcc:	911b      	str	r1, [sp, #108]	; 0x6c
   17bce:	89e1      	ldrh	r1, [r4, #14]
   17bd0:	f8ad 1016 	strh.w	r1, [sp, #22]
   17bd4:	69e1      	ldr	r1, [r4, #28]
   17bd6:	9109      	str	r1, [sp, #36]	; 0x24
   17bd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   17bda:	910b      	str	r1, [sp, #44]	; 0x2c
   17bdc:	a91c      	add	r1, sp, #112	; 0x70
   17bde:	9102      	str	r1, [sp, #8]
   17be0:	9106      	str	r1, [sp, #24]
   17be2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   17be6:	4606      	mov	r6, r0
   17be8:	9104      	str	r1, [sp, #16]
   17bea:	9107      	str	r1, [sp, #28]
   17bec:	a818      	add	r0, sp, #96	; 0x60
   17bee:	2100      	movs	r1, #0
   17bf0:	e9cd 3200 	strd	r3, r2, [sp]
   17bf4:	9108      	str	r1, [sp, #32]
   17bf6:	f7fa fc33 	bl	12460 <__retarget_lock_init_recursive>
   17bfa:	e9dd 3200 	ldrd	r3, r2, [sp]
   17bfe:	a902      	add	r1, sp, #8
   17c00:	4630      	mov	r0, r6
   17c02:	f7ff f813 	bl	16c2c <_vfiprintf_r>
   17c06:	1e05      	subs	r5, r0, #0
   17c08:	db07      	blt.n	17c1a <__sbprintf+0x62>
   17c0a:	a902      	add	r1, sp, #8
   17c0c:	4630      	mov	r0, r6
   17c0e:	f7fd fea7 	bl	15960 <_fflush_r>
   17c12:	2800      	cmp	r0, #0
   17c14:	bf18      	it	ne
   17c16:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   17c1a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   17c1e:	065b      	lsls	r3, r3, #25
   17c20:	d503      	bpl.n	17c2a <__sbprintf+0x72>
   17c22:	89a3      	ldrh	r3, [r4, #12]
   17c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17c28:	81a3      	strh	r3, [r4, #12]
   17c2a:	9818      	ldr	r0, [sp, #96]	; 0x60
   17c2c:	f7fa fc1a 	bl	12464 <__retarget_lock_close_recursive>
   17c30:	4628      	mov	r0, r5
   17c32:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   17c36:	bd70      	pop	{r4, r5, r6, pc}

00017c38 <__sfvwrite_r>:
   17c38:	6893      	ldr	r3, [r2, #8]
   17c3a:	2b00      	cmp	r3, #0
   17c3c:	f000 8085 	beq.w	17d4a <__sfvwrite_r+0x112>
   17c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c44:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   17c48:	460c      	mov	r4, r1
   17c4a:	0719      	lsls	r1, r3, #28
   17c4c:	4680      	mov	r8, r0
   17c4e:	b083      	sub	sp, #12
   17c50:	4617      	mov	r7, r2
   17c52:	b298      	uxth	r0, r3
   17c54:	d525      	bpl.n	17ca2 <__sfvwrite_r+0x6a>
   17c56:	6923      	ldr	r3, [r4, #16]
   17c58:	b31b      	cbz	r3, 17ca2 <__sfvwrite_r+0x6a>
   17c5a:	f010 0302 	ands.w	r3, r0, #2
   17c5e:	683d      	ldr	r5, [r7, #0]
   17c60:	d02d      	beq.n	17cbe <__sfvwrite_r+0x86>
   17c62:	f04f 0a00 	mov.w	sl, #0
   17c66:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 17f28 <__sfvwrite_r+0x2f0>
   17c6a:	4656      	mov	r6, sl
   17c6c:	46b9      	mov	r9, r7
   17c6e:	455e      	cmp	r6, fp
   17c70:	4633      	mov	r3, r6
   17c72:	4652      	mov	r2, sl
   17c74:	bf28      	it	cs
   17c76:	465b      	movcs	r3, fp
   17c78:	4640      	mov	r0, r8
   17c7a:	2e00      	cmp	r6, #0
   17c7c:	d052      	beq.n	17d24 <__sfvwrite_r+0xec>
   17c7e:	69e1      	ldr	r1, [r4, #28]
   17c80:	6a67      	ldr	r7, [r4, #36]	; 0x24
   17c82:	47b8      	blx	r7
   17c84:	2800      	cmp	r0, #0
   17c86:	dd56      	ble.n	17d36 <__sfvwrite_r+0xfe>
   17c88:	f8d9 3008 	ldr.w	r3, [r9, #8]
   17c8c:	1a1b      	subs	r3, r3, r0
   17c8e:	4482      	add	sl, r0
   17c90:	1a36      	subs	r6, r6, r0
   17c92:	f8c9 3008 	str.w	r3, [r9, #8]
   17c96:	2b00      	cmp	r3, #0
   17c98:	d1e9      	bne.n	17c6e <__sfvwrite_r+0x36>
   17c9a:	2000      	movs	r0, #0
   17c9c:	b003      	add	sp, #12
   17c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ca2:	4621      	mov	r1, r4
   17ca4:	4640      	mov	r0, r8
   17ca6:	f000 f941 	bl	17f2c <__swsetup_r>
   17caa:	2800      	cmp	r0, #0
   17cac:	f040 8138 	bne.w	17f20 <__sfvwrite_r+0x2e8>
   17cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17cb4:	683d      	ldr	r5, [r7, #0]
   17cb6:	b298      	uxth	r0, r3
   17cb8:	f010 0302 	ands.w	r3, r0, #2
   17cbc:	d1d1      	bne.n	17c62 <__sfvwrite_r+0x2a>
   17cbe:	f010 0901 	ands.w	r9, r0, #1
   17cc2:	d144      	bne.n	17d4e <__sfvwrite_r+0x116>
   17cc4:	464e      	mov	r6, r9
   17cc6:	9700      	str	r7, [sp, #0]
   17cc8:	b346      	cbz	r6, 17d1c <__sfvwrite_r+0xe4>
   17cca:	0582      	lsls	r2, r0, #22
   17ccc:	f8d4 b008 	ldr.w	fp, [r4, #8]
   17cd0:	f140 8085 	bpl.w	17dde <__sfvwrite_r+0x1a6>
   17cd4:	45b3      	cmp	fp, r6
   17cd6:	465a      	mov	r2, fp
   17cd8:	f200 80b4 	bhi.w	17e44 <__sfvwrite_r+0x20c>
   17cdc:	f410 6f90 	tst.w	r0, #1152	; 0x480
   17ce0:	f040 80c1 	bne.w	17e66 <__sfvwrite_r+0x22e>
   17ce4:	6820      	ldr	r0, [r4, #0]
   17ce6:	9201      	str	r2, [sp, #4]
   17ce8:	4649      	mov	r1, r9
   17cea:	f7fa f803 	bl	11cf4 <memmove>
   17cee:	68a3      	ldr	r3, [r4, #8]
   17cf0:	9a01      	ldr	r2, [sp, #4]
   17cf2:	eba3 010b 	sub.w	r1, r3, fp
   17cf6:	6823      	ldr	r3, [r4, #0]
   17cf8:	60a1      	str	r1, [r4, #8]
   17cfa:	4413      	add	r3, r2
   17cfc:	46b2      	mov	sl, r6
   17cfe:	6023      	str	r3, [r4, #0]
   17d00:	2600      	movs	r6, #0
   17d02:	9a00      	ldr	r2, [sp, #0]
   17d04:	6893      	ldr	r3, [r2, #8]
   17d06:	eba3 030a 	sub.w	r3, r3, sl
   17d0a:	44d1      	add	r9, sl
   17d0c:	6093      	str	r3, [r2, #8]
   17d0e:	2b00      	cmp	r3, #0
   17d10:	d0c3      	beq.n	17c9a <__sfvwrite_r+0x62>
   17d12:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   17d16:	b280      	uxth	r0, r0
   17d18:	2e00      	cmp	r6, #0
   17d1a:	d1d6      	bne.n	17cca <__sfvwrite_r+0x92>
   17d1c:	e9d5 9600 	ldrd	r9, r6, [r5]
   17d20:	3508      	adds	r5, #8
   17d22:	e7d1      	b.n	17cc8 <__sfvwrite_r+0x90>
   17d24:	e9d5 a600 	ldrd	sl, r6, [r5]
   17d28:	3508      	adds	r5, #8
   17d2a:	e7a0      	b.n	17c6e <__sfvwrite_r+0x36>
   17d2c:	4621      	mov	r1, r4
   17d2e:	4640      	mov	r0, r8
   17d30:	f7fd fe16 	bl	15960 <_fflush_r>
   17d34:	b388      	cbz	r0, 17d9a <__sfvwrite_r+0x162>
   17d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17d42:	81a3      	strh	r3, [r4, #12]
   17d44:	b003      	add	sp, #12
   17d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d4a:	2000      	movs	r0, #0
   17d4c:	4770      	bx	lr
   17d4e:	461e      	mov	r6, r3
   17d50:	46ba      	mov	sl, r7
   17d52:	4699      	mov	r9, r3
   17d54:	4618      	mov	r0, r3
   17d56:	9500      	str	r5, [sp, #0]
   17d58:	461f      	mov	r7, r3
   17d5a:	b366      	cbz	r6, 17db6 <__sfvwrite_r+0x17e>
   17d5c:	2800      	cmp	r0, #0
   17d5e:	d032      	beq.n	17dc6 <__sfvwrite_r+0x18e>
   17d60:	464a      	mov	r2, r9
   17d62:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   17d66:	6820      	ldr	r0, [r4, #0]
   17d68:	68a5      	ldr	r5, [r4, #8]
   17d6a:	42b2      	cmp	r2, r6
   17d6c:	bf28      	it	cs
   17d6e:	4632      	movcs	r2, r6
   17d70:	4288      	cmp	r0, r1
   17d72:	d904      	bls.n	17d7e <__sfvwrite_r+0x146>
   17d74:	eb05 0b03 	add.w	fp, r5, r3
   17d78:	455a      	cmp	r2, fp
   17d7a:	f300 80a7 	bgt.w	17ecc <__sfvwrite_r+0x294>
   17d7e:	4293      	cmp	r3, r2
   17d80:	dc64      	bgt.n	17e4c <__sfvwrite_r+0x214>
   17d82:	69e1      	ldr	r1, [r4, #28]
   17d84:	6a65      	ldr	r5, [r4, #36]	; 0x24
   17d86:	463a      	mov	r2, r7
   17d88:	4640      	mov	r0, r8
   17d8a:	47a8      	blx	r5
   17d8c:	f1b0 0b00 	subs.w	fp, r0, #0
   17d90:	ddd1      	ble.n	17d36 <__sfvwrite_r+0xfe>
   17d92:	ebb9 090b 	subs.w	r9, r9, fp
   17d96:	d0c9      	beq.n	17d2c <__sfvwrite_r+0xf4>
   17d98:	2001      	movs	r0, #1
   17d9a:	f8da 3008 	ldr.w	r3, [sl, #8]
   17d9e:	eba3 030b 	sub.w	r3, r3, fp
   17da2:	445f      	add	r7, fp
   17da4:	eba6 060b 	sub.w	r6, r6, fp
   17da8:	f8ca 3008 	str.w	r3, [sl, #8]
   17dac:	2b00      	cmp	r3, #0
   17dae:	f43f af74 	beq.w	17c9a <__sfvwrite_r+0x62>
   17db2:	2e00      	cmp	r6, #0
   17db4:	d1d2      	bne.n	17d5c <__sfvwrite_r+0x124>
   17db6:	9a00      	ldr	r2, [sp, #0]
   17db8:	6856      	ldr	r6, [r2, #4]
   17dba:	4613      	mov	r3, r2
   17dbc:	3208      	adds	r2, #8
   17dbe:	9200      	str	r2, [sp, #0]
   17dc0:	2e00      	cmp	r6, #0
   17dc2:	d0f8      	beq.n	17db6 <__sfvwrite_r+0x17e>
   17dc4:	681f      	ldr	r7, [r3, #0]
   17dc6:	4632      	mov	r2, r6
   17dc8:	210a      	movs	r1, #10
   17dca:	4638      	mov	r0, r7
   17dcc:	f7fa fb50 	bl	12470 <memchr>
   17dd0:	2800      	cmp	r0, #0
   17dd2:	f000 809c 	beq.w	17f0e <__sfvwrite_r+0x2d6>
   17dd6:	3001      	adds	r0, #1
   17dd8:	eba0 0907 	sub.w	r9, r0, r7
   17ddc:	e7c0      	b.n	17d60 <__sfvwrite_r+0x128>
   17dde:	6820      	ldr	r0, [r4, #0]
   17de0:	6923      	ldr	r3, [r4, #16]
   17de2:	4298      	cmp	r0, r3
   17de4:	d816      	bhi.n	17e14 <__sfvwrite_r+0x1dc>
   17de6:	6962      	ldr	r2, [r4, #20]
   17de8:	42b2      	cmp	r2, r6
   17dea:	d813      	bhi.n	17e14 <__sfvwrite_r+0x1dc>
   17dec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   17df0:	42b3      	cmp	r3, r6
   17df2:	bf28      	it	cs
   17df4:	4633      	movcs	r3, r6
   17df6:	69e1      	ldr	r1, [r4, #28]
   17df8:	fb93 f3f2 	sdiv	r3, r3, r2
   17dfc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   17dfe:	fb02 f303 	mul.w	r3, r2, r3
   17e02:	4640      	mov	r0, r8
   17e04:	464a      	mov	r2, r9
   17e06:	47b8      	blx	r7
   17e08:	f1b0 0a00 	subs.w	sl, r0, #0
   17e0c:	dd93      	ble.n	17d36 <__sfvwrite_r+0xfe>
   17e0e:	eba6 060a 	sub.w	r6, r6, sl
   17e12:	e776      	b.n	17d02 <__sfvwrite_r+0xca>
   17e14:	45b3      	cmp	fp, r6
   17e16:	46da      	mov	sl, fp
   17e18:	bf28      	it	cs
   17e1a:	46b2      	movcs	sl, r6
   17e1c:	4652      	mov	r2, sl
   17e1e:	4649      	mov	r1, r9
   17e20:	f7f9 ff68 	bl	11cf4 <memmove>
   17e24:	68a3      	ldr	r3, [r4, #8]
   17e26:	6822      	ldr	r2, [r4, #0]
   17e28:	eba3 030a 	sub.w	r3, r3, sl
   17e2c:	4452      	add	r2, sl
   17e2e:	60a3      	str	r3, [r4, #8]
   17e30:	6022      	str	r2, [r4, #0]
   17e32:	2b00      	cmp	r3, #0
   17e34:	d1eb      	bne.n	17e0e <__sfvwrite_r+0x1d6>
   17e36:	4621      	mov	r1, r4
   17e38:	4640      	mov	r0, r8
   17e3a:	f7fd fd91 	bl	15960 <_fflush_r>
   17e3e:	2800      	cmp	r0, #0
   17e40:	d0e5      	beq.n	17e0e <__sfvwrite_r+0x1d6>
   17e42:	e778      	b.n	17d36 <__sfvwrite_r+0xfe>
   17e44:	6820      	ldr	r0, [r4, #0]
   17e46:	46b3      	mov	fp, r6
   17e48:	4632      	mov	r2, r6
   17e4a:	e74c      	b.n	17ce6 <__sfvwrite_r+0xae>
   17e4c:	4639      	mov	r1, r7
   17e4e:	9201      	str	r2, [sp, #4]
   17e50:	f7f9 ff50 	bl	11cf4 <memmove>
   17e54:	9a01      	ldr	r2, [sp, #4]
   17e56:	68a3      	ldr	r3, [r4, #8]
   17e58:	1a9b      	subs	r3, r3, r2
   17e5a:	60a3      	str	r3, [r4, #8]
   17e5c:	6823      	ldr	r3, [r4, #0]
   17e5e:	4413      	add	r3, r2
   17e60:	6023      	str	r3, [r4, #0]
   17e62:	4693      	mov	fp, r2
   17e64:	e795      	b.n	17d92 <__sfvwrite_r+0x15a>
   17e66:	6823      	ldr	r3, [r4, #0]
   17e68:	6921      	ldr	r1, [r4, #16]
   17e6a:	eba3 0b01 	sub.w	fp, r3, r1
   17e6e:	6963      	ldr	r3, [r4, #20]
   17e70:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   17e74:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   17e78:	f10b 0301 	add.w	r3, fp, #1
   17e7c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   17e80:	4433      	add	r3, r6
   17e82:	4553      	cmp	r3, sl
   17e84:	4652      	mov	r2, sl
   17e86:	bf84      	itt	hi
   17e88:	469a      	movhi	sl, r3
   17e8a:	4652      	movhi	r2, sl
   17e8c:	0543      	lsls	r3, r0, #21
   17e8e:	d52c      	bpl.n	17eea <__sfvwrite_r+0x2b2>
   17e90:	4611      	mov	r1, r2
   17e92:	4640      	mov	r0, r8
   17e94:	f7f8 f866 	bl	ff64 <_malloc_r>
   17e98:	2800      	cmp	r0, #0
   17e9a:	d03b      	beq.n	17f14 <__sfvwrite_r+0x2dc>
   17e9c:	465a      	mov	r2, fp
   17e9e:	6921      	ldr	r1, [r4, #16]
   17ea0:	9001      	str	r0, [sp, #4]
   17ea2:	f7f6 fa37 	bl	e314 <memcpy>
   17ea6:	89a2      	ldrh	r2, [r4, #12]
   17ea8:	9b01      	ldr	r3, [sp, #4]
   17eaa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   17eae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   17eb2:	81a2      	strh	r2, [r4, #12]
   17eb4:	eb03 000b 	add.w	r0, r3, fp
   17eb8:	6123      	str	r3, [r4, #16]
   17eba:	ebaa 030b 	sub.w	r3, sl, fp
   17ebe:	f8c4 a014 	str.w	sl, [r4, #20]
   17ec2:	60a3      	str	r3, [r4, #8]
   17ec4:	6020      	str	r0, [r4, #0]
   17ec6:	46b3      	mov	fp, r6
   17ec8:	4632      	mov	r2, r6
   17eca:	e70c      	b.n	17ce6 <__sfvwrite_r+0xae>
   17ecc:	4639      	mov	r1, r7
   17ece:	465a      	mov	r2, fp
   17ed0:	f7f9 ff10 	bl	11cf4 <memmove>
   17ed4:	6823      	ldr	r3, [r4, #0]
   17ed6:	445b      	add	r3, fp
   17ed8:	6023      	str	r3, [r4, #0]
   17eda:	4621      	mov	r1, r4
   17edc:	4640      	mov	r0, r8
   17ede:	f7fd fd3f 	bl	15960 <_fflush_r>
   17ee2:	2800      	cmp	r0, #0
   17ee4:	f43f af55 	beq.w	17d92 <__sfvwrite_r+0x15a>
   17ee8:	e725      	b.n	17d36 <__sfvwrite_r+0xfe>
   17eea:	4640      	mov	r0, r8
   17eec:	f7f8 faf6 	bl	104dc <_realloc_r>
   17ef0:	4603      	mov	r3, r0
   17ef2:	2800      	cmp	r0, #0
   17ef4:	d1de      	bne.n	17eb4 <__sfvwrite_r+0x27c>
   17ef6:	6921      	ldr	r1, [r4, #16]
   17ef8:	4640      	mov	r0, r8
   17efa:	f7fa fc2d 	bl	12758 <_free_r>
   17efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17f02:	220c      	movs	r2, #12
   17f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   17f08:	f8c8 2000 	str.w	r2, [r8]
   17f0c:	e715      	b.n	17d3a <__sfvwrite_r+0x102>
   17f0e:	1c72      	adds	r2, r6, #1
   17f10:	4691      	mov	r9, r2
   17f12:	e726      	b.n	17d62 <__sfvwrite_r+0x12a>
   17f14:	220c      	movs	r2, #12
   17f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17f1a:	f8c8 2000 	str.w	r2, [r8]
   17f1e:	e70c      	b.n	17d3a <__sfvwrite_r+0x102>
   17f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f24:	e6ba      	b.n	17c9c <__sfvwrite_r+0x64>
   17f26:	bf00      	nop
   17f28:	7ffffc00 	.word	0x7ffffc00

00017f2c <__swsetup_r>:
   17f2c:	b538      	push	{r3, r4, r5, lr}
   17f2e:	4b31      	ldr	r3, [pc, #196]	; (17ff4 <__swsetup_r+0xc8>)
   17f30:	681b      	ldr	r3, [r3, #0]
   17f32:	4605      	mov	r5, r0
   17f34:	460c      	mov	r4, r1
   17f36:	b113      	cbz	r3, 17f3e <__swsetup_r+0x12>
   17f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   17f3a:	2a00      	cmp	r2, #0
   17f3c:	d04e      	beq.n	17fdc <__swsetup_r+0xb0>
   17f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17f42:	0718      	lsls	r0, r3, #28
   17f44:	b29a      	uxth	r2, r3
   17f46:	d51c      	bpl.n	17f82 <__swsetup_r+0x56>
   17f48:	6921      	ldr	r1, [r4, #16]
   17f4a:	b329      	cbz	r1, 17f98 <__swsetup_r+0x6c>
   17f4c:	f012 0001 	ands.w	r0, r2, #1
   17f50:	d007      	beq.n	17f62 <__swsetup_r+0x36>
   17f52:	2000      	movs	r0, #0
   17f54:	60a0      	str	r0, [r4, #8]
   17f56:	6960      	ldr	r0, [r4, #20]
   17f58:	4240      	negs	r0, r0
   17f5a:	61a0      	str	r0, [r4, #24]
   17f5c:	b139      	cbz	r1, 17f6e <__swsetup_r+0x42>
   17f5e:	2000      	movs	r0, #0
   17f60:	bd38      	pop	{r3, r4, r5, pc}
   17f62:	0795      	lsls	r5, r2, #30
   17f64:	bf58      	it	pl
   17f66:	6960      	ldrpl	r0, [r4, #20]
   17f68:	60a0      	str	r0, [r4, #8]
   17f6a:	2900      	cmp	r1, #0
   17f6c:	d1f7      	bne.n	17f5e <__swsetup_r+0x32>
   17f6e:	0612      	lsls	r2, r2, #24
   17f70:	bf58      	it	pl
   17f72:	4608      	movpl	r0, r1
   17f74:	d5f4      	bpl.n	17f60 <__swsetup_r+0x34>
   17f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17f7a:	81a3      	strh	r3, [r4, #12]
   17f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f80:	bd38      	pop	{r3, r4, r5, pc}
   17f82:	06d1      	lsls	r1, r2, #27
   17f84:	d52e      	bpl.n	17fe4 <__swsetup_r+0xb8>
   17f86:	0752      	lsls	r2, r2, #29
   17f88:	d414      	bmi.n	17fb4 <__swsetup_r+0x88>
   17f8a:	6921      	ldr	r1, [r4, #16]
   17f8c:	f043 0308 	orr.w	r3, r3, #8
   17f90:	81a3      	strh	r3, [r4, #12]
   17f92:	b29a      	uxth	r2, r3
   17f94:	2900      	cmp	r1, #0
   17f96:	d1d9      	bne.n	17f4c <__swsetup_r+0x20>
   17f98:	f402 7020 	and.w	r0, r2, #640	; 0x280
   17f9c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   17fa0:	d0d4      	beq.n	17f4c <__swsetup_r+0x20>
   17fa2:	4621      	mov	r1, r4
   17fa4:	4628      	mov	r0, r5
   17fa6:	f000 f947 	bl	18238 <__smakebuf_r>
   17faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17fae:	6921      	ldr	r1, [r4, #16]
   17fb0:	b29a      	uxth	r2, r3
   17fb2:	e7cb      	b.n	17f4c <__swsetup_r+0x20>
   17fb4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17fb6:	b151      	cbz	r1, 17fce <__swsetup_r+0xa2>
   17fb8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   17fbc:	4291      	cmp	r1, r2
   17fbe:	d004      	beq.n	17fca <__swsetup_r+0x9e>
   17fc0:	4628      	mov	r0, r5
   17fc2:	f7fa fbc9 	bl	12758 <_free_r>
   17fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17fca:	2200      	movs	r2, #0
   17fcc:	6322      	str	r2, [r4, #48]	; 0x30
   17fce:	6921      	ldr	r1, [r4, #16]
   17fd0:	2200      	movs	r2, #0
   17fd2:	e9c4 1200 	strd	r1, r2, [r4]
   17fd6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   17fda:	e7d7      	b.n	17f8c <__swsetup_r+0x60>
   17fdc:	4618      	mov	r0, r3
   17fde:	f7f9 fe0b 	bl	11bf8 <__sinit>
   17fe2:	e7ac      	b.n	17f3e <__swsetup_r+0x12>
   17fe4:	2209      	movs	r2, #9
   17fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17fea:	602a      	str	r2, [r5, #0]
   17fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17ff0:	81a3      	strh	r3, [r4, #12]
   17ff2:	bd38      	pop	{r3, r4, r5, pc}
   17ff4:	200034a4 	.word	0x200034a4

00017ff8 <__fputwc>:
   17ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17ffc:	b082      	sub	sp, #8
   17ffe:	4682      	mov	sl, r0
   18000:	4688      	mov	r8, r1
   18002:	4614      	mov	r4, r2
   18004:	f7f9 fff6 	bl	11ff4 <__locale_mb_cur_max>
   18008:	2801      	cmp	r0, #1
   1800a:	d103      	bne.n	18014 <__fputwc+0x1c>
   1800c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   18010:	2bfe      	cmp	r3, #254	; 0xfe
   18012:	d936      	bls.n	18082 <__fputwc+0x8a>
   18014:	f10d 0904 	add.w	r9, sp, #4
   18018:	4642      	mov	r2, r8
   1801a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1801e:	4649      	mov	r1, r9
   18020:	4650      	mov	r0, sl
   18022:	f7fd fd5d 	bl	15ae0 <_wcrtomb_r>
   18026:	1c42      	adds	r2, r0, #1
   18028:	4606      	mov	r6, r0
   1802a:	d032      	beq.n	18092 <__fputwc+0x9a>
   1802c:	b320      	cbz	r0, 18078 <__fputwc+0x80>
   1802e:	f89d c004 	ldrb.w	ip, [sp, #4]
   18032:	2500      	movs	r5, #0
   18034:	e009      	b.n	1804a <__fputwc+0x52>
   18036:	6823      	ldr	r3, [r4, #0]
   18038:	1c5a      	adds	r2, r3, #1
   1803a:	6022      	str	r2, [r4, #0]
   1803c:	f883 c000 	strb.w	ip, [r3]
   18040:	3501      	adds	r5, #1
   18042:	42b5      	cmp	r5, r6
   18044:	d218      	bcs.n	18078 <__fputwc+0x80>
   18046:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   1804a:	68a3      	ldr	r3, [r4, #8]
   1804c:	3b01      	subs	r3, #1
   1804e:	2b00      	cmp	r3, #0
   18050:	60a3      	str	r3, [r4, #8]
   18052:	daf0      	bge.n	18036 <__fputwc+0x3e>
   18054:	69a7      	ldr	r7, [r4, #24]
   18056:	42bb      	cmp	r3, r7
   18058:	4661      	mov	r1, ip
   1805a:	4622      	mov	r2, r4
   1805c:	4650      	mov	r0, sl
   1805e:	db02      	blt.n	18066 <__fputwc+0x6e>
   18060:	f1bc 0f0a 	cmp.w	ip, #10
   18064:	d1e7      	bne.n	18036 <__fputwc+0x3e>
   18066:	f000 f953 	bl	18310 <__swbuf_r>
   1806a:	1c43      	adds	r3, r0, #1
   1806c:	d1e8      	bne.n	18040 <__fputwc+0x48>
   1806e:	4606      	mov	r6, r0
   18070:	4630      	mov	r0, r6
   18072:	b002      	add	sp, #8
   18074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18078:	4646      	mov	r6, r8
   1807a:	4630      	mov	r0, r6
   1807c:	b002      	add	sp, #8
   1807e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18082:	fa5f fc88 	uxtb.w	ip, r8
   18086:	f88d c004 	strb.w	ip, [sp, #4]
   1808a:	4606      	mov	r6, r0
   1808c:	f10d 0904 	add.w	r9, sp, #4
   18090:	e7cf      	b.n	18032 <__fputwc+0x3a>
   18092:	89a3      	ldrh	r3, [r4, #12]
   18094:	4630      	mov	r0, r6
   18096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1809a:	81a3      	strh	r3, [r4, #12]
   1809c:	b002      	add	sp, #8
   1809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   180a2:	bf00      	nop

000180a4 <_fputwc_r>:
   180a4:	b530      	push	{r4, r5, lr}
   180a6:	6e53      	ldr	r3, [r2, #100]	; 0x64
   180a8:	f013 0f01 	tst.w	r3, #1
   180ac:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   180b0:	4614      	mov	r4, r2
   180b2:	b083      	sub	sp, #12
   180b4:	4605      	mov	r5, r0
   180b6:	b29a      	uxth	r2, r3
   180b8:	d101      	bne.n	180be <_fputwc_r+0x1a>
   180ba:	0598      	lsls	r0, r3, #22
   180bc:	d51c      	bpl.n	180f8 <_fputwc_r+0x54>
   180be:	0490      	lsls	r0, r2, #18
   180c0:	d406      	bmi.n	180d0 <_fputwc_r+0x2c>
   180c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   180c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   180c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   180cc:	81a3      	strh	r3, [r4, #12]
   180ce:	6662      	str	r2, [r4, #100]	; 0x64
   180d0:	4622      	mov	r2, r4
   180d2:	4628      	mov	r0, r5
   180d4:	f7ff ff90 	bl	17ff8 <__fputwc>
   180d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   180da:	07da      	lsls	r2, r3, #31
   180dc:	4605      	mov	r5, r0
   180de:	d402      	bmi.n	180e6 <_fputwc_r+0x42>
   180e0:	89a3      	ldrh	r3, [r4, #12]
   180e2:	059b      	lsls	r3, r3, #22
   180e4:	d502      	bpl.n	180ec <_fputwc_r+0x48>
   180e6:	4628      	mov	r0, r5
   180e8:	b003      	add	sp, #12
   180ea:	bd30      	pop	{r4, r5, pc}
   180ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   180ee:	f7fa f9bd 	bl	1246c <__retarget_lock_release_recursive>
   180f2:	4628      	mov	r0, r5
   180f4:	b003      	add	sp, #12
   180f6:	bd30      	pop	{r4, r5, pc}
   180f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   180fa:	9101      	str	r1, [sp, #4]
   180fc:	f7fa f9b4 	bl	12468 <__retarget_lock_acquire_recursive>
   18100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   18104:	9901      	ldr	r1, [sp, #4]
   18106:	b29a      	uxth	r2, r3
   18108:	e7d9      	b.n	180be <_fputwc_r+0x1a>
   1810a:	bf00      	nop

0001810c <_wcsnrtombs_l>:
   1810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18110:	b08b      	sub	sp, #44	; 0x2c
   18112:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   18116:	9f14      	ldr	r7, [sp, #80]	; 0x50
   18118:	9103      	str	r1, [sp, #12]
   1811a:	4681      	mov	r9, r0
   1811c:	9205      	str	r2, [sp, #20]
   1811e:	461e      	mov	r6, r3
   18120:	f1b8 0f00 	cmp.w	r8, #0
   18124:	d05c      	beq.n	181e0 <_wcsnrtombs_l+0xd4>
   18126:	9b03      	ldr	r3, [sp, #12]
   18128:	2b00      	cmp	r3, #0
   1812a:	d05e      	beq.n	181ea <_wcsnrtombs_l+0xde>
   1812c:	9b05      	ldr	r3, [sp, #20]
   1812e:	681d      	ldr	r5, [r3, #0]
   18130:	2f00      	cmp	r7, #0
   18132:	d06a      	beq.n	1820a <_wcsnrtombs_l+0xfe>
   18134:	1e74      	subs	r4, r6, #1
   18136:	b34e      	cbz	r6, 1818c <_wcsnrtombs_l+0x80>
   18138:	9b03      	ldr	r3, [sp, #12]
   1813a:	9304      	str	r3, [sp, #16]
   1813c:	3d04      	subs	r5, #4
   1813e:	2600      	movs	r6, #0
   18140:	9501      	str	r5, [sp, #4]
   18142:	e00b      	b.n	1815c <_wcsnrtombs_l+0x50>
   18144:	9b03      	ldr	r3, [sp, #12]
   18146:	bb2b      	cbnz	r3, 18194 <_wcsnrtombs_l+0x88>
   18148:	9b01      	ldr	r3, [sp, #4]
   1814a:	681a      	ldr	r2, [r3, #0]
   1814c:	2a00      	cmp	r2, #0
   1814e:	d03a      	beq.n	181c6 <_wcsnrtombs_l+0xba>
   18150:	45bc      	cmp	ip, r7
   18152:	d25c      	bcs.n	1820e <_wcsnrtombs_l+0x102>
   18154:	3c01      	subs	r4, #1
   18156:	1c63      	adds	r3, r4, #1
   18158:	4666      	mov	r6, ip
   1815a:	d017      	beq.n	1818c <_wcsnrtombs_l+0x80>
   1815c:	f8d8 3000 	ldr.w	r3, [r8]
   18160:	9302      	str	r3, [sp, #8]
   18162:	9b01      	ldr	r3, [sp, #4]
   18164:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   18168:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1816c:	9301      	str	r3, [sp, #4]
   1816e:	a907      	add	r1, sp, #28
   18170:	4643      	mov	r3, r8
   18172:	4648      	mov	r0, r9
   18174:	f8d8 b004 	ldr.w	fp, [r8, #4]
   18178:	47a8      	blx	r5
   1817a:	1c42      	adds	r2, r0, #1
   1817c:	d03a      	beq.n	181f4 <_wcsnrtombs_l+0xe8>
   1817e:	eb00 0c06 	add.w	ip, r0, r6
   18182:	45bc      	cmp	ip, r7
   18184:	d9de      	bls.n	18144 <_wcsnrtombs_l+0x38>
   18186:	9b02      	ldr	r3, [sp, #8]
   18188:	e9c8 3b00 	strd	r3, fp, [r8]
   1818c:	4630      	mov	r0, r6
   1818e:	b00b      	add	sp, #44	; 0x2c
   18190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18194:	2800      	cmp	r0, #0
   18196:	dd0e      	ble.n	181b6 <_wcsnrtombs_l+0xaa>
   18198:	9b04      	ldr	r3, [sp, #16]
   1819a:	9d01      	ldr	r5, [sp, #4]
   1819c:	4418      	add	r0, r3
   1819e:	1e5a      	subs	r2, r3, #1
   181a0:	a907      	add	r1, sp, #28
   181a2:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   181a6:	f811 3b01 	ldrb.w	r3, [r1], #1
   181aa:	f802 3f01 	strb.w	r3, [r2, #1]!
   181ae:	4572      	cmp	r2, lr
   181b0:	d1f9      	bne.n	181a6 <_wcsnrtombs_l+0x9a>
   181b2:	9501      	str	r5, [sp, #4]
   181b4:	9004      	str	r0, [sp, #16]
   181b6:	9b05      	ldr	r3, [sp, #20]
   181b8:	681a      	ldr	r2, [r3, #0]
   181ba:	3204      	adds	r2, #4
   181bc:	601a      	str	r2, [r3, #0]
   181be:	9b01      	ldr	r3, [sp, #4]
   181c0:	681a      	ldr	r2, [r3, #0]
   181c2:	2a00      	cmp	r2, #0
   181c4:	d1c4      	bne.n	18150 <_wcsnrtombs_l+0x44>
   181c6:	9b03      	ldr	r3, [sp, #12]
   181c8:	b10b      	cbz	r3, 181ce <_wcsnrtombs_l+0xc2>
   181ca:	9b05      	ldr	r3, [sp, #20]
   181cc:	601a      	str	r2, [r3, #0]
   181ce:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   181d2:	2200      	movs	r2, #0
   181d4:	4630      	mov	r0, r6
   181d6:	f8c8 2000 	str.w	r2, [r8]
   181da:	b00b      	add	sp, #44	; 0x2c
   181dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181e0:	9b03      	ldr	r3, [sp, #12]
   181e2:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   181e6:	2b00      	cmp	r3, #0
   181e8:	d1a0      	bne.n	1812c <_wcsnrtombs_l+0x20>
   181ea:	9b05      	ldr	r3, [sp, #20]
   181ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   181f0:	681d      	ldr	r5, [r3, #0]
   181f2:	e79f      	b.n	18134 <_wcsnrtombs_l+0x28>
   181f4:	4606      	mov	r6, r0
   181f6:	218a      	movs	r1, #138	; 0x8a
   181f8:	2200      	movs	r2, #0
   181fa:	4630      	mov	r0, r6
   181fc:	f8c9 1000 	str.w	r1, [r9]
   18200:	f8c8 2000 	str.w	r2, [r8]
   18204:	b00b      	add	sp, #44	; 0x2c
   18206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1820a:	463e      	mov	r6, r7
   1820c:	e7be      	b.n	1818c <_wcsnrtombs_l+0x80>
   1820e:	4666      	mov	r6, ip
   18210:	e7bc      	b.n	1818c <_wcsnrtombs_l+0x80>
   18212:	bf00      	nop

00018214 <_wcsnrtombs_r>:
   18214:	b510      	push	{r4, lr}
   18216:	b084      	sub	sp, #16
   18218:	4c05      	ldr	r4, [pc, #20]	; (18230 <_wcsnrtombs_r+0x1c>)
   1821a:	9806      	ldr	r0, [sp, #24]
   1821c:	9000      	str	r0, [sp, #0]
   1821e:	9807      	ldr	r0, [sp, #28]
   18220:	9001      	str	r0, [sp, #4]
   18222:	4804      	ldr	r0, [pc, #16]	; (18234 <_wcsnrtombs_r+0x20>)
   18224:	6800      	ldr	r0, [r0, #0]
   18226:	9402      	str	r4, [sp, #8]
   18228:	f7ff ff70 	bl	1810c <_wcsnrtombs_l>
   1822c:	b004      	add	sp, #16
   1822e:	bd10      	pop	{r4, pc}
   18230:	20002f1c 	.word	0x20002f1c
   18234:	200034a4 	.word	0x200034a4

00018238 <__smakebuf_r>:
   18238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1823c:	898b      	ldrh	r3, [r1, #12]
   1823e:	460c      	mov	r4, r1
   18240:	0799      	lsls	r1, r3, #30
   18242:	b096      	sub	sp, #88	; 0x58
   18244:	d508      	bpl.n	18258 <__smakebuf_r+0x20>
   18246:	f104 0343 	add.w	r3, r4, #67	; 0x43
   1824a:	2201      	movs	r2, #1
   1824c:	e9c4 3204 	strd	r3, r2, [r4, #16]
   18250:	6023      	str	r3, [r4, #0]
   18252:	b016      	add	sp, #88	; 0x58
   18254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1825c:	2900      	cmp	r1, #0
   1825e:	4606      	mov	r6, r0
   18260:	db25      	blt.n	182ae <__smakebuf_r+0x76>
   18262:	466a      	mov	r2, sp
   18264:	f000 f8ac 	bl	183c0 <_fstat_r>
   18268:	2800      	cmp	r0, #0
   1826a:	db1f      	blt.n	182ac <__smakebuf_r+0x74>
   1826c:	9d01      	ldr	r5, [sp, #4]
   1826e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   18272:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   18276:	fab5 f585 	clz	r5, r5
   1827a:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1827e:	096d      	lsrs	r5, r5, #5
   18280:	f44f 6700 	mov.w	r7, #2048	; 0x800
   18284:	4641      	mov	r1, r8
   18286:	4630      	mov	r0, r6
   18288:	f7f7 fe6c 	bl	ff64 <_malloc_r>
   1828c:	b1e0      	cbz	r0, 182c8 <__smakebuf_r+0x90>
   1828e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   18292:	f8c4 8014 	str.w	r8, [r4, #20]
   18296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1829a:	6020      	str	r0, [r4, #0]
   1829c:	6120      	str	r0, [r4, #16]
   1829e:	81a3      	strh	r3, [r4, #12]
   182a0:	bb35      	cbnz	r5, 182f0 <__smakebuf_r+0xb8>
   182a2:	433b      	orrs	r3, r7
   182a4:	81a3      	strh	r3, [r4, #12]
   182a6:	b016      	add	sp, #88	; 0x58
   182a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   182ac:	89a3      	ldrh	r3, [r4, #12]
   182ae:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   182b2:	d019      	beq.n	182e8 <__smakebuf_r+0xb0>
   182b4:	f04f 0840 	mov.w	r8, #64	; 0x40
   182b8:	2500      	movs	r5, #0
   182ba:	4641      	mov	r1, r8
   182bc:	4630      	mov	r0, r6
   182be:	462f      	mov	r7, r5
   182c0:	f7f7 fe50 	bl	ff64 <_malloc_r>
   182c4:	2800      	cmp	r0, #0
   182c6:	d1e2      	bne.n	1828e <__smakebuf_r+0x56>
   182c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   182cc:	059a      	lsls	r2, r3, #22
   182ce:	d4c0      	bmi.n	18252 <__smakebuf_r+0x1a>
   182d0:	f023 0303 	bic.w	r3, r3, #3
   182d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   182d8:	f043 0302 	orr.w	r3, r3, #2
   182dc:	2101      	movs	r1, #1
   182de:	e9c4 2104 	strd	r2, r1, [r4, #16]
   182e2:	81a3      	strh	r3, [r4, #12]
   182e4:	6022      	str	r2, [r4, #0]
   182e6:	e7b4      	b.n	18252 <__smakebuf_r+0x1a>
   182e8:	f44f 6880 	mov.w	r8, #1024	; 0x400
   182ec:	462f      	mov	r7, r5
   182ee:	e7c9      	b.n	18284 <__smakebuf_r+0x4c>
   182f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   182f4:	4630      	mov	r0, r6
   182f6:	f000 f879 	bl	183ec <_isatty_r>
   182fa:	b910      	cbnz	r0, 18302 <__smakebuf_r+0xca>
   182fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   18300:	e7cf      	b.n	182a2 <__smakebuf_r+0x6a>
   18302:	89a3      	ldrh	r3, [r4, #12]
   18304:	f023 0303 	bic.w	r3, r3, #3
   18308:	f043 0301 	orr.w	r3, r3, #1
   1830c:	b21b      	sxth	r3, r3
   1830e:	e7c8      	b.n	182a2 <__smakebuf_r+0x6a>

00018310 <__swbuf_r>:
   18310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18312:	460d      	mov	r5, r1
   18314:	4614      	mov	r4, r2
   18316:	4606      	mov	r6, r0
   18318:	b110      	cbz	r0, 18320 <__swbuf_r+0x10>
   1831a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1831c:	2b00      	cmp	r3, #0
   1831e:	d04c      	beq.n	183ba <__swbuf_r+0xaa>
   18320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   18324:	69a3      	ldr	r3, [r4, #24]
   18326:	60a3      	str	r3, [r4, #8]
   18328:	0717      	lsls	r7, r2, #28
   1832a:	b290      	uxth	r0, r2
   1832c:	d51b      	bpl.n	18366 <__swbuf_r+0x56>
   1832e:	6923      	ldr	r3, [r4, #16]
   18330:	b1cb      	cbz	r3, 18366 <__swbuf_r+0x56>
   18332:	b2ed      	uxtb	r5, r5
   18334:	0481      	lsls	r1, r0, #18
   18336:	462f      	mov	r7, r5
   18338:	d522      	bpl.n	18380 <__swbuf_r+0x70>
   1833a:	6822      	ldr	r2, [r4, #0]
   1833c:	6961      	ldr	r1, [r4, #20]
   1833e:	1ad3      	subs	r3, r2, r3
   18340:	4299      	cmp	r1, r3
   18342:	dd29      	ble.n	18398 <__swbuf_r+0x88>
   18344:	3301      	adds	r3, #1
   18346:	68a1      	ldr	r1, [r4, #8]
   18348:	3901      	subs	r1, #1
   1834a:	60a1      	str	r1, [r4, #8]
   1834c:	1c51      	adds	r1, r2, #1
   1834e:	6021      	str	r1, [r4, #0]
   18350:	7015      	strb	r5, [r2, #0]
   18352:	6962      	ldr	r2, [r4, #20]
   18354:	429a      	cmp	r2, r3
   18356:	d027      	beq.n	183a8 <__swbuf_r+0x98>
   18358:	89a3      	ldrh	r3, [r4, #12]
   1835a:	07db      	lsls	r3, r3, #31
   1835c:	d501      	bpl.n	18362 <__swbuf_r+0x52>
   1835e:	2d0a      	cmp	r5, #10
   18360:	d022      	beq.n	183a8 <__swbuf_r+0x98>
   18362:	4638      	mov	r0, r7
   18364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18366:	4621      	mov	r1, r4
   18368:	4630      	mov	r0, r6
   1836a:	f7ff fddf 	bl	17f2c <__swsetup_r>
   1836e:	bb08      	cbnz	r0, 183b4 <__swbuf_r+0xa4>
   18370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   18374:	6923      	ldr	r3, [r4, #16]
   18376:	b290      	uxth	r0, r2
   18378:	b2ed      	uxtb	r5, r5
   1837a:	0481      	lsls	r1, r0, #18
   1837c:	462f      	mov	r7, r5
   1837e:	d4dc      	bmi.n	1833a <__swbuf_r+0x2a>
   18380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   18384:	81a2      	strh	r2, [r4, #12]
   18386:	6e62      	ldr	r2, [r4, #100]	; 0x64
   18388:	6961      	ldr	r1, [r4, #20]
   1838a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1838e:	6662      	str	r2, [r4, #100]	; 0x64
   18390:	6822      	ldr	r2, [r4, #0]
   18392:	1ad3      	subs	r3, r2, r3
   18394:	4299      	cmp	r1, r3
   18396:	dcd5      	bgt.n	18344 <__swbuf_r+0x34>
   18398:	4621      	mov	r1, r4
   1839a:	4630      	mov	r0, r6
   1839c:	f7fd fae0 	bl	15960 <_fflush_r>
   183a0:	b940      	cbnz	r0, 183b4 <__swbuf_r+0xa4>
   183a2:	6822      	ldr	r2, [r4, #0]
   183a4:	2301      	movs	r3, #1
   183a6:	e7ce      	b.n	18346 <__swbuf_r+0x36>
   183a8:	4621      	mov	r1, r4
   183aa:	4630      	mov	r0, r6
   183ac:	f7fd fad8 	bl	15960 <_fflush_r>
   183b0:	2800      	cmp	r0, #0
   183b2:	d0d6      	beq.n	18362 <__swbuf_r+0x52>
   183b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   183b8:	e7d3      	b.n	18362 <__swbuf_r+0x52>
   183ba:	f7f9 fc1d 	bl	11bf8 <__sinit>
   183be:	e7af      	b.n	18320 <__swbuf_r+0x10>

000183c0 <_fstat_r>:
   183c0:	b570      	push	{r4, r5, r6, lr}
   183c2:	460c      	mov	r4, r1
   183c4:	4d08      	ldr	r5, [pc, #32]	; (183e8 <_fstat_r+0x28>)
   183c6:	4603      	mov	r3, r0
   183c8:	2600      	movs	r6, #0
   183ca:	4620      	mov	r0, r4
   183cc:	4611      	mov	r1, r2
   183ce:	461c      	mov	r4, r3
   183d0:	602e      	str	r6, [r5, #0]
   183d2:	f7f6 fadf 	bl	e994 <_fstat>
   183d6:	1c43      	adds	r3, r0, #1
   183d8:	d000      	beq.n	183dc <_fstat_r+0x1c>
   183da:	bd70      	pop	{r4, r5, r6, pc}
   183dc:	682b      	ldr	r3, [r5, #0]
   183de:	2b00      	cmp	r3, #0
   183e0:	d0fb      	beq.n	183da <_fstat_r+0x1a>
   183e2:	6023      	str	r3, [r4, #0]
   183e4:	bd70      	pop	{r4, r5, r6, pc}
   183e6:	bf00      	nop
   183e8:	200047dc 	.word	0x200047dc

000183ec <_isatty_r>:
   183ec:	b538      	push	{r3, r4, r5, lr}
   183ee:	4d07      	ldr	r5, [pc, #28]	; (1840c <_isatty_r+0x20>)
   183f0:	2200      	movs	r2, #0
   183f2:	4604      	mov	r4, r0
   183f4:	4608      	mov	r0, r1
   183f6:	602a      	str	r2, [r5, #0]
   183f8:	f7f6 fad2 	bl	e9a0 <_isatty>
   183fc:	1c43      	adds	r3, r0, #1
   183fe:	d000      	beq.n	18402 <_isatty_r+0x16>
   18400:	bd38      	pop	{r3, r4, r5, pc}
   18402:	682b      	ldr	r3, [r5, #0]
   18404:	2b00      	cmp	r3, #0
   18406:	d0fb      	beq.n	18400 <_isatty_r+0x14>
   18408:	6023      	str	r3, [r4, #0]
   1840a:	bd38      	pop	{r3, r4, r5, pc}
   1840c:	200047dc 	.word	0x200047dc

00018410 <__aeabi_d2lz>:
   18410:	b508      	push	{r3, lr}
   18412:	4602      	mov	r2, r0
   18414:	460b      	mov	r3, r1
   18416:	ec43 2b17 	vmov	d7, r2, r3
   1841a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   1841e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18422:	d403      	bmi.n	1842c <__aeabi_d2lz+0x1c>
   18424:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   18428:	f000 b80a 	b.w	18440 <__aeabi_d2ulz>
   1842c:	eeb1 7b47 	vneg.f64	d7, d7
   18430:	ec51 0b17 	vmov	r0, r1, d7
   18434:	f000 f804 	bl	18440 <__aeabi_d2ulz>
   18438:	4240      	negs	r0, r0
   1843a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1843e:	bd08      	pop	{r3, pc}

00018440 <__aeabi_d2ulz>:
   18440:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 18470 <__aeabi_d2ulz+0x30>
   18444:	ec41 0b17 	vmov	d7, r0, r1
   18448:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 18478 <__aeabi_d2ulz+0x38>
   1844c:	ee27 6b06 	vmul.f64	d6, d7, d6
   18450:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   18454:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   18458:	eea4 7b45 	vfms.f64	d7, d4, d5
   1845c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   18460:	ee16 1a10 	vmov	r1, s12
   18464:	ee17 0a90 	vmov	r0, s15
   18468:	4770      	bx	lr
   1846a:	bf00      	nop
   1846c:	f3af 8000 	nop.w
   18470:	00000000 	.word	0x00000000
   18474:	3df00000 	.word	0x3df00000
   18478:	00000000 	.word	0x00000000
   1847c:	41f00000 	.word	0x41f00000

00018480 <___reboot_Teensyduino__veneer>:
   18480:	f85f f000 	ldr.w	pc, [pc]	; 18484 <___reboot_Teensyduino__veneer+0x4>
   18484:	600024c9 	.word	0x600024c9

00018488 <___ZN16CrashReportClasscvbEv_veneer>:
   18488:	f85f f000 	ldr.w	pc, [pc]	; 1848c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1848c:	600020d9 	.word	0x600020d9

00018490 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   18490:	f85f f000 	ldr.w	pc, [pc]	; 18494 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   18494:	60001841 	.word	0x60001841

00018498 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   18498:	f85f f000 	ldr.w	pc, [pc]	; 1849c <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1849c:	600019d5 	.word	0x600019d5

000184a0 <___init_veneer>:
   184a0:	f85f f000 	ldr.w	pc, [pc]	; 184a4 <___init_veneer+0x4>
   184a4:	60002571 	.word	0x60002571

000184a8 <___ZN7TwoWire5beginEv_veneer>:
   184a8:	f85f f000 	ldr.w	pc, [pc]	; 184ac <___ZN7TwoWire5beginEv_veneer+0x4>
   184ac:	600017d9 	.word	0x600017d9

000184b0 <___Z14set_audioClockilmb_veneer>:
   184b0:	f85f f000 	ldr.w	pc, [pc]	; 184b4 <___Z14set_audioClockilmb_veneer+0x4>
   184b4:	60001671 	.word	0x60001671
	...

Disassembly of section .fini:

000184c0 <_fini>:
   184c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   184c2:	bf00      	nop
